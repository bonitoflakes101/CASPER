Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLN_LIT
    CARRIAGE_RETURN
    COMMENT
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    ILLEGAL
    IN
    LIST_BLN
    LIST_BLN2D
    LIST_CHR
    LIST_CHR2D
    LIST_FLT
    LIST_FLT2D
    LIST_INT
    LIST_INT2D
    LIST_STR
    LIST_STR2D
    MEASURE
    NOT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
Rule 2     maybe_newline -> empty
Rule 3     maybe_newline -> NEWLINE maybe_newline
Rule 4     unli_newline -> NEWLINE
Rule 5     unli_newline -> NEWLINE unli_newline
Rule 6     main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 7     global_dec -> global_statement unli_newline global_tail
Rule 8     global_dec -> empty
Rule 9     global_tail -> global_dec
Rule 10    global_statement -> var_statement global_statement_tail
Rule 11    var_statement -> data_type IDENT list_dec
Rule 12    list_dec -> empty
Rule 13    list_dec -> LBRACKET RBRACKET _2d_list
Rule 14    _2d_list -> empty
Rule 15    _2d_list -> LBRACKET RBRACKET
Rule 16    global_statement_tail -> empty
Rule 17    global_statement_tail -> COMMA IDENT global_statement_tail
Rule 18    global_statement_tail -> EQ global_value global_statement_tail2
Rule 19    global_statement_tail2 -> COMMA IDENT global_statement_tail
Rule 20    global_statement_tail2 -> empty
Rule 21    global_value -> expression
Rule 22    global_value -> list_value
Rule 23    list_value -> LBRACKET list_element RBRACKET
Rule 24    list_element -> literal element_tail
Rule 25    element_tail -> COMMA list_element
Rule 26    element_tail -> empty
Rule 27    data_type -> INT
Rule 28    data_type -> FLT
Rule 29    data_type -> BLN
Rule 30    data_type -> CHR
Rule 31    data_type -> STR
Rule 32    expression -> factor factor_tail
Rule 33    factor -> var_call postfix
Rule 34    factor -> literal1
Rule 35    factor -> TILDE INT_LIT
Rule 36    factor -> TILDE FLT_LIT
Rule 37    factor -> LPAREN factor_expression RPAREN
Rule 38    factor_expression -> factor_expression_factor factor_expression_tail
Rule 39    factor_expression_factor -> var_call postfix
Rule 40    factor_expression_factor -> factor_expression1
Rule 41    factor_expression_factor -> TILDE INT_LIT
Rule 42    factor_expression_factor -> TILDE FLT_LIT
Rule 43    factor_expression_factor -> LPAREN factor_expression RPAREN
Rule 44    factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail
Rule 45    factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail
Rule 46    factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail
Rule 47    factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail
Rule 48    factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail
Rule 49    factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail
Rule 50    factor_expression_tail -> GT factor_expression_factor factor_expression_tail
Rule 51    factor_expression_tail -> LT factor_expression_factor factor_expression_tail
Rule 52    factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail
Rule 53    factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail
Rule 54    factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail
Rule 55    factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail
Rule 56    factor_expression_tail -> AND factor_expression_factor factor_expression_tail
Rule 57    factor_expression_tail -> OR factor_expression_factor factor_expression_tail
Rule 58    factor_expression_tail -> empty
Rule 59    factor_expression1 -> INT_LIT
Rule 60    factor_expression1 -> FLT_LIT
Rule 61    factor_expression1 -> DAY
Rule 62    factor_expression1 -> NIGHT
Rule 63    factor_expression1 -> STR_LIT
Rule 64    factor_tail -> PLUS factor factor_tail
Rule 65    factor_tail -> MINUS factor factor_tail
Rule 66    factor_tail -> MULTIPLY factor factor_tail
Rule 67    factor_tail -> DIVISION factor factor_tail
Rule 68    factor_tail -> MODULO factor factor_tail
Rule 69    factor_tail -> EXPONENT factor factor_tail
Rule 70    factor_tail -> GT factor factor_tail
Rule 71    factor_tail -> LT factor factor_tail
Rule 72    factor_tail -> EQ_EQ factor factor_tail
Rule 73    factor_tail -> GT_EQ factor factor_tail
Rule 74    factor_tail -> LT_EQ factor factor_tail
Rule 75    factor_tail -> NOT_EQ factor factor_tail
Rule 76    factor_tail -> AND factor factor_tail
Rule 77    factor_tail -> OR factor factor_tail
Rule 78    factor_tail -> empty
Rule 79    literal -> literal1
Rule 80    literal -> literal2
Rule 81    literal1 -> INT_LIT
Rule 82    literal1 -> FLT_LIT
Rule 83    literal1 -> DAY
Rule 84    literal1 -> NIGHT
Rule 85    literal1 -> STR_LIT
Rule 86    literal2 -> CHR_LIT
Rule 87    function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
Rule 88    function_statements -> empty
Rule 89    function_statements_tail -> function_statements
Rule 90    function_statements_tail -> empty
Rule 91    ret_type -> FUNCTION
Rule 92    ret_type -> function_dtype
Rule 93    function_dtype -> FUNCTION_INT
Rule 94    function_dtype -> FUNCTION_FLT
Rule 95    function_dtype -> FUNCTION_CHR
Rule 96    function_dtype -> FUNCTION_BLN
Rule 97    function_dtype -> FUNCTION_STR
Rule 98    function_dtype -> FUNCTION_LIST_INT
Rule 99    function_dtype -> FUNCTION_LIST_FLT
Rule 100   function_dtype -> FUNCTION_LIST_CHR
Rule 101   function_dtype -> FUNCTION_LIST_STR
Rule 102   function_dtype -> FUNCTION_LIST_BLN
Rule 103   parameters -> data_type IDENT parameters_tail
Rule 104   parameters -> empty
Rule 105   parameters_tail -> COMMA data_type IDENT parameters_tail
Rule 106   parameters_tail -> empty
Rule 107   revive -> REVIVE revive_value
Rule 108   revive -> empty
Rule 109   revive_value -> revive_type_cast
Rule 110   revive_value -> revive_expression
Rule 111   revive_value -> function_call
Rule 112   revive_expression -> revive_factor revive_factor_tail
Rule 113   revive_factor -> var_call postfix
Rule 114   revive_factor -> revive_factor1
Rule 115   revive_factor -> TILDE INT_LIT
Rule 116   revive_factor -> TILDE FLT_LIT
Rule 117   revive_factor -> LPAREN revive_factor RPAREN
Rule 118   revive_factor_tail -> PLUS revive_factor revive_factor_tail
Rule 119   revive_factor_tail -> MINUS revive_factor revive_factor_tail
Rule 120   revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail
Rule 121   revive_factor_tail -> DIVISION revive_factor revive_factor_tail
Rule 122   revive_factor_tail -> MODULO revive_factor revive_factor_tail
Rule 123   revive_factor_tail -> EXPONENT revive_factor revive_factor_tail
Rule 124   revive_factor_tail -> GT revive_factor revive_factor_tail
Rule 125   revive_factor_tail -> LT revive_factor revive_factor_tail
Rule 126   revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail
Rule 127   revive_factor_tail -> GT_EQ revive_factor revive_factor_tail
Rule 128   revive_factor_tail -> LT_EQ revive_factor revive_factor_tail
Rule 129   revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail
Rule 130   revive_factor_tail -> AND revive_factor revive_factor_tail
Rule 131   revive_factor_tail -> OR revive_factor revive_factor_tail
Rule 132   revive_factor_tail -> empty
Rule 133   revive_factor1 -> INT_LIT
Rule 134   revive_factor1 -> FLT_LIT
Rule 135   revive_factor1 -> DAY
Rule 136   revive_factor1 -> NIGHT
Rule 137   revive_factor1 -> STR_LIT
Rule 138   revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 139   revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 140   revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 141   revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 142   statements -> empty
Rule 143   statements -> local_dec unli_newline statements_tail
Rule 144   statements_tail -> switch_statement unli_newline statements
Rule 145   statements_tail -> loop_statement unli_newline statements
Rule 146   statements_tail -> function_call unli_newline statements
Rule 147   statements_tail -> assignment_statement unli_newline statements
Rule 148   statements_tail -> output_statement unli_newline statements
Rule 149   statements_tail -> conditional_statement unli_newline statements
Rule 150   statements_tail -> statements
Rule 151   local_dec -> local_var_statement local_dec_tail
Rule 152   local_dec -> empty
Rule 153   local_var_statement -> local_data_type IDENT local_list_dec
Rule 154   local_data_type -> INT
Rule 155   local_data_type -> FLT
Rule 156   local_data_type -> BLN
Rule 157   local_data_type -> CHR
Rule 158   local_data_type -> STR
Rule 159   local_list_dec -> empty
Rule 160   local_list_dec -> LBRACKET RBRACKET local_2d_list
Rule 161   local_2d_list -> empty
Rule 162   local_2d_list -> LBRACKET RBRACKET
Rule 163   local_dec_tail -> empty
Rule 164   local_dec_tail -> COMMA IDENT local_dec_tail
Rule 165   local_dec_tail -> EQ local_value local_dec_tail2
Rule 166   local_dec_tail2 -> COMMA IDENT local_dec_tail
Rule 167   local_dec_tail2 -> empty
Rule 168   local_value -> local_value_value
Rule 169   local_value -> list_value
Rule 170   local_value_value -> local_type_cast
Rule 171   local_value_value -> local_expression
Rule 172   local_value_value -> function_call
Rule 173   local_expression -> local_factor local_factor_tail
Rule 174   local_factor -> var_call postfix
Rule 175   local_factor -> local_factor1
Rule 176   local_factor -> TILDE INT_LIT
Rule 177   local_factor -> TILDE FLT_LIT
Rule 178   local_factor -> LPAREN local_factor RPAREN
Rule 179   local_factor_tail -> PLUS local_factor local_factor_tail
Rule 180   local_factor_tail -> MINUS local_factor local_factor_tail
Rule 181   local_factor_tail -> MULTIPLY local_factor local_factor_tail
Rule 182   local_factor_tail -> DIVISION local_factor local_factor_tail
Rule 183   local_factor_tail -> MODULO local_factor local_factor_tail
Rule 184   local_factor_tail -> EXPONENT local_factor local_factor_tail
Rule 185   local_factor_tail -> GT local_factor local_factor_tail
Rule 186   local_factor_tail -> LT local_factor local_factor_tail
Rule 187   local_factor_tail -> EQ_EQ local_factor local_factor_tail
Rule 188   local_factor_tail -> GT_EQ local_factor local_factor_tail
Rule 189   local_factor_tail -> LT_EQ local_factor local_factor_tail
Rule 190   local_factor_tail -> NOT_EQ local_factor local_factor_tail
Rule 191   local_factor_tail -> AND local_factor local_factor_tail
Rule 192   local_factor_tail -> OR local_factor local_factor_tail
Rule 193   local_factor_tail -> empty
Rule 194   local_factor1 -> INT_LIT
Rule 195   local_factor1 -> FLT_LIT
Rule 196   local_factor1 -> DAY
Rule 197   local_factor1 -> NIGHT
Rule 198   local_factor1 -> STR_LIT
Rule 199   local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 200   local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 201   local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 202   local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 203   conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 204   conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
Rule 205   conditional_tail -> empty
Rule 206   condition -> condition_factor condition_tail
Rule 207   condition_factor -> var_call postfix
Rule 208   condition_factor -> condition1
Rule 209   condition_factor -> TILDE INT_LIT
Rule 210   condition_factor -> TILDE FLT_LIT
Rule 211   condition_factor -> LPAREN condition RPAREN
Rule 212   condition_tail -> PLUS condition_factor condition_tail
Rule 213   condition_tail -> MINUS condition_factor condition_tail
Rule 214   condition_tail -> MULTIPLY condition_factor condition_tail
Rule 215   condition_tail -> DIVISION condition_factor condition_tail
Rule 216   condition_tail -> MODULO condition_factor condition_tail
Rule 217   condition_tail -> EXPONENT condition_factor condition_tail
Rule 218   condition_tail -> GT condition_factor condition_tail
Rule 219   condition_tail -> LT condition_factor condition_tail
Rule 220   condition_tail -> EQ_EQ condition_factor condition_tail
Rule 221   condition_tail -> GT_EQ condition_factor condition_tail
Rule 222   condition_tail -> LT_EQ condition_factor condition_tail
Rule 223   condition_tail -> NOT_EQ condition_factor condition_tail
Rule 224   condition_tail -> AND condition_factor condition_tail
Rule 225   condition_tail -> OR condition_factor condition_tail
Rule 226   condition_tail -> empty
Rule 227   condition1 -> INT_LIT
Rule 228   condition1 -> FLT_LIT
Rule 229   condition1 -> DAY
Rule 230   condition1 -> NIGHT
Rule 231   condition1 -> STR_LIT
Rule 232   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
Rule 233   switch_condition -> SHIFT switch_value COLON statements switchcond_tail
Rule 234   switch_value -> switch_type_cast
Rule 235   switch_value -> switch_expression
Rule 236   switch_value -> function_call
Rule 237   switch_expression -> switch_factor switch_factor_tail
Rule 238   switch_factor -> var_call postfix
Rule 239   switch_factor -> switch_factor1
Rule 240   switch_factor -> TILDE INT_LIT
Rule 241   switch_factor -> TILDE FLT_LIT
Rule 242   switch_factor -> LPAREN switch_factor RPAREN
Rule 243   switch_factor_tail -> PLUS switch_factor switch_factor_tail
Rule 244   switch_factor_tail -> MINUS switch_factor switch_factor_tail
Rule 245   switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail
Rule 246   switch_factor_tail -> DIVISION switch_factor switch_factor_tail
Rule 247   switch_factor_tail -> MODULO switch_factor switch_factor_tail
Rule 248   switch_factor_tail -> EXPONENT switch_factor switch_factor_tail
Rule 249   switch_factor_tail -> GT switch_factor switch_factor_tail
Rule 250   switch_factor_tail -> LT switch_factor switch_factor_tail
Rule 251   switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail
Rule 252   switch_factor_tail -> GT_EQ switch_factor switch_factor_tail
Rule 253   switch_factor_tail -> LT_EQ switch_factor switch_factor_tail
Rule 254   switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail
Rule 255   switch_factor_tail -> AND switch_factor switch_factor_tail
Rule 256   switch_factor_tail -> OR switch_factor switch_factor_tail
Rule 257   switch_factor_tail -> empty
Rule 258   switch_factor1 -> INT_LIT
Rule 259   switch_factor1 -> FLT_LIT
Rule 260   switch_factor1 -> DAY
Rule 261   switch_factor1 -> NIGHT
Rule 262   switch_factor1 -> STR_LIT
Rule 263   switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 264   switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 265   switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 266   switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 267   switchcond_tail -> switch_condition
Rule 268   switchcond_tail -> empty
Rule 269   loop_statement -> for_loop
Rule 270   loop_statement -> until_loop
Rule 271   loop_statement -> repeat_until
Rule 272   for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
Rule 273   for_expression -> for_factor for_factor_tail
Rule 274   for_factor -> var_call postfix
Rule 275   for_factor -> for_factor1
Rule 276   for_factor -> TILDE INT_LIT
Rule 277   for_factor -> TILDE FLT_LIT
Rule 278   for_factor -> LPAREN for_factor RPAREN
Rule 279   for_factor_tail -> PLUS for_factor for_factor_tail
Rule 280   for_factor_tail -> MINUS for_factor for_factor_tail
Rule 281   for_factor_tail -> MULTIPLY for_factor for_factor_tail
Rule 282   for_factor_tail -> DIVISION for_factor for_factor_tail
Rule 283   for_factor_tail -> MODULO for_factor for_factor_tail
Rule 284   for_factor_tail -> EXPONENT for_factor for_factor_tail
Rule 285   for_factor_tail -> GT for_factor for_factor_tail
Rule 286   for_factor_tail -> LT for_factor for_factor_tail
Rule 287   for_factor_tail -> EQ_EQ for_factor for_factor_tail
Rule 288   for_factor_tail -> GT_EQ for_factor for_factor_tail
Rule 289   for_factor_tail -> LT_EQ for_factor for_factor_tail
Rule 290   for_factor_tail -> NOT_EQ for_factor for_factor_tail
Rule 291   for_factor_tail -> AND for_factor for_factor_tail
Rule 292   for_factor_tail -> OR for_factor for_factor_tail
Rule 293   for_factor_tail -> empty
Rule 294   for_factor1 -> INT_LIT
Rule 295   for_factor1 -> FLT_LIT
Rule 296   for_factor1 -> DAY
Rule 297   for_factor1 -> NIGHT
Rule 298   for_factor1 -> STR_LIT
Rule 299   until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
Rule 300   until_expression -> until_factor until_factor_tail
Rule 301   until_factor -> var_call postfix
Rule 302   until_factor -> until_factor1
Rule 303   until_factor -> TILDE INT_LIT
Rule 304   until_factor -> TILDE FLT_LIT
Rule 305   until_factor -> LPAREN until_factor RPAREN
Rule 306   until_factor_tail -> PLUS until_factor until_factor_tail
Rule 307   until_factor_tail -> MINUS until_factor until_factor_tail
Rule 308   until_factor_tail -> MULTIPLY until_factor until_factor_tail
Rule 309   until_factor_tail -> DIVISION until_factor until_factor_tail
Rule 310   until_factor_tail -> MODULO until_factor until_factor_tail
Rule 311   until_factor_tail -> EXPONENT until_factor until_factor_tail
Rule 312   until_factor_tail -> GT until_factor until_factor_tail
Rule 313   until_factor_tail -> LT until_factor until_factor_tail
Rule 314   until_factor_tail -> EQ_EQ until_factor until_factor_tail
Rule 315   until_factor_tail -> GT_EQ until_factor until_factor_tail
Rule 316   until_factor_tail -> LT_EQ until_factor until_factor_tail
Rule 317   until_factor_tail -> NOT_EQ until_factor until_factor_tail
Rule 318   until_factor_tail -> AND until_factor until_factor_tail
Rule 319   until_factor_tail -> OR until_factor until_factor_tail
Rule 320   until_factor_tail -> empty
Rule 321   until_factor1 -> INT_LIT
Rule 322   until_factor1 -> FLT_LIT
Rule 323   until_factor1 -> DAY
Rule 324   until_factor1 -> NIGHT
Rule 325   until_factor1 -> STR_LIT
Rule 326   repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
Rule 327   control_variable -> INT IDENT EQ control_var_tail
Rule 328   control_var_tail -> INT_LIT
Rule 329   control_var_tail -> var_call
Rule 330   update -> var_call update_tail
Rule 331   update_tail -> postfix_op
Rule 332   update_tail -> compound_op value
Rule 333   postfix_op -> PLUS_PLUS
Rule 334   postfix_op -> MINUS_MINUS
Rule 335   function_call -> FUNCTION_NAME LPAREN arguments RPAREN
Rule 336   function_call -> input_statement
Rule 337   arguments -> empty
Rule 338   arguments -> arg_value arg_tail
Rule 339   arg_tail -> COMMA arg_value arg_tail
Rule 340   arg_tail -> empty
Rule 341   arg_value -> literal
Rule 342   arg_value -> var_call
Rule 343   output_statement -> DISPLAY value next_val
Rule 344   next_val -> COMMA value next_val
Rule 345   next_val -> empty
Rule 346   assignment_statement -> IDENT assign_tail
Rule 347   assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
Rule 348   assign_tail -> DOT PUSH LPAREN list_element RPAREN
Rule 349   assign_tail -> assign_op value
Rule 350   assign_op -> compound_op
Rule 351   assign_op -> EQ
Rule 352   compound_op -> PLUS_EQ
Rule 353   compound_op -> MINUS_EQ
Rule 354   compound_op -> MUL_EQ
Rule 355   compound_op -> DIV_EQ
Rule 356   compound_op -> MOD_EQ
Rule 357   start -> INT_LIT
Rule 358   deleteCount -> empty
Rule 359   deleteCount -> INT_LIT
Rule 360   splice_items -> empty
Rule 361   splice_items -> list_element
Rule 362   var_call -> IDENT list_index
Rule 363   list_index -> LBRACKET index RBRACKET list_index2
Rule 364   list_index -> empty
Rule 365   list_index2 -> LBRACKET index RBRACKET
Rule 366   list_index2 -> empty
Rule 367   index -> INT_LIT
Rule 368   index -> IDENT
Rule 369   postfix -> empty
Rule 370   postfix -> postfix_op
Rule 371   value -> type_cast
Rule 372   value -> value_expression
Rule 373   value -> function_call
Rule 374   value_expression -> value_factor value_factor_tail
Rule 375   value_factor -> var_call postfix
Rule 376   value_factor -> value_factor1
Rule 377   value_factor -> TILDE INT_LIT
Rule 378   value_factor -> TILDE FLT_LIT
Rule 379   value_factor -> LPAREN value_factor RPAREN
Rule 380   value_factor_tail -> PLUS value_factor value_factor_tail
Rule 381   value_factor_tail -> MINUS value_factor value_factor_tail
Rule 382   value_factor_tail -> MULTIPLY value_factor value_factor_tail
Rule 383   value_factor_tail -> DIVISION value_factor value_factor_tail
Rule 384   value_factor_tail -> MODULO value_factor value_factor_tail
Rule 385   value_factor_tail -> EXPONENT value_factor value_factor_tail
Rule 386   value_factor_tail -> GT value_factor value_factor_tail
Rule 387   value_factor_tail -> LT value_factor value_factor_tail
Rule 388   value_factor_tail -> EQ_EQ value_factor value_factor_tail
Rule 389   value_factor_tail -> GT_EQ value_factor value_factor_tail
Rule 390   value_factor_tail -> LT_EQ value_factor value_factor_tail
Rule 391   value_factor_tail -> NOT_EQ value_factor value_factor_tail
Rule 392   value_factor_tail -> AND value_factor value_factor_tail
Rule 393   value_factor_tail -> OR value_factor value_factor_tail
Rule 394   value_factor_tail -> empty
Rule 395   value_factor1 -> INT_LIT
Rule 396   value_factor1 -> FLT_LIT
Rule 397   value_factor1 -> DAY
Rule 398   value_factor1 -> NIGHT
Rule 399   value_factor1 -> STR_LIT
Rule 400   type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 401   type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 402   type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 403   type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 404   typecast_value -> typecast_expression
Rule 405   typecast_value -> FUNCTION_NAME LPAREN RPAREN
Rule 406   typecast_value -> input_statement
Rule 407   typecast_expression -> typecast_factor typecast_factor_tail
Rule 408   typecast_factor -> var_call postfix
Rule 409   typecast_factor -> typecast_factor1
Rule 410   typecast_factor -> TILDE INT_LIT
Rule 411   typecast_factor -> TILDE FLT_LIT
Rule 412   typecast_factor -> LPAREN typecast_factor RPAREN
Rule 413   typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail
Rule 414   typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail
Rule 415   typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail
Rule 416   typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail
Rule 417   typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail
Rule 418   typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail
Rule 419   typecast_factor_tail -> GT typecast_factor typecast_factor_tail
Rule 420   typecast_factor_tail -> LT typecast_factor typecast_factor_tail
Rule 421   typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail
Rule 422   typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail
Rule 423   typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail
Rule 424   typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail
Rule 425   typecast_factor_tail -> AND typecast_factor typecast_factor_tail
Rule 426   typecast_factor_tail -> OR typecast_factor typecast_factor_tail
Rule 427   typecast_factor_tail -> empty
Rule 428   typecast_factor1 -> INT_LIT
Rule 429   typecast_factor1 -> FLT_LIT
Rule 430   typecast_factor1 -> DAY
Rule 431   typecast_factor1 -> NIGHT
Rule 432   typecast_factor1 -> STR_LIT
Rule 433   input_statement -> INPUT LPAREN RPAREN
Rule 434   empty -> <empty>

Terminals, with rules where they appear

AND                  : 56 76 130 191 224 255 291 318 392 425
BIRTH                : 1
BLN                  : 29 156
BLN_LIT              : 
CARRIAGE_RETURN      : 
CHECK                : 203
CHR                  : 30 157
CHR_LIT              : 86
COLON                : 233
COMMA                : 17 19 25 105 164 166 339 344 347 347
COMMENT              : 
CONVERT_TO_BLN       : 140 201 265 402
CONVERT_TO_FLT       : 139 200 264 401
CONVERT_TO_INT       : 138 199 263 400
CONVERT_TO_STR       : 141 202 266 403
DAY                  : 61 83 135 196 229 260 296 323 397 430
DISPLAY              : 343
DIVISION             : 47 67 121 182 215 246 282 309 383 416
DIV_EQ               : 355
DOT                  : 347 348
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 18 165 327 351
EQ_EQ                : 52 72 126 187 220 251 287 314 388 421
EXPONENT             : 49 69 123 184 217 248 284 311 385 418
FLT                  : 28 155
FLT_LIT              : 36 42 60 82 116 134 177 195 210 228 241 259 277 295 304 322 378 396 411 429
FOR                  : 272
FUNCTION             : 91
FUNCTION_BLN         : 96
FUNCTION_CHR         : 95
FUNCTION_FLT         : 94
FUNCTION_INT         : 93
FUNCTION_LIST_BLN    : 102
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 100
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 99
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 98
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 101
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 87 335 405
FUNCTION_STR         : 97
GHOST                : 1
GT                   : 50 70 124 185 218 249 285 312 386 419
GT_EQ                : 53 73 127 188 221 252 288 315 389 422
IDENT                : 11 17 19 103 105 153 164 166 232 327 346 362 368
ILLEGAL              : 
IN                   : 
INPUT                : 433
INT                  : 27 154 327
INT_LIT              : 35 41 59 81 115 133 176 194 209 227 240 258 276 294 303 321 328 357 359 367 377 395 410 428
LBRACE               : 6 87 203 203 204 232 232 272 299 326
LBRACKET             : 13 15 23 160 162 363 365
LIST_BLN             : 
LIST_BLN2D           : 
LIST_CHR             : 
LIST_CHR2D           : 
LIST_FLT             : 
LIST_FLT2D           : 
LIST_INT             : 
LIST_INT2D           : 
LIST_STR             : 
LIST_STR2D           : 
LPAREN               : 6 37 43 87 117 138 139 140 141 178 199 200 201 202 203 204 211 232 242 263 264 265 266 272 278 299 305 326 335 347 348 379 400 401 402 403 405 412 433
LT                   : 51 71 125 186 219 250 286 313 387 420
LT_EQ                : 54 74 128 189 222 253 289 316 390 423
MAIN_CASPER          : 6
MEASURE              : 
MINUS                : 45 65 119 180 213 244 280 307 381 414
MINUS_EQ             : 353
MINUS_MINUS          : 334
MODULO               : 48 68 122 183 216 247 283 310 384 417
MOD_EQ               : 356
MULTIPLY             : 46 66 120 181 214 245 281 308 382 415
MUL_EQ               : 354
NEWLINE              : 3 4 5
NIGHT                : 62 84 136 197 230 261 297 324 398 431
NOT                  : 
NOT_EQ               : 55 75 129 190 223 254 290 317 391 424
OR                   : 57 77 131 192 225 256 292 319 393 426
OTHERWISE            : 203 232
OTHERWISE_CHECK      : 204
PLUS                 : 44 64 118 179 212 243 279 306 380 413
PLUS_EQ              : 352
PLUS_PLUS            : 333
POW                  : 
PUSH                 : 348
RBRACE               : 6 87 203 203 204 232 232 272 299 326
RBRACKET             : 13 15 23 160 162 363 365
REPEAT               : 326
REVIVE               : 107
RPAREN               : 6 37 43 87 117 138 139 140 141 178 199 200 201 202 203 204 211 232 242 263 264 265 266 272 278 299 305 326 335 347 348 379 400 401 402 403 405 412 433
SEMICOLON            : 272 272
SHIFT                : 233
SKIP                 : 
SPLICE               : 347
STOP                 : 
STR                  : 31 158
STR_LIT              : 63 85 137 198 231 262 298 325 399 432
SWAP                 : 232
TILDE                : 35 36 41 42 115 116 176 177 209 210 240 241 276 277 303 304 377 378 410 411
TYPE                 : 
UNTIL                : 299 326
error                : 

Nonterminals, with rules where they appear

_2d_list             : 13
arg_tail             : 338 339
arg_value            : 338 339
arguments            : 335
assign_op            : 349
assign_tail          : 346
assignment_statement : 147
compound_op          : 332 350
condition            : 203 204 211
condition1           : 208
condition_factor     : 206 212 213 214 215 216 217 218 219 220 221 222 223 224 225
condition_tail       : 206 212 213 214 215 216 217 218 219 220 221 222 223 224 225
conditional_statement : 149
conditional_tail     : 203 204
control_var_tail     : 327
control_variable     : 272
data_type            : 11 103 105
deleteCount          : 347
element_tail         : 24
empty                : 2 8 12 14 16 20 26 58 78 88 90 104 106 108 132 142 152 159 161 163 167 193 205 226 257 268 293 320 337 340 345 358 360 364 366 369 394 427
expression           : 21
factor               : 32 64 65 66 67 68 69 70 71 72 73 74 75 76 77
factor_expression    : 37 43
factor_expression1   : 40
factor_expression_factor : 38 44 45 46 47 48 49 50 51 52 53 54 55 56 57
factor_expression_tail : 38 44 45 46 47 48 49 50 51 52 53 54 55 56 57
factor_tail          : 32 64 65 66 67 68 69 70 71 72 73 74 75 76 77
for_expression       : 272
for_factor           : 273 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292
for_factor1          : 275
for_factor_tail      : 273 279 280 281 282 283 284 285 286 287 288 289 290 291 292
for_loop             : 269
function_call        : 111 146 172 236 373
function_dtype       : 92
function_statements  : 1 89
function_statements_tail : 87
global_dec           : 1 9
global_statement     : 7
global_statement_tail : 10 17 19
global_statement_tail2 : 18
global_tail          : 7
global_value         : 18
index                : 363 365
input_statement      : 336 406
list_dec             : 11
list_element         : 23 25 348 361
list_index           : 362
list_index2          : 363
list_value           : 22 169
literal              : 24 341
literal1             : 34 79
literal2             : 80
local_2d_list        : 160
local_data_type      : 153
local_dec            : 143
local_dec_tail       : 151 164 166
local_dec_tail2      : 165
local_expression     : 171
local_factor         : 173 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192
local_factor1        : 175
local_factor_tail    : 173 179 180 181 182 183 184 185 186 187 188 189 190 191 192
local_list_dec       : 153
local_type_cast      : 170
local_value          : 165
local_value_value    : 168
local_var_statement  : 151
loop_statement       : 145
main_function        : 1
maybe_newline        : 1 1 3 6 6 6 87 87 203 203 203 203 203 203 203 272 272
next_val             : 343 344
output_statement     : 148
parameters           : 87
parameters_tail      : 103 105
postfix              : 33 39 113 174 207 238 274 301 375 408
postfix_op           : 331 370
program              : 0
repeat_until         : 271
ret_type             : 87
revive               : 87
revive_expression    : 110
revive_factor        : 112 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
revive_factor1       : 114
revive_factor_tail   : 112 118 119 120 121 122 123 124 125 126 127 128 129 130 131
revive_type_cast     : 109
revive_value         : 107
splice_items         : 347
start                : 347
statements           : 6 87 144 145 146 147 148 149 150 203 203 204 232 233 272 299 326
statements_tail      : 143
switch_condition     : 232 267
switch_expression    : 235
switch_factor        : 237 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256
switch_factor1       : 239
switch_factor_tail   : 237 243 244 245 246 247 248 249 250 251 252 253 254 255 256
switch_statement     : 144
switch_type_cast     : 234
switch_value         : 233
switchcond_tail      : 233
type_cast            : 371
typecast_expression  : 404
typecast_factor      : 407 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426
typecast_factor1     : 409
typecast_factor_tail : 407 413 414 415 416 417 418 419 420 421 422 423 424 425 426
typecast_value       : 138 139 140 141 199 200 201 202 263 264 265 266 400 401 402 403
unli_newline         : 1 1 5 7 87 143 144 145 146 147 148 149
until_expression     : 299 326
until_factor         : 300 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319
until_factor1        : 302
until_factor_tail    : 300 306 307 308 309 310 311 312 313 314 315 316 317 318 319
until_loop           : 270
update               : 272
update_tail          : 330
value                : 332 343 344 349
value_expression     : 372
value_factor         : 374 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393
value_factor1        : 376
value_factor_tail    : 374 380 381 382 383 384 385 386 387 388 389 390 391 392 393
var_call             : 33 39 113 174 207 238 274 301 329 330 342 375 408
var_statement        : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 3

state 3

    (1) program -> BIRTH unli_newline . global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (434) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    NEWLINE         reduce using rule 434 (empty -> .)
    FUNCTION        reduce using rule 434 (empty -> .)
    FUNCTION_INT    reduce using rule 434 (empty -> .)
    FUNCTION_FLT    reduce using rule 434 (empty -> .)
    FUNCTION_CHR    reduce using rule 434 (empty -> .)
    FUNCTION_BLN    reduce using rule 434 (empty -> .)
    FUNCTION_STR    reduce using rule 434 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 434 (empty -> .)
    MAIN_CASPER     reduce using rule 434 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_dec                     shift and go to state 5
    global_statement               shift and go to state 6
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 4

    (4) unli_newline -> NEWLINE .
    (5) unli_newline -> NEWLINE . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    INT             reduce using rule 4 (unli_newline -> NEWLINE .)
    FLT             reduce using rule 4 (unli_newline -> NEWLINE .)
    BLN             reduce using rule 4 (unli_newline -> NEWLINE .)
    CHR             reduce using rule 4 (unli_newline -> NEWLINE .)
    STR             reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION        reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_INT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_FLT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_CHR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_BLN    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_STR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_INT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_FLT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_CHR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_STR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_BLN reduce using rule 4 (unli_newline -> NEWLINE .)
    MAIN_CASPER     reduce using rule 4 (unli_newline -> NEWLINE .)
    GHOST           reduce using rule 4 (unli_newline -> NEWLINE .)
    SWAP            reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_NAME   reduce using rule 4 (unli_newline -> NEWLINE .)
    IDENT           reduce using rule 4 (unli_newline -> NEWLINE .)
    DISPLAY         reduce using rule 4 (unli_newline -> NEWLINE .)
    CHECK           reduce using rule 4 (unli_newline -> NEWLINE .)
    FOR             reduce using rule 4 (unli_newline -> NEWLINE .)
    UNTIL           reduce using rule 4 (unli_newline -> NEWLINE .)
    REPEAT          reduce using rule 4 (unli_newline -> NEWLINE .)
    INPUT           reduce using rule 4 (unli_newline -> NEWLINE .)
    REVIVE          reduce using rule 4 (unli_newline -> NEWLINE .)
    RBRACE          reduce using rule 4 (unli_newline -> NEWLINE .)
    SHIFT           reduce using rule 4 (unli_newline -> NEWLINE .)
    OTHERWISE       reduce using rule 4 (unli_newline -> NEWLINE .)
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 4 (unli_newline -> NEWLINE .) ]

    unli_newline                   shift and go to state 15

state 5

    (1) program -> BIRTH unli_newline global_dec . maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 434 (empty -> .)
    FUNCTION_INT    reduce using rule 434 (empty -> .)
    FUNCTION_FLT    reduce using rule 434 (empty -> .)
    FUNCTION_CHR    reduce using rule 434 (empty -> .)
    FUNCTION_BLN    reduce using rule 434 (empty -> .)
    FUNCTION_STR    reduce using rule 434 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 434 (empty -> .)
    MAIN_CASPER     reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 16
    empty                          shift and go to state 17

state 6

    (7) global_dec -> global_statement . unli_newline global_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 19

state 7

    (8) global_dec -> empty .

    NEWLINE         reduce using rule 8 (global_dec -> empty .)
    FUNCTION        reduce using rule 8 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 8 (global_dec -> empty .)
    MAIN_CASPER     reduce using rule 8 (global_dec -> empty .)


state 8

    (10) global_statement -> var_statement . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (434) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 434 (empty -> .)

    global_statement_tail          shift and go to state 20
    empty                          shift and go to state 21

state 9

    (11) var_statement -> data_type . IDENT list_dec

    IDENT           shift and go to state 24


state 10

    (27) data_type -> INT .

    IDENT           reduce using rule 27 (data_type -> INT .)


state 11

    (28) data_type -> FLT .

    IDENT           reduce using rule 28 (data_type -> FLT .)


state 12

    (29) data_type -> BLN .

    IDENT           reduce using rule 29 (data_type -> BLN .)


state 13

    (30) data_type -> CHR .

    IDENT           reduce using rule 30 (data_type -> CHR .)


state 14

    (31) data_type -> STR .

    IDENT           reduce using rule 31 (data_type -> STR .)


state 15

    (5) unli_newline -> NEWLINE unli_newline .

    INT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FLT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    BLN             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    STR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    NEWLINE         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION        reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_INT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_FLT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_CHR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_BLN    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_STR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_INT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_FLT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_CHR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_STR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_BLN reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    MAIN_CASPER     reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    GHOST           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SWAP            reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_NAME   reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    IDENT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    DISPLAY         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHECK           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FOR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    UNTIL           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REPEAT          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    INPUT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REVIVE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    RBRACE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SHIFT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    OTHERWISE       reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)


state 16

    (1) program -> BIRTH unli_newline global_dec maybe_newline . function_statements maybe_newline main_function unli_newline GHOST
    (87) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (88) function_statements -> . empty
    (91) ret_type -> . FUNCTION
    (92) ret_type -> . function_dtype
    (434) empty -> .
    (93) function_dtype -> . FUNCTION_INT
    (94) function_dtype -> . FUNCTION_FLT
    (95) function_dtype -> . FUNCTION_CHR
    (96) function_dtype -> . FUNCTION_BLN
    (97) function_dtype -> . FUNCTION_STR
    (98) function_dtype -> . FUNCTION_LIST_INT
    (99) function_dtype -> . FUNCTION_LIST_FLT
    (100) function_dtype -> . FUNCTION_LIST_CHR
    (101) function_dtype -> . FUNCTION_LIST_STR
    (102) function_dtype -> . FUNCTION_LIST_BLN

    FUNCTION        shift and go to state 28
    NEWLINE         reduce using rule 434 (empty -> .)
    MAIN_CASPER     reduce using rule 434 (empty -> .)
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    function_statements            shift and go to state 25
    ret_type                       shift and go to state 26
    empty                          shift and go to state 27
    function_dtype                 shift and go to state 29

state 17

    (2) maybe_newline -> empty .

    FUNCTION        reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_INT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_FLT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_CHR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_BLN    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_STR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_INT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_FLT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_CHR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_STR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_BLN reduce using rule 2 (maybe_newline -> empty .)
    NEWLINE         reduce using rule 2 (maybe_newline -> empty .)
    MAIN_CASPER     reduce using rule 2 (maybe_newline -> empty .)
    LBRACE          reduce using rule 2 (maybe_newline -> empty .)
    INT             reduce using rule 2 (maybe_newline -> empty .)
    FLT             reduce using rule 2 (maybe_newline -> empty .)
    BLN             reduce using rule 2 (maybe_newline -> empty .)
    CHR             reduce using rule 2 (maybe_newline -> empty .)
    STR             reduce using rule 2 (maybe_newline -> empty .)
    REVIVE          reduce using rule 2 (maybe_newline -> empty .)
    RBRACE          reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE_CHECK reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE       reduce using rule 2 (maybe_newline -> empty .)


state 18

    (3) maybe_newline -> NEWLINE . maybe_newline
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 434 (empty -> .)
    FUNCTION_INT    reduce using rule 434 (empty -> .)
    FUNCTION_FLT    reduce using rule 434 (empty -> .)
    FUNCTION_CHR    reduce using rule 434 (empty -> .)
    FUNCTION_BLN    reduce using rule 434 (empty -> .)
    FUNCTION_STR    reduce using rule 434 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 434 (empty -> .)
    MAIN_CASPER     reduce using rule 434 (empty -> .)
    LBRACE          reduce using rule 434 (empty -> .)
    INT             reduce using rule 434 (empty -> .)
    FLT             reduce using rule 434 (empty -> .)
    BLN             reduce using rule 434 (empty -> .)
    CHR             reduce using rule 434 (empty -> .)
    STR             reduce using rule 434 (empty -> .)
    REVIVE          reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    OTHERWISE_CHECK reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 40
    empty                          shift and go to state 17

state 19

    (7) global_dec -> global_statement unli_newline . global_tail
    (9) global_tail -> . global_dec
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (434) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    NEWLINE         reduce using rule 434 (empty -> .)
    FUNCTION        reduce using rule 434 (empty -> .)
    FUNCTION_INT    reduce using rule 434 (empty -> .)
    FUNCTION_FLT    reduce using rule 434 (empty -> .)
    FUNCTION_CHR    reduce using rule 434 (empty -> .)
    FUNCTION_BLN    reduce using rule 434 (empty -> .)
    FUNCTION_STR    reduce using rule 434 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 434 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 434 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 434 (empty -> .)
    MAIN_CASPER     reduce using rule 434 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_statement               shift and go to state 6
    global_tail                    shift and go to state 41
    global_dec                     shift and go to state 42
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 20

    (10) global_statement -> var_statement global_statement_tail .

    NEWLINE         reduce using rule 10 (global_statement -> var_statement global_statement_tail .)


state 21

    (16) global_statement_tail -> empty .

    NEWLINE         reduce using rule 16 (global_statement_tail -> empty .)


state 22

    (17) global_statement_tail -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 43


state 23

    (18) global_statement_tail -> EQ . global_value global_statement_tail2
    (21) global_value -> . expression
    (22) global_value -> . list_value
    (32) expression -> . factor factor_tail
    (23) list_value -> . LBRACKET list_element RBRACKET
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    global_value                   shift and go to state 44
    expression                     shift and go to state 45
    list_value                     shift and go to state 46
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 24

    (11) var_statement -> data_type IDENT . list_dec
    (12) list_dec -> . empty
    (13) list_dec -> . LBRACKET RBRACKET _2d_list
    (434) empty -> .

    LBRACKET        shift and go to state 61
    COMMA           reduce using rule 434 (empty -> .)
    EQ              reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    list_dec                       shift and go to state 59
    empty                          shift and go to state 60

state 25

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements . maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    MAIN_CASPER     reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 62
    empty                          shift and go to state 17

state 26

    (87) function_statements -> ret_type . FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    FUNCTION_NAME   shift and go to state 63


state 27

    (88) function_statements -> empty .

    NEWLINE         reduce using rule 88 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 88 (function_statements -> empty .)


state 28

    (91) ret_type -> FUNCTION .

    FUNCTION_NAME   reduce using rule 91 (ret_type -> FUNCTION .)


state 29

    (92) ret_type -> function_dtype .

    FUNCTION_NAME   reduce using rule 92 (ret_type -> function_dtype .)


state 30

    (93) function_dtype -> FUNCTION_INT .

    FUNCTION_NAME   reduce using rule 93 (function_dtype -> FUNCTION_INT .)


state 31

    (94) function_dtype -> FUNCTION_FLT .

    FUNCTION_NAME   reduce using rule 94 (function_dtype -> FUNCTION_FLT .)


state 32

    (95) function_dtype -> FUNCTION_CHR .

    FUNCTION_NAME   reduce using rule 95 (function_dtype -> FUNCTION_CHR .)


state 33

    (96) function_dtype -> FUNCTION_BLN .

    FUNCTION_NAME   reduce using rule 96 (function_dtype -> FUNCTION_BLN .)


state 34

    (97) function_dtype -> FUNCTION_STR .

    FUNCTION_NAME   reduce using rule 97 (function_dtype -> FUNCTION_STR .)


state 35

    (98) function_dtype -> FUNCTION_LIST_INT .

    FUNCTION_NAME   reduce using rule 98 (function_dtype -> FUNCTION_LIST_INT .)


state 36

    (99) function_dtype -> FUNCTION_LIST_FLT .

    FUNCTION_NAME   reduce using rule 99 (function_dtype -> FUNCTION_LIST_FLT .)


state 37

    (100) function_dtype -> FUNCTION_LIST_CHR .

    FUNCTION_NAME   reduce using rule 100 (function_dtype -> FUNCTION_LIST_CHR .)


state 38

    (101) function_dtype -> FUNCTION_LIST_STR .

    FUNCTION_NAME   reduce using rule 101 (function_dtype -> FUNCTION_LIST_STR .)


state 39

    (102) function_dtype -> FUNCTION_LIST_BLN .

    FUNCTION_NAME   reduce using rule 102 (function_dtype -> FUNCTION_LIST_BLN .)


state 40

    (3) maybe_newline -> NEWLINE maybe_newline .

    FUNCTION        reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_INT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_FLT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_CHR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_BLN    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_STR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_INT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_FLT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_CHR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_STR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_BLN reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    NEWLINE         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    MAIN_CASPER     reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    LBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FLT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    BLN             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    STR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REVIVE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    RBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE_CHECK reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE       reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)


state 41

    (7) global_dec -> global_statement unli_newline global_tail .

    NEWLINE         reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION        reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_INT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_FLT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_CHR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_BLN    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_STR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_INT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_FLT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_CHR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_STR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_BLN reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    MAIN_CASPER     reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)


state 42

    (9) global_tail -> global_dec .

    NEWLINE         reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION        reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_INT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_FLT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_CHR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_BLN    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_STR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_INT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_FLT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_CHR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_STR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_BLN reduce using rule 9 (global_tail -> global_dec .)
    MAIN_CASPER     reduce using rule 9 (global_tail -> global_dec .)


state 43

    (17) global_statement_tail -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (434) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 434 (empty -> .)

    global_statement_tail          shift and go to state 64
    empty                          shift and go to state 21

state 44

    (18) global_statement_tail -> EQ global_value . global_statement_tail2
    (19) global_statement_tail2 -> . COMMA IDENT global_statement_tail
    (20) global_statement_tail2 -> . empty
    (434) empty -> .

    COMMA           shift and go to state 66
    NEWLINE         reduce using rule 434 (empty -> .)

    global_statement_tail2         shift and go to state 65
    empty                          shift and go to state 67

state 45

    (21) global_value -> expression .

    COMMA           reduce using rule 21 (global_value -> expression .)
    NEWLINE         reduce using rule 21 (global_value -> expression .)


state 46

    (22) global_value -> list_value .

    COMMA           reduce using rule 22 (global_value -> list_value .)
    NEWLINE         reduce using rule 22 (global_value -> list_value .)


state 47

    (32) expression -> factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 68
    empty                          shift and go to state 83

state 48

    (23) list_value -> LBRACKET . list_element RBRACKET
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 84
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 49

    (33) factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 89
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 50

    (34) factor -> literal1 .

    PLUS            reduce using rule 34 (factor -> literal1 .)
    MINUS           reduce using rule 34 (factor -> literal1 .)
    MULTIPLY        reduce using rule 34 (factor -> literal1 .)
    DIVISION        reduce using rule 34 (factor -> literal1 .)
    MODULO          reduce using rule 34 (factor -> literal1 .)
    EXPONENT        reduce using rule 34 (factor -> literal1 .)
    GT              reduce using rule 34 (factor -> literal1 .)
    LT              reduce using rule 34 (factor -> literal1 .)
    EQ_EQ           reduce using rule 34 (factor -> literal1 .)
    GT_EQ           reduce using rule 34 (factor -> literal1 .)
    LT_EQ           reduce using rule 34 (factor -> literal1 .)
    NOT_EQ          reduce using rule 34 (factor -> literal1 .)
    AND             reduce using rule 34 (factor -> literal1 .)
    OR              reduce using rule 34 (factor -> literal1 .)
    COMMA           reduce using rule 34 (factor -> literal1 .)
    NEWLINE         reduce using rule 34 (factor -> literal1 .)


state 51

    (35) factor -> TILDE . INT_LIT
    (36) factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 94
    FLT_LIT         shift and go to state 95


state 52

    (81) literal1 -> INT_LIT .

    PLUS            reduce using rule 81 (literal1 -> INT_LIT .)
    MINUS           reduce using rule 81 (literal1 -> INT_LIT .)
    MULTIPLY        reduce using rule 81 (literal1 -> INT_LIT .)
    DIVISION        reduce using rule 81 (literal1 -> INT_LIT .)
    MODULO          reduce using rule 81 (literal1 -> INT_LIT .)
    EXPONENT        reduce using rule 81 (literal1 -> INT_LIT .)
    GT              reduce using rule 81 (literal1 -> INT_LIT .)
    LT              reduce using rule 81 (literal1 -> INT_LIT .)
    EQ_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    GT_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    LT_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    NOT_EQ          reduce using rule 81 (literal1 -> INT_LIT .)
    AND             reduce using rule 81 (literal1 -> INT_LIT .)
    OR              reduce using rule 81 (literal1 -> INT_LIT .)
    COMMA           reduce using rule 81 (literal1 -> INT_LIT .)
    NEWLINE         reduce using rule 81 (literal1 -> INT_LIT .)
    RBRACKET        reduce using rule 81 (literal1 -> INT_LIT .)
    RPAREN          reduce using rule 81 (literal1 -> INT_LIT .)


state 53

    (82) literal1 -> FLT_LIT .

    PLUS            reduce using rule 82 (literal1 -> FLT_LIT .)
    MINUS           reduce using rule 82 (literal1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 82 (literal1 -> FLT_LIT .)
    DIVISION        reduce using rule 82 (literal1 -> FLT_LIT .)
    MODULO          reduce using rule 82 (literal1 -> FLT_LIT .)
    EXPONENT        reduce using rule 82 (literal1 -> FLT_LIT .)
    GT              reduce using rule 82 (literal1 -> FLT_LIT .)
    LT              reduce using rule 82 (literal1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    GT_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    LT_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 82 (literal1 -> FLT_LIT .)
    AND             reduce using rule 82 (literal1 -> FLT_LIT .)
    OR              reduce using rule 82 (literal1 -> FLT_LIT .)
    COMMA           reduce using rule 82 (literal1 -> FLT_LIT .)
    NEWLINE         reduce using rule 82 (literal1 -> FLT_LIT .)
    RBRACKET        reduce using rule 82 (literal1 -> FLT_LIT .)
    RPAREN          reduce using rule 82 (literal1 -> FLT_LIT .)


state 54

    (37) factor -> LPAREN . factor_expression RPAREN
    (38) factor_expression -> . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression              shift and go to state 97
    factor_expression_factor       shift and go to state 98
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 55

    (362) var_call -> IDENT . list_index
    (363) list_index -> . LBRACKET index RBRACKET list_index2
    (364) list_index -> . empty
    (434) empty -> .

    LBRACKET        shift and go to state 108
    PLUS_PLUS       reduce using rule 434 (empty -> .)
    MINUS_MINUS     reduce using rule 434 (empty -> .)
    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SEMICOLON       reduce using rule 434 (empty -> .)
    COLON           reduce using rule 434 (empty -> .)
    PLUS_EQ         reduce using rule 434 (empty -> .)
    MINUS_EQ        reduce using rule 434 (empty -> .)
    MUL_EQ          reduce using rule 434 (empty -> .)
    DIV_EQ          reduce using rule 434 (empty -> .)
    MOD_EQ          reduce using rule 434 (empty -> .)

    list_index                     shift and go to state 107
    empty                          shift and go to state 109

state 56

    (83) literal1 -> DAY .

    PLUS            reduce using rule 83 (literal1 -> DAY .)
    MINUS           reduce using rule 83 (literal1 -> DAY .)
    MULTIPLY        reduce using rule 83 (literal1 -> DAY .)
    DIVISION        reduce using rule 83 (literal1 -> DAY .)
    MODULO          reduce using rule 83 (literal1 -> DAY .)
    EXPONENT        reduce using rule 83 (literal1 -> DAY .)
    GT              reduce using rule 83 (literal1 -> DAY .)
    LT              reduce using rule 83 (literal1 -> DAY .)
    EQ_EQ           reduce using rule 83 (literal1 -> DAY .)
    GT_EQ           reduce using rule 83 (literal1 -> DAY .)
    LT_EQ           reduce using rule 83 (literal1 -> DAY .)
    NOT_EQ          reduce using rule 83 (literal1 -> DAY .)
    AND             reduce using rule 83 (literal1 -> DAY .)
    OR              reduce using rule 83 (literal1 -> DAY .)
    COMMA           reduce using rule 83 (literal1 -> DAY .)
    NEWLINE         reduce using rule 83 (literal1 -> DAY .)
    RBRACKET        reduce using rule 83 (literal1 -> DAY .)
    RPAREN          reduce using rule 83 (literal1 -> DAY .)


state 57

    (84) literal1 -> NIGHT .

    PLUS            reduce using rule 84 (literal1 -> NIGHT .)
    MINUS           reduce using rule 84 (literal1 -> NIGHT .)
    MULTIPLY        reduce using rule 84 (literal1 -> NIGHT .)
    DIVISION        reduce using rule 84 (literal1 -> NIGHT .)
    MODULO          reduce using rule 84 (literal1 -> NIGHT .)
    EXPONENT        reduce using rule 84 (literal1 -> NIGHT .)
    GT              reduce using rule 84 (literal1 -> NIGHT .)
    LT              reduce using rule 84 (literal1 -> NIGHT .)
    EQ_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    GT_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    LT_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    NOT_EQ          reduce using rule 84 (literal1 -> NIGHT .)
    AND             reduce using rule 84 (literal1 -> NIGHT .)
    OR              reduce using rule 84 (literal1 -> NIGHT .)
    COMMA           reduce using rule 84 (literal1 -> NIGHT .)
    NEWLINE         reduce using rule 84 (literal1 -> NIGHT .)
    RBRACKET        reduce using rule 84 (literal1 -> NIGHT .)
    RPAREN          reduce using rule 84 (literal1 -> NIGHT .)


state 58

    (85) literal1 -> STR_LIT .

    PLUS            reduce using rule 85 (literal1 -> STR_LIT .)
    MINUS           reduce using rule 85 (literal1 -> STR_LIT .)
    MULTIPLY        reduce using rule 85 (literal1 -> STR_LIT .)
    DIVISION        reduce using rule 85 (literal1 -> STR_LIT .)
    MODULO          reduce using rule 85 (literal1 -> STR_LIT .)
    EXPONENT        reduce using rule 85 (literal1 -> STR_LIT .)
    GT              reduce using rule 85 (literal1 -> STR_LIT .)
    LT              reduce using rule 85 (literal1 -> STR_LIT .)
    EQ_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    GT_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    LT_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    NOT_EQ          reduce using rule 85 (literal1 -> STR_LIT .)
    AND             reduce using rule 85 (literal1 -> STR_LIT .)
    OR              reduce using rule 85 (literal1 -> STR_LIT .)
    COMMA           reduce using rule 85 (literal1 -> STR_LIT .)
    NEWLINE         reduce using rule 85 (literal1 -> STR_LIT .)
    RBRACKET        reduce using rule 85 (literal1 -> STR_LIT .)
    RPAREN          reduce using rule 85 (literal1 -> STR_LIT .)


state 59

    (11) var_statement -> data_type IDENT list_dec .

    COMMA           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    EQ              reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    NEWLINE         reduce using rule 11 (var_statement -> data_type IDENT list_dec .)


state 60

    (12) list_dec -> empty .

    COMMA           reduce using rule 12 (list_dec -> empty .)
    EQ              reduce using rule 12 (list_dec -> empty .)
    NEWLINE         reduce using rule 12 (list_dec -> empty .)


state 61

    (13) list_dec -> LBRACKET . RBRACKET _2d_list

    RBRACKET        shift and go to state 110


state 62

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline . main_function unli_newline GHOST
    (6) main_function -> . MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    MAIN_CASPER     shift and go to state 112

    main_function                  shift and go to state 111

state 63

    (87) function_statements -> ret_type FUNCTION_NAME . LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    LPAREN          shift and go to state 113


state 64

    (17) global_statement_tail -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 17 (global_statement_tail -> COMMA IDENT global_statement_tail .)


state 65

    (18) global_statement_tail -> EQ global_value global_statement_tail2 .

    NEWLINE         reduce using rule 18 (global_statement_tail -> EQ global_value global_statement_tail2 .)


state 66

    (19) global_statement_tail2 -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 114


state 67

    (20) global_statement_tail2 -> empty .

    NEWLINE         reduce using rule 20 (global_statement_tail2 -> empty .)


state 68

    (32) expression -> factor factor_tail .

    COMMA           reduce using rule 32 (expression -> factor factor_tail .)
    NEWLINE         reduce using rule 32 (expression -> factor factor_tail .)


state 69

    (64) factor_tail -> PLUS . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 115
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 70

    (65) factor_tail -> MINUS . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 116
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 71

    (66) factor_tail -> MULTIPLY . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 117
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 72

    (67) factor_tail -> DIVISION . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 118
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 73

    (68) factor_tail -> MODULO . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 119
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 74

    (69) factor_tail -> EXPONENT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 120
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 75

    (70) factor_tail -> GT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 121
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 76

    (71) factor_tail -> LT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 122
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 77

    (72) factor_tail -> EQ_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 123
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 78

    (73) factor_tail -> GT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 124
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 79

    (74) factor_tail -> LT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 125
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 80

    (75) factor_tail -> NOT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 126
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 81

    (76) factor_tail -> AND . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 127
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 82

    (77) factor_tail -> OR . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 128
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 83

    (78) factor_tail -> empty .

    COMMA           reduce using rule 78 (factor_tail -> empty .)
    NEWLINE         reduce using rule 78 (factor_tail -> empty .)


state 84

    (23) list_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 129


state 85

    (24) list_element -> literal . element_tail
    (25) element_tail -> . COMMA list_element
    (26) element_tail -> . empty
    (434) empty -> .

    COMMA           shift and go to state 131
    RBRACKET        reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    element_tail                   shift and go to state 130
    empty                          shift and go to state 132

state 86

    (79) literal -> literal1 .

    COMMA           reduce using rule 79 (literal -> literal1 .)
    RBRACKET        reduce using rule 79 (literal -> literal1 .)
    RPAREN          reduce using rule 79 (literal -> literal1 .)


state 87

    (80) literal -> literal2 .

    COMMA           reduce using rule 80 (literal -> literal2 .)
    RBRACKET        reduce using rule 80 (literal -> literal2 .)
    RPAREN          reduce using rule 80 (literal -> literal2 .)


state 88

    (86) literal2 -> CHR_LIT .

    COMMA           reduce using rule 86 (literal2 -> CHR_LIT .)
    RBRACKET        reduce using rule 86 (literal2 -> CHR_LIT .)
    RPAREN          reduce using rule 86 (literal2 -> CHR_LIT .)


state 89

    (33) factor -> var_call postfix .

    PLUS            reduce using rule 33 (factor -> var_call postfix .)
    MINUS           reduce using rule 33 (factor -> var_call postfix .)
    MULTIPLY        reduce using rule 33 (factor -> var_call postfix .)
    DIVISION        reduce using rule 33 (factor -> var_call postfix .)
    MODULO          reduce using rule 33 (factor -> var_call postfix .)
    EXPONENT        reduce using rule 33 (factor -> var_call postfix .)
    GT              reduce using rule 33 (factor -> var_call postfix .)
    LT              reduce using rule 33 (factor -> var_call postfix .)
    EQ_EQ           reduce using rule 33 (factor -> var_call postfix .)
    GT_EQ           reduce using rule 33 (factor -> var_call postfix .)
    LT_EQ           reduce using rule 33 (factor -> var_call postfix .)
    NOT_EQ          reduce using rule 33 (factor -> var_call postfix .)
    AND             reduce using rule 33 (factor -> var_call postfix .)
    OR              reduce using rule 33 (factor -> var_call postfix .)
    COMMA           reduce using rule 33 (factor -> var_call postfix .)
    NEWLINE         reduce using rule 33 (factor -> var_call postfix .)


state 90

    (369) postfix -> empty .

    PLUS            reduce using rule 369 (postfix -> empty .)
    MINUS           reduce using rule 369 (postfix -> empty .)
    MULTIPLY        reduce using rule 369 (postfix -> empty .)
    DIVISION        reduce using rule 369 (postfix -> empty .)
    MODULO          reduce using rule 369 (postfix -> empty .)
    EXPONENT        reduce using rule 369 (postfix -> empty .)
    GT              reduce using rule 369 (postfix -> empty .)
    LT              reduce using rule 369 (postfix -> empty .)
    EQ_EQ           reduce using rule 369 (postfix -> empty .)
    GT_EQ           reduce using rule 369 (postfix -> empty .)
    LT_EQ           reduce using rule 369 (postfix -> empty .)
    NOT_EQ          reduce using rule 369 (postfix -> empty .)
    AND             reduce using rule 369 (postfix -> empty .)
    OR              reduce using rule 369 (postfix -> empty .)
    COMMA           reduce using rule 369 (postfix -> empty .)
    NEWLINE         reduce using rule 369 (postfix -> empty .)
    RPAREN          reduce using rule 369 (postfix -> empty .)
    RBRACE          reduce using rule 369 (postfix -> empty .)
    SEMICOLON       reduce using rule 369 (postfix -> empty .)
    COLON           reduce using rule 369 (postfix -> empty .)


state 91

    (370) postfix -> postfix_op .

    PLUS            reduce using rule 370 (postfix -> postfix_op .)
    MINUS           reduce using rule 370 (postfix -> postfix_op .)
    MULTIPLY        reduce using rule 370 (postfix -> postfix_op .)
    DIVISION        reduce using rule 370 (postfix -> postfix_op .)
    MODULO          reduce using rule 370 (postfix -> postfix_op .)
    EXPONENT        reduce using rule 370 (postfix -> postfix_op .)
    GT              reduce using rule 370 (postfix -> postfix_op .)
    LT              reduce using rule 370 (postfix -> postfix_op .)
    EQ_EQ           reduce using rule 370 (postfix -> postfix_op .)
    GT_EQ           reduce using rule 370 (postfix -> postfix_op .)
    LT_EQ           reduce using rule 370 (postfix -> postfix_op .)
    NOT_EQ          reduce using rule 370 (postfix -> postfix_op .)
    AND             reduce using rule 370 (postfix -> postfix_op .)
    OR              reduce using rule 370 (postfix -> postfix_op .)
    COMMA           reduce using rule 370 (postfix -> postfix_op .)
    NEWLINE         reduce using rule 370 (postfix -> postfix_op .)
    RPAREN          reduce using rule 370 (postfix -> postfix_op .)
    RBRACE          reduce using rule 370 (postfix -> postfix_op .)
    SEMICOLON       reduce using rule 370 (postfix -> postfix_op .)
    COLON           reduce using rule 370 (postfix -> postfix_op .)


state 92

    (333) postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    RBRACE          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    SEMICOLON       reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    COLON           reduce using rule 333 (postfix_op -> PLUS_PLUS .)


state 93

    (334) postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    RBRACE          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    SEMICOLON       reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    COLON           reduce using rule 334 (postfix_op -> MINUS_MINUS .)


state 94

    (35) factor -> TILDE INT_LIT .

    PLUS            reduce using rule 35 (factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 35 (factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 35 (factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 35 (factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 35 (factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 35 (factor -> TILDE INT_LIT .)
    GT              reduce using rule 35 (factor -> TILDE INT_LIT .)
    LT              reduce using rule 35 (factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 35 (factor -> TILDE INT_LIT .)
    AND             reduce using rule 35 (factor -> TILDE INT_LIT .)
    OR              reduce using rule 35 (factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 35 (factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 35 (factor -> TILDE INT_LIT .)


state 95

    (36) factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 36 (factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    GT              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    LT              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 36 (factor -> TILDE FLT_LIT .)
    AND             reduce using rule 36 (factor -> TILDE FLT_LIT .)
    OR              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 36 (factor -> TILDE FLT_LIT .)


state 96

    (43) factor_expression_factor -> LPAREN . factor_expression RPAREN
    (38) factor_expression -> . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression              shift and go to state 133
    factor_expression_factor       shift and go to state 98
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 97

    (37) factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 134


state 98

    (38) factor_expression -> factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 135
    empty                          shift and go to state 150

state 99

    (39) factor_expression_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 151
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 100

    (40) factor_expression_factor -> factor_expression1 .

    PLUS            reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MINUS           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MULTIPLY        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    DIVISION        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MODULO          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    EXPONENT        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    GT              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    LT              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    EQ_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    GT_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    LT_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    NOT_EQ          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    AND             reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    OR              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    RPAREN          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)


state 101

    (41) factor_expression_factor -> TILDE . INT_LIT
    (42) factor_expression_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 152
    FLT_LIT         shift and go to state 153


state 102

    (59) factor_expression1 -> INT_LIT .

    PLUS            reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MINUS           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MULTIPLY        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    DIVISION        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MODULO          reduce using rule 59 (factor_expression1 -> INT_LIT .)
    EXPONENT        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    GT              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    LT              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    EQ_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    GT_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    LT_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    NOT_EQ          reduce using rule 59 (factor_expression1 -> INT_LIT .)
    AND             reduce using rule 59 (factor_expression1 -> INT_LIT .)
    OR              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    RPAREN          reduce using rule 59 (factor_expression1 -> INT_LIT .)


state 103

    (60) factor_expression1 -> FLT_LIT .

    PLUS            reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MINUS           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    DIVISION        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MODULO          reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    EXPONENT        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    GT              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    LT              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    GT_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    LT_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    AND             reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    OR              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    RPAREN          reduce using rule 60 (factor_expression1 -> FLT_LIT .)


state 104

    (61) factor_expression1 -> DAY .

    PLUS            reduce using rule 61 (factor_expression1 -> DAY .)
    MINUS           reduce using rule 61 (factor_expression1 -> DAY .)
    MULTIPLY        reduce using rule 61 (factor_expression1 -> DAY .)
    DIVISION        reduce using rule 61 (factor_expression1 -> DAY .)
    MODULO          reduce using rule 61 (factor_expression1 -> DAY .)
    EXPONENT        reduce using rule 61 (factor_expression1 -> DAY .)
    GT              reduce using rule 61 (factor_expression1 -> DAY .)
    LT              reduce using rule 61 (factor_expression1 -> DAY .)
    EQ_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    GT_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    LT_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    NOT_EQ          reduce using rule 61 (factor_expression1 -> DAY .)
    AND             reduce using rule 61 (factor_expression1 -> DAY .)
    OR              reduce using rule 61 (factor_expression1 -> DAY .)
    RPAREN          reduce using rule 61 (factor_expression1 -> DAY .)


state 105

    (62) factor_expression1 -> NIGHT .

    PLUS            reduce using rule 62 (factor_expression1 -> NIGHT .)
    MINUS           reduce using rule 62 (factor_expression1 -> NIGHT .)
    MULTIPLY        reduce using rule 62 (factor_expression1 -> NIGHT .)
    DIVISION        reduce using rule 62 (factor_expression1 -> NIGHT .)
    MODULO          reduce using rule 62 (factor_expression1 -> NIGHT .)
    EXPONENT        reduce using rule 62 (factor_expression1 -> NIGHT .)
    GT              reduce using rule 62 (factor_expression1 -> NIGHT .)
    LT              reduce using rule 62 (factor_expression1 -> NIGHT .)
    EQ_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    GT_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    LT_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    NOT_EQ          reduce using rule 62 (factor_expression1 -> NIGHT .)
    AND             reduce using rule 62 (factor_expression1 -> NIGHT .)
    OR              reduce using rule 62 (factor_expression1 -> NIGHT .)
    RPAREN          reduce using rule 62 (factor_expression1 -> NIGHT .)


state 106

    (63) factor_expression1 -> STR_LIT .

    PLUS            reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MINUS           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MULTIPLY        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    DIVISION        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MODULO          reduce using rule 63 (factor_expression1 -> STR_LIT .)
    EXPONENT        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    GT              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    LT              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    EQ_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    GT_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    LT_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    NOT_EQ          reduce using rule 63 (factor_expression1 -> STR_LIT .)
    AND             reduce using rule 63 (factor_expression1 -> STR_LIT .)
    OR              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    RPAREN          reduce using rule 63 (factor_expression1 -> STR_LIT .)


state 107

    (362) var_call -> IDENT list_index .

    PLUS_PLUS       reduce using rule 362 (var_call -> IDENT list_index .)
    MINUS_MINUS     reduce using rule 362 (var_call -> IDENT list_index .)
    PLUS            reduce using rule 362 (var_call -> IDENT list_index .)
    MINUS           reduce using rule 362 (var_call -> IDENT list_index .)
    MULTIPLY        reduce using rule 362 (var_call -> IDENT list_index .)
    DIVISION        reduce using rule 362 (var_call -> IDENT list_index .)
    MODULO          reduce using rule 362 (var_call -> IDENT list_index .)
    EXPONENT        reduce using rule 362 (var_call -> IDENT list_index .)
    GT              reduce using rule 362 (var_call -> IDENT list_index .)
    LT              reduce using rule 362 (var_call -> IDENT list_index .)
    EQ_EQ           reduce using rule 362 (var_call -> IDENT list_index .)
    GT_EQ           reduce using rule 362 (var_call -> IDENT list_index .)
    LT_EQ           reduce using rule 362 (var_call -> IDENT list_index .)
    NOT_EQ          reduce using rule 362 (var_call -> IDENT list_index .)
    AND             reduce using rule 362 (var_call -> IDENT list_index .)
    OR              reduce using rule 362 (var_call -> IDENT list_index .)
    COMMA           reduce using rule 362 (var_call -> IDENT list_index .)
    NEWLINE         reduce using rule 362 (var_call -> IDENT list_index .)
    RPAREN          reduce using rule 362 (var_call -> IDENT list_index .)
    RBRACE          reduce using rule 362 (var_call -> IDENT list_index .)
    SEMICOLON       reduce using rule 362 (var_call -> IDENT list_index .)
    COLON           reduce using rule 362 (var_call -> IDENT list_index .)
    PLUS_EQ         reduce using rule 362 (var_call -> IDENT list_index .)
    MINUS_EQ        reduce using rule 362 (var_call -> IDENT list_index .)
    MUL_EQ          reduce using rule 362 (var_call -> IDENT list_index .)
    DIV_EQ          reduce using rule 362 (var_call -> IDENT list_index .)
    MOD_EQ          reduce using rule 362 (var_call -> IDENT list_index .)


state 108

    (363) list_index -> LBRACKET . index RBRACKET list_index2
    (367) index -> . INT_LIT
    (368) index -> . IDENT

    INT_LIT         shift and go to state 155
    IDENT           shift and go to state 156

    index                          shift and go to state 154

state 109

    (364) list_index -> empty .

    PLUS_PLUS       reduce using rule 364 (list_index -> empty .)
    MINUS_MINUS     reduce using rule 364 (list_index -> empty .)
    PLUS            reduce using rule 364 (list_index -> empty .)
    MINUS           reduce using rule 364 (list_index -> empty .)
    MULTIPLY        reduce using rule 364 (list_index -> empty .)
    DIVISION        reduce using rule 364 (list_index -> empty .)
    MODULO          reduce using rule 364 (list_index -> empty .)
    EXPONENT        reduce using rule 364 (list_index -> empty .)
    GT              reduce using rule 364 (list_index -> empty .)
    LT              reduce using rule 364 (list_index -> empty .)
    EQ_EQ           reduce using rule 364 (list_index -> empty .)
    GT_EQ           reduce using rule 364 (list_index -> empty .)
    LT_EQ           reduce using rule 364 (list_index -> empty .)
    NOT_EQ          reduce using rule 364 (list_index -> empty .)
    AND             reduce using rule 364 (list_index -> empty .)
    OR              reduce using rule 364 (list_index -> empty .)
    COMMA           reduce using rule 364 (list_index -> empty .)
    NEWLINE         reduce using rule 364 (list_index -> empty .)
    RPAREN          reduce using rule 364 (list_index -> empty .)
    RBRACE          reduce using rule 364 (list_index -> empty .)
    SEMICOLON       reduce using rule 364 (list_index -> empty .)
    COLON           reduce using rule 364 (list_index -> empty .)
    PLUS_EQ         reduce using rule 364 (list_index -> empty .)
    MINUS_EQ        reduce using rule 364 (list_index -> empty .)
    MUL_EQ          reduce using rule 364 (list_index -> empty .)
    DIV_EQ          reduce using rule 364 (list_index -> empty .)
    MOD_EQ          reduce using rule 364 (list_index -> empty .)


state 110

    (13) list_dec -> LBRACKET RBRACKET . _2d_list
    (14) _2d_list -> . empty
    (15) _2d_list -> . LBRACKET RBRACKET
    (434) empty -> .

    LBRACKET        shift and go to state 157
    COMMA           reduce using rule 434 (empty -> .)
    EQ              reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    _2d_list                       shift and go to state 158
    empty                          shift and go to state 159

state 111

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function . unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 160

state 112

    (6) main_function -> MAIN_CASPER . LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 161


state 113

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN . parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (103) parameters -> . data_type IDENT parameters_tail
    (104) parameters -> . empty
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (434) empty -> .

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14
    RPAREN          reduce using rule 434 (empty -> .)

    parameters                     shift and go to state 162
    data_type                      shift and go to state 163
    empty                          shift and go to state 164

state 114

    (19) global_statement_tail2 -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (434) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 434 (empty -> .)

    global_statement_tail          shift and go to state 165
    empty                          shift and go to state 21

state 115

    (64) factor_tail -> PLUS factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 166
    empty                          shift and go to state 83

state 116

    (65) factor_tail -> MINUS factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 167
    empty                          shift and go to state 83

state 117

    (66) factor_tail -> MULTIPLY factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 168
    empty                          shift and go to state 83

state 118

    (67) factor_tail -> DIVISION factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 169
    empty                          shift and go to state 83

state 119

    (68) factor_tail -> MODULO factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 170
    empty                          shift and go to state 83

state 120

    (69) factor_tail -> EXPONENT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 171
    empty                          shift and go to state 83

state 121

    (70) factor_tail -> GT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 172
    empty                          shift and go to state 83

state 122

    (71) factor_tail -> LT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 173
    empty                          shift and go to state 83

state 123

    (72) factor_tail -> EQ_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 174
    empty                          shift and go to state 83

state 124

    (73) factor_tail -> GT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 175
    empty                          shift and go to state 83

state 125

    (74) factor_tail -> LT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 176
    empty                          shift and go to state 83

state 126

    (75) factor_tail -> NOT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 177
    empty                          shift and go to state 83

state 127

    (76) factor_tail -> AND factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 178
    empty                          shift and go to state 83

state 128

    (77) factor_tail -> OR factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    factor_tail                    shift and go to state 179
    empty                          shift and go to state 83

state 129

    (23) list_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    NEWLINE         reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)


state 130

    (24) list_element -> literal element_tail .

    RBRACKET        reduce using rule 24 (list_element -> literal element_tail .)
    RPAREN          reduce using rule 24 (list_element -> literal element_tail .)


state 131

    (25) element_tail -> COMMA . list_element
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 180
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 132

    (26) element_tail -> empty .

    RBRACKET        reduce using rule 26 (element_tail -> empty .)
    RPAREN          reduce using rule 26 (element_tail -> empty .)


state 133

    (43) factor_expression_factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 181


state 134

    (37) factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    COMMA           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    NEWLINE         reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)


state 135

    (38) factor_expression -> factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 38 (factor_expression -> factor_expression_factor factor_expression_tail .)


state 136

    (44) factor_expression_tail -> PLUS . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 182
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 137

    (45) factor_expression_tail -> MINUS . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 183
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 138

    (46) factor_expression_tail -> MULTIPLY . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 184
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 139

    (47) factor_expression_tail -> DIVISION . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 185
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 140

    (48) factor_expression_tail -> MODULO . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 186
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 141

    (49) factor_expression_tail -> EXPONENT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 187
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 142

    (50) factor_expression_tail -> GT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 188
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 143

    (51) factor_expression_tail -> LT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 189
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 144

    (52) factor_expression_tail -> EQ_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 190
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 145

    (53) factor_expression_tail -> GT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 191
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 146

    (54) factor_expression_tail -> LT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 192
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 147

    (55) factor_expression_tail -> NOT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 193
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 148

    (56) factor_expression_tail -> AND . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 194
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 149

    (57) factor_expression_tail -> OR . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (362) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 195
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 150

    (58) factor_expression_tail -> empty .

    RPAREN          reduce using rule 58 (factor_expression_tail -> empty .)


state 151

    (39) factor_expression_factor -> var_call postfix .

    PLUS            reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MINUS           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    DIVISION        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MODULO          reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    EXPONENT        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    GT              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    LT              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    GT_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    LT_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    AND             reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    OR              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    RPAREN          reduce using rule 39 (factor_expression_factor -> var_call postfix .)


state 152

    (41) factor_expression_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    GT              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    LT              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    AND             reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    OR              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)


state 153

    (42) factor_expression_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)


state 154

    (363) list_index -> LBRACKET index . RBRACKET list_index2

    RBRACKET        shift and go to state 196


state 155

    (367) index -> INT_LIT .

    RBRACKET        reduce using rule 367 (index -> INT_LIT .)


state 156

    (368) index -> IDENT .

    RBRACKET        reduce using rule 368 (index -> IDENT .)


state 157

    (15) _2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 197


state 158

    (13) list_dec -> LBRACKET RBRACKET _2d_list .

    COMMA           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    EQ              reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    NEWLINE         reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)


state 159

    (14) _2d_list -> empty .

    COMMA           reduce using rule 14 (_2d_list -> empty .)
    EQ              reduce using rule 14 (_2d_list -> empty .)
    NEWLINE         reduce using rule 14 (_2d_list -> empty .)


state 160

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline . GHOST

    GHOST           shift and go to state 198


state 161

    (6) main_function -> MAIN_CASPER LPAREN . RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 199


state 162

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters . RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    RPAREN          shift and go to state 200


state 163

    (103) parameters -> data_type . IDENT parameters_tail

    IDENT           shift and go to state 201


state 164

    (104) parameters -> empty .

    RPAREN          reduce using rule 104 (parameters -> empty .)


state 165

    (19) global_statement_tail2 -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 19 (global_statement_tail2 -> COMMA IDENT global_statement_tail .)


state 166

    (64) factor_tail -> PLUS factor factor_tail .

    COMMA           reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)
    NEWLINE         reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)


state 167

    (65) factor_tail -> MINUS factor factor_tail .

    COMMA           reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)
    NEWLINE         reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)


state 168

    (66) factor_tail -> MULTIPLY factor factor_tail .

    COMMA           reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)
    NEWLINE         reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)


state 169

    (67) factor_tail -> DIVISION factor factor_tail .

    COMMA           reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)
    NEWLINE         reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)


state 170

    (68) factor_tail -> MODULO factor factor_tail .

    COMMA           reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)
    NEWLINE         reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)


state 171

    (69) factor_tail -> EXPONENT factor factor_tail .

    COMMA           reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)
    NEWLINE         reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)


state 172

    (70) factor_tail -> GT factor factor_tail .

    COMMA           reduce using rule 70 (factor_tail -> GT factor factor_tail .)
    NEWLINE         reduce using rule 70 (factor_tail -> GT factor factor_tail .)


state 173

    (71) factor_tail -> LT factor factor_tail .

    COMMA           reduce using rule 71 (factor_tail -> LT factor factor_tail .)
    NEWLINE         reduce using rule 71 (factor_tail -> LT factor factor_tail .)


state 174

    (72) factor_tail -> EQ_EQ factor factor_tail .

    COMMA           reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)
    NEWLINE         reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)


state 175

    (73) factor_tail -> GT_EQ factor factor_tail .

    COMMA           reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)


state 176

    (74) factor_tail -> LT_EQ factor factor_tail .

    COMMA           reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)


state 177

    (75) factor_tail -> NOT_EQ factor factor_tail .

    COMMA           reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)


state 178

    (76) factor_tail -> AND factor factor_tail .

    COMMA           reduce using rule 76 (factor_tail -> AND factor factor_tail .)
    NEWLINE         reduce using rule 76 (factor_tail -> AND factor factor_tail .)


state 179

    (77) factor_tail -> OR factor factor_tail .

    COMMA           reduce using rule 77 (factor_tail -> OR factor factor_tail .)
    NEWLINE         reduce using rule 77 (factor_tail -> OR factor factor_tail .)


state 180

    (25) element_tail -> COMMA list_element .

    RBRACKET        reduce using rule 25 (element_tail -> COMMA list_element .)
    RPAREN          reduce using rule 25 (element_tail -> COMMA list_element .)


state 181

    (43) factor_expression_factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    RPAREN          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)


state 182

    (44) factor_expression_tail -> PLUS factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 202
    empty                          shift and go to state 150

state 183

    (45) factor_expression_tail -> MINUS factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 203
    empty                          shift and go to state 150

state 184

    (46) factor_expression_tail -> MULTIPLY factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 204
    empty                          shift and go to state 150

state 185

    (47) factor_expression_tail -> DIVISION factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 205
    empty                          shift and go to state 150

state 186

    (48) factor_expression_tail -> MODULO factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 206
    empty                          shift and go to state 150

state 187

    (49) factor_expression_tail -> EXPONENT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 207
    empty                          shift and go to state 150

state 188

    (50) factor_expression_tail -> GT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 208
    empty                          shift and go to state 150

state 189

    (51) factor_expression_tail -> LT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 209
    empty                          shift and go to state 150

state 190

    (52) factor_expression_tail -> EQ_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 210
    empty                          shift and go to state 150

state 191

    (53) factor_expression_tail -> GT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 211
    empty                          shift and go to state 150

state 192

    (54) factor_expression_tail -> LT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 212
    empty                          shift and go to state 150

state 193

    (55) factor_expression_tail -> NOT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 213
    empty                          shift and go to state 150

state 194

    (56) factor_expression_tail -> AND factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 214
    empty                          shift and go to state 150

state 195

    (57) factor_expression_tail -> OR factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 434 (empty -> .)

    factor_expression_tail         shift and go to state 215
    empty                          shift and go to state 150

state 196

    (363) list_index -> LBRACKET index RBRACKET . list_index2
    (365) list_index2 -> . LBRACKET index RBRACKET
    (366) list_index2 -> . empty
    (434) empty -> .

    LBRACKET        shift and go to state 216
    PLUS_PLUS       reduce using rule 434 (empty -> .)
    MINUS_MINUS     reduce using rule 434 (empty -> .)
    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SEMICOLON       reduce using rule 434 (empty -> .)
    COLON           reduce using rule 434 (empty -> .)
    PLUS_EQ         reduce using rule 434 (empty -> .)
    MINUS_EQ        reduce using rule 434 (empty -> .)
    MUL_EQ          reduce using rule 434 (empty -> .)
    DIV_EQ          reduce using rule 434 (empty -> .)
    MOD_EQ          reduce using rule 434 (empty -> .)

    list_index2                    shift and go to state 217
    empty                          shift and go to state 218

state 197

    (15) _2d_list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)


state 198

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .

    $end            reduce using rule 1 (program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .)


state 199

    (6) main_function -> MAIN_CASPER LPAREN RPAREN . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 219
    empty                          shift and go to state 17

state 200

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN . LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    LBRACE          shift and go to state 220


state 201

    (103) parameters -> data_type IDENT . parameters_tail
    (105) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (106) parameters_tail -> . empty
    (434) empty -> .

    COMMA           shift and go to state 222
    RPAREN          reduce using rule 434 (empty -> .)

    parameters_tail                shift and go to state 221
    empty                          shift and go to state 223

state 202

    (44) factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 44 (factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .)


state 203

    (45) factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 45 (factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .)


state 204

    (46) factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 46 (factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .)


state 205

    (47) factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 47 (factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .)


state 206

    (48) factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 48 (factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .)


state 207

    (49) factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 49 (factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .)


state 208

    (50) factor_expression_tail -> GT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 50 (factor_expression_tail -> GT factor_expression_factor factor_expression_tail .)


state 209

    (51) factor_expression_tail -> LT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 51 (factor_expression_tail -> LT factor_expression_factor factor_expression_tail .)


state 210

    (52) factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 52 (factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .)


state 211

    (53) factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 53 (factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .)


state 212

    (54) factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 54 (factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .)


state 213

    (55) factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 55 (factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .)


state 214

    (56) factor_expression_tail -> AND factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 56 (factor_expression_tail -> AND factor_expression_factor factor_expression_tail .)


state 215

    (57) factor_expression_tail -> OR factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 57 (factor_expression_tail -> OR factor_expression_factor factor_expression_tail .)


state 216

    (365) list_index2 -> LBRACKET . index RBRACKET
    (367) index -> . INT_LIT
    (368) index -> . IDENT

    INT_LIT         shift and go to state 155
    IDENT           shift and go to state 156

    index                          shift and go to state 224

state 217

    (363) list_index -> LBRACKET index RBRACKET list_index2 .

    PLUS_PLUS       reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_MINUS     reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS            reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS           reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MULTIPLY        reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIVISION        reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MODULO          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EXPONENT        reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT              reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT              reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EQ_EQ           reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT_EQ           reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT_EQ           reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NOT_EQ          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    AND             reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    OR              reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COMMA           reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NEWLINE         reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RPAREN          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RBRACE          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SEMICOLON       reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COLON           reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS_EQ         reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_EQ        reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MUL_EQ          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIV_EQ          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MOD_EQ          reduce using rule 363 (list_index -> LBRACKET index RBRACKET list_index2 .)


state 218

    (366) list_index2 -> empty .

    PLUS_PLUS       reduce using rule 366 (list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 366 (list_index2 -> empty .)
    PLUS            reduce using rule 366 (list_index2 -> empty .)
    MINUS           reduce using rule 366 (list_index2 -> empty .)
    MULTIPLY        reduce using rule 366 (list_index2 -> empty .)
    DIVISION        reduce using rule 366 (list_index2 -> empty .)
    MODULO          reduce using rule 366 (list_index2 -> empty .)
    EXPONENT        reduce using rule 366 (list_index2 -> empty .)
    GT              reduce using rule 366 (list_index2 -> empty .)
    LT              reduce using rule 366 (list_index2 -> empty .)
    EQ_EQ           reduce using rule 366 (list_index2 -> empty .)
    GT_EQ           reduce using rule 366 (list_index2 -> empty .)
    LT_EQ           reduce using rule 366 (list_index2 -> empty .)
    NOT_EQ          reduce using rule 366 (list_index2 -> empty .)
    AND             reduce using rule 366 (list_index2 -> empty .)
    OR              reduce using rule 366 (list_index2 -> empty .)
    COMMA           reduce using rule 366 (list_index2 -> empty .)
    NEWLINE         reduce using rule 366 (list_index2 -> empty .)
    RPAREN          reduce using rule 366 (list_index2 -> empty .)
    RBRACE          reduce using rule 366 (list_index2 -> empty .)
    SEMICOLON       reduce using rule 366 (list_index2 -> empty .)
    COLON           reduce using rule 366 (list_index2 -> empty .)
    PLUS_EQ         reduce using rule 366 (list_index2 -> empty .)
    MINUS_EQ        reduce using rule 366 (list_index2 -> empty .)
    MUL_EQ          reduce using rule 366 (list_index2 -> empty .)
    DIV_EQ          reduce using rule 366 (list_index2 -> empty .)
    MOD_EQ          reduce using rule 366 (list_index2 -> empty .)


state 219

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 225


state 220

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE . maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 434 (empty -> .)
    FLT             reduce using rule 434 (empty -> .)
    BLN             reduce using rule 434 (empty -> .)
    CHR             reduce using rule 434 (empty -> .)
    STR             reduce using rule 434 (empty -> .)
    REVIVE          reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 226
    empty                          shift and go to state 17

state 221

    (103) parameters -> data_type IDENT parameters_tail .

    RPAREN          reduce using rule 103 (parameters -> data_type IDENT parameters_tail .)


state 222

    (105) parameters_tail -> COMMA . data_type IDENT parameters_tail
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    data_type                      shift and go to state 227

state 223

    (106) parameters_tail -> empty .

    RPAREN          reduce using rule 106 (parameters_tail -> empty .)


state 224

    (365) list_index2 -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 228


state 225

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 434 (empty -> .)
    FLT             reduce using rule 434 (empty -> .)
    BLN             reduce using rule 434 (empty -> .)
    CHR             reduce using rule 434 (empty -> .)
    STR             reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 229
    empty                          shift and go to state 17

state 226

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline . statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 230
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 227

    (105) parameters_tail -> COMMA data_type . IDENT parameters_tail

    IDENT           shift and go to state 240


state 228

    (365) list_index2 -> LBRACKET index RBRACKET .

    PLUS_PLUS       reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS            reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MODULO          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    GT              reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    LT              reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    EQ_EQ           reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    AND             reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    OR              reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    NEWLINE         reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    RBRACE          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    COLON           reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS_EQ         reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 365 (list_index2 -> LBRACKET index RBRACKET .)


state 229

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 241
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 230

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements . revive maybe_newline RBRACE unli_newline function_statements_tail
    (107) revive -> . REVIVE revive_value
    (108) revive -> . empty
    (434) empty -> .

    REVIVE          shift and go to state 243
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive                         shift and go to state 242
    empty                          shift and go to state 244

state 231

    (142) statements -> empty .
    (152) local_dec -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 142 (statements -> empty .)
    REVIVE          reduce using rule 142 (statements -> empty .)
    NEWLINE         reduce using rule 142 (statements -> empty .)
    RBRACE          reduce using rule 142 (statements -> empty .)
    SHIFT           reduce using rule 142 (statements -> empty .)
    OTHERWISE       reduce using rule 142 (statements -> empty .)

  ! NEWLINE         [ reduce using rule 152 (local_dec -> empty .) ]


state 232

    (143) statements -> local_dec . unli_newline statements_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 245

state 233

    (151) local_dec -> local_var_statement . local_dec_tail
    (163) local_dec_tail -> . empty
    (164) local_dec_tail -> . COMMA IDENT local_dec_tail
    (165) local_dec_tail -> . EQ local_value local_dec_tail2
    (434) empty -> .

    COMMA           shift and go to state 248
    EQ              shift and go to state 249
    NEWLINE         reduce using rule 434 (empty -> .)

    local_dec_tail                 shift and go to state 246
    empty                          shift and go to state 247

state 234

    (153) local_var_statement -> local_data_type . IDENT local_list_dec

    IDENT           shift and go to state 250


state 235

    (154) local_data_type -> INT .

    IDENT           reduce using rule 154 (local_data_type -> INT .)


state 236

    (155) local_data_type -> FLT .

    IDENT           reduce using rule 155 (local_data_type -> FLT .)


state 237

    (156) local_data_type -> BLN .

    IDENT           reduce using rule 156 (local_data_type -> BLN .)


state 238

    (157) local_data_type -> CHR .

    IDENT           reduce using rule 157 (local_data_type -> CHR .)


state 239

    (158) local_data_type -> STR .

    IDENT           reduce using rule 158 (local_data_type -> STR .)


state 240

    (105) parameters_tail -> COMMA data_type IDENT . parameters_tail
    (105) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (106) parameters_tail -> . empty
    (434) empty -> .

    COMMA           shift and go to state 222
    RPAREN          reduce using rule 434 (empty -> .)

    parameters_tail                shift and go to state 251
    empty                          shift and go to state 223

state 241

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 252
    empty                          shift and go to state 17

state 242

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive . maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 253
    empty                          shift and go to state 17

state 243

    (107) revive -> REVIVE . revive_value
    (109) revive_value -> . revive_type_cast
    (110) revive_value -> . revive_expression
    (111) revive_value -> . function_call
    (138) revive_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (139) revive_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (140) revive_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (141) revive_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (112) revive_expression -> . revive_factor revive_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 258
    CONVERT_TO_FLT  shift and go to state 260
    CONVERT_TO_BLN  shift and go to state 261
    CONVERT_TO_STR  shift and go to state 262
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_value                   shift and go to state 254
    revive_type_cast               shift and go to state 255
    revive_expression              shift and go to state 256
    function_call                  shift and go to state 257
    revive_factor                  shift and go to state 263
    input_statement                shift and go to state 265
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 244

    (108) revive -> empty .

    NEWLINE         reduce using rule 108 (revive -> empty .)
    RBRACE          reduce using rule 108 (revive -> empty .)


state 245

    (143) statements -> local_dec unli_newline . statements_tail
    (144) statements_tail -> . switch_statement unli_newline statements
    (145) statements_tail -> . loop_statement unli_newline statements
    (146) statements_tail -> . function_call unli_newline statements
    (147) statements_tail -> . assignment_statement unli_newline statements
    (148) statements_tail -> . output_statement unli_newline statements
    (149) statements_tail -> . conditional_statement unli_newline statements
    (150) statements_tail -> . statements
    (232) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
    (269) loop_statement -> . for_loop
    (270) loop_statement -> . until_loop
    (271) loop_statement -> . repeat_until
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (346) assignment_statement -> . IDENT assign_tail
    (343) output_statement -> . DISPLAY value next_val
    (203) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (272) for_loop -> . FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (299) until_loop -> . UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
    (326) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    SWAP            shift and go to state 283
    FUNCTION_NAME   shift and go to state 264
    IDENT           shift and go to state 284
    DISPLAY         shift and go to state 288
    CHECK           shift and go to state 289
    FOR             shift and go to state 290
    UNTIL           shift and go to state 291
    REPEAT          shift and go to state 292
    INPUT           shift and go to state 271
    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    local_dec                      shift and go to state 232
    statements_tail                shift and go to state 275
    switch_statement               shift and go to state 276
    statements                     shift and go to state 277
    loop_statement                 shift and go to state 278
    function_call                  shift and go to state 279
    assignment_statement           shift and go to state 280
    output_statement               shift and go to state 281
    conditional_statement          shift and go to state 282
    for_loop                       shift and go to state 285
    until_loop                     shift and go to state 286
    repeat_until                   shift and go to state 287
    input_statement                shift and go to state 265
    empty                          shift and go to state 231
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 246

    (151) local_dec -> local_var_statement local_dec_tail .

    NEWLINE         reduce using rule 151 (local_dec -> local_var_statement local_dec_tail .)


state 247

    (163) local_dec_tail -> empty .

    NEWLINE         reduce using rule 163 (local_dec_tail -> empty .)


state 248

    (164) local_dec_tail -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 293


state 249

    (165) local_dec_tail -> EQ . local_value local_dec_tail2
    (168) local_value -> . local_value_value
    (169) local_value -> . list_value
    (170) local_value_value -> . local_type_cast
    (171) local_value_value -> . local_expression
    (172) local_value_value -> . function_call
    (23) list_value -> . LBRACKET list_element RBRACKET
    (199) local_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (200) local_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (201) local_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (202) local_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (173) local_expression -> . local_factor local_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    CONVERT_TO_INT  shift and go to state 300
    CONVERT_TO_FLT  shift and go to state 302
    CONVERT_TO_BLN  shift and go to state 303
    CONVERT_TO_STR  shift and go to state 304
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_value                    shift and go to state 294
    local_value_value              shift and go to state 295
    list_value                     shift and go to state 296
    local_type_cast                shift and go to state 297
    local_expression               shift and go to state 298
    function_call                  shift and go to state 299
    local_factor                   shift and go to state 305
    input_statement                shift and go to state 265
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 250

    (153) local_var_statement -> local_data_type IDENT . local_list_dec
    (159) local_list_dec -> . empty
    (160) local_list_dec -> . LBRACKET RBRACKET local_2d_list
    (434) empty -> .

    LBRACKET        shift and go to state 316
    COMMA           reduce using rule 434 (empty -> .)
    EQ              reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_list_dec                 shift and go to state 314
    empty                          shift and go to state 315

state 251

    (105) parameters_tail -> COMMA data_type IDENT parameters_tail .

    RPAREN          reduce using rule 105 (parameters_tail -> COMMA data_type IDENT parameters_tail .)


state 252

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 317


state 253

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline . RBRACE unli_newline function_statements_tail

    RBRACE          shift and go to state 318


state 254

    (107) revive -> REVIVE revive_value .

    NEWLINE         reduce using rule 107 (revive -> REVIVE revive_value .)
    RBRACE          reduce using rule 107 (revive -> REVIVE revive_value .)


state 255

    (109) revive_value -> revive_type_cast .

    NEWLINE         reduce using rule 109 (revive_value -> revive_type_cast .)
    RBRACE          reduce using rule 109 (revive_value -> revive_type_cast .)


state 256

    (110) revive_value -> revive_expression .

    NEWLINE         reduce using rule 110 (revive_value -> revive_expression .)
    RBRACE          reduce using rule 110 (revive_value -> revive_expression .)


state 257

    (111) revive_value -> function_call .

    NEWLINE         reduce using rule 111 (revive_value -> function_call .)
    RBRACE          reduce using rule 111 (revive_value -> function_call .)


state 258

    (138) revive_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 319


state 259

    (117) revive_factor -> LPAREN . revive_factor RPAREN
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 320
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 260

    (139) revive_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 321


state 261

    (140) revive_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 322


state 262

    (141) revive_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 323


state 263

    (112) revive_expression -> revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 324
    empty                          shift and go to state 339

state 264

    (335) function_call -> FUNCTION_NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 340


state 265

    (336) function_call -> input_statement .

    NEWLINE         reduce using rule 336 (function_call -> input_statement .)
    RBRACE          reduce using rule 336 (function_call -> input_statement .)
    COMMA           reduce using rule 336 (function_call -> input_statement .)
    COLON           reduce using rule 336 (function_call -> input_statement .)
    RPAREN          reduce using rule 336 (function_call -> input_statement .)


state 266

    (113) revive_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 341
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 267

    (114) revive_factor -> revive_factor1 .

    PLUS            reduce using rule 114 (revive_factor -> revive_factor1 .)
    MINUS           reduce using rule 114 (revive_factor -> revive_factor1 .)
    MULTIPLY        reduce using rule 114 (revive_factor -> revive_factor1 .)
    DIVISION        reduce using rule 114 (revive_factor -> revive_factor1 .)
    MODULO          reduce using rule 114 (revive_factor -> revive_factor1 .)
    EXPONENT        reduce using rule 114 (revive_factor -> revive_factor1 .)
    GT              reduce using rule 114 (revive_factor -> revive_factor1 .)
    LT              reduce using rule 114 (revive_factor -> revive_factor1 .)
    EQ_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    GT_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    LT_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    NOT_EQ          reduce using rule 114 (revive_factor -> revive_factor1 .)
    AND             reduce using rule 114 (revive_factor -> revive_factor1 .)
    OR              reduce using rule 114 (revive_factor -> revive_factor1 .)
    NEWLINE         reduce using rule 114 (revive_factor -> revive_factor1 .)
    RBRACE          reduce using rule 114 (revive_factor -> revive_factor1 .)
    RPAREN          reduce using rule 114 (revive_factor -> revive_factor1 .)


state 268

    (115) revive_factor -> TILDE . INT_LIT
    (116) revive_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 342
    FLT_LIT         shift and go to state 343


state 269

    (133) revive_factor1 -> INT_LIT .

    PLUS            reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MINUS           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MODULO          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    GT              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    LT              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    AND             reduce using rule 133 (revive_factor1 -> INT_LIT .)
    OR              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 133 (revive_factor1 -> INT_LIT .)
    RBRACE          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 133 (revive_factor1 -> INT_LIT .)


state 270

    (134) revive_factor1 -> FLT_LIT .

    PLUS            reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    GT              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    LT              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    AND             reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    OR              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    RBRACE          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 134 (revive_factor1 -> FLT_LIT .)


state 271

    (433) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 344


state 272

    (135) revive_factor1 -> DAY .

    PLUS            reduce using rule 135 (revive_factor1 -> DAY .)
    MINUS           reduce using rule 135 (revive_factor1 -> DAY .)
    MULTIPLY        reduce using rule 135 (revive_factor1 -> DAY .)
    DIVISION        reduce using rule 135 (revive_factor1 -> DAY .)
    MODULO          reduce using rule 135 (revive_factor1 -> DAY .)
    EXPONENT        reduce using rule 135 (revive_factor1 -> DAY .)
    GT              reduce using rule 135 (revive_factor1 -> DAY .)
    LT              reduce using rule 135 (revive_factor1 -> DAY .)
    EQ_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    GT_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    LT_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    NOT_EQ          reduce using rule 135 (revive_factor1 -> DAY .)
    AND             reduce using rule 135 (revive_factor1 -> DAY .)
    OR              reduce using rule 135 (revive_factor1 -> DAY .)
    NEWLINE         reduce using rule 135 (revive_factor1 -> DAY .)
    RBRACE          reduce using rule 135 (revive_factor1 -> DAY .)
    RPAREN          reduce using rule 135 (revive_factor1 -> DAY .)


state 273

    (136) revive_factor1 -> NIGHT .

    PLUS            reduce using rule 136 (revive_factor1 -> NIGHT .)
    MINUS           reduce using rule 136 (revive_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 136 (revive_factor1 -> NIGHT .)
    DIVISION        reduce using rule 136 (revive_factor1 -> NIGHT .)
    MODULO          reduce using rule 136 (revive_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 136 (revive_factor1 -> NIGHT .)
    GT              reduce using rule 136 (revive_factor1 -> NIGHT .)
    LT              reduce using rule 136 (revive_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 136 (revive_factor1 -> NIGHT .)
    AND             reduce using rule 136 (revive_factor1 -> NIGHT .)
    OR              reduce using rule 136 (revive_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 136 (revive_factor1 -> NIGHT .)
    RBRACE          reduce using rule 136 (revive_factor1 -> NIGHT .)
    RPAREN          reduce using rule 136 (revive_factor1 -> NIGHT .)


state 274

    (137) revive_factor1 -> STR_LIT .

    PLUS            reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MINUS           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MODULO          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    GT              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    LT              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    AND             reduce using rule 137 (revive_factor1 -> STR_LIT .)
    OR              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 137 (revive_factor1 -> STR_LIT .)
    RBRACE          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 137 (revive_factor1 -> STR_LIT .)


state 275

    (143) statements -> local_dec unli_newline statements_tail .

    REVIVE          reduce using rule 143 (statements -> local_dec unli_newline statements_tail .)
    NEWLINE         reduce using rule 143 (statements -> local_dec unli_newline statements_tail .)
    RBRACE          reduce using rule 143 (statements -> local_dec unli_newline statements_tail .)
    SHIFT           reduce using rule 143 (statements -> local_dec unli_newline statements_tail .)
    OTHERWISE       reduce using rule 143 (statements -> local_dec unli_newline statements_tail .)


state 276

    (144) statements_tail -> switch_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 345

state 277

    (150) statements_tail -> statements .

    REVIVE          reduce using rule 150 (statements_tail -> statements .)
    NEWLINE         reduce using rule 150 (statements_tail -> statements .)
    RBRACE          reduce using rule 150 (statements_tail -> statements .)
    SHIFT           reduce using rule 150 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 150 (statements_tail -> statements .)


state 278

    (145) statements_tail -> loop_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 346

state 279

    (146) statements_tail -> function_call . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 347

state 280

    (147) statements_tail -> assignment_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 348

state 281

    (148) statements_tail -> output_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 349

state 282

    (149) statements_tail -> conditional_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 350

state 283

    (232) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    LPAREN          shift and go to state 351


state 284

    (346) assignment_statement -> IDENT . assign_tail
    (347) assign_tail -> . DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (348) assign_tail -> . DOT PUSH LPAREN list_element RPAREN
    (349) assign_tail -> . assign_op value
    (350) assign_op -> . compound_op
    (351) assign_op -> . EQ
    (352) compound_op -> . PLUS_EQ
    (353) compound_op -> . MINUS_EQ
    (354) compound_op -> . MUL_EQ
    (355) compound_op -> . DIV_EQ
    (356) compound_op -> . MOD_EQ

    DOT             shift and go to state 353
    EQ              shift and go to state 356
    PLUS_EQ         shift and go to state 357
    MINUS_EQ        shift and go to state 358
    MUL_EQ          shift and go to state 359
    DIV_EQ          shift and go to state 360
    MOD_EQ          shift and go to state 361

    assign_tail                    shift and go to state 352
    assign_op                      shift and go to state 354
    compound_op                    shift and go to state 355

state 285

    (269) loop_statement -> for_loop .

    NEWLINE         reduce using rule 269 (loop_statement -> for_loop .)


state 286

    (270) loop_statement -> until_loop .

    NEWLINE         reduce using rule 270 (loop_statement -> until_loop .)


state 287

    (271) loop_statement -> repeat_until .

    NEWLINE         reduce using rule 271 (loop_statement -> repeat_until .)


state 288

    (343) output_statement -> DISPLAY . value next_val
    (371) value -> . type_cast
    (372) value -> . value_expression
    (373) value -> . function_call
    (400) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (401) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (402) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (403) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (374) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 366
    CONVERT_TO_FLT  shift and go to state 368
    CONVERT_TO_BLN  shift and go to state 369
    CONVERT_TO_STR  shift and go to state 370
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value                          shift and go to state 362
    type_cast                      shift and go to state 363
    value_expression               shift and go to state 364
    function_call                  shift and go to state 365
    value_factor                   shift and go to state 371
    input_statement                shift and go to state 265
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 289

    (203) conditional_statement -> CHECK . LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 380


state 290

    (272) for_loop -> FOR . LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 381


state 291

    (299) until_loop -> UNTIL . LPAREN until_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 382


state 292

    (326) repeat_until -> REPEAT . LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN

    LBRACE          shift and go to state 383


state 293

    (164) local_dec_tail -> COMMA IDENT . local_dec_tail
    (163) local_dec_tail -> . empty
    (164) local_dec_tail -> . COMMA IDENT local_dec_tail
    (165) local_dec_tail -> . EQ local_value local_dec_tail2
    (434) empty -> .

    COMMA           shift and go to state 248
    EQ              shift and go to state 249
    NEWLINE         reduce using rule 434 (empty -> .)

    local_dec_tail                 shift and go to state 384
    empty                          shift and go to state 247

state 294

    (165) local_dec_tail -> EQ local_value . local_dec_tail2
    (166) local_dec_tail2 -> . COMMA IDENT local_dec_tail
    (167) local_dec_tail2 -> . empty
    (434) empty -> .

    COMMA           shift and go to state 386
    NEWLINE         reduce using rule 434 (empty -> .)

    local_dec_tail2                shift and go to state 385
    empty                          shift and go to state 387

state 295

    (168) local_value -> local_value_value .

    COMMA           reduce using rule 168 (local_value -> local_value_value .)
    NEWLINE         reduce using rule 168 (local_value -> local_value_value .)


state 296

    (169) local_value -> list_value .

    COMMA           reduce using rule 169 (local_value -> list_value .)
    NEWLINE         reduce using rule 169 (local_value -> list_value .)


state 297

    (170) local_value_value -> local_type_cast .

    COMMA           reduce using rule 170 (local_value_value -> local_type_cast .)
    NEWLINE         reduce using rule 170 (local_value_value -> local_type_cast .)


state 298

    (171) local_value_value -> local_expression .

    COMMA           reduce using rule 171 (local_value_value -> local_expression .)
    NEWLINE         reduce using rule 171 (local_value_value -> local_expression .)


state 299

    (172) local_value_value -> function_call .

    COMMA           reduce using rule 172 (local_value_value -> function_call .)
    NEWLINE         reduce using rule 172 (local_value_value -> function_call .)


state 300

    (199) local_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 388


state 301

    (178) local_factor -> LPAREN . local_factor RPAREN
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 389
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 302

    (200) local_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 390


state 303

    (201) local_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 391


state 304

    (202) local_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 392


state 305

    (173) local_expression -> local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 393
    empty                          shift and go to state 408

state 306

    (174) local_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 409
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 307

    (175) local_factor -> local_factor1 .

    PLUS            reduce using rule 175 (local_factor -> local_factor1 .)
    MINUS           reduce using rule 175 (local_factor -> local_factor1 .)
    MULTIPLY        reduce using rule 175 (local_factor -> local_factor1 .)
    DIVISION        reduce using rule 175 (local_factor -> local_factor1 .)
    MODULO          reduce using rule 175 (local_factor -> local_factor1 .)
    EXPONENT        reduce using rule 175 (local_factor -> local_factor1 .)
    GT              reduce using rule 175 (local_factor -> local_factor1 .)
    LT              reduce using rule 175 (local_factor -> local_factor1 .)
    EQ_EQ           reduce using rule 175 (local_factor -> local_factor1 .)
    GT_EQ           reduce using rule 175 (local_factor -> local_factor1 .)
    LT_EQ           reduce using rule 175 (local_factor -> local_factor1 .)
    NOT_EQ          reduce using rule 175 (local_factor -> local_factor1 .)
    AND             reduce using rule 175 (local_factor -> local_factor1 .)
    OR              reduce using rule 175 (local_factor -> local_factor1 .)
    COMMA           reduce using rule 175 (local_factor -> local_factor1 .)
    NEWLINE         reduce using rule 175 (local_factor -> local_factor1 .)
    RPAREN          reduce using rule 175 (local_factor -> local_factor1 .)


state 308

    (176) local_factor -> TILDE . INT_LIT
    (177) local_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 410
    FLT_LIT         shift and go to state 411


state 309

    (194) local_factor1 -> INT_LIT .

    PLUS            reduce using rule 194 (local_factor1 -> INT_LIT .)
    MINUS           reduce using rule 194 (local_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 194 (local_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 194 (local_factor1 -> INT_LIT .)
    MODULO          reduce using rule 194 (local_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 194 (local_factor1 -> INT_LIT .)
    GT              reduce using rule 194 (local_factor1 -> INT_LIT .)
    LT              reduce using rule 194 (local_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 194 (local_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 194 (local_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 194 (local_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 194 (local_factor1 -> INT_LIT .)
    AND             reduce using rule 194 (local_factor1 -> INT_LIT .)
    OR              reduce using rule 194 (local_factor1 -> INT_LIT .)
    COMMA           reduce using rule 194 (local_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 194 (local_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 194 (local_factor1 -> INT_LIT .)


state 310

    (195) local_factor1 -> FLT_LIT .

    PLUS            reduce using rule 195 (local_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 195 (local_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 195 (local_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 195 (local_factor1 -> FLT_LIT .)
    GT              reduce using rule 195 (local_factor1 -> FLT_LIT .)
    LT              reduce using rule 195 (local_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    AND             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    OR              reduce using rule 195 (local_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 195 (local_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 195 (local_factor1 -> FLT_LIT .)


state 311

    (196) local_factor1 -> DAY .

    PLUS            reduce using rule 196 (local_factor1 -> DAY .)
    MINUS           reduce using rule 196 (local_factor1 -> DAY .)
    MULTIPLY        reduce using rule 196 (local_factor1 -> DAY .)
    DIVISION        reduce using rule 196 (local_factor1 -> DAY .)
    MODULO          reduce using rule 196 (local_factor1 -> DAY .)
    EXPONENT        reduce using rule 196 (local_factor1 -> DAY .)
    GT              reduce using rule 196 (local_factor1 -> DAY .)
    LT              reduce using rule 196 (local_factor1 -> DAY .)
    EQ_EQ           reduce using rule 196 (local_factor1 -> DAY .)
    GT_EQ           reduce using rule 196 (local_factor1 -> DAY .)
    LT_EQ           reduce using rule 196 (local_factor1 -> DAY .)
    NOT_EQ          reduce using rule 196 (local_factor1 -> DAY .)
    AND             reduce using rule 196 (local_factor1 -> DAY .)
    OR              reduce using rule 196 (local_factor1 -> DAY .)
    COMMA           reduce using rule 196 (local_factor1 -> DAY .)
    NEWLINE         reduce using rule 196 (local_factor1 -> DAY .)
    RPAREN          reduce using rule 196 (local_factor1 -> DAY .)


state 312

    (197) local_factor1 -> NIGHT .

    PLUS            reduce using rule 197 (local_factor1 -> NIGHT .)
    MINUS           reduce using rule 197 (local_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 197 (local_factor1 -> NIGHT .)
    DIVISION        reduce using rule 197 (local_factor1 -> NIGHT .)
    MODULO          reduce using rule 197 (local_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 197 (local_factor1 -> NIGHT .)
    GT              reduce using rule 197 (local_factor1 -> NIGHT .)
    LT              reduce using rule 197 (local_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 197 (local_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 197 (local_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 197 (local_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 197 (local_factor1 -> NIGHT .)
    AND             reduce using rule 197 (local_factor1 -> NIGHT .)
    OR              reduce using rule 197 (local_factor1 -> NIGHT .)
    COMMA           reduce using rule 197 (local_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 197 (local_factor1 -> NIGHT .)
    RPAREN          reduce using rule 197 (local_factor1 -> NIGHT .)


state 313

    (198) local_factor1 -> STR_LIT .

    PLUS            reduce using rule 198 (local_factor1 -> STR_LIT .)
    MINUS           reduce using rule 198 (local_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 198 (local_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 198 (local_factor1 -> STR_LIT .)
    MODULO          reduce using rule 198 (local_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 198 (local_factor1 -> STR_LIT .)
    GT              reduce using rule 198 (local_factor1 -> STR_LIT .)
    LT              reduce using rule 198 (local_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 198 (local_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 198 (local_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 198 (local_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 198 (local_factor1 -> STR_LIT .)
    AND             reduce using rule 198 (local_factor1 -> STR_LIT .)
    OR              reduce using rule 198 (local_factor1 -> STR_LIT .)
    COMMA           reduce using rule 198 (local_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 198 (local_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 198 (local_factor1 -> STR_LIT .)


state 314

    (153) local_var_statement -> local_data_type IDENT local_list_dec .

    COMMA           reduce using rule 153 (local_var_statement -> local_data_type IDENT local_list_dec .)
    EQ              reduce using rule 153 (local_var_statement -> local_data_type IDENT local_list_dec .)
    NEWLINE         reduce using rule 153 (local_var_statement -> local_data_type IDENT local_list_dec .)


state 315

    (159) local_list_dec -> empty .

    COMMA           reduce using rule 159 (local_list_dec -> empty .)
    EQ              reduce using rule 159 (local_list_dec -> empty .)
    NEWLINE         reduce using rule 159 (local_list_dec -> empty .)


state 316

    (160) local_list_dec -> LBRACKET . RBRACKET local_2d_list

    RBRACKET        shift and go to state 412


state 317

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 6 (main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)


state 318

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE . unli_newline function_statements_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 413

state 319

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 415
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 320

    (117) revive_factor -> LPAREN revive_factor . RPAREN

    RPAREN          shift and go to state 428


state 321

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 429
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 322

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 430
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 323

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 431
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 324

    (112) revive_expression -> revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 112 (revive_expression -> revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 112 (revive_expression -> revive_factor revive_factor_tail .)


state 325

    (118) revive_factor_tail -> PLUS . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 432
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 326

    (119) revive_factor_tail -> MINUS . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 433
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 327

    (120) revive_factor_tail -> MULTIPLY . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 434
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 328

    (121) revive_factor_tail -> DIVISION . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 435
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 329

    (122) revive_factor_tail -> MODULO . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 436
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 330

    (123) revive_factor_tail -> EXPONENT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 437
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 331

    (124) revive_factor_tail -> GT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 438
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 332

    (125) revive_factor_tail -> LT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 439
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 333

    (126) revive_factor_tail -> EQ_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 440
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 334

    (127) revive_factor_tail -> GT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 441
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 335

    (128) revive_factor_tail -> LT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 442
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 336

    (129) revive_factor_tail -> NOT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 443
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 337

    (130) revive_factor_tail -> AND . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 444
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 338

    (131) revive_factor_tail -> OR . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (362) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 268
    LPAREN          shift and go to state 259
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 269
    FLT_LIT         shift and go to state 270
    DAY             shift and go to state 272
    NIGHT           shift and go to state 273
    STR_LIT         shift and go to state 274

    revive_factor                  shift and go to state 445
    var_call                       shift and go to state 266
    revive_factor1                 shift and go to state 267

state 339

    (132) revive_factor_tail -> empty .

    NEWLINE         reduce using rule 132 (revive_factor_tail -> empty .)
    RBRACE          reduce using rule 132 (revive_factor_tail -> empty .)


state 340

    (335) function_call -> FUNCTION_NAME LPAREN . arguments RPAREN
    (337) arguments -> . empty
    (338) arguments -> . arg_value arg_tail
    (434) empty -> .
    (341) arg_value -> . literal
    (342) arg_value -> . var_call
    (79) literal -> . literal1
    (80) literal -> . literal2
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 434 (empty -> .)
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    arguments                      shift and go to state 446
    empty                          shift and go to state 447
    arg_value                      shift and go to state 448
    literal                        shift and go to state 449
    var_call                       shift and go to state 450
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 341

    (113) revive_factor -> var_call postfix .

    PLUS            reduce using rule 113 (revive_factor -> var_call postfix .)
    MINUS           reduce using rule 113 (revive_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 113 (revive_factor -> var_call postfix .)
    DIVISION        reduce using rule 113 (revive_factor -> var_call postfix .)
    MODULO          reduce using rule 113 (revive_factor -> var_call postfix .)
    EXPONENT        reduce using rule 113 (revive_factor -> var_call postfix .)
    GT              reduce using rule 113 (revive_factor -> var_call postfix .)
    LT              reduce using rule 113 (revive_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    GT_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    LT_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 113 (revive_factor -> var_call postfix .)
    AND             reduce using rule 113 (revive_factor -> var_call postfix .)
    OR              reduce using rule 113 (revive_factor -> var_call postfix .)
    NEWLINE         reduce using rule 113 (revive_factor -> var_call postfix .)
    RBRACE          reduce using rule 113 (revive_factor -> var_call postfix .)
    RPAREN          reduce using rule 113 (revive_factor -> var_call postfix .)


state 342

    (115) revive_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    GT              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    LT              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    AND             reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    OR              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    RBRACE          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)


state 343

    (116) revive_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    RBRACE          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)


state 344

    (433) input_statement -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 451


state 345

    (144) statements_tail -> switch_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 452
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 346

    (145) statements_tail -> loop_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 453
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 347

    (146) statements_tail -> function_call unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 454
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 348

    (147) statements_tail -> assignment_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 455
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 349

    (148) statements_tail -> output_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 456
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 350

    (149) statements_tail -> conditional_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    REVIVE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 457
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 351

    (232) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    IDENT           shift and go to state 458


state 352

    (346) assignment_statement -> IDENT assign_tail .

    NEWLINE         reduce using rule 346 (assignment_statement -> IDENT assign_tail .)


state 353

    (347) assign_tail -> DOT . SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (348) assign_tail -> DOT . PUSH LPAREN list_element RPAREN

    SPLICE          shift and go to state 459
    PUSH            shift and go to state 460


state 354

    (349) assign_tail -> assign_op . value
    (371) value -> . type_cast
    (372) value -> . value_expression
    (373) value -> . function_call
    (400) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (401) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (402) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (403) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (374) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 366
    CONVERT_TO_FLT  shift and go to state 368
    CONVERT_TO_BLN  shift and go to state 369
    CONVERT_TO_STR  shift and go to state 370
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value                          shift and go to state 461
    type_cast                      shift and go to state 363
    value_expression               shift and go to state 364
    function_call                  shift and go to state 365
    value_factor                   shift and go to state 371
    input_statement                shift and go to state 265
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 355

    (350) assign_op -> compound_op .

    CONVERT_TO_INT  reduce using rule 350 (assign_op -> compound_op .)
    CONVERT_TO_FLT  reduce using rule 350 (assign_op -> compound_op .)
    CONVERT_TO_BLN  reduce using rule 350 (assign_op -> compound_op .)
    CONVERT_TO_STR  reduce using rule 350 (assign_op -> compound_op .)
    FUNCTION_NAME   reduce using rule 350 (assign_op -> compound_op .)
    TILDE           reduce using rule 350 (assign_op -> compound_op .)
    LPAREN          reduce using rule 350 (assign_op -> compound_op .)
    INPUT           reduce using rule 350 (assign_op -> compound_op .)
    IDENT           reduce using rule 350 (assign_op -> compound_op .)
    INT_LIT         reduce using rule 350 (assign_op -> compound_op .)
    FLT_LIT         reduce using rule 350 (assign_op -> compound_op .)
    DAY             reduce using rule 350 (assign_op -> compound_op .)
    NIGHT           reduce using rule 350 (assign_op -> compound_op .)
    STR_LIT         reduce using rule 350 (assign_op -> compound_op .)


state 356

    (351) assign_op -> EQ .

    CONVERT_TO_INT  reduce using rule 351 (assign_op -> EQ .)
    CONVERT_TO_FLT  reduce using rule 351 (assign_op -> EQ .)
    CONVERT_TO_BLN  reduce using rule 351 (assign_op -> EQ .)
    CONVERT_TO_STR  reduce using rule 351 (assign_op -> EQ .)
    FUNCTION_NAME   reduce using rule 351 (assign_op -> EQ .)
    TILDE           reduce using rule 351 (assign_op -> EQ .)
    LPAREN          reduce using rule 351 (assign_op -> EQ .)
    INPUT           reduce using rule 351 (assign_op -> EQ .)
    IDENT           reduce using rule 351 (assign_op -> EQ .)
    INT_LIT         reduce using rule 351 (assign_op -> EQ .)
    FLT_LIT         reduce using rule 351 (assign_op -> EQ .)
    DAY             reduce using rule 351 (assign_op -> EQ .)
    NIGHT           reduce using rule 351 (assign_op -> EQ .)
    STR_LIT         reduce using rule 351 (assign_op -> EQ .)


state 357

    (352) compound_op -> PLUS_EQ .

    CONVERT_TO_INT  reduce using rule 352 (compound_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 352 (compound_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 352 (compound_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 352 (compound_op -> PLUS_EQ .)
    FUNCTION_NAME   reduce using rule 352 (compound_op -> PLUS_EQ .)
    TILDE           reduce using rule 352 (compound_op -> PLUS_EQ .)
    LPAREN          reduce using rule 352 (compound_op -> PLUS_EQ .)
    INPUT           reduce using rule 352 (compound_op -> PLUS_EQ .)
    IDENT           reduce using rule 352 (compound_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 352 (compound_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 352 (compound_op -> PLUS_EQ .)
    DAY             reduce using rule 352 (compound_op -> PLUS_EQ .)
    NIGHT           reduce using rule 352 (compound_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 352 (compound_op -> PLUS_EQ .)


state 358

    (353) compound_op -> MINUS_EQ .

    CONVERT_TO_INT  reduce using rule 353 (compound_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 353 (compound_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 353 (compound_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 353 (compound_op -> MINUS_EQ .)
    FUNCTION_NAME   reduce using rule 353 (compound_op -> MINUS_EQ .)
    TILDE           reduce using rule 353 (compound_op -> MINUS_EQ .)
    LPAREN          reduce using rule 353 (compound_op -> MINUS_EQ .)
    INPUT           reduce using rule 353 (compound_op -> MINUS_EQ .)
    IDENT           reduce using rule 353 (compound_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 353 (compound_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 353 (compound_op -> MINUS_EQ .)
    DAY             reduce using rule 353 (compound_op -> MINUS_EQ .)
    NIGHT           reduce using rule 353 (compound_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 353 (compound_op -> MINUS_EQ .)


state 359

    (354) compound_op -> MUL_EQ .

    CONVERT_TO_INT  reduce using rule 354 (compound_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 354 (compound_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 354 (compound_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 354 (compound_op -> MUL_EQ .)
    FUNCTION_NAME   reduce using rule 354 (compound_op -> MUL_EQ .)
    TILDE           reduce using rule 354 (compound_op -> MUL_EQ .)
    LPAREN          reduce using rule 354 (compound_op -> MUL_EQ .)
    INPUT           reduce using rule 354 (compound_op -> MUL_EQ .)
    IDENT           reduce using rule 354 (compound_op -> MUL_EQ .)
    INT_LIT         reduce using rule 354 (compound_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 354 (compound_op -> MUL_EQ .)
    DAY             reduce using rule 354 (compound_op -> MUL_EQ .)
    NIGHT           reduce using rule 354 (compound_op -> MUL_EQ .)
    STR_LIT         reduce using rule 354 (compound_op -> MUL_EQ .)


state 360

    (355) compound_op -> DIV_EQ .

    CONVERT_TO_INT  reduce using rule 355 (compound_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 355 (compound_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 355 (compound_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 355 (compound_op -> DIV_EQ .)
    FUNCTION_NAME   reduce using rule 355 (compound_op -> DIV_EQ .)
    TILDE           reduce using rule 355 (compound_op -> DIV_EQ .)
    LPAREN          reduce using rule 355 (compound_op -> DIV_EQ .)
    INPUT           reduce using rule 355 (compound_op -> DIV_EQ .)
    IDENT           reduce using rule 355 (compound_op -> DIV_EQ .)
    INT_LIT         reduce using rule 355 (compound_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 355 (compound_op -> DIV_EQ .)
    DAY             reduce using rule 355 (compound_op -> DIV_EQ .)
    NIGHT           reduce using rule 355 (compound_op -> DIV_EQ .)
    STR_LIT         reduce using rule 355 (compound_op -> DIV_EQ .)


state 361

    (356) compound_op -> MOD_EQ .

    CONVERT_TO_INT  reduce using rule 356 (compound_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 356 (compound_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 356 (compound_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 356 (compound_op -> MOD_EQ .)
    FUNCTION_NAME   reduce using rule 356 (compound_op -> MOD_EQ .)
    TILDE           reduce using rule 356 (compound_op -> MOD_EQ .)
    LPAREN          reduce using rule 356 (compound_op -> MOD_EQ .)
    INPUT           reduce using rule 356 (compound_op -> MOD_EQ .)
    IDENT           reduce using rule 356 (compound_op -> MOD_EQ .)
    INT_LIT         reduce using rule 356 (compound_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 356 (compound_op -> MOD_EQ .)
    DAY             reduce using rule 356 (compound_op -> MOD_EQ .)
    NIGHT           reduce using rule 356 (compound_op -> MOD_EQ .)
    STR_LIT         reduce using rule 356 (compound_op -> MOD_EQ .)


state 362

    (343) output_statement -> DISPLAY value . next_val
    (344) next_val -> . COMMA value next_val
    (345) next_val -> . empty
    (434) empty -> .

    COMMA           shift and go to state 463
    NEWLINE         reduce using rule 434 (empty -> .)

    next_val                       shift and go to state 462
    empty                          shift and go to state 464

state 363

    (371) value -> type_cast .

    COMMA           reduce using rule 371 (value -> type_cast .)
    NEWLINE         reduce using rule 371 (value -> type_cast .)
    RPAREN          reduce using rule 371 (value -> type_cast .)


state 364

    (372) value -> value_expression .

    COMMA           reduce using rule 372 (value -> value_expression .)
    NEWLINE         reduce using rule 372 (value -> value_expression .)
    RPAREN          reduce using rule 372 (value -> value_expression .)


state 365

    (373) value -> function_call .

    COMMA           reduce using rule 373 (value -> function_call .)
    NEWLINE         reduce using rule 373 (value -> function_call .)
    RPAREN          reduce using rule 373 (value -> function_call .)


state 366

    (400) type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 465


state 367

    (379) value_factor -> LPAREN . value_factor RPAREN
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 466
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 368

    (401) type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 467


state 369

    (402) type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 468


state 370

    (403) type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 469


state 371

    (374) value_expression -> value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 470
    empty                          shift and go to state 485

state 372

    (375) value_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 486
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 373

    (376) value_factor -> value_factor1 .

    PLUS            reduce using rule 376 (value_factor -> value_factor1 .)
    MINUS           reduce using rule 376 (value_factor -> value_factor1 .)
    MULTIPLY        reduce using rule 376 (value_factor -> value_factor1 .)
    DIVISION        reduce using rule 376 (value_factor -> value_factor1 .)
    MODULO          reduce using rule 376 (value_factor -> value_factor1 .)
    EXPONENT        reduce using rule 376 (value_factor -> value_factor1 .)
    GT              reduce using rule 376 (value_factor -> value_factor1 .)
    LT              reduce using rule 376 (value_factor -> value_factor1 .)
    EQ_EQ           reduce using rule 376 (value_factor -> value_factor1 .)
    GT_EQ           reduce using rule 376 (value_factor -> value_factor1 .)
    LT_EQ           reduce using rule 376 (value_factor -> value_factor1 .)
    NOT_EQ          reduce using rule 376 (value_factor -> value_factor1 .)
    AND             reduce using rule 376 (value_factor -> value_factor1 .)
    OR              reduce using rule 376 (value_factor -> value_factor1 .)
    COMMA           reduce using rule 376 (value_factor -> value_factor1 .)
    NEWLINE         reduce using rule 376 (value_factor -> value_factor1 .)
    RPAREN          reduce using rule 376 (value_factor -> value_factor1 .)


state 374

    (377) value_factor -> TILDE . INT_LIT
    (378) value_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 487
    FLT_LIT         shift and go to state 488


state 375

    (395) value_factor1 -> INT_LIT .

    PLUS            reduce using rule 395 (value_factor1 -> INT_LIT .)
    MINUS           reduce using rule 395 (value_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 395 (value_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 395 (value_factor1 -> INT_LIT .)
    MODULO          reduce using rule 395 (value_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 395 (value_factor1 -> INT_LIT .)
    GT              reduce using rule 395 (value_factor1 -> INT_LIT .)
    LT              reduce using rule 395 (value_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 395 (value_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 395 (value_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 395 (value_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 395 (value_factor1 -> INT_LIT .)
    AND             reduce using rule 395 (value_factor1 -> INT_LIT .)
    OR              reduce using rule 395 (value_factor1 -> INT_LIT .)
    COMMA           reduce using rule 395 (value_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 395 (value_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 395 (value_factor1 -> INT_LIT .)


state 376

    (396) value_factor1 -> FLT_LIT .

    PLUS            reduce using rule 396 (value_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 396 (value_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 396 (value_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 396 (value_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 396 (value_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 396 (value_factor1 -> FLT_LIT .)
    GT              reduce using rule 396 (value_factor1 -> FLT_LIT .)
    LT              reduce using rule 396 (value_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 396 (value_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 396 (value_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 396 (value_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 396 (value_factor1 -> FLT_LIT .)
    AND             reduce using rule 396 (value_factor1 -> FLT_LIT .)
    OR              reduce using rule 396 (value_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 396 (value_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 396 (value_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 396 (value_factor1 -> FLT_LIT .)


state 377

    (397) value_factor1 -> DAY .

    PLUS            reduce using rule 397 (value_factor1 -> DAY .)
    MINUS           reduce using rule 397 (value_factor1 -> DAY .)
    MULTIPLY        reduce using rule 397 (value_factor1 -> DAY .)
    DIVISION        reduce using rule 397 (value_factor1 -> DAY .)
    MODULO          reduce using rule 397 (value_factor1 -> DAY .)
    EXPONENT        reduce using rule 397 (value_factor1 -> DAY .)
    GT              reduce using rule 397 (value_factor1 -> DAY .)
    LT              reduce using rule 397 (value_factor1 -> DAY .)
    EQ_EQ           reduce using rule 397 (value_factor1 -> DAY .)
    GT_EQ           reduce using rule 397 (value_factor1 -> DAY .)
    LT_EQ           reduce using rule 397 (value_factor1 -> DAY .)
    NOT_EQ          reduce using rule 397 (value_factor1 -> DAY .)
    AND             reduce using rule 397 (value_factor1 -> DAY .)
    OR              reduce using rule 397 (value_factor1 -> DAY .)
    COMMA           reduce using rule 397 (value_factor1 -> DAY .)
    NEWLINE         reduce using rule 397 (value_factor1 -> DAY .)
    RPAREN          reduce using rule 397 (value_factor1 -> DAY .)


state 378

    (398) value_factor1 -> NIGHT .

    PLUS            reduce using rule 398 (value_factor1 -> NIGHT .)
    MINUS           reduce using rule 398 (value_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 398 (value_factor1 -> NIGHT .)
    DIVISION        reduce using rule 398 (value_factor1 -> NIGHT .)
    MODULO          reduce using rule 398 (value_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 398 (value_factor1 -> NIGHT .)
    GT              reduce using rule 398 (value_factor1 -> NIGHT .)
    LT              reduce using rule 398 (value_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 398 (value_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 398 (value_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 398 (value_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 398 (value_factor1 -> NIGHT .)
    AND             reduce using rule 398 (value_factor1 -> NIGHT .)
    OR              reduce using rule 398 (value_factor1 -> NIGHT .)
    COMMA           reduce using rule 398 (value_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 398 (value_factor1 -> NIGHT .)
    RPAREN          reduce using rule 398 (value_factor1 -> NIGHT .)


state 379

    (399) value_factor1 -> STR_LIT .

    PLUS            reduce using rule 399 (value_factor1 -> STR_LIT .)
    MINUS           reduce using rule 399 (value_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 399 (value_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 399 (value_factor1 -> STR_LIT .)
    MODULO          reduce using rule 399 (value_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 399 (value_factor1 -> STR_LIT .)
    GT              reduce using rule 399 (value_factor1 -> STR_LIT .)
    LT              reduce using rule 399 (value_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 399 (value_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 399 (value_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 399 (value_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 399 (value_factor1 -> STR_LIT .)
    AND             reduce using rule 399 (value_factor1 -> STR_LIT .)
    OR              reduce using rule 399 (value_factor1 -> STR_LIT .)
    COMMA           reduce using rule 399 (value_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 399 (value_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 399 (value_factor1 -> STR_LIT .)


state 380

    (203) conditional_statement -> CHECK LPAREN . condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (206) condition -> . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition                      shift and go to state 490
    condition_factor               shift and go to state 491
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 381

    (272) for_loop -> FOR LPAREN . control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (327) control_variable -> . INT IDENT EQ control_var_tail

    INT             shift and go to state 501

    control_variable               shift and go to state 500

state 382

    (299) until_loop -> UNTIL LPAREN . until_expression RPAREN LBRACE statements RBRACE
    (300) until_expression -> . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_expression               shift and go to state 503
    until_factor                   shift and go to state 504
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 383

    (326) repeat_until -> REPEAT LBRACE . statements RBRACE UNTIL LPAREN until_expression RPAREN
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    RBRACE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 513
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 384

    (164) local_dec_tail -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)


state 385

    (165) local_dec_tail -> EQ local_value local_dec_tail2 .

    NEWLINE         reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)


state 386

    (166) local_dec_tail2 -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 514


state 387

    (167) local_dec_tail2 -> empty .

    NEWLINE         reduce using rule 167 (local_dec_tail2 -> empty .)


state 388

    (199) local_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 515
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 389

    (178) local_factor -> LPAREN local_factor . RPAREN

    RPAREN          shift and go to state 516


state 390

    (200) local_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 517
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 391

    (201) local_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 518
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 392

    (202) local_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 519
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 393

    (173) local_expression -> local_factor local_factor_tail .

    COMMA           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    NEWLINE         reduce using rule 173 (local_expression -> local_factor local_factor_tail .)


state 394

    (179) local_factor_tail -> PLUS . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 520
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 395

    (180) local_factor_tail -> MINUS . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 521
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 396

    (181) local_factor_tail -> MULTIPLY . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 522
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 397

    (182) local_factor_tail -> DIVISION . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 523
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 398

    (183) local_factor_tail -> MODULO . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 524
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 399

    (184) local_factor_tail -> EXPONENT . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 525
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 400

    (185) local_factor_tail -> GT . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 526
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 401

    (186) local_factor_tail -> LT . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 527
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 402

    (187) local_factor_tail -> EQ_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 528
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 403

    (188) local_factor_tail -> GT_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 529
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 404

    (189) local_factor_tail -> LT_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 530
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 405

    (190) local_factor_tail -> NOT_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 531
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 406

    (191) local_factor_tail -> AND . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 532
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 407

    (192) local_factor_tail -> OR . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (362) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 308
    LPAREN          shift and go to state 301
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 309
    FLT_LIT         shift and go to state 310
    DAY             shift and go to state 311
    NIGHT           shift and go to state 312
    STR_LIT         shift and go to state 313

    local_factor                   shift and go to state 533
    var_call                       shift and go to state 306
    local_factor1                  shift and go to state 307

state 408

    (193) local_factor_tail -> empty .

    COMMA           reduce using rule 193 (local_factor_tail -> empty .)
    NEWLINE         reduce using rule 193 (local_factor_tail -> empty .)


state 409

    (174) local_factor -> var_call postfix .

    PLUS            reduce using rule 174 (local_factor -> var_call postfix .)
    MINUS           reduce using rule 174 (local_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 174 (local_factor -> var_call postfix .)
    DIVISION        reduce using rule 174 (local_factor -> var_call postfix .)
    MODULO          reduce using rule 174 (local_factor -> var_call postfix .)
    EXPONENT        reduce using rule 174 (local_factor -> var_call postfix .)
    GT              reduce using rule 174 (local_factor -> var_call postfix .)
    LT              reduce using rule 174 (local_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 174 (local_factor -> var_call postfix .)
    GT_EQ           reduce using rule 174 (local_factor -> var_call postfix .)
    LT_EQ           reduce using rule 174 (local_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 174 (local_factor -> var_call postfix .)
    AND             reduce using rule 174 (local_factor -> var_call postfix .)
    OR              reduce using rule 174 (local_factor -> var_call postfix .)
    COMMA           reduce using rule 174 (local_factor -> var_call postfix .)
    NEWLINE         reduce using rule 174 (local_factor -> var_call postfix .)
    RPAREN          reduce using rule 174 (local_factor -> var_call postfix .)


state 410

    (176) local_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    GT              reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    LT              reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    AND             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    OR              reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 176 (local_factor -> TILDE INT_LIT .)


state 411

    (177) local_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)


state 412

    (160) local_list_dec -> LBRACKET RBRACKET . local_2d_list
    (161) local_2d_list -> . empty
    (162) local_2d_list -> . LBRACKET RBRACKET
    (434) empty -> .

    LBRACKET        shift and go to state 534
    COMMA           reduce using rule 434 (empty -> .)
    EQ              reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_2d_list                  shift and go to state 535
    empty                          shift and go to state 536

state 413

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline . function_statements_tail
    (89) function_statements_tail -> . function_statements
    (90) function_statements_tail -> . empty
    (87) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (88) function_statements -> . empty
    (434) empty -> .
    (91) ret_type -> . FUNCTION
    (92) ret_type -> . function_dtype
    (93) function_dtype -> . FUNCTION_INT
    (94) function_dtype -> . FUNCTION_FLT
    (95) function_dtype -> . FUNCTION_CHR
    (96) function_dtype -> . FUNCTION_BLN
    (97) function_dtype -> . FUNCTION_STR
    (98) function_dtype -> . FUNCTION_LIST_INT
    (99) function_dtype -> . FUNCTION_LIST_FLT
    (100) function_dtype -> . FUNCTION_LIST_CHR
    (101) function_dtype -> . FUNCTION_LIST_STR
    (102) function_dtype -> . FUNCTION_LIST_BLN

    NEWLINE         reduce using rule 434 (empty -> .)
    MAIN_CASPER     reduce using rule 434 (empty -> .)
    FUNCTION        shift and go to state 28
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    ret_type                       shift and go to state 26
    function_statements_tail       shift and go to state 537
    function_statements            shift and go to state 538
    empty                          shift and go to state 539
    function_dtype                 shift and go to state 29

state 414

    (412) typecast_factor -> LPAREN . typecast_factor RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 540
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 415

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 541


state 416

    (404) typecast_value -> typecast_expression .

    RPAREN          reduce using rule 404 (typecast_value -> typecast_expression .)


state 417

    (405) typecast_value -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 542


state 418

    (406) typecast_value -> input_statement .

    RPAREN          reduce using rule 406 (typecast_value -> input_statement .)


state 419

    (407) typecast_expression -> typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 543
    empty                          shift and go to state 558

state 420

    (408) typecast_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 559
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 421

    (409) typecast_factor -> typecast_factor1 .

    PLUS            reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    MINUS           reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    MULTIPLY        reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    DIVISION        reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    MODULO          reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    EXPONENT        reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    GT              reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    LT              reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    EQ_EQ           reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    GT_EQ           reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    LT_EQ           reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    NOT_EQ          reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    AND             reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    OR              reduce using rule 409 (typecast_factor -> typecast_factor1 .)
    RPAREN          reduce using rule 409 (typecast_factor -> typecast_factor1 .)


state 422

    (410) typecast_factor -> TILDE . INT_LIT
    (411) typecast_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 560
    FLT_LIT         shift and go to state 561


state 423

    (428) typecast_factor1 -> INT_LIT .

    PLUS            reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    MINUS           reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    MODULO          reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    GT              reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    LT              reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    AND             reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    OR              reduce using rule 428 (typecast_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 428 (typecast_factor1 -> INT_LIT .)


state 424

    (429) typecast_factor1 -> FLT_LIT .

    PLUS            reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    GT              reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    LT              reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    AND             reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    OR              reduce using rule 429 (typecast_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 429 (typecast_factor1 -> FLT_LIT .)


state 425

    (430) typecast_factor1 -> DAY .

    PLUS            reduce using rule 430 (typecast_factor1 -> DAY .)
    MINUS           reduce using rule 430 (typecast_factor1 -> DAY .)
    MULTIPLY        reduce using rule 430 (typecast_factor1 -> DAY .)
    DIVISION        reduce using rule 430 (typecast_factor1 -> DAY .)
    MODULO          reduce using rule 430 (typecast_factor1 -> DAY .)
    EXPONENT        reduce using rule 430 (typecast_factor1 -> DAY .)
    GT              reduce using rule 430 (typecast_factor1 -> DAY .)
    LT              reduce using rule 430 (typecast_factor1 -> DAY .)
    EQ_EQ           reduce using rule 430 (typecast_factor1 -> DAY .)
    GT_EQ           reduce using rule 430 (typecast_factor1 -> DAY .)
    LT_EQ           reduce using rule 430 (typecast_factor1 -> DAY .)
    NOT_EQ          reduce using rule 430 (typecast_factor1 -> DAY .)
    AND             reduce using rule 430 (typecast_factor1 -> DAY .)
    OR              reduce using rule 430 (typecast_factor1 -> DAY .)
    RPAREN          reduce using rule 430 (typecast_factor1 -> DAY .)


state 426

    (431) typecast_factor1 -> NIGHT .

    PLUS            reduce using rule 431 (typecast_factor1 -> NIGHT .)
    MINUS           reduce using rule 431 (typecast_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 431 (typecast_factor1 -> NIGHT .)
    DIVISION        reduce using rule 431 (typecast_factor1 -> NIGHT .)
    MODULO          reduce using rule 431 (typecast_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 431 (typecast_factor1 -> NIGHT .)
    GT              reduce using rule 431 (typecast_factor1 -> NIGHT .)
    LT              reduce using rule 431 (typecast_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 431 (typecast_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 431 (typecast_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 431 (typecast_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 431 (typecast_factor1 -> NIGHT .)
    AND             reduce using rule 431 (typecast_factor1 -> NIGHT .)
    OR              reduce using rule 431 (typecast_factor1 -> NIGHT .)
    RPAREN          reduce using rule 431 (typecast_factor1 -> NIGHT .)


state 427

    (432) typecast_factor1 -> STR_LIT .

    PLUS            reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    MINUS           reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    MODULO          reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    GT              reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    LT              reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    AND             reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    OR              reduce using rule 432 (typecast_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 432 (typecast_factor1 -> STR_LIT .)


state 428

    (117) revive_factor -> LPAREN revive_factor RPAREN .

    PLUS            reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MINUS           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MULTIPLY        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    DIVISION        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MODULO          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    EXPONENT        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    EQ_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    NOT_EQ          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    AND             reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    OR              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    NEWLINE         reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    RBRACE          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    RPAREN          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)


state 429

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 562


state 430

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 563


state 431

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 564


state 432

    (118) revive_factor_tail -> PLUS revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 565
    empty                          shift and go to state 339

state 433

    (119) revive_factor_tail -> MINUS revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 566
    empty                          shift and go to state 339

state 434

    (120) revive_factor_tail -> MULTIPLY revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 567
    empty                          shift and go to state 339

state 435

    (121) revive_factor_tail -> DIVISION revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 568
    empty                          shift and go to state 339

state 436

    (122) revive_factor_tail -> MODULO revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 569
    empty                          shift and go to state 339

state 437

    (123) revive_factor_tail -> EXPONENT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 570
    empty                          shift and go to state 339

state 438

    (124) revive_factor_tail -> GT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 571
    empty                          shift and go to state 339

state 439

    (125) revive_factor_tail -> LT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 572
    empty                          shift and go to state 339

state 440

    (126) revive_factor_tail -> EQ_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 573
    empty                          shift and go to state 339

state 441

    (127) revive_factor_tail -> GT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 574
    empty                          shift and go to state 339

state 442

    (128) revive_factor_tail -> LT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 575
    empty                          shift and go to state 339

state 443

    (129) revive_factor_tail -> NOT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 576
    empty                          shift and go to state 339

state 444

    (130) revive_factor_tail -> AND revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 577
    empty                          shift and go to state 339

state 445

    (131) revive_factor_tail -> OR revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 325
    MINUS           shift and go to state 326
    MULTIPLY        shift and go to state 327
    DIVISION        shift and go to state 328
    MODULO          shift and go to state 329
    EXPONENT        shift and go to state 330
    GT              shift and go to state 331
    LT              shift and go to state 332
    EQ_EQ           shift and go to state 333
    GT_EQ           shift and go to state 334
    LT_EQ           shift and go to state 335
    NOT_EQ          shift and go to state 336
    AND             shift and go to state 337
    OR              shift and go to state 338
    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

    revive_factor_tail             shift and go to state 578
    empty                          shift and go to state 339

state 446

    (335) function_call -> FUNCTION_NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 579


state 447

    (337) arguments -> empty .

    RPAREN          reduce using rule 337 (arguments -> empty .)


state 448

    (338) arguments -> arg_value . arg_tail
    (339) arg_tail -> . COMMA arg_value arg_tail
    (340) arg_tail -> . empty
    (434) empty -> .

    COMMA           shift and go to state 581
    RPAREN          reduce using rule 434 (empty -> .)

    arg_tail                       shift and go to state 580
    empty                          shift and go to state 582

state 449

    (341) arg_value -> literal .

    COMMA           reduce using rule 341 (arg_value -> literal .)
    RPAREN          reduce using rule 341 (arg_value -> literal .)


state 450

    (342) arg_value -> var_call .

    COMMA           reduce using rule 342 (arg_value -> var_call .)
    RPAREN          reduce using rule 342 (arg_value -> var_call .)


state 451

    (433) input_statement -> INPUT LPAREN RPAREN .

    NEWLINE         reduce using rule 433 (input_statement -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 433 (input_statement -> INPUT LPAREN RPAREN .)
    COMMA           reduce using rule 433 (input_statement -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 433 (input_statement -> INPUT LPAREN RPAREN .)
    COLON           reduce using rule 433 (input_statement -> INPUT LPAREN RPAREN .)


state 452

    (144) statements_tail -> switch_statement unli_newline statements .

    REVIVE          reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    NEWLINE         reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    RBRACE          reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    SHIFT           reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    OTHERWISE       reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)


state 453

    (145) statements_tail -> loop_statement unli_newline statements .

    REVIVE          reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    NEWLINE         reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    RBRACE          reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    SHIFT           reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    OTHERWISE       reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)


state 454

    (146) statements_tail -> function_call unli_newline statements .

    REVIVE          reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    NEWLINE         reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    RBRACE          reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    SHIFT           reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    OTHERWISE       reduce using rule 146 (statements_tail -> function_call unli_newline statements .)


state 455

    (147) statements_tail -> assignment_statement unli_newline statements .

    REVIVE          reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    NEWLINE         reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    RBRACE          reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    SHIFT           reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    OTHERWISE       reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)


state 456

    (148) statements_tail -> output_statement unli_newline statements .

    REVIVE          reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    NEWLINE         reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    RBRACE          reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    SHIFT           reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    OTHERWISE       reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)


state 457

    (149) statements_tail -> conditional_statement unli_newline statements .

    REVIVE          reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    NEWLINE         reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    RBRACE          reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    SHIFT           reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    OTHERWISE       reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)


state 458

    (232) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    RPAREN          shift and go to state 583


state 459

    (347) assign_tail -> DOT SPLICE . LPAREN start COMMA deleteCount COMMA splice_items RPAREN

    LPAREN          shift and go to state 584


state 460

    (348) assign_tail -> DOT PUSH . LPAREN list_element RPAREN

    LPAREN          shift and go to state 585


state 461

    (349) assign_tail -> assign_op value .

    NEWLINE         reduce using rule 349 (assign_tail -> assign_op value .)


state 462

    (343) output_statement -> DISPLAY value next_val .

    NEWLINE         reduce using rule 343 (output_statement -> DISPLAY value next_val .)


state 463

    (344) next_val -> COMMA . value next_val
    (371) value -> . type_cast
    (372) value -> . value_expression
    (373) value -> . function_call
    (400) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (401) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (402) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (403) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (374) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 366
    CONVERT_TO_FLT  shift and go to state 368
    CONVERT_TO_BLN  shift and go to state 369
    CONVERT_TO_STR  shift and go to state 370
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value                          shift and go to state 586
    type_cast                      shift and go to state 363
    value_expression               shift and go to state 364
    function_call                  shift and go to state 365
    value_factor                   shift and go to state 371
    input_statement                shift and go to state 265
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 464

    (345) next_val -> empty .

    NEWLINE         reduce using rule 345 (next_val -> empty .)


state 465

    (400) type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 587
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 466

    (379) value_factor -> LPAREN value_factor . RPAREN

    RPAREN          shift and go to state 588


state 467

    (401) type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 589
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 468

    (402) type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 590
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 469

    (403) type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 591
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 470

    (374) value_expression -> value_factor value_factor_tail .

    COMMA           reduce using rule 374 (value_expression -> value_factor value_factor_tail .)
    NEWLINE         reduce using rule 374 (value_expression -> value_factor value_factor_tail .)
    RPAREN          reduce using rule 374 (value_expression -> value_factor value_factor_tail .)


state 471

    (380) value_factor_tail -> PLUS . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 592
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 472

    (381) value_factor_tail -> MINUS . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 593
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 473

    (382) value_factor_tail -> MULTIPLY . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 594
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 474

    (383) value_factor_tail -> DIVISION . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 595
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 475

    (384) value_factor_tail -> MODULO . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 596
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 476

    (385) value_factor_tail -> EXPONENT . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 597
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 477

    (386) value_factor_tail -> GT . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 598
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 478

    (387) value_factor_tail -> LT . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 599
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 479

    (388) value_factor_tail -> EQ_EQ . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 600
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 480

    (389) value_factor_tail -> GT_EQ . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 601
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 481

    (390) value_factor_tail -> LT_EQ . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 602
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 482

    (391) value_factor_tail -> NOT_EQ . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 603
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 483

    (392) value_factor_tail -> AND . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 604
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 484

    (393) value_factor_tail -> OR . value_factor value_factor_tail
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value_factor                   shift and go to state 605
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 485

    (394) value_factor_tail -> empty .

    COMMA           reduce using rule 394 (value_factor_tail -> empty .)
    NEWLINE         reduce using rule 394 (value_factor_tail -> empty .)
    RPAREN          reduce using rule 394 (value_factor_tail -> empty .)


state 486

    (375) value_factor -> var_call postfix .

    PLUS            reduce using rule 375 (value_factor -> var_call postfix .)
    MINUS           reduce using rule 375 (value_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 375 (value_factor -> var_call postfix .)
    DIVISION        reduce using rule 375 (value_factor -> var_call postfix .)
    MODULO          reduce using rule 375 (value_factor -> var_call postfix .)
    EXPONENT        reduce using rule 375 (value_factor -> var_call postfix .)
    GT              reduce using rule 375 (value_factor -> var_call postfix .)
    LT              reduce using rule 375 (value_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 375 (value_factor -> var_call postfix .)
    GT_EQ           reduce using rule 375 (value_factor -> var_call postfix .)
    LT_EQ           reduce using rule 375 (value_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 375 (value_factor -> var_call postfix .)
    AND             reduce using rule 375 (value_factor -> var_call postfix .)
    OR              reduce using rule 375 (value_factor -> var_call postfix .)
    COMMA           reduce using rule 375 (value_factor -> var_call postfix .)
    NEWLINE         reduce using rule 375 (value_factor -> var_call postfix .)
    RPAREN          reduce using rule 375 (value_factor -> var_call postfix .)


state 487

    (377) value_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    GT              reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    LT              reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    AND             reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    OR              reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 377 (value_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 377 (value_factor -> TILDE INT_LIT .)


state 488

    (378) value_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 378 (value_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 378 (value_factor -> TILDE FLT_LIT .)


state 489

    (211) condition_factor -> LPAREN . condition RPAREN
    (206) condition -> . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition                      shift and go to state 606
    condition_factor               shift and go to state 491
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 490

    (203) conditional_statement -> CHECK LPAREN condition . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 607


state 491

    (206) condition -> condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 608
    empty                          shift and go to state 623

state 492

    (207) condition_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 624
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 493

    (208) condition_factor -> condition1 .

    PLUS            reduce using rule 208 (condition_factor -> condition1 .)
    MINUS           reduce using rule 208 (condition_factor -> condition1 .)
    MULTIPLY        reduce using rule 208 (condition_factor -> condition1 .)
    DIVISION        reduce using rule 208 (condition_factor -> condition1 .)
    MODULO          reduce using rule 208 (condition_factor -> condition1 .)
    EXPONENT        reduce using rule 208 (condition_factor -> condition1 .)
    GT              reduce using rule 208 (condition_factor -> condition1 .)
    LT              reduce using rule 208 (condition_factor -> condition1 .)
    EQ_EQ           reduce using rule 208 (condition_factor -> condition1 .)
    GT_EQ           reduce using rule 208 (condition_factor -> condition1 .)
    LT_EQ           reduce using rule 208 (condition_factor -> condition1 .)
    NOT_EQ          reduce using rule 208 (condition_factor -> condition1 .)
    AND             reduce using rule 208 (condition_factor -> condition1 .)
    OR              reduce using rule 208 (condition_factor -> condition1 .)
    RPAREN          reduce using rule 208 (condition_factor -> condition1 .)


state 494

    (209) condition_factor -> TILDE . INT_LIT
    (210) condition_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 625
    FLT_LIT         shift and go to state 626


state 495

    (227) condition1 -> INT_LIT .

    PLUS            reduce using rule 227 (condition1 -> INT_LIT .)
    MINUS           reduce using rule 227 (condition1 -> INT_LIT .)
    MULTIPLY        reduce using rule 227 (condition1 -> INT_LIT .)
    DIVISION        reduce using rule 227 (condition1 -> INT_LIT .)
    MODULO          reduce using rule 227 (condition1 -> INT_LIT .)
    EXPONENT        reduce using rule 227 (condition1 -> INT_LIT .)
    GT              reduce using rule 227 (condition1 -> INT_LIT .)
    LT              reduce using rule 227 (condition1 -> INT_LIT .)
    EQ_EQ           reduce using rule 227 (condition1 -> INT_LIT .)
    GT_EQ           reduce using rule 227 (condition1 -> INT_LIT .)
    LT_EQ           reduce using rule 227 (condition1 -> INT_LIT .)
    NOT_EQ          reduce using rule 227 (condition1 -> INT_LIT .)
    AND             reduce using rule 227 (condition1 -> INT_LIT .)
    OR              reduce using rule 227 (condition1 -> INT_LIT .)
    RPAREN          reduce using rule 227 (condition1 -> INT_LIT .)


state 496

    (228) condition1 -> FLT_LIT .

    PLUS            reduce using rule 228 (condition1 -> FLT_LIT .)
    MINUS           reduce using rule 228 (condition1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 228 (condition1 -> FLT_LIT .)
    DIVISION        reduce using rule 228 (condition1 -> FLT_LIT .)
    MODULO          reduce using rule 228 (condition1 -> FLT_LIT .)
    EXPONENT        reduce using rule 228 (condition1 -> FLT_LIT .)
    GT              reduce using rule 228 (condition1 -> FLT_LIT .)
    LT              reduce using rule 228 (condition1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 228 (condition1 -> FLT_LIT .)
    GT_EQ           reduce using rule 228 (condition1 -> FLT_LIT .)
    LT_EQ           reduce using rule 228 (condition1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 228 (condition1 -> FLT_LIT .)
    AND             reduce using rule 228 (condition1 -> FLT_LIT .)
    OR              reduce using rule 228 (condition1 -> FLT_LIT .)
    RPAREN          reduce using rule 228 (condition1 -> FLT_LIT .)


state 497

    (229) condition1 -> DAY .

    PLUS            reduce using rule 229 (condition1 -> DAY .)
    MINUS           reduce using rule 229 (condition1 -> DAY .)
    MULTIPLY        reduce using rule 229 (condition1 -> DAY .)
    DIVISION        reduce using rule 229 (condition1 -> DAY .)
    MODULO          reduce using rule 229 (condition1 -> DAY .)
    EXPONENT        reduce using rule 229 (condition1 -> DAY .)
    GT              reduce using rule 229 (condition1 -> DAY .)
    LT              reduce using rule 229 (condition1 -> DAY .)
    EQ_EQ           reduce using rule 229 (condition1 -> DAY .)
    GT_EQ           reduce using rule 229 (condition1 -> DAY .)
    LT_EQ           reduce using rule 229 (condition1 -> DAY .)
    NOT_EQ          reduce using rule 229 (condition1 -> DAY .)
    AND             reduce using rule 229 (condition1 -> DAY .)
    OR              reduce using rule 229 (condition1 -> DAY .)
    RPAREN          reduce using rule 229 (condition1 -> DAY .)


state 498

    (230) condition1 -> NIGHT .

    PLUS            reduce using rule 230 (condition1 -> NIGHT .)
    MINUS           reduce using rule 230 (condition1 -> NIGHT .)
    MULTIPLY        reduce using rule 230 (condition1 -> NIGHT .)
    DIVISION        reduce using rule 230 (condition1 -> NIGHT .)
    MODULO          reduce using rule 230 (condition1 -> NIGHT .)
    EXPONENT        reduce using rule 230 (condition1 -> NIGHT .)
    GT              reduce using rule 230 (condition1 -> NIGHT .)
    LT              reduce using rule 230 (condition1 -> NIGHT .)
    EQ_EQ           reduce using rule 230 (condition1 -> NIGHT .)
    GT_EQ           reduce using rule 230 (condition1 -> NIGHT .)
    LT_EQ           reduce using rule 230 (condition1 -> NIGHT .)
    NOT_EQ          reduce using rule 230 (condition1 -> NIGHT .)
    AND             reduce using rule 230 (condition1 -> NIGHT .)
    OR              reduce using rule 230 (condition1 -> NIGHT .)
    RPAREN          reduce using rule 230 (condition1 -> NIGHT .)


state 499

    (231) condition1 -> STR_LIT .

    PLUS            reduce using rule 231 (condition1 -> STR_LIT .)
    MINUS           reduce using rule 231 (condition1 -> STR_LIT .)
    MULTIPLY        reduce using rule 231 (condition1 -> STR_LIT .)
    DIVISION        reduce using rule 231 (condition1 -> STR_LIT .)
    MODULO          reduce using rule 231 (condition1 -> STR_LIT .)
    EXPONENT        reduce using rule 231 (condition1 -> STR_LIT .)
    GT              reduce using rule 231 (condition1 -> STR_LIT .)
    LT              reduce using rule 231 (condition1 -> STR_LIT .)
    EQ_EQ           reduce using rule 231 (condition1 -> STR_LIT .)
    GT_EQ           reduce using rule 231 (condition1 -> STR_LIT .)
    LT_EQ           reduce using rule 231 (condition1 -> STR_LIT .)
    NOT_EQ          reduce using rule 231 (condition1 -> STR_LIT .)
    AND             reduce using rule 231 (condition1 -> STR_LIT .)
    OR              reduce using rule 231 (condition1 -> STR_LIT .)
    RPAREN          reduce using rule 231 (condition1 -> STR_LIT .)


state 500

    (272) for_loop -> FOR LPAREN control_variable . SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 627


state 501

    (327) control_variable -> INT . IDENT EQ control_var_tail

    IDENT           shift and go to state 628


state 502

    (305) until_factor -> LPAREN . until_factor RPAREN
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 629
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 503

    (299) until_loop -> UNTIL LPAREN until_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 630


state 504

    (300) until_expression -> until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 631
    empty                          shift and go to state 646

state 505

    (301) until_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 647
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 506

    (302) until_factor -> until_factor1 .

    PLUS            reduce using rule 302 (until_factor -> until_factor1 .)
    MINUS           reduce using rule 302 (until_factor -> until_factor1 .)
    MULTIPLY        reduce using rule 302 (until_factor -> until_factor1 .)
    DIVISION        reduce using rule 302 (until_factor -> until_factor1 .)
    MODULO          reduce using rule 302 (until_factor -> until_factor1 .)
    EXPONENT        reduce using rule 302 (until_factor -> until_factor1 .)
    GT              reduce using rule 302 (until_factor -> until_factor1 .)
    LT              reduce using rule 302 (until_factor -> until_factor1 .)
    EQ_EQ           reduce using rule 302 (until_factor -> until_factor1 .)
    GT_EQ           reduce using rule 302 (until_factor -> until_factor1 .)
    LT_EQ           reduce using rule 302 (until_factor -> until_factor1 .)
    NOT_EQ          reduce using rule 302 (until_factor -> until_factor1 .)
    AND             reduce using rule 302 (until_factor -> until_factor1 .)
    OR              reduce using rule 302 (until_factor -> until_factor1 .)
    RPAREN          reduce using rule 302 (until_factor -> until_factor1 .)


state 507

    (303) until_factor -> TILDE . INT_LIT
    (304) until_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 648
    FLT_LIT         shift and go to state 649


state 508

    (321) until_factor1 -> INT_LIT .

    PLUS            reduce using rule 321 (until_factor1 -> INT_LIT .)
    MINUS           reduce using rule 321 (until_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 321 (until_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 321 (until_factor1 -> INT_LIT .)
    MODULO          reduce using rule 321 (until_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 321 (until_factor1 -> INT_LIT .)
    GT              reduce using rule 321 (until_factor1 -> INT_LIT .)
    LT              reduce using rule 321 (until_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 321 (until_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 321 (until_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 321 (until_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 321 (until_factor1 -> INT_LIT .)
    AND             reduce using rule 321 (until_factor1 -> INT_LIT .)
    OR              reduce using rule 321 (until_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 321 (until_factor1 -> INT_LIT .)


state 509

    (322) until_factor1 -> FLT_LIT .

    PLUS            reduce using rule 322 (until_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 322 (until_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 322 (until_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 322 (until_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 322 (until_factor1 -> FLT_LIT .)
    GT              reduce using rule 322 (until_factor1 -> FLT_LIT .)
    LT              reduce using rule 322 (until_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 322 (until_factor1 -> FLT_LIT .)
    AND             reduce using rule 322 (until_factor1 -> FLT_LIT .)
    OR              reduce using rule 322 (until_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 322 (until_factor1 -> FLT_LIT .)


state 510

    (323) until_factor1 -> DAY .

    PLUS            reduce using rule 323 (until_factor1 -> DAY .)
    MINUS           reduce using rule 323 (until_factor1 -> DAY .)
    MULTIPLY        reduce using rule 323 (until_factor1 -> DAY .)
    DIVISION        reduce using rule 323 (until_factor1 -> DAY .)
    MODULO          reduce using rule 323 (until_factor1 -> DAY .)
    EXPONENT        reduce using rule 323 (until_factor1 -> DAY .)
    GT              reduce using rule 323 (until_factor1 -> DAY .)
    LT              reduce using rule 323 (until_factor1 -> DAY .)
    EQ_EQ           reduce using rule 323 (until_factor1 -> DAY .)
    GT_EQ           reduce using rule 323 (until_factor1 -> DAY .)
    LT_EQ           reduce using rule 323 (until_factor1 -> DAY .)
    NOT_EQ          reduce using rule 323 (until_factor1 -> DAY .)
    AND             reduce using rule 323 (until_factor1 -> DAY .)
    OR              reduce using rule 323 (until_factor1 -> DAY .)
    RPAREN          reduce using rule 323 (until_factor1 -> DAY .)


state 511

    (324) until_factor1 -> NIGHT .

    PLUS            reduce using rule 324 (until_factor1 -> NIGHT .)
    MINUS           reduce using rule 324 (until_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 324 (until_factor1 -> NIGHT .)
    DIVISION        reduce using rule 324 (until_factor1 -> NIGHT .)
    MODULO          reduce using rule 324 (until_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 324 (until_factor1 -> NIGHT .)
    GT              reduce using rule 324 (until_factor1 -> NIGHT .)
    LT              reduce using rule 324 (until_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 324 (until_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 324 (until_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 324 (until_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 324 (until_factor1 -> NIGHT .)
    AND             reduce using rule 324 (until_factor1 -> NIGHT .)
    OR              reduce using rule 324 (until_factor1 -> NIGHT .)
    RPAREN          reduce using rule 324 (until_factor1 -> NIGHT .)


state 512

    (325) until_factor1 -> STR_LIT .

    PLUS            reduce using rule 325 (until_factor1 -> STR_LIT .)
    MINUS           reduce using rule 325 (until_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 325 (until_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 325 (until_factor1 -> STR_LIT .)
    MODULO          reduce using rule 325 (until_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 325 (until_factor1 -> STR_LIT .)
    GT              reduce using rule 325 (until_factor1 -> STR_LIT .)
    LT              reduce using rule 325 (until_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 325 (until_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 325 (until_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 325 (until_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 325 (until_factor1 -> STR_LIT .)
    AND             reduce using rule 325 (until_factor1 -> STR_LIT .)
    OR              reduce using rule 325 (until_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 325 (until_factor1 -> STR_LIT .)


state 513

    (326) repeat_until -> REPEAT LBRACE statements . RBRACE UNTIL LPAREN until_expression RPAREN

    RBRACE          shift and go to state 650


state 514

    (166) local_dec_tail2 -> COMMA IDENT . local_dec_tail
    (163) local_dec_tail -> . empty
    (164) local_dec_tail -> . COMMA IDENT local_dec_tail
    (165) local_dec_tail -> . EQ local_value local_dec_tail2
    (434) empty -> .

    COMMA           shift and go to state 248
    EQ              shift and go to state 249
    NEWLINE         reduce using rule 434 (empty -> .)

    local_dec_tail                 shift and go to state 651
    empty                          shift and go to state 247

state 515

    (199) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 652


state 516

    (178) local_factor -> LPAREN local_factor RPAREN .

    PLUS            reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    MINUS           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    MULTIPLY        reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    DIVISION        reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    MODULO          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    EXPONENT        reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    GT              reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    LT              reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    EQ_EQ           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    GT_EQ           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    LT_EQ           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    NOT_EQ          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    AND             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    OR              reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    COMMA           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    NEWLINE         reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    RPAREN          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)


state 517

    (200) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 653


state 518

    (201) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 654


state 519

    (202) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 655


state 520

    (179) local_factor_tail -> PLUS local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 656
    empty                          shift and go to state 408

state 521

    (180) local_factor_tail -> MINUS local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 657
    empty                          shift and go to state 408

state 522

    (181) local_factor_tail -> MULTIPLY local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 658
    empty                          shift and go to state 408

state 523

    (182) local_factor_tail -> DIVISION local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 659
    empty                          shift and go to state 408

state 524

    (183) local_factor_tail -> MODULO local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 660
    empty                          shift and go to state 408

state 525

    (184) local_factor_tail -> EXPONENT local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 661
    empty                          shift and go to state 408

state 526

    (185) local_factor_tail -> GT local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 662
    empty                          shift and go to state 408

state 527

    (186) local_factor_tail -> LT local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 663
    empty                          shift and go to state 408

state 528

    (187) local_factor_tail -> EQ_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 664
    empty                          shift and go to state 408

state 529

    (188) local_factor_tail -> GT_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 665
    empty                          shift and go to state 408

state 530

    (189) local_factor_tail -> LT_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 666
    empty                          shift and go to state 408

state 531

    (190) local_factor_tail -> NOT_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 667
    empty                          shift and go to state 408

state 532

    (191) local_factor_tail -> AND local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 668
    empty                          shift and go to state 408

state 533

    (192) local_factor_tail -> OR local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVISION        shift and go to state 397
    MODULO          shift and go to state 398
    EXPONENT        shift and go to state 399
    GT              shift and go to state 400
    LT              shift and go to state 401
    EQ_EQ           shift and go to state 402
    GT_EQ           shift and go to state 403
    LT_EQ           shift and go to state 404
    NOT_EQ          shift and go to state 405
    AND             shift and go to state 406
    OR              shift and go to state 407
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)

    local_factor_tail              shift and go to state 669
    empty                          shift and go to state 408

state 534

    (162) local_2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 670


state 535

    (160) local_list_dec -> LBRACKET RBRACKET local_2d_list .

    COMMA           reduce using rule 160 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)
    EQ              reduce using rule 160 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)
    NEWLINE         reduce using rule 160 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)


state 536

    (161) local_2d_list -> empty .

    COMMA           reduce using rule 161 (local_2d_list -> empty .)
    EQ              reduce using rule 161 (local_2d_list -> empty .)
    NEWLINE         reduce using rule 161 (local_2d_list -> empty .)


state 537

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail .

    NEWLINE         reduce using rule 87 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail .)
    MAIN_CASPER     reduce using rule 87 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail .)


state 538

    (89) function_statements_tail -> function_statements .

    NEWLINE         reduce using rule 89 (function_statements_tail -> function_statements .)
    MAIN_CASPER     reduce using rule 89 (function_statements_tail -> function_statements .)


state 539

    (90) function_statements_tail -> empty .
    (88) function_statements -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 88 (function_statements -> empty .)
  ! reduce/reduce conflict for MAIN_CASPER resolved using rule 88 (function_statements -> empty .)
    NEWLINE         reduce using rule 88 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 88 (function_statements -> empty .)

  ! NEWLINE         [ reduce using rule 90 (function_statements_tail -> empty .) ]
  ! MAIN_CASPER     [ reduce using rule 90 (function_statements_tail -> empty .) ]


state 540

    (412) typecast_factor -> LPAREN typecast_factor . RPAREN

    RPAREN          shift and go to state 671


state 541

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 138 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 138 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 542

    (405) typecast_value -> FUNCTION_NAME LPAREN . RPAREN

    RPAREN          shift and go to state 672


state 543

    (407) typecast_expression -> typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 407 (typecast_expression -> typecast_factor typecast_factor_tail .)


state 544

    (413) typecast_factor_tail -> PLUS . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 673
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 545

    (414) typecast_factor_tail -> MINUS . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 674
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 546

    (415) typecast_factor_tail -> MULTIPLY . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 675
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 547

    (416) typecast_factor_tail -> DIVISION . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 676
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 548

    (417) typecast_factor_tail -> MODULO . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 677
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 549

    (418) typecast_factor_tail -> EXPONENT . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 678
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 550

    (419) typecast_factor_tail -> GT . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 679
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 551

    (420) typecast_factor_tail -> LT . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 680
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 552

    (421) typecast_factor_tail -> EQ_EQ . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 681
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 553

    (422) typecast_factor_tail -> GT_EQ . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 682
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 554

    (423) typecast_factor_tail -> LT_EQ . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 683
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 555

    (424) typecast_factor_tail -> NOT_EQ . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 684
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 556

    (425) typecast_factor_tail -> AND . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 685
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 557

    (426) typecast_factor_tail -> OR . typecast_factor typecast_factor_tail
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_factor                shift and go to state 686
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 558

    (427) typecast_factor_tail -> empty .

    RPAREN          reduce using rule 427 (typecast_factor_tail -> empty .)


state 559

    (408) typecast_factor -> var_call postfix .

    PLUS            reduce using rule 408 (typecast_factor -> var_call postfix .)
    MINUS           reduce using rule 408 (typecast_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 408 (typecast_factor -> var_call postfix .)
    DIVISION        reduce using rule 408 (typecast_factor -> var_call postfix .)
    MODULO          reduce using rule 408 (typecast_factor -> var_call postfix .)
    EXPONENT        reduce using rule 408 (typecast_factor -> var_call postfix .)
    GT              reduce using rule 408 (typecast_factor -> var_call postfix .)
    LT              reduce using rule 408 (typecast_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 408 (typecast_factor -> var_call postfix .)
    GT_EQ           reduce using rule 408 (typecast_factor -> var_call postfix .)
    LT_EQ           reduce using rule 408 (typecast_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 408 (typecast_factor -> var_call postfix .)
    AND             reduce using rule 408 (typecast_factor -> var_call postfix .)
    OR              reduce using rule 408 (typecast_factor -> var_call postfix .)
    RPAREN          reduce using rule 408 (typecast_factor -> var_call postfix .)


state 560

    (410) typecast_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    GT              reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    LT              reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    AND             reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    OR              reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 410 (typecast_factor -> TILDE INT_LIT .)


state 561

    (411) typecast_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 411 (typecast_factor -> TILDE FLT_LIT .)


state 562

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 139 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 139 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 563

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 140 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 140 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 564

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 141 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 141 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 565

    (118) revive_factor_tail -> PLUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 118 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 118 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)


state 566

    (119) revive_factor_tail -> MINUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 119 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 119 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)


state 567

    (120) revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 120 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 120 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)


state 568

    (121) revive_factor_tail -> DIVISION revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 121 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 121 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)


state 569

    (122) revive_factor_tail -> MODULO revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 122 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 122 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)


state 570

    (123) revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 123 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 123 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)


state 571

    (124) revive_factor_tail -> GT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 124 (revive_factor_tail -> GT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 124 (revive_factor_tail -> GT revive_factor revive_factor_tail .)


state 572

    (125) revive_factor_tail -> LT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 125 (revive_factor_tail -> LT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 125 (revive_factor_tail -> LT revive_factor revive_factor_tail .)


state 573

    (126) revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 126 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 126 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)


state 574

    (127) revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 127 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 127 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)


state 575

    (128) revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 128 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 128 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)


state 576

    (129) revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 129 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 129 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)


state 577

    (130) revive_factor_tail -> AND revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 130 (revive_factor_tail -> AND revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 130 (revive_factor_tail -> AND revive_factor revive_factor_tail .)


state 578

    (131) revive_factor_tail -> OR revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 131 (revive_factor_tail -> OR revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 131 (revive_factor_tail -> OR revive_factor revive_factor_tail .)


state 579

    (335) function_call -> FUNCTION_NAME LPAREN arguments RPAREN .

    NEWLINE         reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COMMA           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COLON           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)


state 580

    (338) arguments -> arg_value arg_tail .

    RPAREN          reduce using rule 338 (arguments -> arg_value arg_tail .)


state 581

    (339) arg_tail -> COMMA . arg_value arg_tail
    (341) arg_value -> . literal
    (342) arg_value -> . var_call
    (79) literal -> . literal1
    (80) literal -> . literal2
    (362) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    arg_value                      shift and go to state 687
    literal                        shift and go to state 449
    var_call                       shift and go to state 450
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 582

    (340) arg_tail -> empty .

    RPAREN          reduce using rule 340 (arg_tail -> empty .)


state 583

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    LBRACE          shift and go to state 688


state 584

    (347) assign_tail -> DOT SPLICE LPAREN . start COMMA deleteCount COMMA splice_items RPAREN
    (357) start -> . INT_LIT

    INT_LIT         shift and go to state 690

    start                          shift and go to state 689

state 585

    (348) assign_tail -> DOT PUSH LPAREN . list_element RPAREN
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 691
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 586

    (344) next_val -> COMMA value . next_val
    (344) next_val -> . COMMA value next_val
    (345) next_val -> . empty
    (434) empty -> .

    COMMA           shift and go to state 463
    NEWLINE         reduce using rule 434 (empty -> .)

    next_val                       shift and go to state 692
    empty                          shift and go to state 464

state 587

    (400) type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 693


state 588

    (379) value_factor -> LPAREN value_factor RPAREN .

    PLUS            reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    MINUS           reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    MULTIPLY        reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    DIVISION        reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    MODULO          reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    EXPONENT        reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    GT              reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    LT              reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    EQ_EQ           reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    GT_EQ           reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    LT_EQ           reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    NOT_EQ          reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    AND             reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    OR              reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    COMMA           reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    NEWLINE         reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)
    RPAREN          reduce using rule 379 (value_factor -> LPAREN value_factor RPAREN .)


state 589

    (401) type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 694


state 590

    (402) type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 695


state 591

    (403) type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 696


state 592

    (380) value_factor_tail -> PLUS value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 697
    empty                          shift and go to state 485

state 593

    (381) value_factor_tail -> MINUS value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 698
    empty                          shift and go to state 485

state 594

    (382) value_factor_tail -> MULTIPLY value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 699
    empty                          shift and go to state 485

state 595

    (383) value_factor_tail -> DIVISION value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 700
    empty                          shift and go to state 485

state 596

    (384) value_factor_tail -> MODULO value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 701
    empty                          shift and go to state 485

state 597

    (385) value_factor_tail -> EXPONENT value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 702
    empty                          shift and go to state 485

state 598

    (386) value_factor_tail -> GT value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 703
    empty                          shift and go to state 485

state 599

    (387) value_factor_tail -> LT value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 704
    empty                          shift and go to state 485

state 600

    (388) value_factor_tail -> EQ_EQ value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 705
    empty                          shift and go to state 485

state 601

    (389) value_factor_tail -> GT_EQ value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 706
    empty                          shift and go to state 485

state 602

    (390) value_factor_tail -> LT_EQ value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 707
    empty                          shift and go to state 485

state 603

    (391) value_factor_tail -> NOT_EQ value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 708
    empty                          shift and go to state 485

state 604

    (392) value_factor_tail -> AND value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 709
    empty                          shift and go to state 485

state 605

    (393) value_factor_tail -> OR value_factor . value_factor_tail
    (380) value_factor_tail -> . PLUS value_factor value_factor_tail
    (381) value_factor_tail -> . MINUS value_factor value_factor_tail
    (382) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (383) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (384) value_factor_tail -> . MODULO value_factor value_factor_tail
    (385) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (386) value_factor_tail -> . GT value_factor value_factor_tail
    (387) value_factor_tail -> . LT value_factor value_factor_tail
    (388) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (389) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (390) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (391) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (392) value_factor_tail -> . AND value_factor value_factor_tail
    (393) value_factor_tail -> . OR value_factor value_factor_tail
    (394) value_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 471
    MINUS           shift and go to state 472
    MULTIPLY        shift and go to state 473
    DIVISION        shift and go to state 474
    MODULO          shift and go to state 475
    EXPONENT        shift and go to state 476
    GT              shift and go to state 477
    LT              shift and go to state 478
    EQ_EQ           shift and go to state 479
    GT_EQ           shift and go to state 480
    LT_EQ           shift and go to state 481
    NOT_EQ          shift and go to state 482
    AND             shift and go to state 483
    OR              shift and go to state 484
    COMMA           reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)

    value_factor_tail              shift and go to state 710
    empty                          shift and go to state 485

state 606

    (211) condition_factor -> LPAREN condition . RPAREN

    RPAREN          shift and go to state 711


state 607

    (203) conditional_statement -> CHECK LPAREN condition RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 712


state 608

    (206) condition -> condition_factor condition_tail .

    RPAREN          reduce using rule 206 (condition -> condition_factor condition_tail .)


state 609

    (212) condition_tail -> PLUS . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 713
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 610

    (213) condition_tail -> MINUS . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 714
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 611

    (214) condition_tail -> MULTIPLY . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 715
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 612

    (215) condition_tail -> DIVISION . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 716
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 613

    (216) condition_tail -> MODULO . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 717
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 614

    (217) condition_tail -> EXPONENT . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 718
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 615

    (218) condition_tail -> GT . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 719
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 616

    (219) condition_tail -> LT . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 720
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 617

    (220) condition_tail -> EQ_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 721
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 618

    (221) condition_tail -> GT_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 722
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 619

    (222) condition_tail -> LT_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 723
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 620

    (223) condition_tail -> NOT_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 724
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 621

    (224) condition_tail -> AND . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 725
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 622

    (225) condition_tail -> OR . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition_factor               shift and go to state 726
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 623

    (226) condition_tail -> empty .

    RPAREN          reduce using rule 226 (condition_tail -> empty .)


state 624

    (207) condition_factor -> var_call postfix .

    PLUS            reduce using rule 207 (condition_factor -> var_call postfix .)
    MINUS           reduce using rule 207 (condition_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 207 (condition_factor -> var_call postfix .)
    DIVISION        reduce using rule 207 (condition_factor -> var_call postfix .)
    MODULO          reduce using rule 207 (condition_factor -> var_call postfix .)
    EXPONENT        reduce using rule 207 (condition_factor -> var_call postfix .)
    GT              reduce using rule 207 (condition_factor -> var_call postfix .)
    LT              reduce using rule 207 (condition_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 207 (condition_factor -> var_call postfix .)
    GT_EQ           reduce using rule 207 (condition_factor -> var_call postfix .)
    LT_EQ           reduce using rule 207 (condition_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 207 (condition_factor -> var_call postfix .)
    AND             reduce using rule 207 (condition_factor -> var_call postfix .)
    OR              reduce using rule 207 (condition_factor -> var_call postfix .)
    RPAREN          reduce using rule 207 (condition_factor -> var_call postfix .)


state 625

    (209) condition_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    GT              reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    LT              reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    AND             reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    OR              reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 209 (condition_factor -> TILDE INT_LIT .)


state 626

    (210) condition_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)


state 627

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON . for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (273) for_expression -> . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_expression                 shift and go to state 728
    for_factor                     shift and go to state 729
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 628

    (327) control_variable -> INT IDENT . EQ control_var_tail

    EQ              shift and go to state 738


state 629

    (305) until_factor -> LPAREN until_factor . RPAREN

    RPAREN          shift and go to state 739


state 630

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 740


state 631

    (300) until_expression -> until_factor until_factor_tail .

    RPAREN          reduce using rule 300 (until_expression -> until_factor until_factor_tail .)


state 632

    (306) until_factor_tail -> PLUS . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 741
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 633

    (307) until_factor_tail -> MINUS . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 742
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 634

    (308) until_factor_tail -> MULTIPLY . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 743
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 635

    (309) until_factor_tail -> DIVISION . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 744
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 636

    (310) until_factor_tail -> MODULO . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 745
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 637

    (311) until_factor_tail -> EXPONENT . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 746
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 638

    (312) until_factor_tail -> GT . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 747
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 639

    (313) until_factor_tail -> LT . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 748
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 640

    (314) until_factor_tail -> EQ_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 749
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 641

    (315) until_factor_tail -> GT_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 750
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 642

    (316) until_factor_tail -> LT_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 751
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 643

    (317) until_factor_tail -> NOT_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 752
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 644

    (318) until_factor_tail -> AND . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 753
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 645

    (319) until_factor_tail -> OR . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_factor                   shift and go to state 754
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 646

    (320) until_factor_tail -> empty .

    RPAREN          reduce using rule 320 (until_factor_tail -> empty .)


state 647

    (301) until_factor -> var_call postfix .

    PLUS            reduce using rule 301 (until_factor -> var_call postfix .)
    MINUS           reduce using rule 301 (until_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 301 (until_factor -> var_call postfix .)
    DIVISION        reduce using rule 301 (until_factor -> var_call postfix .)
    MODULO          reduce using rule 301 (until_factor -> var_call postfix .)
    EXPONENT        reduce using rule 301 (until_factor -> var_call postfix .)
    GT              reduce using rule 301 (until_factor -> var_call postfix .)
    LT              reduce using rule 301 (until_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 301 (until_factor -> var_call postfix .)
    GT_EQ           reduce using rule 301 (until_factor -> var_call postfix .)
    LT_EQ           reduce using rule 301 (until_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 301 (until_factor -> var_call postfix .)
    AND             reduce using rule 301 (until_factor -> var_call postfix .)
    OR              reduce using rule 301 (until_factor -> var_call postfix .)
    RPAREN          reduce using rule 301 (until_factor -> var_call postfix .)


state 648

    (303) until_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    GT              reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    LT              reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    AND             reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    OR              reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 303 (until_factor -> TILDE INT_LIT .)


state 649

    (304) until_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 304 (until_factor -> TILDE FLT_LIT .)


state 650

    (326) repeat_until -> REPEAT LBRACE statements RBRACE . UNTIL LPAREN until_expression RPAREN

    UNTIL           shift and go to state 755


state 651

    (166) local_dec_tail2 -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)


state 652

    (199) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 653

    (200) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 654

    (201) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 655

    (202) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 656

    (179) local_factor_tail -> PLUS local_factor local_factor_tail .

    COMMA           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)


state 657

    (180) local_factor_tail -> MINUS local_factor local_factor_tail .

    COMMA           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)


state 658

    (181) local_factor_tail -> MULTIPLY local_factor local_factor_tail .

    COMMA           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    NEWLINE         reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)


state 659

    (182) local_factor_tail -> DIVISION local_factor local_factor_tail .

    COMMA           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    NEWLINE         reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)


state 660

    (183) local_factor_tail -> MODULO local_factor local_factor_tail .

    COMMA           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    NEWLINE         reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)


state 661

    (184) local_factor_tail -> EXPONENT local_factor local_factor_tail .

    COMMA           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)


state 662

    (185) local_factor_tail -> GT local_factor local_factor_tail .

    COMMA           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)


state 663

    (186) local_factor_tail -> LT local_factor local_factor_tail .

    COMMA           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)


state 664

    (187) local_factor_tail -> EQ_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)


state 665

    (188) local_factor_tail -> GT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)


state 666

    (189) local_factor_tail -> LT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)


state 667

    (190) local_factor_tail -> NOT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)


state 668

    (191) local_factor_tail -> AND local_factor local_factor_tail .

    COMMA           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    NEWLINE         reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)


state 669

    (192) local_factor_tail -> OR local_factor local_factor_tail .

    COMMA           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    NEWLINE         reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)


state 670

    (162) local_2d_list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 162 (local_2d_list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 162 (local_2d_list -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 162 (local_2d_list -> LBRACKET RBRACKET .)


state 671

    (412) typecast_factor -> LPAREN typecast_factor RPAREN .

    PLUS            reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MINUS           reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MULTIPLY        reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    DIVISION        reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MODULO          reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    EXPONENT        reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    GT              reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    LT              reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    EQ_EQ           reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    GT_EQ           reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    LT_EQ           reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    NOT_EQ          reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    AND             reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    OR              reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    RPAREN          reduce using rule 412 (typecast_factor -> LPAREN typecast_factor RPAREN .)


state 672

    (405) typecast_value -> FUNCTION_NAME LPAREN RPAREN .

    RPAREN          reduce using rule 405 (typecast_value -> FUNCTION_NAME LPAREN RPAREN .)


state 673

    (413) typecast_factor_tail -> PLUS typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 756
    empty                          shift and go to state 558

state 674

    (414) typecast_factor_tail -> MINUS typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 757
    empty                          shift and go to state 558

state 675

    (415) typecast_factor_tail -> MULTIPLY typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 758
    empty                          shift and go to state 558

state 676

    (416) typecast_factor_tail -> DIVISION typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 759
    empty                          shift and go to state 558

state 677

    (417) typecast_factor_tail -> MODULO typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 760
    empty                          shift and go to state 558

state 678

    (418) typecast_factor_tail -> EXPONENT typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 761
    empty                          shift and go to state 558

state 679

    (419) typecast_factor_tail -> GT typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 762
    empty                          shift and go to state 558

state 680

    (420) typecast_factor_tail -> LT typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 763
    empty                          shift and go to state 558

state 681

    (421) typecast_factor_tail -> EQ_EQ typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 764
    empty                          shift and go to state 558

state 682

    (422) typecast_factor_tail -> GT_EQ typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 765
    empty                          shift and go to state 558

state 683

    (423) typecast_factor_tail -> LT_EQ typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 766
    empty                          shift and go to state 558

state 684

    (424) typecast_factor_tail -> NOT_EQ typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 767
    empty                          shift and go to state 558

state 685

    (425) typecast_factor_tail -> AND typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 768
    empty                          shift and go to state 558

state 686

    (426) typecast_factor_tail -> OR typecast_factor . typecast_factor_tail
    (413) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (414) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (415) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (416) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (417) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (418) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (419) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (420) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (421) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (422) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (423) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (424) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (425) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (426) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (427) typecast_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 544
    MINUS           shift and go to state 545
    MULTIPLY        shift and go to state 546
    DIVISION        shift and go to state 547
    MODULO          shift and go to state 548
    EXPONENT        shift and go to state 549
    GT              shift and go to state 550
    LT              shift and go to state 551
    EQ_EQ           shift and go to state 552
    GT_EQ           shift and go to state 553
    LT_EQ           shift and go to state 554
    NOT_EQ          shift and go to state 555
    AND             shift and go to state 556
    OR              shift and go to state 557
    RPAREN          reduce using rule 434 (empty -> .)

    typecast_factor_tail           shift and go to state 769
    empty                          shift and go to state 558

state 687

    (339) arg_tail -> COMMA arg_value . arg_tail
    (339) arg_tail -> . COMMA arg_value arg_tail
    (340) arg_tail -> . empty
    (434) empty -> .

    COMMA           shift and go to state 581
    RPAREN          reduce using rule 434 (empty -> .)

    arg_tail                       shift and go to state 770
    empty                          shift and go to state 582

state 688

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
    (233) switch_condition -> . SHIFT switch_value COLON statements switchcond_tail

    SHIFT           shift and go to state 772

    switch_condition               shift and go to state 771

state 689

    (347) assign_tail -> DOT SPLICE LPAREN start . COMMA deleteCount COMMA splice_items RPAREN

    COMMA           shift and go to state 773


state 690

    (357) start -> INT_LIT .

    COMMA           reduce using rule 357 (start -> INT_LIT .)


state 691

    (348) assign_tail -> DOT PUSH LPAREN list_element . RPAREN

    RPAREN          shift and go to state 774


state 692

    (344) next_val -> COMMA value next_val .

    NEWLINE         reduce using rule 344 (next_val -> COMMA value next_val .)


state 693

    (400) type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 400 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 400 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 400 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 694

    (401) type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 401 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 401 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 401 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 695

    (402) type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 402 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 402 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 402 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 696

    (403) type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 403 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 403 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 403 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 697

    (380) value_factor_tail -> PLUS value_factor value_factor_tail .

    COMMA           reduce using rule 380 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    NEWLINE         reduce using rule 380 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 380 (value_factor_tail -> PLUS value_factor value_factor_tail .)


state 698

    (381) value_factor_tail -> MINUS value_factor value_factor_tail .

    COMMA           reduce using rule 381 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    NEWLINE         reduce using rule 381 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 381 (value_factor_tail -> MINUS value_factor value_factor_tail .)


state 699

    (382) value_factor_tail -> MULTIPLY value_factor value_factor_tail .

    COMMA           reduce using rule 382 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    NEWLINE         reduce using rule 382 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    RPAREN          reduce using rule 382 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)


state 700

    (383) value_factor_tail -> DIVISION value_factor value_factor_tail .

    COMMA           reduce using rule 383 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    NEWLINE         reduce using rule 383 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    RPAREN          reduce using rule 383 (value_factor_tail -> DIVISION value_factor value_factor_tail .)


state 701

    (384) value_factor_tail -> MODULO value_factor value_factor_tail .

    COMMA           reduce using rule 384 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    NEWLINE         reduce using rule 384 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    RPAREN          reduce using rule 384 (value_factor_tail -> MODULO value_factor value_factor_tail .)


state 702

    (385) value_factor_tail -> EXPONENT value_factor value_factor_tail .

    COMMA           reduce using rule 385 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    NEWLINE         reduce using rule 385 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    RPAREN          reduce using rule 385 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)


state 703

    (386) value_factor_tail -> GT value_factor value_factor_tail .

    COMMA           reduce using rule 386 (value_factor_tail -> GT value_factor value_factor_tail .)
    NEWLINE         reduce using rule 386 (value_factor_tail -> GT value_factor value_factor_tail .)
    RPAREN          reduce using rule 386 (value_factor_tail -> GT value_factor value_factor_tail .)


state 704

    (387) value_factor_tail -> LT value_factor value_factor_tail .

    COMMA           reduce using rule 387 (value_factor_tail -> LT value_factor value_factor_tail .)
    NEWLINE         reduce using rule 387 (value_factor_tail -> LT value_factor value_factor_tail .)
    RPAREN          reduce using rule 387 (value_factor_tail -> LT value_factor value_factor_tail .)


state 705

    (388) value_factor_tail -> EQ_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 388 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 388 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 388 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)


state 706

    (389) value_factor_tail -> GT_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 389 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 389 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 389 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)


state 707

    (390) value_factor_tail -> LT_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 390 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 390 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 390 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)


state 708

    (391) value_factor_tail -> NOT_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 391 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 391 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 391 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)


state 709

    (392) value_factor_tail -> AND value_factor value_factor_tail .

    COMMA           reduce using rule 392 (value_factor_tail -> AND value_factor value_factor_tail .)
    NEWLINE         reduce using rule 392 (value_factor_tail -> AND value_factor value_factor_tail .)
    RPAREN          reduce using rule 392 (value_factor_tail -> AND value_factor value_factor_tail .)


state 710

    (393) value_factor_tail -> OR value_factor value_factor_tail .

    COMMA           reduce using rule 393 (value_factor_tail -> OR value_factor value_factor_tail .)
    NEWLINE         reduce using rule 393 (value_factor_tail -> OR value_factor value_factor_tail .)
    RPAREN          reduce using rule 393 (value_factor_tail -> OR value_factor value_factor_tail .)


state 711

    (211) condition_factor -> LPAREN condition RPAREN .

    PLUS            reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    MINUS           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    MULTIPLY        reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    DIVISION        reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    MODULO          reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    EXPONENT        reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    GT              reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    LT              reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    EQ_EQ           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    GT_EQ           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    LT_EQ           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    NOT_EQ          reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    AND             reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    OR              reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    RPAREN          reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)


state 712

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 434 (empty -> .)
    FLT             reduce using rule 434 (empty -> .)
    BLN             reduce using rule 434 (empty -> .)
    CHR             reduce using rule 434 (empty -> .)
    STR             reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 775
    empty                          shift and go to state 17

state 713

    (212) condition_tail -> PLUS condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 776
    empty                          shift and go to state 623

state 714

    (213) condition_tail -> MINUS condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 777
    empty                          shift and go to state 623

state 715

    (214) condition_tail -> MULTIPLY condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 778
    empty                          shift and go to state 623

state 716

    (215) condition_tail -> DIVISION condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 779
    empty                          shift and go to state 623

state 717

    (216) condition_tail -> MODULO condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 780
    empty                          shift and go to state 623

state 718

    (217) condition_tail -> EXPONENT condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 781
    empty                          shift and go to state 623

state 719

    (218) condition_tail -> GT condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 782
    empty                          shift and go to state 623

state 720

    (219) condition_tail -> LT condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 783
    empty                          shift and go to state 623

state 721

    (220) condition_tail -> EQ_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 784
    empty                          shift and go to state 623

state 722

    (221) condition_tail -> GT_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 785
    empty                          shift and go to state 623

state 723

    (222) condition_tail -> LT_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 786
    empty                          shift and go to state 623

state 724

    (223) condition_tail -> NOT_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 787
    empty                          shift and go to state 623

state 725

    (224) condition_tail -> AND condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 788
    empty                          shift and go to state 623

state 726

    (225) condition_tail -> OR condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 609
    MINUS           shift and go to state 610
    MULTIPLY        shift and go to state 611
    DIVISION        shift and go to state 612
    MODULO          shift and go to state 613
    EXPONENT        shift and go to state 614
    GT              shift and go to state 615
    LT              shift and go to state 616
    EQ_EQ           shift and go to state 617
    GT_EQ           shift and go to state 618
    LT_EQ           shift and go to state 619
    NOT_EQ          shift and go to state 620
    AND             shift and go to state 621
    OR              shift and go to state 622
    RPAREN          reduce using rule 434 (empty -> .)

    condition_tail                 shift and go to state 789
    empty                          shift and go to state 623

state 727

    (278) for_factor -> LPAREN . for_factor RPAREN
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 790
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 728

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression . SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 791


state 729

    (273) for_expression -> for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 792
    empty                          shift and go to state 807

state 730

    (274) for_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    SEMICOLON       reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 808
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 731

    (275) for_factor -> for_factor1 .

    PLUS            reduce using rule 275 (for_factor -> for_factor1 .)
    MINUS           reduce using rule 275 (for_factor -> for_factor1 .)
    MULTIPLY        reduce using rule 275 (for_factor -> for_factor1 .)
    DIVISION        reduce using rule 275 (for_factor -> for_factor1 .)
    MODULO          reduce using rule 275 (for_factor -> for_factor1 .)
    EXPONENT        reduce using rule 275 (for_factor -> for_factor1 .)
    GT              reduce using rule 275 (for_factor -> for_factor1 .)
    LT              reduce using rule 275 (for_factor -> for_factor1 .)
    EQ_EQ           reduce using rule 275 (for_factor -> for_factor1 .)
    GT_EQ           reduce using rule 275 (for_factor -> for_factor1 .)
    LT_EQ           reduce using rule 275 (for_factor -> for_factor1 .)
    NOT_EQ          reduce using rule 275 (for_factor -> for_factor1 .)
    AND             reduce using rule 275 (for_factor -> for_factor1 .)
    OR              reduce using rule 275 (for_factor -> for_factor1 .)
    SEMICOLON       reduce using rule 275 (for_factor -> for_factor1 .)
    RPAREN          reduce using rule 275 (for_factor -> for_factor1 .)


state 732

    (276) for_factor -> TILDE . INT_LIT
    (277) for_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 809
    FLT_LIT         shift and go to state 810


state 733

    (294) for_factor1 -> INT_LIT .

    PLUS            reduce using rule 294 (for_factor1 -> INT_LIT .)
    MINUS           reduce using rule 294 (for_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 294 (for_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 294 (for_factor1 -> INT_LIT .)
    MODULO          reduce using rule 294 (for_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 294 (for_factor1 -> INT_LIT .)
    GT              reduce using rule 294 (for_factor1 -> INT_LIT .)
    LT              reduce using rule 294 (for_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 294 (for_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 294 (for_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 294 (for_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 294 (for_factor1 -> INT_LIT .)
    AND             reduce using rule 294 (for_factor1 -> INT_LIT .)
    OR              reduce using rule 294 (for_factor1 -> INT_LIT .)
    SEMICOLON       reduce using rule 294 (for_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 294 (for_factor1 -> INT_LIT .)


state 734

    (295) for_factor1 -> FLT_LIT .

    PLUS            reduce using rule 295 (for_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 295 (for_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 295 (for_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 295 (for_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 295 (for_factor1 -> FLT_LIT .)
    GT              reduce using rule 295 (for_factor1 -> FLT_LIT .)
    LT              reduce using rule 295 (for_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 295 (for_factor1 -> FLT_LIT .)
    AND             reduce using rule 295 (for_factor1 -> FLT_LIT .)
    OR              reduce using rule 295 (for_factor1 -> FLT_LIT .)
    SEMICOLON       reduce using rule 295 (for_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 295 (for_factor1 -> FLT_LIT .)


state 735

    (296) for_factor1 -> DAY .

    PLUS            reduce using rule 296 (for_factor1 -> DAY .)
    MINUS           reduce using rule 296 (for_factor1 -> DAY .)
    MULTIPLY        reduce using rule 296 (for_factor1 -> DAY .)
    DIVISION        reduce using rule 296 (for_factor1 -> DAY .)
    MODULO          reduce using rule 296 (for_factor1 -> DAY .)
    EXPONENT        reduce using rule 296 (for_factor1 -> DAY .)
    GT              reduce using rule 296 (for_factor1 -> DAY .)
    LT              reduce using rule 296 (for_factor1 -> DAY .)
    EQ_EQ           reduce using rule 296 (for_factor1 -> DAY .)
    GT_EQ           reduce using rule 296 (for_factor1 -> DAY .)
    LT_EQ           reduce using rule 296 (for_factor1 -> DAY .)
    NOT_EQ          reduce using rule 296 (for_factor1 -> DAY .)
    AND             reduce using rule 296 (for_factor1 -> DAY .)
    OR              reduce using rule 296 (for_factor1 -> DAY .)
    SEMICOLON       reduce using rule 296 (for_factor1 -> DAY .)
    RPAREN          reduce using rule 296 (for_factor1 -> DAY .)


state 736

    (297) for_factor1 -> NIGHT .

    PLUS            reduce using rule 297 (for_factor1 -> NIGHT .)
    MINUS           reduce using rule 297 (for_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 297 (for_factor1 -> NIGHT .)
    DIVISION        reduce using rule 297 (for_factor1 -> NIGHT .)
    MODULO          reduce using rule 297 (for_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 297 (for_factor1 -> NIGHT .)
    GT              reduce using rule 297 (for_factor1 -> NIGHT .)
    LT              reduce using rule 297 (for_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 297 (for_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 297 (for_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 297 (for_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 297 (for_factor1 -> NIGHT .)
    AND             reduce using rule 297 (for_factor1 -> NIGHT .)
    OR              reduce using rule 297 (for_factor1 -> NIGHT .)
    SEMICOLON       reduce using rule 297 (for_factor1 -> NIGHT .)
    RPAREN          reduce using rule 297 (for_factor1 -> NIGHT .)


state 737

    (298) for_factor1 -> STR_LIT .

    PLUS            reduce using rule 298 (for_factor1 -> STR_LIT .)
    MINUS           reduce using rule 298 (for_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 298 (for_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 298 (for_factor1 -> STR_LIT .)
    MODULO          reduce using rule 298 (for_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 298 (for_factor1 -> STR_LIT .)
    GT              reduce using rule 298 (for_factor1 -> STR_LIT .)
    LT              reduce using rule 298 (for_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 298 (for_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 298 (for_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 298 (for_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 298 (for_factor1 -> STR_LIT .)
    AND             reduce using rule 298 (for_factor1 -> STR_LIT .)
    OR              reduce using rule 298 (for_factor1 -> STR_LIT .)
    SEMICOLON       reduce using rule 298 (for_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 298 (for_factor1 -> STR_LIT .)


state 738

    (327) control_variable -> INT IDENT EQ . control_var_tail
    (328) control_var_tail -> . INT_LIT
    (329) control_var_tail -> . var_call
    (362) var_call -> . IDENT list_index

    INT_LIT         shift and go to state 812
    IDENT           shift and go to state 55

    control_var_tail               shift and go to state 811
    var_call                       shift and go to state 813

state 739

    (305) until_factor -> LPAREN until_factor RPAREN .

    PLUS            reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    MINUS           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    MULTIPLY        reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    DIVISION        reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    MODULO          reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    EXPONENT        reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    GT              reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    LT              reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    EQ_EQ           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    GT_EQ           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    LT_EQ           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    NOT_EQ          reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    AND             reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    OR              reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    RPAREN          reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)


state 740

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE . statements RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    RBRACE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 814
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 741

    (306) until_factor_tail -> PLUS until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 815
    empty                          shift and go to state 646

state 742

    (307) until_factor_tail -> MINUS until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 816
    empty                          shift and go to state 646

state 743

    (308) until_factor_tail -> MULTIPLY until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 817
    empty                          shift and go to state 646

state 744

    (309) until_factor_tail -> DIVISION until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 818
    empty                          shift and go to state 646

state 745

    (310) until_factor_tail -> MODULO until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 819
    empty                          shift and go to state 646

state 746

    (311) until_factor_tail -> EXPONENT until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 820
    empty                          shift and go to state 646

state 747

    (312) until_factor_tail -> GT until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 821
    empty                          shift and go to state 646

state 748

    (313) until_factor_tail -> LT until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 822
    empty                          shift and go to state 646

state 749

    (314) until_factor_tail -> EQ_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 823
    empty                          shift and go to state 646

state 750

    (315) until_factor_tail -> GT_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 824
    empty                          shift and go to state 646

state 751

    (316) until_factor_tail -> LT_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 825
    empty                          shift and go to state 646

state 752

    (317) until_factor_tail -> NOT_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 826
    empty                          shift and go to state 646

state 753

    (318) until_factor_tail -> AND until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 827
    empty                          shift and go to state 646

state 754

    (319) until_factor_tail -> OR until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 632
    MINUS           shift and go to state 633
    MULTIPLY        shift and go to state 634
    DIVISION        shift and go to state 635
    MODULO          shift and go to state 636
    EXPONENT        shift and go to state 637
    GT              shift and go to state 638
    LT              shift and go to state 639
    EQ_EQ           shift and go to state 640
    GT_EQ           shift and go to state 641
    LT_EQ           shift and go to state 642
    NOT_EQ          shift and go to state 643
    AND             shift and go to state 644
    OR              shift and go to state 645
    RPAREN          reduce using rule 434 (empty -> .)

    until_factor_tail              shift and go to state 828
    empty                          shift and go to state 646

state 755

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL . LPAREN until_expression RPAREN

    LPAREN          shift and go to state 829


state 756

    (413) typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 413 (typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail .)


state 757

    (414) typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 414 (typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail .)


state 758

    (415) typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 415 (typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail .)


state 759

    (416) typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 416 (typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail .)


state 760

    (417) typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 417 (typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail .)


state 761

    (418) typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 418 (typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail .)


state 762

    (419) typecast_factor_tail -> GT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 419 (typecast_factor_tail -> GT typecast_factor typecast_factor_tail .)


state 763

    (420) typecast_factor_tail -> LT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 420 (typecast_factor_tail -> LT typecast_factor typecast_factor_tail .)


state 764

    (421) typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 421 (typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail .)


state 765

    (422) typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 422 (typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail .)


state 766

    (423) typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 423 (typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail .)


state 767

    (424) typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 424 (typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail .)


state 768

    (425) typecast_factor_tail -> AND typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 425 (typecast_factor_tail -> AND typecast_factor typecast_factor_tail .)


state 769

    (426) typecast_factor_tail -> OR typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 426 (typecast_factor_tail -> OR typecast_factor typecast_factor_tail .)


state 770

    (339) arg_tail -> COMMA arg_value arg_tail .

    RPAREN          reduce using rule 339 (arg_tail -> COMMA arg_value arg_tail .)


state 771

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition . OTHERWISE LBRACE statements RBRACE RBRACE

    OTHERWISE       shift and go to state 830


state 772

    (233) switch_condition -> SHIFT . switch_value COLON statements switchcond_tail
    (234) switch_value -> . switch_type_cast
    (235) switch_value -> . switch_expression
    (236) switch_value -> . function_call
    (263) switch_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (264) switch_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (265) switch_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (266) switch_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (237) switch_expression -> . switch_factor switch_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 835
    CONVERT_TO_FLT  shift and go to state 837
    CONVERT_TO_BLN  shift and go to state 838
    CONVERT_TO_STR  shift and go to state 839
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_value                   shift and go to state 831
    switch_type_cast               shift and go to state 832
    switch_expression              shift and go to state 833
    function_call                  shift and go to state 834
    switch_factor                  shift and go to state 840
    input_statement                shift and go to state 265
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 773

    (347) assign_tail -> DOT SPLICE LPAREN start COMMA . deleteCount COMMA splice_items RPAREN
    (358) deleteCount -> . empty
    (359) deleteCount -> . INT_LIT
    (434) empty -> .

    INT_LIT         shift and go to state 851
    COMMA           reduce using rule 434 (empty -> .)

    deleteCount                    shift and go to state 849
    empty                          shift and go to state 850

state 774

    (348) assign_tail -> DOT PUSH LPAREN list_element RPAREN .

    NEWLINE         reduce using rule 348 (assign_tail -> DOT PUSH LPAREN list_element RPAREN .)


state 775

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 852
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 776

    (212) condition_tail -> PLUS condition_factor condition_tail .

    RPAREN          reduce using rule 212 (condition_tail -> PLUS condition_factor condition_tail .)


state 777

    (213) condition_tail -> MINUS condition_factor condition_tail .

    RPAREN          reduce using rule 213 (condition_tail -> MINUS condition_factor condition_tail .)


state 778

    (214) condition_tail -> MULTIPLY condition_factor condition_tail .

    RPAREN          reduce using rule 214 (condition_tail -> MULTIPLY condition_factor condition_tail .)


state 779

    (215) condition_tail -> DIVISION condition_factor condition_tail .

    RPAREN          reduce using rule 215 (condition_tail -> DIVISION condition_factor condition_tail .)


state 780

    (216) condition_tail -> MODULO condition_factor condition_tail .

    RPAREN          reduce using rule 216 (condition_tail -> MODULO condition_factor condition_tail .)


state 781

    (217) condition_tail -> EXPONENT condition_factor condition_tail .

    RPAREN          reduce using rule 217 (condition_tail -> EXPONENT condition_factor condition_tail .)


state 782

    (218) condition_tail -> GT condition_factor condition_tail .

    RPAREN          reduce using rule 218 (condition_tail -> GT condition_factor condition_tail .)


state 783

    (219) condition_tail -> LT condition_factor condition_tail .

    RPAREN          reduce using rule 219 (condition_tail -> LT condition_factor condition_tail .)


state 784

    (220) condition_tail -> EQ_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 220 (condition_tail -> EQ_EQ condition_factor condition_tail .)


state 785

    (221) condition_tail -> GT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 221 (condition_tail -> GT_EQ condition_factor condition_tail .)


state 786

    (222) condition_tail -> LT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 222 (condition_tail -> LT_EQ condition_factor condition_tail .)


state 787

    (223) condition_tail -> NOT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 223 (condition_tail -> NOT_EQ condition_factor condition_tail .)


state 788

    (224) condition_tail -> AND condition_factor condition_tail .

    RPAREN          reduce using rule 224 (condition_tail -> AND condition_factor condition_tail .)


state 789

    (225) condition_tail -> OR condition_factor condition_tail .

    RPAREN          reduce using rule 225 (condition_tail -> OR condition_factor condition_tail .)


state 790

    (278) for_factor -> LPAREN for_factor . RPAREN

    RPAREN          shift and go to state 853


state 791

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON . update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (330) update -> . var_call update_tail
    (362) var_call -> . IDENT list_index

    IDENT           shift and go to state 55

    update                         shift and go to state 854
    var_call                       shift and go to state 855

state 792

    (273) for_expression -> for_factor for_factor_tail .

    SEMICOLON       reduce using rule 273 (for_expression -> for_factor for_factor_tail .)


state 793

    (279) for_factor_tail -> PLUS . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 856
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 794

    (280) for_factor_tail -> MINUS . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 857
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 795

    (281) for_factor_tail -> MULTIPLY . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 858
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 796

    (282) for_factor_tail -> DIVISION . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 859
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 797

    (283) for_factor_tail -> MODULO . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 860
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 798

    (284) for_factor_tail -> EXPONENT . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 861
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 799

    (285) for_factor_tail -> GT . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 862
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 800

    (286) for_factor_tail -> LT . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 863
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 801

    (287) for_factor_tail -> EQ_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 864
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 802

    (288) for_factor_tail -> GT_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 865
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 803

    (289) for_factor_tail -> LT_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 866
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 804

    (290) for_factor_tail -> NOT_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 867
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 805

    (291) for_factor_tail -> AND . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 868
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 806

    (292) for_factor_tail -> OR . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (362) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 732
    LPAREN          shift and go to state 727
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 733
    FLT_LIT         shift and go to state 734
    DAY             shift and go to state 735
    NIGHT           shift and go to state 736
    STR_LIT         shift and go to state 737

    for_factor                     shift and go to state 869
    var_call                       shift and go to state 730
    for_factor1                    shift and go to state 731

state 807

    (293) for_factor_tail -> empty .

    SEMICOLON       reduce using rule 293 (for_factor_tail -> empty .)


state 808

    (274) for_factor -> var_call postfix .

    PLUS            reduce using rule 274 (for_factor -> var_call postfix .)
    MINUS           reduce using rule 274 (for_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 274 (for_factor -> var_call postfix .)
    DIVISION        reduce using rule 274 (for_factor -> var_call postfix .)
    MODULO          reduce using rule 274 (for_factor -> var_call postfix .)
    EXPONENT        reduce using rule 274 (for_factor -> var_call postfix .)
    GT              reduce using rule 274 (for_factor -> var_call postfix .)
    LT              reduce using rule 274 (for_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 274 (for_factor -> var_call postfix .)
    GT_EQ           reduce using rule 274 (for_factor -> var_call postfix .)
    LT_EQ           reduce using rule 274 (for_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 274 (for_factor -> var_call postfix .)
    AND             reduce using rule 274 (for_factor -> var_call postfix .)
    OR              reduce using rule 274 (for_factor -> var_call postfix .)
    SEMICOLON       reduce using rule 274 (for_factor -> var_call postfix .)
    RPAREN          reduce using rule 274 (for_factor -> var_call postfix .)


state 809

    (276) for_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    GT              reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    LT              reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    AND             reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    OR              reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    SEMICOLON       reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 276 (for_factor -> TILDE INT_LIT .)


state 810

    (277) for_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    SEMICOLON       reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 277 (for_factor -> TILDE FLT_LIT .)


state 811

    (327) control_variable -> INT IDENT EQ control_var_tail .

    SEMICOLON       reduce using rule 327 (control_variable -> INT IDENT EQ control_var_tail .)


state 812

    (328) control_var_tail -> INT_LIT .

    SEMICOLON       reduce using rule 328 (control_var_tail -> INT_LIT .)


state 813

    (329) control_var_tail -> var_call .

    SEMICOLON       reduce using rule 329 (control_var_tail -> var_call .)


state 814

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 870


state 815

    (306) until_factor_tail -> PLUS until_factor until_factor_tail .

    RPAREN          reduce using rule 306 (until_factor_tail -> PLUS until_factor until_factor_tail .)


state 816

    (307) until_factor_tail -> MINUS until_factor until_factor_tail .

    RPAREN          reduce using rule 307 (until_factor_tail -> MINUS until_factor until_factor_tail .)


state 817

    (308) until_factor_tail -> MULTIPLY until_factor until_factor_tail .

    RPAREN          reduce using rule 308 (until_factor_tail -> MULTIPLY until_factor until_factor_tail .)


state 818

    (309) until_factor_tail -> DIVISION until_factor until_factor_tail .

    RPAREN          reduce using rule 309 (until_factor_tail -> DIVISION until_factor until_factor_tail .)


state 819

    (310) until_factor_tail -> MODULO until_factor until_factor_tail .

    RPAREN          reduce using rule 310 (until_factor_tail -> MODULO until_factor until_factor_tail .)


state 820

    (311) until_factor_tail -> EXPONENT until_factor until_factor_tail .

    RPAREN          reduce using rule 311 (until_factor_tail -> EXPONENT until_factor until_factor_tail .)


state 821

    (312) until_factor_tail -> GT until_factor until_factor_tail .

    RPAREN          reduce using rule 312 (until_factor_tail -> GT until_factor until_factor_tail .)


state 822

    (313) until_factor_tail -> LT until_factor until_factor_tail .

    RPAREN          reduce using rule 313 (until_factor_tail -> LT until_factor until_factor_tail .)


state 823

    (314) until_factor_tail -> EQ_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 314 (until_factor_tail -> EQ_EQ until_factor until_factor_tail .)


state 824

    (315) until_factor_tail -> GT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 315 (until_factor_tail -> GT_EQ until_factor until_factor_tail .)


state 825

    (316) until_factor_tail -> LT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 316 (until_factor_tail -> LT_EQ until_factor until_factor_tail .)


state 826

    (317) until_factor_tail -> NOT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 317 (until_factor_tail -> NOT_EQ until_factor until_factor_tail .)


state 827

    (318) until_factor_tail -> AND until_factor until_factor_tail .

    RPAREN          reduce using rule 318 (until_factor_tail -> AND until_factor until_factor_tail .)


state 828

    (319) until_factor_tail -> OR until_factor until_factor_tail .

    RPAREN          reduce using rule 319 (until_factor_tail -> OR until_factor until_factor_tail .)


state 829

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN . until_expression RPAREN
    (300) until_expression -> . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (362) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 507
    LPAREN          shift and go to state 502
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 508
    FLT_LIT         shift and go to state 509
    DAY             shift and go to state 510
    NIGHT           shift and go to state 511
    STR_LIT         shift and go to state 512

    until_expression               shift and go to state 871
    until_factor                   shift and go to state 504
    var_call                       shift and go to state 505
    until_factor1                  shift and go to state 506

state 830

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE . LBRACE statements RBRACE RBRACE

    LBRACE          shift and go to state 872


state 831

    (233) switch_condition -> SHIFT switch_value . COLON statements switchcond_tail

    COLON           shift and go to state 873


state 832

    (234) switch_value -> switch_type_cast .

    COLON           reduce using rule 234 (switch_value -> switch_type_cast .)


state 833

    (235) switch_value -> switch_expression .

    COLON           reduce using rule 235 (switch_value -> switch_expression .)


state 834

    (236) switch_value -> function_call .

    COLON           reduce using rule 236 (switch_value -> function_call .)


state 835

    (263) switch_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 874


state 836

    (242) switch_factor -> LPAREN . switch_factor RPAREN
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 875
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 837

    (264) switch_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 876


state 838

    (265) switch_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 877


state 839

    (266) switch_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 878


state 840

    (237) switch_expression -> switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 879
    empty                          shift and go to state 894

state 841

    (238) switch_factor -> var_call . postfix
    (369) postfix -> . empty
    (370) postfix -> . postfix_op
    (434) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 434 (empty -> .)
    MINUS           reduce using rule 434 (empty -> .)
    MULTIPLY        reduce using rule 434 (empty -> .)
    DIVISION        reduce using rule 434 (empty -> .)
    MODULO          reduce using rule 434 (empty -> .)
    EXPONENT        reduce using rule 434 (empty -> .)
    GT              reduce using rule 434 (empty -> .)
    LT              reduce using rule 434 (empty -> .)
    EQ_EQ           reduce using rule 434 (empty -> .)
    GT_EQ           reduce using rule 434 (empty -> .)
    LT_EQ           reduce using rule 434 (empty -> .)
    NOT_EQ          reduce using rule 434 (empty -> .)
    AND             reduce using rule 434 (empty -> .)
    OR              reduce using rule 434 (empty -> .)
    COLON           reduce using rule 434 (empty -> .)
    RPAREN          reduce using rule 434 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 895
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 842

    (239) switch_factor -> switch_factor1 .

    PLUS            reduce using rule 239 (switch_factor -> switch_factor1 .)
    MINUS           reduce using rule 239 (switch_factor -> switch_factor1 .)
    MULTIPLY        reduce using rule 239 (switch_factor -> switch_factor1 .)
    DIVISION        reduce using rule 239 (switch_factor -> switch_factor1 .)
    MODULO          reduce using rule 239 (switch_factor -> switch_factor1 .)
    EXPONENT        reduce using rule 239 (switch_factor -> switch_factor1 .)
    GT              reduce using rule 239 (switch_factor -> switch_factor1 .)
    LT              reduce using rule 239 (switch_factor -> switch_factor1 .)
    EQ_EQ           reduce using rule 239 (switch_factor -> switch_factor1 .)
    GT_EQ           reduce using rule 239 (switch_factor -> switch_factor1 .)
    LT_EQ           reduce using rule 239 (switch_factor -> switch_factor1 .)
    NOT_EQ          reduce using rule 239 (switch_factor -> switch_factor1 .)
    AND             reduce using rule 239 (switch_factor -> switch_factor1 .)
    OR              reduce using rule 239 (switch_factor -> switch_factor1 .)
    COLON           reduce using rule 239 (switch_factor -> switch_factor1 .)
    RPAREN          reduce using rule 239 (switch_factor -> switch_factor1 .)


state 843

    (240) switch_factor -> TILDE . INT_LIT
    (241) switch_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 896
    FLT_LIT         shift and go to state 897


state 844

    (258) switch_factor1 -> INT_LIT .

    PLUS            reduce using rule 258 (switch_factor1 -> INT_LIT .)
    MINUS           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 258 (switch_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 258 (switch_factor1 -> INT_LIT .)
    MODULO          reduce using rule 258 (switch_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 258 (switch_factor1 -> INT_LIT .)
    GT              reduce using rule 258 (switch_factor1 -> INT_LIT .)
    LT              reduce using rule 258 (switch_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 258 (switch_factor1 -> INT_LIT .)
    AND             reduce using rule 258 (switch_factor1 -> INT_LIT .)
    OR              reduce using rule 258 (switch_factor1 -> INT_LIT .)
    COLON           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 258 (switch_factor1 -> INT_LIT .)


state 845

    (259) switch_factor1 -> FLT_LIT .

    PLUS            reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    GT              reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    LT              reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    AND             reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    OR              reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    COLON           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 259 (switch_factor1 -> FLT_LIT .)


state 846

    (260) switch_factor1 -> DAY .

    PLUS            reduce using rule 260 (switch_factor1 -> DAY .)
    MINUS           reduce using rule 260 (switch_factor1 -> DAY .)
    MULTIPLY        reduce using rule 260 (switch_factor1 -> DAY .)
    DIVISION        reduce using rule 260 (switch_factor1 -> DAY .)
    MODULO          reduce using rule 260 (switch_factor1 -> DAY .)
    EXPONENT        reduce using rule 260 (switch_factor1 -> DAY .)
    GT              reduce using rule 260 (switch_factor1 -> DAY .)
    LT              reduce using rule 260 (switch_factor1 -> DAY .)
    EQ_EQ           reduce using rule 260 (switch_factor1 -> DAY .)
    GT_EQ           reduce using rule 260 (switch_factor1 -> DAY .)
    LT_EQ           reduce using rule 260 (switch_factor1 -> DAY .)
    NOT_EQ          reduce using rule 260 (switch_factor1 -> DAY .)
    AND             reduce using rule 260 (switch_factor1 -> DAY .)
    OR              reduce using rule 260 (switch_factor1 -> DAY .)
    COLON           reduce using rule 260 (switch_factor1 -> DAY .)
    RPAREN          reduce using rule 260 (switch_factor1 -> DAY .)


state 847

    (261) switch_factor1 -> NIGHT .

    PLUS            reduce using rule 261 (switch_factor1 -> NIGHT .)
    MINUS           reduce using rule 261 (switch_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 261 (switch_factor1 -> NIGHT .)
    DIVISION        reduce using rule 261 (switch_factor1 -> NIGHT .)
    MODULO          reduce using rule 261 (switch_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 261 (switch_factor1 -> NIGHT .)
    GT              reduce using rule 261 (switch_factor1 -> NIGHT .)
    LT              reduce using rule 261 (switch_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 261 (switch_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 261 (switch_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 261 (switch_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 261 (switch_factor1 -> NIGHT .)
    AND             reduce using rule 261 (switch_factor1 -> NIGHT .)
    OR              reduce using rule 261 (switch_factor1 -> NIGHT .)
    COLON           reduce using rule 261 (switch_factor1 -> NIGHT .)
    RPAREN          reduce using rule 261 (switch_factor1 -> NIGHT .)


state 848

    (262) switch_factor1 -> STR_LIT .

    PLUS            reduce using rule 262 (switch_factor1 -> STR_LIT .)
    MINUS           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 262 (switch_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 262 (switch_factor1 -> STR_LIT .)
    MODULO          reduce using rule 262 (switch_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 262 (switch_factor1 -> STR_LIT .)
    GT              reduce using rule 262 (switch_factor1 -> STR_LIT .)
    LT              reduce using rule 262 (switch_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 262 (switch_factor1 -> STR_LIT .)
    AND             reduce using rule 262 (switch_factor1 -> STR_LIT .)
    OR              reduce using rule 262 (switch_factor1 -> STR_LIT .)
    COLON           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 262 (switch_factor1 -> STR_LIT .)


state 849

    (347) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount . COMMA splice_items RPAREN

    COMMA           shift and go to state 898


state 850

    (358) deleteCount -> empty .

    COMMA           reduce using rule 358 (deleteCount -> empty .)


state 851

    (359) deleteCount -> INT_LIT .

    COMMA           reduce using rule 359 (deleteCount -> INT_LIT .)


state 852

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 899
    empty                          shift and go to state 17

state 853

    (278) for_factor -> LPAREN for_factor RPAREN .

    PLUS            reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    MINUS           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    MULTIPLY        reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    DIVISION        reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    MODULO          reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    EXPONENT        reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    GT              reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    LT              reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    EQ_EQ           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    GT_EQ           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    LT_EQ           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    NOT_EQ          reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    AND             reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    OR              reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    SEMICOLON       reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    RPAREN          reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)


state 854

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 900


state 855

    (330) update -> var_call . update_tail
    (331) update_tail -> . postfix_op
    (332) update_tail -> . compound_op value
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS
    (352) compound_op -> . PLUS_EQ
    (353) compound_op -> . MINUS_EQ
    (354) compound_op -> . MUL_EQ
    (355) compound_op -> . DIV_EQ
    (356) compound_op -> . MOD_EQ

    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    PLUS_EQ         shift and go to state 357
    MINUS_EQ        shift and go to state 358
    MUL_EQ          shift and go to state 359
    DIV_EQ          shift and go to state 360
    MOD_EQ          shift and go to state 361

    update_tail                    shift and go to state 901
    postfix_op                     shift and go to state 902
    compound_op                    shift and go to state 903

state 856

    (279) for_factor_tail -> PLUS for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 904
    empty                          shift and go to state 807

state 857

    (280) for_factor_tail -> MINUS for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 905
    empty                          shift and go to state 807

state 858

    (281) for_factor_tail -> MULTIPLY for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 906
    empty                          shift and go to state 807

state 859

    (282) for_factor_tail -> DIVISION for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 907
    empty                          shift and go to state 807

state 860

    (283) for_factor_tail -> MODULO for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 908
    empty                          shift and go to state 807

state 861

    (284) for_factor_tail -> EXPONENT for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 909
    empty                          shift and go to state 807

state 862

    (285) for_factor_tail -> GT for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 910
    empty                          shift and go to state 807

state 863

    (286) for_factor_tail -> LT for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 911
    empty                          shift and go to state 807

state 864

    (287) for_factor_tail -> EQ_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 912
    empty                          shift and go to state 807

state 865

    (288) for_factor_tail -> GT_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 913
    empty                          shift and go to state 807

state 866

    (289) for_factor_tail -> LT_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 914
    empty                          shift and go to state 807

state 867

    (290) for_factor_tail -> NOT_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 915
    empty                          shift and go to state 807

state 868

    (291) for_factor_tail -> AND for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 916
    empty                          shift and go to state 807

state 869

    (292) for_factor_tail -> OR for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 793
    MINUS           shift and go to state 794
    MULTIPLY        shift and go to state 795
    DIVISION        shift and go to state 796
    MODULO          shift and go to state 797
    EXPONENT        shift and go to state 798
    GT              shift and go to state 799
    LT              shift and go to state 800
    EQ_EQ           shift and go to state 801
    GT_EQ           shift and go to state 802
    LT_EQ           shift and go to state 803
    NOT_EQ          shift and go to state 804
    AND             shift and go to state 805
    OR              shift and go to state 806
    SEMICOLON       reduce using rule 434 (empty -> .)

    for_factor_tail                shift and go to state 917
    empty                          shift and go to state 807

state 870

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .

    NEWLINE         reduce using rule 299 (until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .)


state 871

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression . RPAREN

    RPAREN          shift and go to state 918


state 872

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE . statements RBRACE RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    RBRACE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 919
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 873

    (233) switch_condition -> SHIFT switch_value COLON . statements switchcond_tail
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    SHIFT           reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 920
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 874

    (263) switch_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 921
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 875

    (242) switch_factor -> LPAREN switch_factor . RPAREN

    RPAREN          shift and go to state 922


state 876

    (264) switch_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 923
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 877

    (265) switch_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 924
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 878

    (266) switch_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (404) typecast_value -> . typecast_expression
    (405) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (406) typecast_value -> . input_statement
    (407) typecast_expression -> . typecast_factor typecast_factor_tail
    (433) input_statement -> . INPUT LPAREN RPAREN
    (408) typecast_factor -> . var_call postfix
    (409) typecast_factor -> . typecast_factor1
    (410) typecast_factor -> . TILDE INT_LIT
    (411) typecast_factor -> . TILDE FLT_LIT
    (412) typecast_factor -> . LPAREN typecast_factor RPAREN
    (362) var_call -> . IDENT list_index
    (428) typecast_factor1 -> . INT_LIT
    (429) typecast_factor1 -> . FLT_LIT
    (430) typecast_factor1 -> . DAY
    (431) typecast_factor1 -> . NIGHT
    (432) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 417
    INPUT           shift and go to state 271
    TILDE           shift and go to state 422
    LPAREN          shift and go to state 414
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 423
    FLT_LIT         shift and go to state 424
    DAY             shift and go to state 425
    NIGHT           shift and go to state 426
    STR_LIT         shift and go to state 427

    typecast_value                 shift and go to state 925
    typecast_expression            shift and go to state 416
    input_statement                shift and go to state 418
    typecast_factor                shift and go to state 419
    var_call                       shift and go to state 420
    typecast_factor1               shift and go to state 421

state 879

    (237) switch_expression -> switch_factor switch_factor_tail .

    COLON           reduce using rule 237 (switch_expression -> switch_factor switch_factor_tail .)


state 880

    (243) switch_factor_tail -> PLUS . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 926
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 881

    (244) switch_factor_tail -> MINUS . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 927
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 882

    (245) switch_factor_tail -> MULTIPLY . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 928
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 883

    (246) switch_factor_tail -> DIVISION . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 929
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 884

    (247) switch_factor_tail -> MODULO . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 930
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 885

    (248) switch_factor_tail -> EXPONENT . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 931
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 886

    (249) switch_factor_tail -> GT . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 932
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 887

    (250) switch_factor_tail -> LT . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 933
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 888

    (251) switch_factor_tail -> EQ_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 934
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 889

    (252) switch_factor_tail -> GT_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 935
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 890

    (253) switch_factor_tail -> LT_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 936
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 891

    (254) switch_factor_tail -> NOT_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 937
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 892

    (255) switch_factor_tail -> AND . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 938
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 893

    (256) switch_factor_tail -> OR . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (362) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 843
    LPAREN          shift and go to state 836
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 844
    FLT_LIT         shift and go to state 845
    DAY             shift and go to state 846
    NIGHT           shift and go to state 847
    STR_LIT         shift and go to state 848

    switch_factor                  shift and go to state 939
    var_call                       shift and go to state 841
    switch_factor1                 shift and go to state 842

state 894

    (257) switch_factor_tail -> empty .

    COLON           reduce using rule 257 (switch_factor_tail -> empty .)


state 895

    (238) switch_factor -> var_call postfix .

    PLUS            reduce using rule 238 (switch_factor -> var_call postfix .)
    MINUS           reduce using rule 238 (switch_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 238 (switch_factor -> var_call postfix .)
    DIVISION        reduce using rule 238 (switch_factor -> var_call postfix .)
    MODULO          reduce using rule 238 (switch_factor -> var_call postfix .)
    EXPONENT        reduce using rule 238 (switch_factor -> var_call postfix .)
    GT              reduce using rule 238 (switch_factor -> var_call postfix .)
    LT              reduce using rule 238 (switch_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 238 (switch_factor -> var_call postfix .)
    GT_EQ           reduce using rule 238 (switch_factor -> var_call postfix .)
    LT_EQ           reduce using rule 238 (switch_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 238 (switch_factor -> var_call postfix .)
    AND             reduce using rule 238 (switch_factor -> var_call postfix .)
    OR              reduce using rule 238 (switch_factor -> var_call postfix .)
    COLON           reduce using rule 238 (switch_factor -> var_call postfix .)
    RPAREN          reduce using rule 238 (switch_factor -> var_call postfix .)


state 896

    (240) switch_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    GT              reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    LT              reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    AND             reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    OR              reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    COLON           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 240 (switch_factor -> TILDE INT_LIT .)


state 897

    (241) switch_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    COLON           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)


state 898

    (347) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA . splice_items RPAREN
    (360) splice_items -> . empty
    (361) splice_items -> . list_element
    (434) empty -> .
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 434 (empty -> .)
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    splice_items                   shift and go to state 940
    empty                          shift and go to state 941
    list_element                   shift and go to state 942
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 899

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RBRACE          shift and go to state 943


state 900

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 944


state 901

    (330) update -> var_call update_tail .

    RPAREN          reduce using rule 330 (update -> var_call update_tail .)


state 902

    (331) update_tail -> postfix_op .

    RPAREN          reduce using rule 331 (update_tail -> postfix_op .)


state 903

    (332) update_tail -> compound_op . value
    (371) value -> . type_cast
    (372) value -> . value_expression
    (373) value -> . function_call
    (400) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (401) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (402) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (403) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (374) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (375) value_factor -> . var_call postfix
    (376) value_factor -> . value_factor1
    (377) value_factor -> . TILDE INT_LIT
    (378) value_factor -> . TILDE FLT_LIT
    (379) value_factor -> . LPAREN value_factor RPAREN
    (433) input_statement -> . INPUT LPAREN RPAREN
    (362) var_call -> . IDENT list_index
    (395) value_factor1 -> . INT_LIT
    (396) value_factor1 -> . FLT_LIT
    (397) value_factor1 -> . DAY
    (398) value_factor1 -> . NIGHT
    (399) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 366
    CONVERT_TO_FLT  shift and go to state 368
    CONVERT_TO_BLN  shift and go to state 369
    CONVERT_TO_STR  shift and go to state 370
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 374
    LPAREN          shift and go to state 367
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 375
    FLT_LIT         shift and go to state 376
    DAY             shift and go to state 377
    NIGHT           shift and go to state 378
    STR_LIT         shift and go to state 379

    value                          shift and go to state 945
    type_cast                      shift and go to state 363
    value_expression               shift and go to state 364
    function_call                  shift and go to state 365
    value_factor                   shift and go to state 371
    input_statement                shift and go to state 265
    var_call                       shift and go to state 372
    value_factor1                  shift and go to state 373

state 904

    (279) for_factor_tail -> PLUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 279 (for_factor_tail -> PLUS for_factor for_factor_tail .)


state 905

    (280) for_factor_tail -> MINUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 280 (for_factor_tail -> MINUS for_factor for_factor_tail .)


state 906

    (281) for_factor_tail -> MULTIPLY for_factor for_factor_tail .

    SEMICOLON       reduce using rule 281 (for_factor_tail -> MULTIPLY for_factor for_factor_tail .)


state 907

    (282) for_factor_tail -> DIVISION for_factor for_factor_tail .

    SEMICOLON       reduce using rule 282 (for_factor_tail -> DIVISION for_factor for_factor_tail .)


state 908

    (283) for_factor_tail -> MODULO for_factor for_factor_tail .

    SEMICOLON       reduce using rule 283 (for_factor_tail -> MODULO for_factor for_factor_tail .)


state 909

    (284) for_factor_tail -> EXPONENT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 284 (for_factor_tail -> EXPONENT for_factor for_factor_tail .)


state 910

    (285) for_factor_tail -> GT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 285 (for_factor_tail -> GT for_factor for_factor_tail .)


state 911

    (286) for_factor_tail -> LT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 286 (for_factor_tail -> LT for_factor for_factor_tail .)


state 912

    (287) for_factor_tail -> EQ_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 287 (for_factor_tail -> EQ_EQ for_factor for_factor_tail .)


state 913

    (288) for_factor_tail -> GT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 288 (for_factor_tail -> GT_EQ for_factor for_factor_tail .)


state 914

    (289) for_factor_tail -> LT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 289 (for_factor_tail -> LT_EQ for_factor for_factor_tail .)


state 915

    (290) for_factor_tail -> NOT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 290 (for_factor_tail -> NOT_EQ for_factor for_factor_tail .)


state 916

    (291) for_factor_tail -> AND for_factor for_factor_tail .

    SEMICOLON       reduce using rule 291 (for_factor_tail -> AND for_factor for_factor_tail .)


state 917

    (292) for_factor_tail -> OR for_factor for_factor_tail .

    SEMICOLON       reduce using rule 292 (for_factor_tail -> OR for_factor for_factor_tail .)


state 918

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .

    NEWLINE         reduce using rule 326 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .)


state 919

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements . RBRACE RBRACE

    RBRACE          shift and go to state 946


state 920

    (233) switch_condition -> SHIFT switch_value COLON statements . switchcond_tail
    (267) switchcond_tail -> . switch_condition
    (268) switchcond_tail -> . empty
    (233) switch_condition -> . SHIFT switch_value COLON statements switchcond_tail
    (434) empty -> .

    SHIFT           shift and go to state 772
    OTHERWISE       reduce using rule 434 (empty -> .)

    switchcond_tail                shift and go to state 947
    switch_condition               shift and go to state 948
    empty                          shift and go to state 949

state 921

    (263) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 950


state 922

    (242) switch_factor -> LPAREN switch_factor RPAREN .

    PLUS            reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    MINUS           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    MULTIPLY        reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    DIVISION        reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    MODULO          reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    EXPONENT        reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT              reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT              reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    EQ_EQ           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT_EQ           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT_EQ           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    NOT_EQ          reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    AND             reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    OR              reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    COLON           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    RPAREN          reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)


state 923

    (264) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 951


state 924

    (265) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 952


state 925

    (266) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 953


state 926

    (243) switch_factor_tail -> PLUS switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 954
    empty                          shift and go to state 894

state 927

    (244) switch_factor_tail -> MINUS switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 955
    empty                          shift and go to state 894

state 928

    (245) switch_factor_tail -> MULTIPLY switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 956
    empty                          shift and go to state 894

state 929

    (246) switch_factor_tail -> DIVISION switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 957
    empty                          shift and go to state 894

state 930

    (247) switch_factor_tail -> MODULO switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 958
    empty                          shift and go to state 894

state 931

    (248) switch_factor_tail -> EXPONENT switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 959
    empty                          shift and go to state 894

state 932

    (249) switch_factor_tail -> GT switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 960
    empty                          shift and go to state 894

state 933

    (250) switch_factor_tail -> LT switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 961
    empty                          shift and go to state 894

state 934

    (251) switch_factor_tail -> EQ_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 962
    empty                          shift and go to state 894

state 935

    (252) switch_factor_tail -> GT_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 963
    empty                          shift and go to state 894

state 936

    (253) switch_factor_tail -> LT_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 964
    empty                          shift and go to state 894

state 937

    (254) switch_factor_tail -> NOT_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 965
    empty                          shift and go to state 894

state 938

    (255) switch_factor_tail -> AND switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 966
    empty                          shift and go to state 894

state 939

    (256) switch_factor_tail -> OR switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (434) empty -> .

    PLUS            shift and go to state 880
    MINUS           shift and go to state 881
    MULTIPLY        shift and go to state 882
    DIVISION        shift and go to state 883
    MODULO          shift and go to state 884
    EXPONENT        shift and go to state 885
    GT              shift and go to state 886
    LT              shift and go to state 887
    EQ_EQ           shift and go to state 888
    GT_EQ           shift and go to state 889
    LT_EQ           shift and go to state 890
    NOT_EQ          shift and go to state 891
    AND             shift and go to state 892
    OR              shift and go to state 893
    COLON           reduce using rule 434 (empty -> .)

    switch_factor_tail             shift and go to state 967
    empty                          shift and go to state 894

state 940

    (347) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items . RPAREN

    RPAREN          shift and go to state 968


state 941

    (360) splice_items -> empty .

    RPAREN          reduce using rule 360 (splice_items -> empty .)


state 942

    (361) splice_items -> list_element .

    RPAREN          reduce using rule 361 (splice_items -> list_element .)


state 943

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    OTHERWISE_CHECK reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 969
    empty                          shift and go to state 17

state 944

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 434 (empty -> .)
    FLT             reduce using rule 434 (empty -> .)
    BLN             reduce using rule 434 (empty -> .)
    CHR             reduce using rule 434 (empty -> .)
    STR             reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 970
    empty                          shift and go to state 17

state 945

    (332) update_tail -> compound_op value .

    RPAREN          reduce using rule 332 (update_tail -> compound_op value .)


state 946

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE . RBRACE

    RBRACE          shift and go to state 971


state 947

    (233) switch_condition -> SHIFT switch_value COLON statements switchcond_tail .

    OTHERWISE       reduce using rule 233 (switch_condition -> SHIFT switch_value COLON statements switchcond_tail .)


state 948

    (267) switchcond_tail -> switch_condition .

    OTHERWISE       reduce using rule 267 (switchcond_tail -> switch_condition .)


state 949

    (268) switchcond_tail -> empty .

    OTHERWISE       reduce using rule 268 (switchcond_tail -> empty .)


state 950

    (263) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 263 (switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 951

    (264) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 264 (switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 952

    (265) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COLON           reduce using rule 265 (switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 953

    (266) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COLON           reduce using rule 266 (switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 954

    (243) switch_factor_tail -> PLUS switch_factor switch_factor_tail .

    COLON           reduce using rule 243 (switch_factor_tail -> PLUS switch_factor switch_factor_tail .)


state 955

    (244) switch_factor_tail -> MINUS switch_factor switch_factor_tail .

    COLON           reduce using rule 244 (switch_factor_tail -> MINUS switch_factor switch_factor_tail .)


state 956

    (245) switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .

    COLON           reduce using rule 245 (switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .)


state 957

    (246) switch_factor_tail -> DIVISION switch_factor switch_factor_tail .

    COLON           reduce using rule 246 (switch_factor_tail -> DIVISION switch_factor switch_factor_tail .)


state 958

    (247) switch_factor_tail -> MODULO switch_factor switch_factor_tail .

    COLON           reduce using rule 247 (switch_factor_tail -> MODULO switch_factor switch_factor_tail .)


state 959

    (248) switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .

    COLON           reduce using rule 248 (switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .)


state 960

    (249) switch_factor_tail -> GT switch_factor switch_factor_tail .

    COLON           reduce using rule 249 (switch_factor_tail -> GT switch_factor switch_factor_tail .)


state 961

    (250) switch_factor_tail -> LT switch_factor switch_factor_tail .

    COLON           reduce using rule 250 (switch_factor_tail -> LT switch_factor switch_factor_tail .)


state 962

    (251) switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 251 (switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .)


state 963

    (252) switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 252 (switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .)


state 964

    (253) switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 253 (switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .)


state 965

    (254) switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 254 (switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .)


state 966

    (255) switch_factor_tail -> AND switch_factor switch_factor_tail .

    COLON           reduce using rule 255 (switch_factor_tail -> AND switch_factor switch_factor_tail .)


state 967

    (256) switch_factor_tail -> OR switch_factor switch_factor_tail .

    COLON           reduce using rule 256 (switch_factor_tail -> OR switch_factor switch_factor_tail .)


state 968

    (347) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .

    NEWLINE         reduce using rule 347 (assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .)


state 969

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (204) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (205) conditional_tail -> . empty
    (434) empty -> .

    OTHERWISE_CHECK shift and go to state 973
    NEWLINE         reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)

    conditional_tail               shift and go to state 972
    empty                          shift and go to state 974

state 970

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 975
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 971

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE .

    NEWLINE         reduce using rule 232 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE .)


state 972

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail . maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    OTHERWISE       reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 976
    empty                          shift and go to state 17

state 973

    (204) conditional_tail -> OTHERWISE_CHECK . LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail

    LPAREN          shift and go to state 977


state 974

    (205) conditional_tail -> empty .

    NEWLINE         reduce using rule 205 (conditional_tail -> empty .)
    OTHERWISE       reduce using rule 205 (conditional_tail -> empty .)


state 975

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 978
    empty                          shift and go to state 17

state 976

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline . OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    OTHERWISE       shift and go to state 979


state 977

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN . condition RPAREN LBRACE statements RBRACE conditional_tail
    (206) condition -> . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (362) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 494
    LPAREN          shift and go to state 489
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 495
    FLT_LIT         shift and go to state 496
    DAY             shift and go to state 497
    NIGHT           shift and go to state 498
    STR_LIT         shift and go to state 499

    condition                      shift and go to state 980
    condition_factor               shift and go to state 491
    var_call                       shift and go to state 492
    condition1                     shift and go to state 493

state 978

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 981


state 979

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 982
    empty                          shift and go to state 17

state 980

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition . RPAREN LBRACE statements RBRACE conditional_tail

    RPAREN          shift and go to state 983


state 981

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 272 (for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .)


state 982

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 984


state 983

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN . LBRACE statements RBRACE conditional_tail

    LBRACE          shift and go to state 985


state 984

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 434 (empty -> .)
    FLT             reduce using rule 434 (empty -> .)
    BLN             reduce using rule 434 (empty -> .)
    CHR             reduce using rule 434 (empty -> .)
    STR             reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)

  ! NEWLINE         [ reduce using rule 434 (empty -> .) ]

    maybe_newline                  shift and go to state 986
    empty                          shift and go to state 17

state 985

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE . statements RBRACE conditional_tail
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    RBRACE          reduce using rule 434 (empty -> .)
    NEWLINE         reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 987
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 986

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec unli_newline statements_tail
    (434) empty -> .
    (151) local_dec -> . local_var_statement local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

    NEWLINE         reduce using rule 434 (empty -> .)
    RBRACE          reduce using rule 434 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

    statements                     shift and go to state 988
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 987

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements . RBRACE conditional_tail

    RBRACE          shift and go to state 989


state 988

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (434) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 434 (empty -> .)

    maybe_newline                  shift and go to state 990
    empty                          shift and go to state 17

state 989

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE . conditional_tail
    (204) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (205) conditional_tail -> . empty
    (434) empty -> .

    OTHERWISE_CHECK shift and go to state 973
    NEWLINE         reduce using rule 434 (empty -> .)
    OTHERWISE       reduce using rule 434 (empty -> .)

    conditional_tail               shift and go to state 991
    empty                          shift and go to state 974

state 990

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 992


state 991

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .

    NEWLINE         reduce using rule 204 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    OTHERWISE       reduce using rule 204 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)


state 992

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 203 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 18 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 220 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 225 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 712 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 943 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 944 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 984 resolved as shift
WARNING: reduce/reduce conflict in state 231 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 231
WARNING: reduce/reduce conflict in state 539 resolved using rule (function_statements -> empty)
WARNING: rejected rule (function_statements_tail -> empty) in state 539
WARNING: Rule (local_dec -> empty) is never reduced
WARNING: Rule (function_statements_tail -> empty) is never reduced
