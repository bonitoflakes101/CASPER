Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLN_LIT
    CARRIAGE_RETURN
    COMMENT
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    ILLEGAL
    IN
    LIST_BLN
    LIST_BLN2D
    LIST_CHR
    LIST_CHR2D
    LIST_FLT
    LIST_FLT2D
    LIST_INT
    LIST_INT2D
    LIST_STR
    LIST_STR2D
    MEASURE
    NOT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
Rule 2     maybe_newline -> empty
Rule 3     maybe_newline -> NEWLINE maybe_newline
Rule 4     unli_newline -> NEWLINE
Rule 5     unli_newline -> NEWLINE unli_newline
Rule 6     main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 7     global_dec -> global_statement unli_newline global_tail
Rule 8     global_dec -> empty
Rule 9     global_tail -> global_dec
Rule 10    global_statement -> var_statement global_statement_tail
Rule 11    var_statement -> data_type IDENT list_dec
Rule 12    list_dec -> empty
Rule 13    list_dec -> LBRACKET RBRACKET _2d_list
Rule 14    _2d_list -> empty
Rule 15    _2d_list -> LBRACKET RBRACKET
Rule 16    global_statement_tail -> empty
Rule 17    global_statement_tail -> COMMA IDENT global_statement_tail
Rule 18    global_statement_tail -> EQ global_value global_statement_tail2
Rule 19    global_statement_tail2 -> COMMA IDENT global_statement_tail
Rule 20    global_statement_tail2 -> empty
Rule 21    global_value -> expression
Rule 22    global_value -> list_value
Rule 23    list_value -> LBRACKET list_element RBRACKET
Rule 24    list_element -> literal element_tail
Rule 25    element_tail -> COMMA list_element
Rule 26    element_tail -> empty
Rule 27    data_type -> INT
Rule 28    data_type -> FLT
Rule 29    data_type -> BLN
Rule 30    data_type -> CHR
Rule 31    data_type -> STR
Rule 32    expression -> factor factor_tail
Rule 33    factor -> var_call postfix
Rule 34    factor -> literal1
Rule 35    factor -> TILDE INT_LIT
Rule 36    factor -> TILDE FLT_LIT
Rule 37    factor -> LPAREN factor_expression RPAREN
Rule 38    factor_expression -> factor_expression_factor factor_expression_tail
Rule 39    factor_expression_factor -> var_call postfix
Rule 40    factor_expression_factor -> factor_expression1
Rule 41    factor_expression_factor -> TILDE INT_LIT
Rule 42    factor_expression_factor -> TILDE FLT_LIT
Rule 43    factor_expression_factor -> LPAREN factor_expression RPAREN
Rule 44    factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail
Rule 45    factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail
Rule 46    factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail
Rule 47    factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail
Rule 48    factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail
Rule 49    factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail
Rule 50    factor_expression_tail -> GT factor_expression_factor factor_expression_tail
Rule 51    factor_expression_tail -> LT factor_expression_factor factor_expression_tail
Rule 52    factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail
Rule 53    factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail
Rule 54    factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail
Rule 55    factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail
Rule 56    factor_expression_tail -> AND factor_expression_factor factor_expression_tail
Rule 57    factor_expression_tail -> OR factor_expression_factor factor_expression_tail
Rule 58    factor_expression_tail -> empty
Rule 59    factor_expression1 -> INT_LIT
Rule 60    factor_expression1 -> FLT_LIT
Rule 61    factor_expression1 -> DAY
Rule 62    factor_expression1 -> NIGHT
Rule 63    factor_expression1 -> STR_LIT
Rule 64    factor_tail -> PLUS factor factor_tail
Rule 65    factor_tail -> MINUS factor factor_tail
Rule 66    factor_tail -> MULTIPLY factor factor_tail
Rule 67    factor_tail -> DIVISION factor factor_tail
Rule 68    factor_tail -> MODULO factor factor_tail
Rule 69    factor_tail -> EXPONENT factor factor_tail
Rule 70    factor_tail -> GT factor factor_tail
Rule 71    factor_tail -> LT factor factor_tail
Rule 72    factor_tail -> EQ_EQ factor factor_tail
Rule 73    factor_tail -> GT_EQ factor factor_tail
Rule 74    factor_tail -> LT_EQ factor factor_tail
Rule 75    factor_tail -> NOT_EQ factor factor_tail
Rule 76    factor_tail -> AND factor factor_tail
Rule 77    factor_tail -> OR factor factor_tail
Rule 78    factor_tail -> empty
Rule 79    literal -> literal1
Rule 80    literal -> literal2
Rule 81    literal1 -> INT_LIT
Rule 82    literal1 -> FLT_LIT
Rule 83    literal1 -> DAY
Rule 84    literal1 -> NIGHT
Rule 85    literal1 -> STR_LIT
Rule 86    literal2 -> CHR_LIT
Rule 87    function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
Rule 88    function_statements -> empty
Rule 89    function_statements_tail -> function_statements
Rule 90    function_statements_tail -> empty
Rule 91    ret_type -> FUNCTION
Rule 92    ret_type -> function_dtype
Rule 93    function_dtype -> FUNCTION_INT
Rule 94    function_dtype -> FUNCTION_FLT
Rule 95    function_dtype -> FUNCTION_CHR
Rule 96    function_dtype -> FUNCTION_BLN
Rule 97    function_dtype -> FUNCTION_STR
Rule 98    function_dtype -> FUNCTION_LIST_INT
Rule 99    function_dtype -> FUNCTION_LIST_FLT
Rule 100   function_dtype -> FUNCTION_LIST_CHR
Rule 101   function_dtype -> FUNCTION_LIST_STR
Rule 102   function_dtype -> FUNCTION_LIST_BLN
Rule 103   parameters -> data_type IDENT parameters_tail
Rule 104   parameters -> empty
Rule 105   parameters_tail -> COMMA data_type IDENT parameters_tail
Rule 106   parameters_tail -> empty
Rule 107   revive -> REVIVE revive_value
Rule 108   revive -> empty
Rule 109   revive_value -> revive_type_cast
Rule 110   revive_value -> revive_expression
Rule 111   revive_value -> function_call
Rule 112   revive_expression -> revive_factor revive_factor_tail
Rule 113   revive_factor -> var_call postfix
Rule 114   revive_factor -> revive_factor1
Rule 115   revive_factor -> TILDE INT_LIT
Rule 116   revive_factor -> TILDE FLT_LIT
Rule 117   revive_factor -> LPAREN revive_factor RPAREN
Rule 118   revive_factor_tail -> PLUS revive_factor revive_factor_tail
Rule 119   revive_factor_tail -> MINUS revive_factor revive_factor_tail
Rule 120   revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail
Rule 121   revive_factor_tail -> DIVISION revive_factor revive_factor_tail
Rule 122   revive_factor_tail -> MODULO revive_factor revive_factor_tail
Rule 123   revive_factor_tail -> EXPONENT revive_factor revive_factor_tail
Rule 124   revive_factor_tail -> GT revive_factor revive_factor_tail
Rule 125   revive_factor_tail -> LT revive_factor revive_factor_tail
Rule 126   revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail
Rule 127   revive_factor_tail -> GT_EQ revive_factor revive_factor_tail
Rule 128   revive_factor_tail -> LT_EQ revive_factor revive_factor_tail
Rule 129   revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail
Rule 130   revive_factor_tail -> AND revive_factor revive_factor_tail
Rule 131   revive_factor_tail -> OR revive_factor revive_factor_tail
Rule 132   revive_factor_tail -> empty
Rule 133   revive_factor1 -> INT_LIT
Rule 134   revive_factor1 -> FLT_LIT
Rule 135   revive_factor1 -> DAY
Rule 136   revive_factor1 -> NIGHT
Rule 137   revive_factor1 -> STR_LIT
Rule 138   revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 139   revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 140   revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 141   revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 142   statements -> empty
Rule 143   statements -> local_dec maybe_newline statements_tail
Rule 144   statements_tail -> switch_statement unli_newline statements
Rule 145   statements_tail -> loop_statement unli_newline statements
Rule 146   statements_tail -> function_call unli_newline statements
Rule 147   statements_tail -> assignment_statement unli_newline statements
Rule 148   statements_tail -> output_statement unli_newline statements
Rule 149   statements_tail -> conditional_statement unli_newline statements
Rule 150   statements_tail -> statements
Rule 151   local_dec -> local_var_statement unli_newline local_dec_tail
Rule 152   local_dec -> empty
Rule 153   local_var_statement -> local_data_type IDENT local_list_dec
Rule 154   local_data_type -> INT
Rule 155   local_data_type -> FLT
Rule 156   local_data_type -> BLN
Rule 157   local_data_type -> CHR
Rule 158   local_data_type -> STR
Rule 159   local_list_dec -> empty
Rule 160   local_list_dec -> LBRACKET RBRACKET local_2d_list
Rule 161   local_2d_list -> empty
Rule 162   local_2d_list -> LBRACKET RBRACKET
Rule 163   local_dec_tail -> empty
Rule 164   local_dec_tail -> COMMA IDENT local_dec_tail
Rule 165   local_dec_tail -> EQ local_value local_dec_tail2
Rule 166   local_dec_tail2 -> COMMA IDENT local_dec_tail
Rule 167   local_dec_tail2 -> empty
Rule 168   local_value -> local_value_value
Rule 169   local_value -> list_value
Rule 170   local_value_value -> local_type_cast
Rule 171   local_value_value -> local_expression
Rule 172   local_value_value -> function_call
Rule 173   local_expression -> local_factor local_factor_tail
Rule 174   local_factor -> var_call postfix
Rule 175   local_factor -> local_factor1
Rule 176   local_factor -> TILDE INT_LIT
Rule 177   local_factor -> TILDE FLT_LIT
Rule 178   local_factor -> LPAREN local_factor RPAREN
Rule 179   local_factor_tail -> PLUS local_factor local_factor_tail
Rule 180   local_factor_tail -> MINUS local_factor local_factor_tail
Rule 181   local_factor_tail -> MULTIPLY local_factor local_factor_tail
Rule 182   local_factor_tail -> DIVISION local_factor local_factor_tail
Rule 183   local_factor_tail -> MODULO local_factor local_factor_tail
Rule 184   local_factor_tail -> EXPONENT local_factor local_factor_tail
Rule 185   local_factor_tail -> GT local_factor local_factor_tail
Rule 186   local_factor_tail -> LT local_factor local_factor_tail
Rule 187   local_factor_tail -> EQ_EQ local_factor local_factor_tail
Rule 188   local_factor_tail -> GT_EQ local_factor local_factor_tail
Rule 189   local_factor_tail -> LT_EQ local_factor local_factor_tail
Rule 190   local_factor_tail -> NOT_EQ local_factor local_factor_tail
Rule 191   local_factor_tail -> AND local_factor local_factor_tail
Rule 192   local_factor_tail -> OR local_factor local_factor_tail
Rule 193   local_factor_tail -> empty
Rule 194   local_factor1 -> INT_LIT
Rule 195   local_factor1 -> FLT_LIT
Rule 196   local_factor1 -> DAY
Rule 197   local_factor1 -> NIGHT
Rule 198   local_factor1 -> STR_LIT
Rule 199   local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 200   local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 201   local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 202   local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 203   conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 204   conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
Rule 205   conditional_tail -> empty
Rule 206   condition -> condition_factor condition_tail
Rule 207   condition_factor -> var_call postfix
Rule 208   condition_factor -> condition1
Rule 209   condition_factor -> TILDE INT_LIT
Rule 210   condition_factor -> TILDE FLT_LIT
Rule 211   condition_factor -> LPAREN condition RPAREN
Rule 212   condition_tail -> PLUS condition_factor condition_tail
Rule 213   condition_tail -> MINUS condition_factor condition_tail
Rule 214   condition_tail -> MULTIPLY condition_factor condition_tail
Rule 215   condition_tail -> DIVISION condition_factor condition_tail
Rule 216   condition_tail -> MODULO condition_factor condition_tail
Rule 217   condition_tail -> EXPONENT condition_factor condition_tail
Rule 218   condition_tail -> GT condition_factor condition_tail
Rule 219   condition_tail -> LT condition_factor condition_tail
Rule 220   condition_tail -> EQ_EQ condition_factor condition_tail
Rule 221   condition_tail -> GT_EQ condition_factor condition_tail
Rule 222   condition_tail -> LT_EQ condition_factor condition_tail
Rule 223   condition_tail -> NOT_EQ condition_factor condition_tail
Rule 224   condition_tail -> AND condition_factor condition_tail
Rule 225   condition_tail -> OR condition_factor condition_tail
Rule 226   condition_tail -> empty
Rule 227   condition1 -> INT_LIT
Rule 228   condition1 -> FLT_LIT
Rule 229   condition1 -> DAY
Rule 230   condition1 -> NIGHT
Rule 231   condition1 -> STR_LIT
Rule 232   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
Rule 233   switch_condition -> SHIFT switch_value COLON statements switchcond_tail
Rule 234   switch_value -> switch_type_cast
Rule 235   switch_value -> switch_expression
Rule 236   switch_value -> function_call
Rule 237   switch_expression -> switch_factor switch_factor_tail
Rule 238   switch_factor -> var_call postfix
Rule 239   switch_factor -> switch_factor1
Rule 240   switch_factor -> TILDE INT_LIT
Rule 241   switch_factor -> TILDE FLT_LIT
Rule 242   switch_factor -> LPAREN switch_factor RPAREN
Rule 243   switch_factor_tail -> PLUS switch_factor switch_factor_tail
Rule 244   switch_factor_tail -> MINUS switch_factor switch_factor_tail
Rule 245   switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail
Rule 246   switch_factor_tail -> DIVISION switch_factor switch_factor_tail
Rule 247   switch_factor_tail -> MODULO switch_factor switch_factor_tail
Rule 248   switch_factor_tail -> EXPONENT switch_factor switch_factor_tail
Rule 249   switch_factor_tail -> GT switch_factor switch_factor_tail
Rule 250   switch_factor_tail -> LT switch_factor switch_factor_tail
Rule 251   switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail
Rule 252   switch_factor_tail -> GT_EQ switch_factor switch_factor_tail
Rule 253   switch_factor_tail -> LT_EQ switch_factor switch_factor_tail
Rule 254   switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail
Rule 255   switch_factor_tail -> AND switch_factor switch_factor_tail
Rule 256   switch_factor_tail -> OR switch_factor switch_factor_tail
Rule 257   switch_factor_tail -> empty
Rule 258   switch_factor1 -> INT_LIT
Rule 259   switch_factor1 -> FLT_LIT
Rule 260   switch_factor1 -> DAY
Rule 261   switch_factor1 -> NIGHT
Rule 262   switch_factor1 -> STR_LIT
Rule 263   switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 264   switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 265   switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 266   switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 267   switchcond_tail -> switch_condition
Rule 268   switchcond_tail -> empty
Rule 269   loop_statement -> for_loop
Rule 270   loop_statement -> until_loop
Rule 271   loop_statement -> repeat_until
Rule 272   for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
Rule 273   for_expression -> for_factor for_factor_tail
Rule 274   for_factor -> var_call postfix
Rule 275   for_factor -> for_factor1
Rule 276   for_factor -> TILDE INT_LIT
Rule 277   for_factor -> TILDE FLT_LIT
Rule 278   for_factor -> LPAREN for_factor RPAREN
Rule 279   for_factor_tail -> PLUS for_factor for_factor_tail
Rule 280   for_factor_tail -> MINUS for_factor for_factor_tail
Rule 281   for_factor_tail -> MULTIPLY for_factor for_factor_tail
Rule 282   for_factor_tail -> DIVISION for_factor for_factor_tail
Rule 283   for_factor_tail -> MODULO for_factor for_factor_tail
Rule 284   for_factor_tail -> EXPONENT for_factor for_factor_tail
Rule 285   for_factor_tail -> GT for_factor for_factor_tail
Rule 286   for_factor_tail -> LT for_factor for_factor_tail
Rule 287   for_factor_tail -> EQ_EQ for_factor for_factor_tail
Rule 288   for_factor_tail -> GT_EQ for_factor for_factor_tail
Rule 289   for_factor_tail -> LT_EQ for_factor for_factor_tail
Rule 290   for_factor_tail -> NOT_EQ for_factor for_factor_tail
Rule 291   for_factor_tail -> AND for_factor for_factor_tail
Rule 292   for_factor_tail -> OR for_factor for_factor_tail
Rule 293   for_factor_tail -> empty
Rule 294   for_factor1 -> INT_LIT
Rule 295   for_factor1 -> FLT_LIT
Rule 296   for_factor1 -> DAY
Rule 297   for_factor1 -> NIGHT
Rule 298   for_factor1 -> STR_LIT
Rule 299   until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
Rule 300   until_expression -> until_factor until_factor_tail
Rule 301   until_factor -> var_call postfix
Rule 302   until_factor -> until_factor1
Rule 303   until_factor -> TILDE INT_LIT
Rule 304   until_factor -> TILDE FLT_LIT
Rule 305   until_factor -> LPAREN until_factor RPAREN
Rule 306   until_factor_tail -> PLUS until_factor until_factor_tail
Rule 307   until_factor_tail -> MINUS until_factor until_factor_tail
Rule 308   until_factor_tail -> MULTIPLY until_factor until_factor_tail
Rule 309   until_factor_tail -> DIVISION until_factor until_factor_tail
Rule 310   until_factor_tail -> MODULO until_factor until_factor_tail
Rule 311   until_factor_tail -> EXPONENT until_factor until_factor_tail
Rule 312   until_factor_tail -> GT until_factor until_factor_tail
Rule 313   until_factor_tail -> LT until_factor until_factor_tail
Rule 314   until_factor_tail -> EQ_EQ until_factor until_factor_tail
Rule 315   until_factor_tail -> GT_EQ until_factor until_factor_tail
Rule 316   until_factor_tail -> LT_EQ until_factor until_factor_tail
Rule 317   until_factor_tail -> NOT_EQ until_factor until_factor_tail
Rule 318   until_factor_tail -> AND until_factor until_factor_tail
Rule 319   until_factor_tail -> OR until_factor until_factor_tail
Rule 320   until_factor_tail -> empty
Rule 321   until_factor1 -> INT_LIT
Rule 322   until_factor1 -> FLT_LIT
Rule 323   until_factor1 -> DAY
Rule 324   until_factor1 -> NIGHT
Rule 325   until_factor1 -> STR_LIT
Rule 326   repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
Rule 327   control_variable -> INT IDENT EQ control_var_tail
Rule 328   control_var_tail -> INT_LIT
Rule 329   control_var_tail -> var_call
Rule 330   update -> var_call update_tail
Rule 331   update_tail -> postfix_op
Rule 332   update_tail -> compound_op value
Rule 333   postfix_op -> PLUS_PLUS
Rule 334   postfix_op -> MINUS_MINUS
Rule 335   function_call -> FUNCTION_NAME LPAREN arguments RPAREN
Rule 336   function_call -> input_statement
Rule 337   arguments -> empty
Rule 338   arguments -> arg_value arg_tail
Rule 339   arg_tail -> COMMA arg_value arg_tail
Rule 340   arg_tail -> empty
Rule 341   arg_value -> literal
Rule 342   arg_value -> var_call
Rule 343   output_statement -> DISPLAY output_value next_val
Rule 344   output_value -> output_type_cast
Rule 345   output_value -> output_expression
Rule 346   output_value -> function_call
Rule 347   output_expression -> output_factor output_factor_tail
Rule 348   output_factor -> var_call postfix
Rule 349   output_factor -> output_factor1
Rule 350   output_factor -> TILDE INT_LIT
Rule 351   output_factor -> TILDE FLT_LIT
Rule 352   output_factor -> LPAREN output_factor RPAREN
Rule 353   output_factor_tail -> PLUS output_factor output_factor_tail
Rule 354   output_factor_tail -> MINUS output_factor output_factor_tail
Rule 355   output_factor_tail -> MULTIPLY output_factor output_factor_tail
Rule 356   output_factor_tail -> DIVISION output_factor output_factor_tail
Rule 357   output_factor_tail -> MODULO output_factor output_factor_tail
Rule 358   output_factor_tail -> EXPONENT output_factor output_factor_tail
Rule 359   output_factor_tail -> GT output_factor output_factor_tail
Rule 360   output_factor_tail -> LT output_factor output_factor_tail
Rule 361   output_factor_tail -> EQ_EQ output_factor output_factor_tail
Rule 362   output_factor_tail -> GT_EQ output_factor output_factor_tail
Rule 363   output_factor_tail -> LT_EQ output_factor output_factor_tail
Rule 364   output_factor_tail -> NOT_EQ output_factor output_factor_tail
Rule 365   output_factor_tail -> AND output_factor output_factor_tail
Rule 366   output_factor_tail -> OR output_factor output_factor_tail
Rule 367   output_factor_tail -> empty
Rule 368   output_factor1 -> INT_LIT
Rule 369   output_factor1 -> FLT_LIT
Rule 370   output_factor1 -> DAY
Rule 371   output_factor1 -> NIGHT
Rule 372   output_factor1 -> STR_LIT
Rule 373   output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 374   output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 375   output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 376   output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 377   next_val -> COMMA value next_val
Rule 378   next_val -> empty
Rule 379   assignment_statement -> IDENT assign_tail
Rule 380   assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
Rule 381   assign_tail -> DOT PUSH LPAREN list_element RPAREN
Rule 382   assign_tail -> assign_op value
Rule 383   assign_op -> compound_op
Rule 384   assign_op -> EQ
Rule 385   compound_op -> PLUS_EQ
Rule 386   compound_op -> MINUS_EQ
Rule 387   compound_op -> MUL_EQ
Rule 388   compound_op -> DIV_EQ
Rule 389   compound_op -> MOD_EQ
Rule 390   start -> INT_LIT
Rule 391   deleteCount -> empty
Rule 392   deleteCount -> INT_LIT
Rule 393   splice_items -> empty
Rule 394   splice_items -> list_element
Rule 395   var_call -> IDENT list_index
Rule 396   list_index -> LBRACKET index RBRACKET list_index2
Rule 397   list_index -> empty
Rule 398   list_index2 -> LBRACKET index RBRACKET
Rule 399   list_index2 -> empty
Rule 400   index -> INT_LIT
Rule 401   index -> IDENT
Rule 402   postfix -> empty
Rule 403   postfix -> postfix_op
Rule 404   value -> type_cast
Rule 405   value -> value_expression
Rule 406   value -> function_call
Rule 407   value_expression -> value_factor value_factor_tail
Rule 408   value_factor -> var_call postfix
Rule 409   value_factor -> value_factor1
Rule 410   value_factor -> TILDE INT_LIT
Rule 411   value_factor -> TILDE FLT_LIT
Rule 412   value_factor -> LPAREN value_factor RPAREN
Rule 413   value_factor_tail -> PLUS value_factor value_factor_tail
Rule 414   value_factor_tail -> MINUS value_factor value_factor_tail
Rule 415   value_factor_tail -> MULTIPLY value_factor value_factor_tail
Rule 416   value_factor_tail -> DIVISION value_factor value_factor_tail
Rule 417   value_factor_tail -> MODULO value_factor value_factor_tail
Rule 418   value_factor_tail -> EXPONENT value_factor value_factor_tail
Rule 419   value_factor_tail -> GT value_factor value_factor_tail
Rule 420   value_factor_tail -> LT value_factor value_factor_tail
Rule 421   value_factor_tail -> EQ_EQ value_factor value_factor_tail
Rule 422   value_factor_tail -> GT_EQ value_factor value_factor_tail
Rule 423   value_factor_tail -> LT_EQ value_factor value_factor_tail
Rule 424   value_factor_tail -> NOT_EQ value_factor value_factor_tail
Rule 425   value_factor_tail -> AND value_factor value_factor_tail
Rule 426   value_factor_tail -> OR value_factor value_factor_tail
Rule 427   value_factor_tail -> empty
Rule 428   value_factor1 -> INT_LIT
Rule 429   value_factor1 -> FLT_LIT
Rule 430   value_factor1 -> DAY
Rule 431   value_factor1 -> NIGHT
Rule 432   value_factor1 -> STR_LIT
Rule 433   type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 434   type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 435   type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 436   type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 437   typecast_value -> typecast_expression
Rule 438   typecast_value -> FUNCTION_NAME LPAREN RPAREN
Rule 439   typecast_value -> input_statement
Rule 440   typecast_expression -> typecast_factor typecast_factor_tail
Rule 441   typecast_factor -> var_call postfix
Rule 442   typecast_factor -> typecast_factor1
Rule 443   typecast_factor -> TILDE INT_LIT
Rule 444   typecast_factor -> TILDE FLT_LIT
Rule 445   typecast_factor -> LPAREN typecast_factor RPAREN
Rule 446   typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail
Rule 447   typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail
Rule 448   typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail
Rule 449   typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail
Rule 450   typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail
Rule 451   typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail
Rule 452   typecast_factor_tail -> GT typecast_factor typecast_factor_tail
Rule 453   typecast_factor_tail -> LT typecast_factor typecast_factor_tail
Rule 454   typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail
Rule 455   typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail
Rule 456   typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail
Rule 457   typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail
Rule 458   typecast_factor_tail -> AND typecast_factor typecast_factor_tail
Rule 459   typecast_factor_tail -> OR typecast_factor typecast_factor_tail
Rule 460   typecast_factor_tail -> empty
Rule 461   typecast_factor1 -> INT_LIT
Rule 462   typecast_factor1 -> FLT_LIT
Rule 463   typecast_factor1 -> DAY
Rule 464   typecast_factor1 -> NIGHT
Rule 465   typecast_factor1 -> STR_LIT
Rule 466   input_statement -> INPUT LPAREN RPAREN
Rule 467   empty -> <empty>

Terminals, with rules where they appear

AND                  : 56 76 130 191 224 255 291 318 365 425 458
BIRTH                : 1
BLN                  : 29 156
BLN_LIT              : 
CARRIAGE_RETURN      : 
CHECK                : 203
CHR                  : 30 157
CHR_LIT              : 86
COLON                : 233
COMMA                : 17 19 25 105 164 166 339 377 380 380
COMMENT              : 
CONVERT_TO_BLN       : 140 201 265 375 435
CONVERT_TO_FLT       : 139 200 264 374 434
CONVERT_TO_INT       : 138 199 263 373 433
CONVERT_TO_STR       : 141 202 266 376 436
DAY                  : 61 83 135 196 229 260 296 323 370 430 463
DISPLAY              : 343
DIVISION             : 47 67 121 182 215 246 282 309 356 416 449
DIV_EQ               : 388
DOT                  : 380 381
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 18 165 327 384
EQ_EQ                : 52 72 126 187 220 251 287 314 361 421 454
EXPONENT             : 49 69 123 184 217 248 284 311 358 418 451
FLT                  : 28 155
FLT_LIT              : 36 42 60 82 116 134 177 195 210 228 241 259 277 295 304 322 351 369 411 429 444 462
FOR                  : 272
FUNCTION             : 91
FUNCTION_BLN         : 96
FUNCTION_CHR         : 95
FUNCTION_FLT         : 94
FUNCTION_INT         : 93
FUNCTION_LIST_BLN    : 102
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 100
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 99
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 98
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 101
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 87 335 438
FUNCTION_STR         : 97
GHOST                : 1
GT                   : 50 70 124 185 218 249 285 312 359 419 452
GT_EQ                : 53 73 127 188 221 252 288 315 362 422 455
IDENT                : 11 17 19 103 105 153 164 166 232 327 379 395 401
ILLEGAL              : 
IN                   : 
INPUT                : 466
INT                  : 27 154 327
INT_LIT              : 35 41 59 81 115 133 176 194 209 227 240 258 276 294 303 321 328 350 368 390 392 400 410 428 443 461
LBRACE               : 6 87 203 203 204 232 232 272 299 326
LBRACKET             : 13 15 23 160 162 396 398
LIST_BLN             : 
LIST_BLN2D           : 
LIST_CHR             : 
LIST_CHR2D           : 
LIST_FLT             : 
LIST_FLT2D           : 
LIST_INT             : 
LIST_INT2D           : 
LIST_STR             : 
LIST_STR2D           : 
LPAREN               : 6 37 43 87 117 138 139 140 141 178 199 200 201 202 203 204 211 232 242 263 264 265 266 272 278 299 305 326 335 352 373 374 375 376 380 381 412 433 434 435 436 438 445 466
LT                   : 51 71 125 186 219 250 286 313 360 420 453
LT_EQ                : 54 74 128 189 222 253 289 316 363 423 456
MAIN_CASPER          : 6
MEASURE              : 
MINUS                : 45 65 119 180 213 244 280 307 354 414 447
MINUS_EQ             : 386
MINUS_MINUS          : 334
MODULO               : 48 68 122 183 216 247 283 310 357 417 450
MOD_EQ               : 389
MULTIPLY             : 46 66 120 181 214 245 281 308 355 415 448
MUL_EQ               : 387
NEWLINE              : 3 4 5
NIGHT                : 62 84 136 197 230 261 297 324 371 431 464
NOT                  : 
NOT_EQ               : 55 75 129 190 223 254 290 317 364 424 457
OR                   : 57 77 131 192 225 256 292 319 366 426 459
OTHERWISE            : 203 232
OTHERWISE_CHECK      : 204
PLUS                 : 44 64 118 179 212 243 279 306 353 413 446
PLUS_EQ              : 385
PLUS_PLUS            : 333
POW                  : 
PUSH                 : 381
RBRACE               : 6 87 203 203 204 232 232 272 299 326
RBRACKET             : 13 15 23 160 162 396 398
REPEAT               : 326
REVIVE               : 107
RPAREN               : 6 37 43 87 117 138 139 140 141 178 199 200 201 202 203 204 211 232 242 263 264 265 266 272 278 299 305 326 335 352 373 374 375 376 380 381 412 433 434 435 436 438 445 466
SEMICOLON            : 272 272
SHIFT                : 233
SKIP                 : 
SPLICE               : 380
STOP                 : 
STR                  : 31 158
STR_LIT              : 63 85 137 198 231 262 298 325 372 432 465
SWAP                 : 232
TILDE                : 35 36 41 42 115 116 176 177 209 210 240 241 276 277 303 304 350 351 410 411 443 444
TYPE                 : 
UNTIL                : 299 326
error                : 

Nonterminals, with rules where they appear

_2d_list             : 13
arg_tail             : 338 339
arg_value            : 338 339
arguments            : 335
assign_op            : 382
assign_tail          : 379
assignment_statement : 147
compound_op          : 332 383
condition            : 203 204 211
condition1           : 208
condition_factor     : 206 212 213 214 215 216 217 218 219 220 221 222 223 224 225
condition_tail       : 206 212 213 214 215 216 217 218 219 220 221 222 223 224 225
conditional_statement : 149
conditional_tail     : 203 204
control_var_tail     : 327
control_variable     : 272
data_type            : 11 103 105
deleteCount          : 380
element_tail         : 24
empty                : 2 8 12 14 16 20 26 58 78 88 90 104 106 108 132 142 152 159 161 163 167 193 205 226 257 268 293 320 337 340 367 378 391 393 397 399 402 427 460
expression           : 21
factor               : 32 64 65 66 67 68 69 70 71 72 73 74 75 76 77
factor_expression    : 37 43
factor_expression1   : 40
factor_expression_factor : 38 44 45 46 47 48 49 50 51 52 53 54 55 56 57
factor_expression_tail : 38 44 45 46 47 48 49 50 51 52 53 54 55 56 57
factor_tail          : 32 64 65 66 67 68 69 70 71 72 73 74 75 76 77
for_expression       : 272
for_factor           : 273 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292
for_factor1          : 275
for_factor_tail      : 273 279 280 281 282 283 284 285 286 287 288 289 290 291 292
for_loop             : 269
function_call        : 111 146 172 236 346 406
function_dtype       : 92
function_statements  : 1 89
function_statements_tail : 87
global_dec           : 1 9
global_statement     : 7
global_statement_tail : 10 17 19
global_statement_tail2 : 18
global_tail          : 7
global_value         : 18
index                : 396 398
input_statement      : 336 439
list_dec             : 11
list_element         : 23 25 381 394
list_index           : 395
list_index2          : 396
list_value           : 22 169
literal              : 24 341
literal1             : 34 79
literal2             : 80
local_2d_list        : 160
local_data_type      : 153
local_dec            : 143
local_dec_tail       : 151 164 166
local_dec_tail2      : 165
local_expression     : 171
local_factor         : 173 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192
local_factor1        : 175
local_factor_tail    : 173 179 180 181 182 183 184 185 186 187 188 189 190 191 192
local_list_dec       : 153
local_type_cast      : 170
local_value          : 165
local_value_value    : 168
local_var_statement  : 151
loop_statement       : 145
main_function        : 1
maybe_newline        : 1 1 3 6 6 6 87 87 87 143 203 203 203 203 203 203 203 272 272
next_val             : 343 377
output_expression    : 345
output_factor        : 347 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366
output_factor1       : 349
output_factor_tail   : 347 353 354 355 356 357 358 359 360 361 362 363 364 365 366
output_statement     : 148
output_type_cast     : 344
output_value         : 343
parameters           : 87
parameters_tail      : 103 105
postfix              : 33 39 113 174 207 238 274 301 348 408 441
postfix_op           : 331 403
program              : 0
repeat_until         : 271
ret_type             : 87
revive               : 87
revive_expression    : 110
revive_factor        : 112 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
revive_factor1       : 114
revive_factor_tail   : 112 118 119 120 121 122 123 124 125 126 127 128 129 130 131
revive_type_cast     : 109
revive_value         : 107
splice_items         : 380
start                : 380
statements           : 6 87 144 145 146 147 148 149 150 203 203 204 232 233 272 299 326
statements_tail      : 143
switch_condition     : 232 267
switch_expression    : 235
switch_factor        : 237 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256
switch_factor1       : 239
switch_factor_tail   : 237 243 244 245 246 247 248 249 250 251 252 253 254 255 256
switch_statement     : 144
switch_type_cast     : 234
switch_value         : 233
switchcond_tail      : 233
type_cast            : 404
typecast_expression  : 437
typecast_factor      : 440 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459
typecast_factor1     : 442
typecast_factor_tail : 440 446 447 448 449 450 451 452 453 454 455 456 457 458 459
typecast_value       : 138 139 140 141 199 200 201 202 263 264 265 266 373 374 375 376 433 434 435 436
unli_newline         : 1 1 5 7 87 144 145 146 147 148 149 151
until_expression     : 299 326
until_factor         : 300 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319
until_factor1        : 302
until_factor_tail    : 300 306 307 308 309 310 311 312 313 314 315 316 317 318 319
until_loop           : 270
update               : 272
update_tail          : 330
value                : 332 377 382
value_expression     : 405
value_factor         : 407 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426
value_factor1        : 409
value_factor_tail    : 407 413 414 415 416 417 418 419 420 421 422 423 424 425 426
var_call             : 33 39 113 174 207 238 274 301 329 330 342 348 408 441
var_statement        : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 3

state 3

    (1) program -> BIRTH unli_newline . global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (467) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    NEWLINE         reduce using rule 467 (empty -> .)
    FUNCTION        reduce using rule 467 (empty -> .)
    FUNCTION_INT    reduce using rule 467 (empty -> .)
    FUNCTION_FLT    reduce using rule 467 (empty -> .)
    FUNCTION_CHR    reduce using rule 467 (empty -> .)
    FUNCTION_BLN    reduce using rule 467 (empty -> .)
    FUNCTION_STR    reduce using rule 467 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 467 (empty -> .)
    MAIN_CASPER     reduce using rule 467 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_dec                     shift and go to state 5
    global_statement               shift and go to state 6
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 4

    (4) unli_newline -> NEWLINE .
    (5) unli_newline -> NEWLINE . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    INT             reduce using rule 4 (unli_newline -> NEWLINE .)
    FLT             reduce using rule 4 (unli_newline -> NEWLINE .)
    BLN             reduce using rule 4 (unli_newline -> NEWLINE .)
    CHR             reduce using rule 4 (unli_newline -> NEWLINE .)
    STR             reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION        reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_INT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_FLT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_CHR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_BLN    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_STR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_INT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_FLT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_CHR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_STR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_BLN reduce using rule 4 (unli_newline -> NEWLINE .)
    MAIN_CASPER     reduce using rule 4 (unli_newline -> NEWLINE .)
    GHOST           reduce using rule 4 (unli_newline -> NEWLINE .)
    COMMA           reduce using rule 4 (unli_newline -> NEWLINE .)
    EQ              reduce using rule 4 (unli_newline -> NEWLINE .)
    SWAP            reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_NAME   reduce using rule 4 (unli_newline -> NEWLINE .)
    IDENT           reduce using rule 4 (unli_newline -> NEWLINE .)
    DISPLAY         reduce using rule 4 (unli_newline -> NEWLINE .)
    CHECK           reduce using rule 4 (unli_newline -> NEWLINE .)
    FOR             reduce using rule 4 (unli_newline -> NEWLINE .)
    UNTIL           reduce using rule 4 (unli_newline -> NEWLINE .)
    REPEAT          reduce using rule 4 (unli_newline -> NEWLINE .)
    INPUT           reduce using rule 4 (unli_newline -> NEWLINE .)
    REVIVE          reduce using rule 4 (unli_newline -> NEWLINE .)
    RBRACE          reduce using rule 4 (unli_newline -> NEWLINE .)
    SHIFT           reduce using rule 4 (unli_newline -> NEWLINE .)
    OTHERWISE       reduce using rule 4 (unli_newline -> NEWLINE .)
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 4 (unli_newline -> NEWLINE .) ]

    unli_newline                   shift and go to state 15

state 5

    (1) program -> BIRTH unli_newline global_dec . maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 467 (empty -> .)
    FUNCTION_INT    reduce using rule 467 (empty -> .)
    FUNCTION_FLT    reduce using rule 467 (empty -> .)
    FUNCTION_CHR    reduce using rule 467 (empty -> .)
    FUNCTION_BLN    reduce using rule 467 (empty -> .)
    FUNCTION_STR    reduce using rule 467 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 467 (empty -> .)
    MAIN_CASPER     reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 16
    empty                          shift and go to state 17

state 6

    (7) global_dec -> global_statement . unli_newline global_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 19

state 7

    (8) global_dec -> empty .

    NEWLINE         reduce using rule 8 (global_dec -> empty .)
    FUNCTION        reduce using rule 8 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 8 (global_dec -> empty .)
    MAIN_CASPER     reduce using rule 8 (global_dec -> empty .)


state 8

    (10) global_statement -> var_statement . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (467) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 467 (empty -> .)

    global_statement_tail          shift and go to state 20
    empty                          shift and go to state 21

state 9

    (11) var_statement -> data_type . IDENT list_dec

    IDENT           shift and go to state 24


state 10

    (27) data_type -> INT .

    IDENT           reduce using rule 27 (data_type -> INT .)


state 11

    (28) data_type -> FLT .

    IDENT           reduce using rule 28 (data_type -> FLT .)


state 12

    (29) data_type -> BLN .

    IDENT           reduce using rule 29 (data_type -> BLN .)


state 13

    (30) data_type -> CHR .

    IDENT           reduce using rule 30 (data_type -> CHR .)


state 14

    (31) data_type -> STR .

    IDENT           reduce using rule 31 (data_type -> STR .)


state 15

    (5) unli_newline -> NEWLINE unli_newline .

    INT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FLT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    BLN             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    STR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    NEWLINE         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION        reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_INT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_FLT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_CHR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_BLN    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_STR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_INT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_FLT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_CHR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_STR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_BLN reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    MAIN_CASPER     reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    GHOST           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    COMMA           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    EQ              reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SWAP            reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_NAME   reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    IDENT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    DISPLAY         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHECK           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FOR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    UNTIL           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REPEAT          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    INPUT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REVIVE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    RBRACE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SHIFT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    OTHERWISE       reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)


state 16

    (1) program -> BIRTH unli_newline global_dec maybe_newline . function_statements maybe_newline main_function unli_newline GHOST
    (87) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (88) function_statements -> . empty
    (91) ret_type -> . FUNCTION
    (92) ret_type -> . function_dtype
    (467) empty -> .
    (93) function_dtype -> . FUNCTION_INT
    (94) function_dtype -> . FUNCTION_FLT
    (95) function_dtype -> . FUNCTION_CHR
    (96) function_dtype -> . FUNCTION_BLN
    (97) function_dtype -> . FUNCTION_STR
    (98) function_dtype -> . FUNCTION_LIST_INT
    (99) function_dtype -> . FUNCTION_LIST_FLT
    (100) function_dtype -> . FUNCTION_LIST_CHR
    (101) function_dtype -> . FUNCTION_LIST_STR
    (102) function_dtype -> . FUNCTION_LIST_BLN

    FUNCTION        shift and go to state 28
    NEWLINE         reduce using rule 467 (empty -> .)
    MAIN_CASPER     reduce using rule 467 (empty -> .)
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    function_statements            shift and go to state 25
    ret_type                       shift and go to state 26
    empty                          shift and go to state 27
    function_dtype                 shift and go to state 29

state 17

    (2) maybe_newline -> empty .

    FUNCTION        reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_INT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_FLT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_CHR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_BLN    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_STR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_INT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_FLT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_CHR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_STR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_BLN reduce using rule 2 (maybe_newline -> empty .)
    NEWLINE         reduce using rule 2 (maybe_newline -> empty .)
    MAIN_CASPER     reduce using rule 2 (maybe_newline -> empty .)
    LBRACE          reduce using rule 2 (maybe_newline -> empty .)
    INT             reduce using rule 2 (maybe_newline -> empty .)
    FLT             reduce using rule 2 (maybe_newline -> empty .)
    BLN             reduce using rule 2 (maybe_newline -> empty .)
    CHR             reduce using rule 2 (maybe_newline -> empty .)
    STR             reduce using rule 2 (maybe_newline -> empty .)
    REVIVE          reduce using rule 2 (maybe_newline -> empty .)
    RBRACE          reduce using rule 2 (maybe_newline -> empty .)
    SWAP            reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_NAME   reduce using rule 2 (maybe_newline -> empty .)
    IDENT           reduce using rule 2 (maybe_newline -> empty .)
    DISPLAY         reduce using rule 2 (maybe_newline -> empty .)
    CHECK           reduce using rule 2 (maybe_newline -> empty .)
    FOR             reduce using rule 2 (maybe_newline -> empty .)
    UNTIL           reduce using rule 2 (maybe_newline -> empty .)
    REPEAT          reduce using rule 2 (maybe_newline -> empty .)
    INPUT           reduce using rule 2 (maybe_newline -> empty .)
    SHIFT           reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE       reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE_CHECK reduce using rule 2 (maybe_newline -> empty .)


state 18

    (3) maybe_newline -> NEWLINE . maybe_newline
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 467 (empty -> .)
    FUNCTION_INT    reduce using rule 467 (empty -> .)
    FUNCTION_FLT    reduce using rule 467 (empty -> .)
    FUNCTION_CHR    reduce using rule 467 (empty -> .)
    FUNCTION_BLN    reduce using rule 467 (empty -> .)
    FUNCTION_STR    reduce using rule 467 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 467 (empty -> .)
    MAIN_CASPER     reduce using rule 467 (empty -> .)
    LBRACE          reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    OTHERWISE_CHECK reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 40
    empty                          shift and go to state 17

state 19

    (7) global_dec -> global_statement unli_newline . global_tail
    (9) global_tail -> . global_dec
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (467) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    NEWLINE         reduce using rule 467 (empty -> .)
    FUNCTION        reduce using rule 467 (empty -> .)
    FUNCTION_INT    reduce using rule 467 (empty -> .)
    FUNCTION_FLT    reduce using rule 467 (empty -> .)
    FUNCTION_CHR    reduce using rule 467 (empty -> .)
    FUNCTION_BLN    reduce using rule 467 (empty -> .)
    FUNCTION_STR    reduce using rule 467 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 467 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 467 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 467 (empty -> .)
    MAIN_CASPER     reduce using rule 467 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_statement               shift and go to state 6
    global_tail                    shift and go to state 41
    global_dec                     shift and go to state 42
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 20

    (10) global_statement -> var_statement global_statement_tail .

    NEWLINE         reduce using rule 10 (global_statement -> var_statement global_statement_tail .)


state 21

    (16) global_statement_tail -> empty .

    NEWLINE         reduce using rule 16 (global_statement_tail -> empty .)


state 22

    (17) global_statement_tail -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 43


state 23

    (18) global_statement_tail -> EQ . global_value global_statement_tail2
    (21) global_value -> . expression
    (22) global_value -> . list_value
    (32) expression -> . factor factor_tail
    (23) list_value -> . LBRACKET list_element RBRACKET
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    global_value                   shift and go to state 44
    expression                     shift and go to state 45
    list_value                     shift and go to state 46
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 24

    (11) var_statement -> data_type IDENT . list_dec
    (12) list_dec -> . empty
    (13) list_dec -> . LBRACKET RBRACKET _2d_list
    (467) empty -> .

    LBRACKET        shift and go to state 61
    COMMA           reduce using rule 467 (empty -> .)
    EQ              reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    list_dec                       shift and go to state 59
    empty                          shift and go to state 60

state 25

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements . maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    MAIN_CASPER     reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 62
    empty                          shift and go to state 17

state 26

    (87) function_statements -> ret_type . FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    FUNCTION_NAME   shift and go to state 63


state 27

    (88) function_statements -> empty .

    NEWLINE         reduce using rule 88 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 88 (function_statements -> empty .)


state 28

    (91) ret_type -> FUNCTION .

    FUNCTION_NAME   reduce using rule 91 (ret_type -> FUNCTION .)


state 29

    (92) ret_type -> function_dtype .

    FUNCTION_NAME   reduce using rule 92 (ret_type -> function_dtype .)


state 30

    (93) function_dtype -> FUNCTION_INT .

    FUNCTION_NAME   reduce using rule 93 (function_dtype -> FUNCTION_INT .)


state 31

    (94) function_dtype -> FUNCTION_FLT .

    FUNCTION_NAME   reduce using rule 94 (function_dtype -> FUNCTION_FLT .)


state 32

    (95) function_dtype -> FUNCTION_CHR .

    FUNCTION_NAME   reduce using rule 95 (function_dtype -> FUNCTION_CHR .)


state 33

    (96) function_dtype -> FUNCTION_BLN .

    FUNCTION_NAME   reduce using rule 96 (function_dtype -> FUNCTION_BLN .)


state 34

    (97) function_dtype -> FUNCTION_STR .

    FUNCTION_NAME   reduce using rule 97 (function_dtype -> FUNCTION_STR .)


state 35

    (98) function_dtype -> FUNCTION_LIST_INT .

    FUNCTION_NAME   reduce using rule 98 (function_dtype -> FUNCTION_LIST_INT .)


state 36

    (99) function_dtype -> FUNCTION_LIST_FLT .

    FUNCTION_NAME   reduce using rule 99 (function_dtype -> FUNCTION_LIST_FLT .)


state 37

    (100) function_dtype -> FUNCTION_LIST_CHR .

    FUNCTION_NAME   reduce using rule 100 (function_dtype -> FUNCTION_LIST_CHR .)


state 38

    (101) function_dtype -> FUNCTION_LIST_STR .

    FUNCTION_NAME   reduce using rule 101 (function_dtype -> FUNCTION_LIST_STR .)


state 39

    (102) function_dtype -> FUNCTION_LIST_BLN .

    FUNCTION_NAME   reduce using rule 102 (function_dtype -> FUNCTION_LIST_BLN .)


state 40

    (3) maybe_newline -> NEWLINE maybe_newline .

    FUNCTION        reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_INT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_FLT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_CHR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_BLN    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_STR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_INT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_FLT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_CHR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_STR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_BLN reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    NEWLINE         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    MAIN_CASPER     reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    LBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FLT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    BLN             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    STR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REVIVE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    RBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SWAP            reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_NAME   reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    IDENT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    DISPLAY         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHECK           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FOR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    UNTIL           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REPEAT          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INPUT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SHIFT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE       reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE_CHECK reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)


state 41

    (7) global_dec -> global_statement unli_newline global_tail .

    NEWLINE         reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION        reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_INT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_FLT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_CHR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_BLN    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_STR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_INT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_FLT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_CHR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_STR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_BLN reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    MAIN_CASPER     reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)


state 42

    (9) global_tail -> global_dec .

    NEWLINE         reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION        reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_INT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_FLT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_CHR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_BLN    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_STR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_INT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_FLT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_CHR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_STR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_BLN reduce using rule 9 (global_tail -> global_dec .)
    MAIN_CASPER     reduce using rule 9 (global_tail -> global_dec .)


state 43

    (17) global_statement_tail -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (467) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 467 (empty -> .)

    global_statement_tail          shift and go to state 64
    empty                          shift and go to state 21

state 44

    (18) global_statement_tail -> EQ global_value . global_statement_tail2
    (19) global_statement_tail2 -> . COMMA IDENT global_statement_tail
    (20) global_statement_tail2 -> . empty
    (467) empty -> .

    COMMA           shift and go to state 66
    NEWLINE         reduce using rule 467 (empty -> .)

    global_statement_tail2         shift and go to state 65
    empty                          shift and go to state 67

state 45

    (21) global_value -> expression .

    COMMA           reduce using rule 21 (global_value -> expression .)
    NEWLINE         reduce using rule 21 (global_value -> expression .)


state 46

    (22) global_value -> list_value .

    COMMA           reduce using rule 22 (global_value -> list_value .)
    NEWLINE         reduce using rule 22 (global_value -> list_value .)


state 47

    (32) expression -> factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 68
    empty                          shift and go to state 83

state 48

    (23) list_value -> LBRACKET . list_element RBRACKET
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 84
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 49

    (33) factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 89
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 50

    (34) factor -> literal1 .

    PLUS            reduce using rule 34 (factor -> literal1 .)
    MINUS           reduce using rule 34 (factor -> literal1 .)
    MULTIPLY        reduce using rule 34 (factor -> literal1 .)
    DIVISION        reduce using rule 34 (factor -> literal1 .)
    MODULO          reduce using rule 34 (factor -> literal1 .)
    EXPONENT        reduce using rule 34 (factor -> literal1 .)
    GT              reduce using rule 34 (factor -> literal1 .)
    LT              reduce using rule 34 (factor -> literal1 .)
    EQ_EQ           reduce using rule 34 (factor -> literal1 .)
    GT_EQ           reduce using rule 34 (factor -> literal1 .)
    LT_EQ           reduce using rule 34 (factor -> literal1 .)
    NOT_EQ          reduce using rule 34 (factor -> literal1 .)
    AND             reduce using rule 34 (factor -> literal1 .)
    OR              reduce using rule 34 (factor -> literal1 .)
    COMMA           reduce using rule 34 (factor -> literal1 .)
    NEWLINE         reduce using rule 34 (factor -> literal1 .)


state 51

    (35) factor -> TILDE . INT_LIT
    (36) factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 94
    FLT_LIT         shift and go to state 95


state 52

    (81) literal1 -> INT_LIT .

    PLUS            reduce using rule 81 (literal1 -> INT_LIT .)
    MINUS           reduce using rule 81 (literal1 -> INT_LIT .)
    MULTIPLY        reduce using rule 81 (literal1 -> INT_LIT .)
    DIVISION        reduce using rule 81 (literal1 -> INT_LIT .)
    MODULO          reduce using rule 81 (literal1 -> INT_LIT .)
    EXPONENT        reduce using rule 81 (literal1 -> INT_LIT .)
    GT              reduce using rule 81 (literal1 -> INT_LIT .)
    LT              reduce using rule 81 (literal1 -> INT_LIT .)
    EQ_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    GT_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    LT_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    NOT_EQ          reduce using rule 81 (literal1 -> INT_LIT .)
    AND             reduce using rule 81 (literal1 -> INT_LIT .)
    OR              reduce using rule 81 (literal1 -> INT_LIT .)
    COMMA           reduce using rule 81 (literal1 -> INT_LIT .)
    NEWLINE         reduce using rule 81 (literal1 -> INT_LIT .)
    RBRACKET        reduce using rule 81 (literal1 -> INT_LIT .)
    RPAREN          reduce using rule 81 (literal1 -> INT_LIT .)


state 53

    (82) literal1 -> FLT_LIT .

    PLUS            reduce using rule 82 (literal1 -> FLT_LIT .)
    MINUS           reduce using rule 82 (literal1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 82 (literal1 -> FLT_LIT .)
    DIVISION        reduce using rule 82 (literal1 -> FLT_LIT .)
    MODULO          reduce using rule 82 (literal1 -> FLT_LIT .)
    EXPONENT        reduce using rule 82 (literal1 -> FLT_LIT .)
    GT              reduce using rule 82 (literal1 -> FLT_LIT .)
    LT              reduce using rule 82 (literal1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    GT_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    LT_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 82 (literal1 -> FLT_LIT .)
    AND             reduce using rule 82 (literal1 -> FLT_LIT .)
    OR              reduce using rule 82 (literal1 -> FLT_LIT .)
    COMMA           reduce using rule 82 (literal1 -> FLT_LIT .)
    NEWLINE         reduce using rule 82 (literal1 -> FLT_LIT .)
    RBRACKET        reduce using rule 82 (literal1 -> FLT_LIT .)
    RPAREN          reduce using rule 82 (literal1 -> FLT_LIT .)


state 54

    (37) factor -> LPAREN . factor_expression RPAREN
    (38) factor_expression -> . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression              shift and go to state 97
    factor_expression_factor       shift and go to state 98
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 55

    (395) var_call -> IDENT . list_index
    (396) list_index -> . LBRACKET index RBRACKET list_index2
    (397) list_index -> . empty
    (467) empty -> .

    LBRACKET        shift and go to state 108
    PLUS_PLUS       reduce using rule 467 (empty -> .)
    MINUS_MINUS     reduce using rule 467 (empty -> .)
    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SEMICOLON       reduce using rule 467 (empty -> .)
    COLON           reduce using rule 467 (empty -> .)
    PLUS_EQ         reduce using rule 467 (empty -> .)
    MINUS_EQ        reduce using rule 467 (empty -> .)
    MUL_EQ          reduce using rule 467 (empty -> .)
    DIV_EQ          reduce using rule 467 (empty -> .)
    MOD_EQ          reduce using rule 467 (empty -> .)

    list_index                     shift and go to state 107
    empty                          shift and go to state 109

state 56

    (83) literal1 -> DAY .

    PLUS            reduce using rule 83 (literal1 -> DAY .)
    MINUS           reduce using rule 83 (literal1 -> DAY .)
    MULTIPLY        reduce using rule 83 (literal1 -> DAY .)
    DIVISION        reduce using rule 83 (literal1 -> DAY .)
    MODULO          reduce using rule 83 (literal1 -> DAY .)
    EXPONENT        reduce using rule 83 (literal1 -> DAY .)
    GT              reduce using rule 83 (literal1 -> DAY .)
    LT              reduce using rule 83 (literal1 -> DAY .)
    EQ_EQ           reduce using rule 83 (literal1 -> DAY .)
    GT_EQ           reduce using rule 83 (literal1 -> DAY .)
    LT_EQ           reduce using rule 83 (literal1 -> DAY .)
    NOT_EQ          reduce using rule 83 (literal1 -> DAY .)
    AND             reduce using rule 83 (literal1 -> DAY .)
    OR              reduce using rule 83 (literal1 -> DAY .)
    COMMA           reduce using rule 83 (literal1 -> DAY .)
    NEWLINE         reduce using rule 83 (literal1 -> DAY .)
    RBRACKET        reduce using rule 83 (literal1 -> DAY .)
    RPAREN          reduce using rule 83 (literal1 -> DAY .)


state 57

    (84) literal1 -> NIGHT .

    PLUS            reduce using rule 84 (literal1 -> NIGHT .)
    MINUS           reduce using rule 84 (literal1 -> NIGHT .)
    MULTIPLY        reduce using rule 84 (literal1 -> NIGHT .)
    DIVISION        reduce using rule 84 (literal1 -> NIGHT .)
    MODULO          reduce using rule 84 (literal1 -> NIGHT .)
    EXPONENT        reduce using rule 84 (literal1 -> NIGHT .)
    GT              reduce using rule 84 (literal1 -> NIGHT .)
    LT              reduce using rule 84 (literal1 -> NIGHT .)
    EQ_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    GT_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    LT_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    NOT_EQ          reduce using rule 84 (literal1 -> NIGHT .)
    AND             reduce using rule 84 (literal1 -> NIGHT .)
    OR              reduce using rule 84 (literal1 -> NIGHT .)
    COMMA           reduce using rule 84 (literal1 -> NIGHT .)
    NEWLINE         reduce using rule 84 (literal1 -> NIGHT .)
    RBRACKET        reduce using rule 84 (literal1 -> NIGHT .)
    RPAREN          reduce using rule 84 (literal1 -> NIGHT .)


state 58

    (85) literal1 -> STR_LIT .

    PLUS            reduce using rule 85 (literal1 -> STR_LIT .)
    MINUS           reduce using rule 85 (literal1 -> STR_LIT .)
    MULTIPLY        reduce using rule 85 (literal1 -> STR_LIT .)
    DIVISION        reduce using rule 85 (literal1 -> STR_LIT .)
    MODULO          reduce using rule 85 (literal1 -> STR_LIT .)
    EXPONENT        reduce using rule 85 (literal1 -> STR_LIT .)
    GT              reduce using rule 85 (literal1 -> STR_LIT .)
    LT              reduce using rule 85 (literal1 -> STR_LIT .)
    EQ_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    GT_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    LT_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    NOT_EQ          reduce using rule 85 (literal1 -> STR_LIT .)
    AND             reduce using rule 85 (literal1 -> STR_LIT .)
    OR              reduce using rule 85 (literal1 -> STR_LIT .)
    COMMA           reduce using rule 85 (literal1 -> STR_LIT .)
    NEWLINE         reduce using rule 85 (literal1 -> STR_LIT .)
    RBRACKET        reduce using rule 85 (literal1 -> STR_LIT .)
    RPAREN          reduce using rule 85 (literal1 -> STR_LIT .)


state 59

    (11) var_statement -> data_type IDENT list_dec .

    COMMA           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    EQ              reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    NEWLINE         reduce using rule 11 (var_statement -> data_type IDENT list_dec .)


state 60

    (12) list_dec -> empty .

    COMMA           reduce using rule 12 (list_dec -> empty .)
    EQ              reduce using rule 12 (list_dec -> empty .)
    NEWLINE         reduce using rule 12 (list_dec -> empty .)


state 61

    (13) list_dec -> LBRACKET . RBRACKET _2d_list

    RBRACKET        shift and go to state 110


state 62

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline . main_function unli_newline GHOST
    (6) main_function -> . MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    MAIN_CASPER     shift and go to state 112

    main_function                  shift and go to state 111

state 63

    (87) function_statements -> ret_type FUNCTION_NAME . LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    LPAREN          shift and go to state 113


state 64

    (17) global_statement_tail -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 17 (global_statement_tail -> COMMA IDENT global_statement_tail .)


state 65

    (18) global_statement_tail -> EQ global_value global_statement_tail2 .

    NEWLINE         reduce using rule 18 (global_statement_tail -> EQ global_value global_statement_tail2 .)


state 66

    (19) global_statement_tail2 -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 114


state 67

    (20) global_statement_tail2 -> empty .

    NEWLINE         reduce using rule 20 (global_statement_tail2 -> empty .)


state 68

    (32) expression -> factor factor_tail .

    COMMA           reduce using rule 32 (expression -> factor factor_tail .)
    NEWLINE         reduce using rule 32 (expression -> factor factor_tail .)


state 69

    (64) factor_tail -> PLUS . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 115
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 70

    (65) factor_tail -> MINUS . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 116
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 71

    (66) factor_tail -> MULTIPLY . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 117
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 72

    (67) factor_tail -> DIVISION . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 118
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 73

    (68) factor_tail -> MODULO . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 119
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 74

    (69) factor_tail -> EXPONENT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 120
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 75

    (70) factor_tail -> GT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 121
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 76

    (71) factor_tail -> LT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 122
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 77

    (72) factor_tail -> EQ_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 123
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 78

    (73) factor_tail -> GT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 124
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 79

    (74) factor_tail -> LT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 125
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 80

    (75) factor_tail -> NOT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 126
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 81

    (76) factor_tail -> AND . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 127
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 82

    (77) factor_tail -> OR . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 128
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 83

    (78) factor_tail -> empty .

    COMMA           reduce using rule 78 (factor_tail -> empty .)
    NEWLINE         reduce using rule 78 (factor_tail -> empty .)


state 84

    (23) list_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 129


state 85

    (24) list_element -> literal . element_tail
    (25) element_tail -> . COMMA list_element
    (26) element_tail -> . empty
    (467) empty -> .

    COMMA           shift and go to state 131
    RBRACKET        reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    element_tail                   shift and go to state 130
    empty                          shift and go to state 132

state 86

    (79) literal -> literal1 .

    COMMA           reduce using rule 79 (literal -> literal1 .)
    RBRACKET        reduce using rule 79 (literal -> literal1 .)
    RPAREN          reduce using rule 79 (literal -> literal1 .)


state 87

    (80) literal -> literal2 .

    COMMA           reduce using rule 80 (literal -> literal2 .)
    RBRACKET        reduce using rule 80 (literal -> literal2 .)
    RPAREN          reduce using rule 80 (literal -> literal2 .)


state 88

    (86) literal2 -> CHR_LIT .

    COMMA           reduce using rule 86 (literal2 -> CHR_LIT .)
    RBRACKET        reduce using rule 86 (literal2 -> CHR_LIT .)
    RPAREN          reduce using rule 86 (literal2 -> CHR_LIT .)


state 89

    (33) factor -> var_call postfix .

    PLUS            reduce using rule 33 (factor -> var_call postfix .)
    MINUS           reduce using rule 33 (factor -> var_call postfix .)
    MULTIPLY        reduce using rule 33 (factor -> var_call postfix .)
    DIVISION        reduce using rule 33 (factor -> var_call postfix .)
    MODULO          reduce using rule 33 (factor -> var_call postfix .)
    EXPONENT        reduce using rule 33 (factor -> var_call postfix .)
    GT              reduce using rule 33 (factor -> var_call postfix .)
    LT              reduce using rule 33 (factor -> var_call postfix .)
    EQ_EQ           reduce using rule 33 (factor -> var_call postfix .)
    GT_EQ           reduce using rule 33 (factor -> var_call postfix .)
    LT_EQ           reduce using rule 33 (factor -> var_call postfix .)
    NOT_EQ          reduce using rule 33 (factor -> var_call postfix .)
    AND             reduce using rule 33 (factor -> var_call postfix .)
    OR              reduce using rule 33 (factor -> var_call postfix .)
    COMMA           reduce using rule 33 (factor -> var_call postfix .)
    NEWLINE         reduce using rule 33 (factor -> var_call postfix .)


state 90

    (402) postfix -> empty .

    PLUS            reduce using rule 402 (postfix -> empty .)
    MINUS           reduce using rule 402 (postfix -> empty .)
    MULTIPLY        reduce using rule 402 (postfix -> empty .)
    DIVISION        reduce using rule 402 (postfix -> empty .)
    MODULO          reduce using rule 402 (postfix -> empty .)
    EXPONENT        reduce using rule 402 (postfix -> empty .)
    GT              reduce using rule 402 (postfix -> empty .)
    LT              reduce using rule 402 (postfix -> empty .)
    EQ_EQ           reduce using rule 402 (postfix -> empty .)
    GT_EQ           reduce using rule 402 (postfix -> empty .)
    LT_EQ           reduce using rule 402 (postfix -> empty .)
    NOT_EQ          reduce using rule 402 (postfix -> empty .)
    AND             reduce using rule 402 (postfix -> empty .)
    OR              reduce using rule 402 (postfix -> empty .)
    COMMA           reduce using rule 402 (postfix -> empty .)
    NEWLINE         reduce using rule 402 (postfix -> empty .)
    RPAREN          reduce using rule 402 (postfix -> empty .)
    RBRACE          reduce using rule 402 (postfix -> empty .)
    SWAP            reduce using rule 402 (postfix -> empty .)
    FUNCTION_NAME   reduce using rule 402 (postfix -> empty .)
    IDENT           reduce using rule 402 (postfix -> empty .)
    DISPLAY         reduce using rule 402 (postfix -> empty .)
    CHECK           reduce using rule 402 (postfix -> empty .)
    FOR             reduce using rule 402 (postfix -> empty .)
    UNTIL           reduce using rule 402 (postfix -> empty .)
    REPEAT          reduce using rule 402 (postfix -> empty .)
    INPUT           reduce using rule 402 (postfix -> empty .)
    INT             reduce using rule 402 (postfix -> empty .)
    FLT             reduce using rule 402 (postfix -> empty .)
    BLN             reduce using rule 402 (postfix -> empty .)
    CHR             reduce using rule 402 (postfix -> empty .)
    STR             reduce using rule 402 (postfix -> empty .)
    REVIVE          reduce using rule 402 (postfix -> empty .)
    SHIFT           reduce using rule 402 (postfix -> empty .)
    OTHERWISE       reduce using rule 402 (postfix -> empty .)
    SEMICOLON       reduce using rule 402 (postfix -> empty .)
    COLON           reduce using rule 402 (postfix -> empty .)


state 91

    (403) postfix -> postfix_op .

    PLUS            reduce using rule 403 (postfix -> postfix_op .)
    MINUS           reduce using rule 403 (postfix -> postfix_op .)
    MULTIPLY        reduce using rule 403 (postfix -> postfix_op .)
    DIVISION        reduce using rule 403 (postfix -> postfix_op .)
    MODULO          reduce using rule 403 (postfix -> postfix_op .)
    EXPONENT        reduce using rule 403 (postfix -> postfix_op .)
    GT              reduce using rule 403 (postfix -> postfix_op .)
    LT              reduce using rule 403 (postfix -> postfix_op .)
    EQ_EQ           reduce using rule 403 (postfix -> postfix_op .)
    GT_EQ           reduce using rule 403 (postfix -> postfix_op .)
    LT_EQ           reduce using rule 403 (postfix -> postfix_op .)
    NOT_EQ          reduce using rule 403 (postfix -> postfix_op .)
    AND             reduce using rule 403 (postfix -> postfix_op .)
    OR              reduce using rule 403 (postfix -> postfix_op .)
    COMMA           reduce using rule 403 (postfix -> postfix_op .)
    NEWLINE         reduce using rule 403 (postfix -> postfix_op .)
    RPAREN          reduce using rule 403 (postfix -> postfix_op .)
    RBRACE          reduce using rule 403 (postfix -> postfix_op .)
    SWAP            reduce using rule 403 (postfix -> postfix_op .)
    FUNCTION_NAME   reduce using rule 403 (postfix -> postfix_op .)
    IDENT           reduce using rule 403 (postfix -> postfix_op .)
    DISPLAY         reduce using rule 403 (postfix -> postfix_op .)
    CHECK           reduce using rule 403 (postfix -> postfix_op .)
    FOR             reduce using rule 403 (postfix -> postfix_op .)
    UNTIL           reduce using rule 403 (postfix -> postfix_op .)
    REPEAT          reduce using rule 403 (postfix -> postfix_op .)
    INPUT           reduce using rule 403 (postfix -> postfix_op .)
    INT             reduce using rule 403 (postfix -> postfix_op .)
    FLT             reduce using rule 403 (postfix -> postfix_op .)
    BLN             reduce using rule 403 (postfix -> postfix_op .)
    CHR             reduce using rule 403 (postfix -> postfix_op .)
    STR             reduce using rule 403 (postfix -> postfix_op .)
    REVIVE          reduce using rule 403 (postfix -> postfix_op .)
    SHIFT           reduce using rule 403 (postfix -> postfix_op .)
    OTHERWISE       reduce using rule 403 (postfix -> postfix_op .)
    SEMICOLON       reduce using rule 403 (postfix -> postfix_op .)
    COLON           reduce using rule 403 (postfix -> postfix_op .)


state 92

    (333) postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    RBRACE          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    SWAP            reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    FUNCTION_NAME   reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    IDENT           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    DISPLAY         reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    CHECK           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    FOR             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    UNTIL           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    REPEAT          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    INPUT           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    INT             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    FLT             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    BLN             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    CHR             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    STR             reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    REVIVE          reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    SHIFT           reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    OTHERWISE       reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    SEMICOLON       reduce using rule 333 (postfix_op -> PLUS_PLUS .)
    COLON           reduce using rule 333 (postfix_op -> PLUS_PLUS .)


state 93

    (334) postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    RBRACE          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    SWAP            reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    FUNCTION_NAME   reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    IDENT           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    DISPLAY         reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    CHECK           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    FOR             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    UNTIL           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    REPEAT          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    INPUT           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    INT             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    FLT             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    BLN             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    CHR             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    STR             reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    REVIVE          reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    SHIFT           reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    OTHERWISE       reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    SEMICOLON       reduce using rule 334 (postfix_op -> MINUS_MINUS .)
    COLON           reduce using rule 334 (postfix_op -> MINUS_MINUS .)


state 94

    (35) factor -> TILDE INT_LIT .

    PLUS            reduce using rule 35 (factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 35 (factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 35 (factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 35 (factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 35 (factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 35 (factor -> TILDE INT_LIT .)
    GT              reduce using rule 35 (factor -> TILDE INT_LIT .)
    LT              reduce using rule 35 (factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 35 (factor -> TILDE INT_LIT .)
    AND             reduce using rule 35 (factor -> TILDE INT_LIT .)
    OR              reduce using rule 35 (factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 35 (factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 35 (factor -> TILDE INT_LIT .)


state 95

    (36) factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 36 (factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    GT              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    LT              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 36 (factor -> TILDE FLT_LIT .)
    AND             reduce using rule 36 (factor -> TILDE FLT_LIT .)
    OR              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 36 (factor -> TILDE FLT_LIT .)


state 96

    (43) factor_expression_factor -> LPAREN . factor_expression RPAREN
    (38) factor_expression -> . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression              shift and go to state 133
    factor_expression_factor       shift and go to state 98
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 97

    (37) factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 134


state 98

    (38) factor_expression -> factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 135
    empty                          shift and go to state 150

state 99

    (39) factor_expression_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 151
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 100

    (40) factor_expression_factor -> factor_expression1 .

    PLUS            reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MINUS           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MULTIPLY        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    DIVISION        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MODULO          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    EXPONENT        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    GT              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    LT              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    EQ_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    GT_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    LT_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    NOT_EQ          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    AND             reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    OR              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    RPAREN          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)


state 101

    (41) factor_expression_factor -> TILDE . INT_LIT
    (42) factor_expression_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 152
    FLT_LIT         shift and go to state 153


state 102

    (59) factor_expression1 -> INT_LIT .

    PLUS            reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MINUS           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MULTIPLY        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    DIVISION        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MODULO          reduce using rule 59 (factor_expression1 -> INT_LIT .)
    EXPONENT        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    GT              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    LT              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    EQ_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    GT_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    LT_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    NOT_EQ          reduce using rule 59 (factor_expression1 -> INT_LIT .)
    AND             reduce using rule 59 (factor_expression1 -> INT_LIT .)
    OR              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    RPAREN          reduce using rule 59 (factor_expression1 -> INT_LIT .)


state 103

    (60) factor_expression1 -> FLT_LIT .

    PLUS            reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MINUS           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    DIVISION        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MODULO          reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    EXPONENT        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    GT              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    LT              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    GT_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    LT_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    AND             reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    OR              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    RPAREN          reduce using rule 60 (factor_expression1 -> FLT_LIT .)


state 104

    (61) factor_expression1 -> DAY .

    PLUS            reduce using rule 61 (factor_expression1 -> DAY .)
    MINUS           reduce using rule 61 (factor_expression1 -> DAY .)
    MULTIPLY        reduce using rule 61 (factor_expression1 -> DAY .)
    DIVISION        reduce using rule 61 (factor_expression1 -> DAY .)
    MODULO          reduce using rule 61 (factor_expression1 -> DAY .)
    EXPONENT        reduce using rule 61 (factor_expression1 -> DAY .)
    GT              reduce using rule 61 (factor_expression1 -> DAY .)
    LT              reduce using rule 61 (factor_expression1 -> DAY .)
    EQ_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    GT_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    LT_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    NOT_EQ          reduce using rule 61 (factor_expression1 -> DAY .)
    AND             reduce using rule 61 (factor_expression1 -> DAY .)
    OR              reduce using rule 61 (factor_expression1 -> DAY .)
    RPAREN          reduce using rule 61 (factor_expression1 -> DAY .)


state 105

    (62) factor_expression1 -> NIGHT .

    PLUS            reduce using rule 62 (factor_expression1 -> NIGHT .)
    MINUS           reduce using rule 62 (factor_expression1 -> NIGHT .)
    MULTIPLY        reduce using rule 62 (factor_expression1 -> NIGHT .)
    DIVISION        reduce using rule 62 (factor_expression1 -> NIGHT .)
    MODULO          reduce using rule 62 (factor_expression1 -> NIGHT .)
    EXPONENT        reduce using rule 62 (factor_expression1 -> NIGHT .)
    GT              reduce using rule 62 (factor_expression1 -> NIGHT .)
    LT              reduce using rule 62 (factor_expression1 -> NIGHT .)
    EQ_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    GT_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    LT_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    NOT_EQ          reduce using rule 62 (factor_expression1 -> NIGHT .)
    AND             reduce using rule 62 (factor_expression1 -> NIGHT .)
    OR              reduce using rule 62 (factor_expression1 -> NIGHT .)
    RPAREN          reduce using rule 62 (factor_expression1 -> NIGHT .)


state 106

    (63) factor_expression1 -> STR_LIT .

    PLUS            reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MINUS           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MULTIPLY        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    DIVISION        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MODULO          reduce using rule 63 (factor_expression1 -> STR_LIT .)
    EXPONENT        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    GT              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    LT              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    EQ_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    GT_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    LT_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    NOT_EQ          reduce using rule 63 (factor_expression1 -> STR_LIT .)
    AND             reduce using rule 63 (factor_expression1 -> STR_LIT .)
    OR              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    RPAREN          reduce using rule 63 (factor_expression1 -> STR_LIT .)


state 107

    (395) var_call -> IDENT list_index .

    PLUS_PLUS       reduce using rule 395 (var_call -> IDENT list_index .)
    MINUS_MINUS     reduce using rule 395 (var_call -> IDENT list_index .)
    PLUS            reduce using rule 395 (var_call -> IDENT list_index .)
    MINUS           reduce using rule 395 (var_call -> IDENT list_index .)
    MULTIPLY        reduce using rule 395 (var_call -> IDENT list_index .)
    DIVISION        reduce using rule 395 (var_call -> IDENT list_index .)
    MODULO          reduce using rule 395 (var_call -> IDENT list_index .)
    EXPONENT        reduce using rule 395 (var_call -> IDENT list_index .)
    GT              reduce using rule 395 (var_call -> IDENT list_index .)
    LT              reduce using rule 395 (var_call -> IDENT list_index .)
    EQ_EQ           reduce using rule 395 (var_call -> IDENT list_index .)
    GT_EQ           reduce using rule 395 (var_call -> IDENT list_index .)
    LT_EQ           reduce using rule 395 (var_call -> IDENT list_index .)
    NOT_EQ          reduce using rule 395 (var_call -> IDENT list_index .)
    AND             reduce using rule 395 (var_call -> IDENT list_index .)
    OR              reduce using rule 395 (var_call -> IDENT list_index .)
    COMMA           reduce using rule 395 (var_call -> IDENT list_index .)
    NEWLINE         reduce using rule 395 (var_call -> IDENT list_index .)
    RPAREN          reduce using rule 395 (var_call -> IDENT list_index .)
    RBRACE          reduce using rule 395 (var_call -> IDENT list_index .)
    SWAP            reduce using rule 395 (var_call -> IDENT list_index .)
    FUNCTION_NAME   reduce using rule 395 (var_call -> IDENT list_index .)
    IDENT           reduce using rule 395 (var_call -> IDENT list_index .)
    DISPLAY         reduce using rule 395 (var_call -> IDENT list_index .)
    CHECK           reduce using rule 395 (var_call -> IDENT list_index .)
    FOR             reduce using rule 395 (var_call -> IDENT list_index .)
    UNTIL           reduce using rule 395 (var_call -> IDENT list_index .)
    REPEAT          reduce using rule 395 (var_call -> IDENT list_index .)
    INPUT           reduce using rule 395 (var_call -> IDENT list_index .)
    INT             reduce using rule 395 (var_call -> IDENT list_index .)
    FLT             reduce using rule 395 (var_call -> IDENT list_index .)
    BLN             reduce using rule 395 (var_call -> IDENT list_index .)
    CHR             reduce using rule 395 (var_call -> IDENT list_index .)
    STR             reduce using rule 395 (var_call -> IDENT list_index .)
    REVIVE          reduce using rule 395 (var_call -> IDENT list_index .)
    SHIFT           reduce using rule 395 (var_call -> IDENT list_index .)
    OTHERWISE       reduce using rule 395 (var_call -> IDENT list_index .)
    SEMICOLON       reduce using rule 395 (var_call -> IDENT list_index .)
    COLON           reduce using rule 395 (var_call -> IDENT list_index .)
    PLUS_EQ         reduce using rule 395 (var_call -> IDENT list_index .)
    MINUS_EQ        reduce using rule 395 (var_call -> IDENT list_index .)
    MUL_EQ          reduce using rule 395 (var_call -> IDENT list_index .)
    DIV_EQ          reduce using rule 395 (var_call -> IDENT list_index .)
    MOD_EQ          reduce using rule 395 (var_call -> IDENT list_index .)


state 108

    (396) list_index -> LBRACKET . index RBRACKET list_index2
    (400) index -> . INT_LIT
    (401) index -> . IDENT

    INT_LIT         shift and go to state 155
    IDENT           shift and go to state 156

    index                          shift and go to state 154

state 109

    (397) list_index -> empty .

    PLUS_PLUS       reduce using rule 397 (list_index -> empty .)
    MINUS_MINUS     reduce using rule 397 (list_index -> empty .)
    PLUS            reduce using rule 397 (list_index -> empty .)
    MINUS           reduce using rule 397 (list_index -> empty .)
    MULTIPLY        reduce using rule 397 (list_index -> empty .)
    DIVISION        reduce using rule 397 (list_index -> empty .)
    MODULO          reduce using rule 397 (list_index -> empty .)
    EXPONENT        reduce using rule 397 (list_index -> empty .)
    GT              reduce using rule 397 (list_index -> empty .)
    LT              reduce using rule 397 (list_index -> empty .)
    EQ_EQ           reduce using rule 397 (list_index -> empty .)
    GT_EQ           reduce using rule 397 (list_index -> empty .)
    LT_EQ           reduce using rule 397 (list_index -> empty .)
    NOT_EQ          reduce using rule 397 (list_index -> empty .)
    AND             reduce using rule 397 (list_index -> empty .)
    OR              reduce using rule 397 (list_index -> empty .)
    COMMA           reduce using rule 397 (list_index -> empty .)
    NEWLINE         reduce using rule 397 (list_index -> empty .)
    RPAREN          reduce using rule 397 (list_index -> empty .)
    RBRACE          reduce using rule 397 (list_index -> empty .)
    SWAP            reduce using rule 397 (list_index -> empty .)
    FUNCTION_NAME   reduce using rule 397 (list_index -> empty .)
    IDENT           reduce using rule 397 (list_index -> empty .)
    DISPLAY         reduce using rule 397 (list_index -> empty .)
    CHECK           reduce using rule 397 (list_index -> empty .)
    FOR             reduce using rule 397 (list_index -> empty .)
    UNTIL           reduce using rule 397 (list_index -> empty .)
    REPEAT          reduce using rule 397 (list_index -> empty .)
    INPUT           reduce using rule 397 (list_index -> empty .)
    INT             reduce using rule 397 (list_index -> empty .)
    FLT             reduce using rule 397 (list_index -> empty .)
    BLN             reduce using rule 397 (list_index -> empty .)
    CHR             reduce using rule 397 (list_index -> empty .)
    STR             reduce using rule 397 (list_index -> empty .)
    REVIVE          reduce using rule 397 (list_index -> empty .)
    SHIFT           reduce using rule 397 (list_index -> empty .)
    OTHERWISE       reduce using rule 397 (list_index -> empty .)
    SEMICOLON       reduce using rule 397 (list_index -> empty .)
    COLON           reduce using rule 397 (list_index -> empty .)
    PLUS_EQ         reduce using rule 397 (list_index -> empty .)
    MINUS_EQ        reduce using rule 397 (list_index -> empty .)
    MUL_EQ          reduce using rule 397 (list_index -> empty .)
    DIV_EQ          reduce using rule 397 (list_index -> empty .)
    MOD_EQ          reduce using rule 397 (list_index -> empty .)


state 110

    (13) list_dec -> LBRACKET RBRACKET . _2d_list
    (14) _2d_list -> . empty
    (15) _2d_list -> . LBRACKET RBRACKET
    (467) empty -> .

    LBRACKET        shift and go to state 157
    COMMA           reduce using rule 467 (empty -> .)
    EQ              reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    _2d_list                       shift and go to state 158
    empty                          shift and go to state 159

state 111

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function . unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 160

state 112

    (6) main_function -> MAIN_CASPER . LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 161


state 113

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN . parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (103) parameters -> . data_type IDENT parameters_tail
    (104) parameters -> . empty
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (467) empty -> .

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14
    RPAREN          reduce using rule 467 (empty -> .)

    parameters                     shift and go to state 162
    data_type                      shift and go to state 163
    empty                          shift and go to state 164

state 114

    (19) global_statement_tail2 -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (467) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 467 (empty -> .)

    global_statement_tail          shift and go to state 165
    empty                          shift and go to state 21

state 115

    (64) factor_tail -> PLUS factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 166
    empty                          shift and go to state 83

state 116

    (65) factor_tail -> MINUS factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 167
    empty                          shift and go to state 83

state 117

    (66) factor_tail -> MULTIPLY factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 168
    empty                          shift and go to state 83

state 118

    (67) factor_tail -> DIVISION factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 169
    empty                          shift and go to state 83

state 119

    (68) factor_tail -> MODULO factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 170
    empty                          shift and go to state 83

state 120

    (69) factor_tail -> EXPONENT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 171
    empty                          shift and go to state 83

state 121

    (70) factor_tail -> GT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 172
    empty                          shift and go to state 83

state 122

    (71) factor_tail -> LT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 173
    empty                          shift and go to state 83

state 123

    (72) factor_tail -> EQ_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 174
    empty                          shift and go to state 83

state 124

    (73) factor_tail -> GT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 175
    empty                          shift and go to state 83

state 125

    (74) factor_tail -> LT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 176
    empty                          shift and go to state 83

state 126

    (75) factor_tail -> NOT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 177
    empty                          shift and go to state 83

state 127

    (76) factor_tail -> AND factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 178
    empty                          shift and go to state 83

state 128

    (77) factor_tail -> OR factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    factor_tail                    shift and go to state 179
    empty                          shift and go to state 83

state 129

    (23) list_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    NEWLINE         reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    SWAP            reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_NAME   reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    IDENT           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    DISPLAY         reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    CHECK           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    FOR             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    UNTIL           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    REPEAT          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    INPUT           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    INT             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    FLT             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    BLN             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    CHR             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    STR             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    REVIVE          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    RBRACE          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    SHIFT           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    OTHERWISE       reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)


state 130

    (24) list_element -> literal element_tail .

    RBRACKET        reduce using rule 24 (list_element -> literal element_tail .)
    RPAREN          reduce using rule 24 (list_element -> literal element_tail .)


state 131

    (25) element_tail -> COMMA . list_element
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 180
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 132

    (26) element_tail -> empty .

    RBRACKET        reduce using rule 26 (element_tail -> empty .)
    RPAREN          reduce using rule 26 (element_tail -> empty .)


state 133

    (43) factor_expression_factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 181


state 134

    (37) factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    COMMA           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    NEWLINE         reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)


state 135

    (38) factor_expression -> factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 38 (factor_expression -> factor_expression_factor factor_expression_tail .)


state 136

    (44) factor_expression_tail -> PLUS . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 182
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 137

    (45) factor_expression_tail -> MINUS . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 183
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 138

    (46) factor_expression_tail -> MULTIPLY . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 184
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 139

    (47) factor_expression_tail -> DIVISION . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 185
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 140

    (48) factor_expression_tail -> MODULO . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 186
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 141

    (49) factor_expression_tail -> EXPONENT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 187
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 142

    (50) factor_expression_tail -> GT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 188
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 143

    (51) factor_expression_tail -> LT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 189
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 144

    (52) factor_expression_tail -> EQ_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 190
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 145

    (53) factor_expression_tail -> GT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 191
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 146

    (54) factor_expression_tail -> LT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 192
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 147

    (55) factor_expression_tail -> NOT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 193
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 148

    (56) factor_expression_tail -> AND . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 194
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 149

    (57) factor_expression_tail -> OR . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (395) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 195
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 150

    (58) factor_expression_tail -> empty .

    RPAREN          reduce using rule 58 (factor_expression_tail -> empty .)


state 151

    (39) factor_expression_factor -> var_call postfix .

    PLUS            reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MINUS           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    DIVISION        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MODULO          reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    EXPONENT        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    GT              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    LT              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    GT_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    LT_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    AND             reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    OR              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    RPAREN          reduce using rule 39 (factor_expression_factor -> var_call postfix .)


state 152

    (41) factor_expression_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    GT              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    LT              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    AND             reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    OR              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)


state 153

    (42) factor_expression_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)


state 154

    (396) list_index -> LBRACKET index . RBRACKET list_index2

    RBRACKET        shift and go to state 196


state 155

    (400) index -> INT_LIT .

    RBRACKET        reduce using rule 400 (index -> INT_LIT .)


state 156

    (401) index -> IDENT .

    RBRACKET        reduce using rule 401 (index -> IDENT .)


state 157

    (15) _2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 197


state 158

    (13) list_dec -> LBRACKET RBRACKET _2d_list .

    COMMA           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    EQ              reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    NEWLINE         reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)


state 159

    (14) _2d_list -> empty .

    COMMA           reduce using rule 14 (_2d_list -> empty .)
    EQ              reduce using rule 14 (_2d_list -> empty .)
    NEWLINE         reduce using rule 14 (_2d_list -> empty .)


state 160

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline . GHOST

    GHOST           shift and go to state 198


state 161

    (6) main_function -> MAIN_CASPER LPAREN . RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 199


state 162

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters . RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    RPAREN          shift and go to state 200


state 163

    (103) parameters -> data_type . IDENT parameters_tail

    IDENT           shift and go to state 201


state 164

    (104) parameters -> empty .

    RPAREN          reduce using rule 104 (parameters -> empty .)


state 165

    (19) global_statement_tail2 -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 19 (global_statement_tail2 -> COMMA IDENT global_statement_tail .)


state 166

    (64) factor_tail -> PLUS factor factor_tail .

    COMMA           reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)
    NEWLINE         reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)


state 167

    (65) factor_tail -> MINUS factor factor_tail .

    COMMA           reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)
    NEWLINE         reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)


state 168

    (66) factor_tail -> MULTIPLY factor factor_tail .

    COMMA           reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)
    NEWLINE         reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)


state 169

    (67) factor_tail -> DIVISION factor factor_tail .

    COMMA           reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)
    NEWLINE         reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)


state 170

    (68) factor_tail -> MODULO factor factor_tail .

    COMMA           reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)
    NEWLINE         reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)


state 171

    (69) factor_tail -> EXPONENT factor factor_tail .

    COMMA           reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)
    NEWLINE         reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)


state 172

    (70) factor_tail -> GT factor factor_tail .

    COMMA           reduce using rule 70 (factor_tail -> GT factor factor_tail .)
    NEWLINE         reduce using rule 70 (factor_tail -> GT factor factor_tail .)


state 173

    (71) factor_tail -> LT factor factor_tail .

    COMMA           reduce using rule 71 (factor_tail -> LT factor factor_tail .)
    NEWLINE         reduce using rule 71 (factor_tail -> LT factor factor_tail .)


state 174

    (72) factor_tail -> EQ_EQ factor factor_tail .

    COMMA           reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)
    NEWLINE         reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)


state 175

    (73) factor_tail -> GT_EQ factor factor_tail .

    COMMA           reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)


state 176

    (74) factor_tail -> LT_EQ factor factor_tail .

    COMMA           reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)


state 177

    (75) factor_tail -> NOT_EQ factor factor_tail .

    COMMA           reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)


state 178

    (76) factor_tail -> AND factor factor_tail .

    COMMA           reduce using rule 76 (factor_tail -> AND factor factor_tail .)
    NEWLINE         reduce using rule 76 (factor_tail -> AND factor factor_tail .)


state 179

    (77) factor_tail -> OR factor factor_tail .

    COMMA           reduce using rule 77 (factor_tail -> OR factor factor_tail .)
    NEWLINE         reduce using rule 77 (factor_tail -> OR factor factor_tail .)


state 180

    (25) element_tail -> COMMA list_element .

    RBRACKET        reduce using rule 25 (element_tail -> COMMA list_element .)
    RPAREN          reduce using rule 25 (element_tail -> COMMA list_element .)


state 181

    (43) factor_expression_factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    RPAREN          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)


state 182

    (44) factor_expression_tail -> PLUS factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 202
    empty                          shift and go to state 150

state 183

    (45) factor_expression_tail -> MINUS factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 203
    empty                          shift and go to state 150

state 184

    (46) factor_expression_tail -> MULTIPLY factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 204
    empty                          shift and go to state 150

state 185

    (47) factor_expression_tail -> DIVISION factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 205
    empty                          shift and go to state 150

state 186

    (48) factor_expression_tail -> MODULO factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 206
    empty                          shift and go to state 150

state 187

    (49) factor_expression_tail -> EXPONENT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 207
    empty                          shift and go to state 150

state 188

    (50) factor_expression_tail -> GT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 208
    empty                          shift and go to state 150

state 189

    (51) factor_expression_tail -> LT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 209
    empty                          shift and go to state 150

state 190

    (52) factor_expression_tail -> EQ_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 210
    empty                          shift and go to state 150

state 191

    (53) factor_expression_tail -> GT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 211
    empty                          shift and go to state 150

state 192

    (54) factor_expression_tail -> LT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 212
    empty                          shift and go to state 150

state 193

    (55) factor_expression_tail -> NOT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 213
    empty                          shift and go to state 150

state 194

    (56) factor_expression_tail -> AND factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 214
    empty                          shift and go to state 150

state 195

    (57) factor_expression_tail -> OR factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 467 (empty -> .)

    factor_expression_tail         shift and go to state 215
    empty                          shift and go to state 150

state 196

    (396) list_index -> LBRACKET index RBRACKET . list_index2
    (398) list_index2 -> . LBRACKET index RBRACKET
    (399) list_index2 -> . empty
    (467) empty -> .

    LBRACKET        shift and go to state 216
    PLUS_PLUS       reduce using rule 467 (empty -> .)
    MINUS_MINUS     reduce using rule 467 (empty -> .)
    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SEMICOLON       reduce using rule 467 (empty -> .)
    COLON           reduce using rule 467 (empty -> .)
    PLUS_EQ         reduce using rule 467 (empty -> .)
    MINUS_EQ        reduce using rule 467 (empty -> .)
    MUL_EQ          reduce using rule 467 (empty -> .)
    DIV_EQ          reduce using rule 467 (empty -> .)
    MOD_EQ          reduce using rule 467 (empty -> .)

    list_index2                    shift and go to state 217
    empty                          shift and go to state 218

state 197

    (15) _2d_list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)


state 198

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .

    $end            reduce using rule 1 (program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .)


state 199

    (6) main_function -> MAIN_CASPER LPAREN RPAREN . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 219
    empty                          shift and go to state 17

state 200

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN . LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    LBRACE          shift and go to state 220


state 201

    (103) parameters -> data_type IDENT . parameters_tail
    (105) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (106) parameters_tail -> . empty
    (467) empty -> .

    COMMA           shift and go to state 222
    RPAREN          reduce using rule 467 (empty -> .)

    parameters_tail                shift and go to state 221
    empty                          shift and go to state 223

state 202

    (44) factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 44 (factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .)


state 203

    (45) factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 45 (factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .)


state 204

    (46) factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 46 (factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .)


state 205

    (47) factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 47 (factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .)


state 206

    (48) factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 48 (factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .)


state 207

    (49) factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 49 (factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .)


state 208

    (50) factor_expression_tail -> GT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 50 (factor_expression_tail -> GT factor_expression_factor factor_expression_tail .)


state 209

    (51) factor_expression_tail -> LT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 51 (factor_expression_tail -> LT factor_expression_factor factor_expression_tail .)


state 210

    (52) factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 52 (factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .)


state 211

    (53) factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 53 (factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .)


state 212

    (54) factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 54 (factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .)


state 213

    (55) factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 55 (factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .)


state 214

    (56) factor_expression_tail -> AND factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 56 (factor_expression_tail -> AND factor_expression_factor factor_expression_tail .)


state 215

    (57) factor_expression_tail -> OR factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 57 (factor_expression_tail -> OR factor_expression_factor factor_expression_tail .)


state 216

    (398) list_index2 -> LBRACKET . index RBRACKET
    (400) index -> . INT_LIT
    (401) index -> . IDENT

    INT_LIT         shift and go to state 155
    IDENT           shift and go to state 156

    index                          shift and go to state 224

state 217

    (396) list_index -> LBRACKET index RBRACKET list_index2 .

    PLUS_PLUS       reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_MINUS     reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS            reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MULTIPLY        reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIVISION        reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MODULO          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EXPONENT        reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT              reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT              reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EQ_EQ           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT_EQ           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT_EQ           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NOT_EQ          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    AND             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    OR              reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COMMA           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NEWLINE         reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RPAREN          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RBRACE          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SWAP            reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    FUNCTION_NAME   reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    IDENT           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DISPLAY         reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    CHECK           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    FOR             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    UNTIL           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    REPEAT          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    INPUT           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    INT             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    FLT             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    BLN             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    CHR             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    STR             reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    REVIVE          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SHIFT           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    OTHERWISE       reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SEMICOLON       reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COLON           reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS_EQ         reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_EQ        reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MUL_EQ          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIV_EQ          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MOD_EQ          reduce using rule 396 (list_index -> LBRACKET index RBRACKET list_index2 .)


state 218

    (399) list_index2 -> empty .

    PLUS_PLUS       reduce using rule 399 (list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 399 (list_index2 -> empty .)
    PLUS            reduce using rule 399 (list_index2 -> empty .)
    MINUS           reduce using rule 399 (list_index2 -> empty .)
    MULTIPLY        reduce using rule 399 (list_index2 -> empty .)
    DIVISION        reduce using rule 399 (list_index2 -> empty .)
    MODULO          reduce using rule 399 (list_index2 -> empty .)
    EXPONENT        reduce using rule 399 (list_index2 -> empty .)
    GT              reduce using rule 399 (list_index2 -> empty .)
    LT              reduce using rule 399 (list_index2 -> empty .)
    EQ_EQ           reduce using rule 399 (list_index2 -> empty .)
    GT_EQ           reduce using rule 399 (list_index2 -> empty .)
    LT_EQ           reduce using rule 399 (list_index2 -> empty .)
    NOT_EQ          reduce using rule 399 (list_index2 -> empty .)
    AND             reduce using rule 399 (list_index2 -> empty .)
    OR              reduce using rule 399 (list_index2 -> empty .)
    COMMA           reduce using rule 399 (list_index2 -> empty .)
    NEWLINE         reduce using rule 399 (list_index2 -> empty .)
    RPAREN          reduce using rule 399 (list_index2 -> empty .)
    RBRACE          reduce using rule 399 (list_index2 -> empty .)
    SWAP            reduce using rule 399 (list_index2 -> empty .)
    FUNCTION_NAME   reduce using rule 399 (list_index2 -> empty .)
    IDENT           reduce using rule 399 (list_index2 -> empty .)
    DISPLAY         reduce using rule 399 (list_index2 -> empty .)
    CHECK           reduce using rule 399 (list_index2 -> empty .)
    FOR             reduce using rule 399 (list_index2 -> empty .)
    UNTIL           reduce using rule 399 (list_index2 -> empty .)
    REPEAT          reduce using rule 399 (list_index2 -> empty .)
    INPUT           reduce using rule 399 (list_index2 -> empty .)
    INT             reduce using rule 399 (list_index2 -> empty .)
    FLT             reduce using rule 399 (list_index2 -> empty .)
    BLN             reduce using rule 399 (list_index2 -> empty .)
    CHR             reduce using rule 399 (list_index2 -> empty .)
    STR             reduce using rule 399 (list_index2 -> empty .)
    REVIVE          reduce using rule 399 (list_index2 -> empty .)
    SHIFT           reduce using rule 399 (list_index2 -> empty .)
    OTHERWISE       reduce using rule 399 (list_index2 -> empty .)
    SEMICOLON       reduce using rule 399 (list_index2 -> empty .)
    COLON           reduce using rule 399 (list_index2 -> empty .)
    PLUS_EQ         reduce using rule 399 (list_index2 -> empty .)
    MINUS_EQ        reduce using rule 399 (list_index2 -> empty .)
    MUL_EQ          reduce using rule 399 (list_index2 -> empty .)
    DIV_EQ          reduce using rule 399 (list_index2 -> empty .)
    MOD_EQ          reduce using rule 399 (list_index2 -> empty .)


state 219

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 225


state 220

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE . maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 226
    empty                          shift and go to state 17

state 221

    (103) parameters -> data_type IDENT parameters_tail .

    RPAREN          reduce using rule 103 (parameters -> data_type IDENT parameters_tail .)


state 222

    (105) parameters_tail -> COMMA . data_type IDENT parameters_tail
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    data_type                      shift and go to state 227

state 223

    (106) parameters_tail -> empty .

    RPAREN          reduce using rule 106 (parameters_tail -> empty .)


state 224

    (398) list_index2 -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 228


state 225

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 229
    empty                          shift and go to state 17

state 226

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline . statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 230
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 227

    (105) parameters_tail -> COMMA data_type . IDENT parameters_tail

    IDENT           shift and go to state 240


state 228

    (398) list_index2 -> LBRACKET index RBRACKET .

    PLUS_PLUS       reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS            reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MODULO          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    GT              reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    LT              reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    EQ_EQ           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    AND             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    OR              reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    NEWLINE         reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    RBRACE          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    SWAP            reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    FUNCTION_NAME   reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    IDENT           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    DISPLAY         reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    CHECK           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    FOR             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    UNTIL           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    REPEAT          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    INPUT           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    INT             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    FLT             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    BLN             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    CHR             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    STR             reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    REVIVE          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    SHIFT           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    OTHERWISE       reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    COLON           reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS_EQ         reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 398 (list_index2 -> LBRACKET index RBRACKET .)


state 229

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 241
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 230

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements . maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 242
    empty                          shift and go to state 17

state 231

    (142) statements -> empty .
    (152) local_dec -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 142 (statements -> empty .)
    NEWLINE         reduce using rule 142 (statements -> empty .)
    REVIVE          reduce using rule 142 (statements -> empty .)
    RBRACE          reduce using rule 142 (statements -> empty .)
    SHIFT           reduce using rule 142 (statements -> empty .)
    OTHERWISE       reduce using rule 142 (statements -> empty .)
    SWAP            reduce using rule 152 (local_dec -> empty .)
    FUNCTION_NAME   reduce using rule 152 (local_dec -> empty .)
    IDENT           reduce using rule 152 (local_dec -> empty .)
    DISPLAY         reduce using rule 152 (local_dec -> empty .)
    CHECK           reduce using rule 152 (local_dec -> empty .)
    FOR             reduce using rule 152 (local_dec -> empty .)
    UNTIL           reduce using rule 152 (local_dec -> empty .)
    REPEAT          reduce using rule 152 (local_dec -> empty .)
    INPUT           reduce using rule 152 (local_dec -> empty .)
    INT             reduce using rule 152 (local_dec -> empty .)
    FLT             reduce using rule 152 (local_dec -> empty .)
    BLN             reduce using rule 152 (local_dec -> empty .)
    CHR             reduce using rule 152 (local_dec -> empty .)
    STR             reduce using rule 152 (local_dec -> empty .)

  ! NEWLINE         [ reduce using rule 152 (local_dec -> empty .) ]
  ! REVIVE          [ reduce using rule 152 (local_dec -> empty .) ]
  ! RBRACE          [ reduce using rule 152 (local_dec -> empty .) ]
  ! SHIFT           [ reduce using rule 152 (local_dec -> empty .) ]
  ! OTHERWISE       [ reduce using rule 152 (local_dec -> empty .) ]


state 232

    (143) statements -> local_dec . maybe_newline statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 243
    empty                          shift and go to state 17

state 233

    (151) local_dec -> local_var_statement . unli_newline local_dec_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 244

state 234

    (153) local_var_statement -> local_data_type . IDENT local_list_dec

    IDENT           shift and go to state 245


state 235

    (154) local_data_type -> INT .

    IDENT           reduce using rule 154 (local_data_type -> INT .)


state 236

    (155) local_data_type -> FLT .

    IDENT           reduce using rule 155 (local_data_type -> FLT .)


state 237

    (156) local_data_type -> BLN .

    IDENT           reduce using rule 156 (local_data_type -> BLN .)


state 238

    (157) local_data_type -> CHR .

    IDENT           reduce using rule 157 (local_data_type -> CHR .)


state 239

    (158) local_data_type -> STR .

    IDENT           reduce using rule 158 (local_data_type -> STR .)


state 240

    (105) parameters_tail -> COMMA data_type IDENT . parameters_tail
    (105) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (106) parameters_tail -> . empty
    (467) empty -> .

    COMMA           shift and go to state 222
    RPAREN          reduce using rule 467 (empty -> .)

    parameters_tail                shift and go to state 246
    empty                          shift and go to state 223

state 241

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 247
    empty                          shift and go to state 17

state 242

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline . revive maybe_newline RBRACE unli_newline function_statements_tail
    (107) revive -> . REVIVE revive_value
    (108) revive -> . empty
    (467) empty -> .

    REVIVE          shift and go to state 249
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive                         shift and go to state 248
    empty                          shift and go to state 250

state 243

    (143) statements -> local_dec maybe_newline . statements_tail
    (144) statements_tail -> . switch_statement unli_newline statements
    (145) statements_tail -> . loop_statement unli_newline statements
    (146) statements_tail -> . function_call unli_newline statements
    (147) statements_tail -> . assignment_statement unli_newline statements
    (148) statements_tail -> . output_statement unli_newline statements
    (149) statements_tail -> . conditional_statement unli_newline statements
    (150) statements_tail -> . statements
    (232) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
    (269) loop_statement -> . for_loop
    (270) loop_statement -> . until_loop
    (271) loop_statement -> . repeat_until
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (379) assignment_statement -> . IDENT assign_tail
    (343) output_statement -> . DISPLAY output_value next_val
    (203) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (272) for_loop -> . FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (299) until_loop -> . UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
    (326) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SWAP            shift and go to state 259
    FUNCTION_NAME   shift and go to state 264
    IDENT           shift and go to state 260
    DISPLAY         shift and go to state 266
    CHECK           shift and go to state 267
    FOR             shift and go to state 268
    UNTIL           shift and go to state 269
    REPEAT          shift and go to state 270
    INPUT           shift and go to state 271
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! SWAP            [ reduce using rule 467 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 467 (empty -> .) ]
  ! IDENT           [ reduce using rule 467 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 467 (empty -> .) ]
  ! CHECK           [ reduce using rule 467 (empty -> .) ]
  ! FOR             [ reduce using rule 467 (empty -> .) ]
  ! UNTIL           [ reduce using rule 467 (empty -> .) ]
  ! REPEAT          [ reduce using rule 467 (empty -> .) ]
  ! INPUT           [ reduce using rule 467 (empty -> .) ]
  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    local_dec                      shift and go to state 232
    statements_tail                shift and go to state 251
    switch_statement               shift and go to state 252
    statements                     shift and go to state 253
    loop_statement                 shift and go to state 254
    function_call                  shift and go to state 255
    assignment_statement           shift and go to state 256
    output_statement               shift and go to state 257
    conditional_statement          shift and go to state 258
    for_loop                       shift and go to state 261
    until_loop                     shift and go to state 262
    repeat_until                   shift and go to state 263
    input_statement                shift and go to state 265
    empty                          shift and go to state 231
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 244

    (151) local_dec -> local_var_statement unli_newline . local_dec_tail
    (163) local_dec_tail -> . empty
    (164) local_dec_tail -> . COMMA IDENT local_dec_tail
    (165) local_dec_tail -> . EQ local_value local_dec_tail2
    (467) empty -> .

    COMMA           shift and go to state 274
    EQ              shift and go to state 275
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_dec_tail                 shift and go to state 272
    empty                          shift and go to state 273

state 245

    (153) local_var_statement -> local_data_type IDENT . local_list_dec
    (159) local_list_dec -> . empty
    (160) local_list_dec -> . LBRACKET RBRACKET local_2d_list
    (467) empty -> .

    LBRACKET        shift and go to state 278
    NEWLINE         reduce using rule 467 (empty -> .)

    local_list_dec                 shift and go to state 276
    empty                          shift and go to state 277

state 246

    (105) parameters_tail -> COMMA data_type IDENT parameters_tail .

    RPAREN          reduce using rule 105 (parameters_tail -> COMMA data_type IDENT parameters_tail .)


state 247

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 279


state 248

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive . maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 280
    empty                          shift and go to state 17

state 249

    (107) revive -> REVIVE . revive_value
    (109) revive_value -> . revive_type_cast
    (110) revive_value -> . revive_expression
    (111) revive_value -> . function_call
    (138) revive_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (139) revive_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (140) revive_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (141) revive_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (112) revive_expression -> . revive_factor revive_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 285
    CONVERT_TO_FLT  shift and go to state 287
    CONVERT_TO_BLN  shift and go to state 288
    CONVERT_TO_STR  shift and go to state 289
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_value                   shift and go to state 281
    revive_type_cast               shift and go to state 282
    revive_expression              shift and go to state 283
    function_call                  shift and go to state 284
    revive_factor                  shift and go to state 290
    input_statement                shift and go to state 265
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 250

    (108) revive -> empty .

    NEWLINE         reduce using rule 108 (revive -> empty .)
    RBRACE          reduce using rule 108 (revive -> empty .)


state 251

    (143) statements -> local_dec maybe_newline statements_tail .

    NEWLINE         reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    REVIVE          reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    RBRACE          reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    SHIFT           reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    OTHERWISE       reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)


state 252

    (144) statements_tail -> switch_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 299

state 253

    (150) statements_tail -> statements .

    NEWLINE         reduce using rule 150 (statements_tail -> statements .)
    REVIVE          reduce using rule 150 (statements_tail -> statements .)
    RBRACE          reduce using rule 150 (statements_tail -> statements .)
    SHIFT           reduce using rule 150 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 150 (statements_tail -> statements .)


state 254

    (145) statements_tail -> loop_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 300

state 255

    (146) statements_tail -> function_call . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 301

state 256

    (147) statements_tail -> assignment_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 302

state 257

    (148) statements_tail -> output_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 303

state 258

    (149) statements_tail -> conditional_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 304

state 259

    (232) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    LPAREN          shift and go to state 305


state 260

    (379) assignment_statement -> IDENT . assign_tail
    (380) assign_tail -> . DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (381) assign_tail -> . DOT PUSH LPAREN list_element RPAREN
    (382) assign_tail -> . assign_op value
    (383) assign_op -> . compound_op
    (384) assign_op -> . EQ
    (385) compound_op -> . PLUS_EQ
    (386) compound_op -> . MINUS_EQ
    (387) compound_op -> . MUL_EQ
    (388) compound_op -> . DIV_EQ
    (389) compound_op -> . MOD_EQ

    DOT             shift and go to state 307
    EQ              shift and go to state 310
    PLUS_EQ         shift and go to state 311
    MINUS_EQ        shift and go to state 312
    MUL_EQ          shift and go to state 313
    DIV_EQ          shift and go to state 314
    MOD_EQ          shift and go to state 315

    assign_tail                    shift and go to state 306
    assign_op                      shift and go to state 308
    compound_op                    shift and go to state 309

state 261

    (269) loop_statement -> for_loop .

    NEWLINE         reduce using rule 269 (loop_statement -> for_loop .)


state 262

    (270) loop_statement -> until_loop .

    NEWLINE         reduce using rule 270 (loop_statement -> until_loop .)


state 263

    (271) loop_statement -> repeat_until .

    NEWLINE         reduce using rule 271 (loop_statement -> repeat_until .)


state 264

    (335) function_call -> FUNCTION_NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 316


state 265

    (336) function_call -> input_statement .

    NEWLINE         reduce using rule 336 (function_call -> input_statement .)
    RBRACE          reduce using rule 336 (function_call -> input_statement .)
    COMMA           reduce using rule 336 (function_call -> input_statement .)
    SWAP            reduce using rule 336 (function_call -> input_statement .)
    FUNCTION_NAME   reduce using rule 336 (function_call -> input_statement .)
    IDENT           reduce using rule 336 (function_call -> input_statement .)
    DISPLAY         reduce using rule 336 (function_call -> input_statement .)
    CHECK           reduce using rule 336 (function_call -> input_statement .)
    FOR             reduce using rule 336 (function_call -> input_statement .)
    UNTIL           reduce using rule 336 (function_call -> input_statement .)
    REPEAT          reduce using rule 336 (function_call -> input_statement .)
    INPUT           reduce using rule 336 (function_call -> input_statement .)
    INT             reduce using rule 336 (function_call -> input_statement .)
    FLT             reduce using rule 336 (function_call -> input_statement .)
    BLN             reduce using rule 336 (function_call -> input_statement .)
    CHR             reduce using rule 336 (function_call -> input_statement .)
    STR             reduce using rule 336 (function_call -> input_statement .)
    REVIVE          reduce using rule 336 (function_call -> input_statement .)
    SHIFT           reduce using rule 336 (function_call -> input_statement .)
    OTHERWISE       reduce using rule 336 (function_call -> input_statement .)
    COLON           reduce using rule 336 (function_call -> input_statement .)
    RPAREN          reduce using rule 336 (function_call -> input_statement .)


state 266

    (343) output_statement -> DISPLAY . output_value next_val
    (344) output_value -> . output_type_cast
    (345) output_value -> . output_expression
    (346) output_value -> . function_call
    (373) output_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (374) output_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (375) output_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (376) output_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (347) output_expression -> . output_factor output_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 321
    CONVERT_TO_FLT  shift and go to state 323
    CONVERT_TO_BLN  shift and go to state 324
    CONVERT_TO_STR  shift and go to state 325
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_value                   shift and go to state 317
    output_type_cast               shift and go to state 318
    output_expression              shift and go to state 319
    function_call                  shift and go to state 320
    output_factor                  shift and go to state 326
    input_statement                shift and go to state 265
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 267

    (203) conditional_statement -> CHECK . LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 335


state 268

    (272) for_loop -> FOR . LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 336


state 269

    (299) until_loop -> UNTIL . LPAREN until_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 337


state 270

    (326) repeat_until -> REPEAT . LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN

    LBRACE          shift and go to state 338


state 271

    (466) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 339


state 272

    (151) local_dec -> local_var_statement unli_newline local_dec_tail .

    NEWLINE         reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    SWAP            reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    FUNCTION_NAME   reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    IDENT           reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    DISPLAY         reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    CHECK           reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    FOR             reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    UNTIL           reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    REPEAT          reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    INPUT           reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    INT             reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    FLT             reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    BLN             reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    CHR             reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    STR             reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    REVIVE          reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    RBRACE          reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    SHIFT           reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)
    OTHERWISE       reduce using rule 151 (local_dec -> local_var_statement unli_newline local_dec_tail .)


state 273

    (163) local_dec_tail -> empty .

    NEWLINE         reduce using rule 163 (local_dec_tail -> empty .)
    SWAP            reduce using rule 163 (local_dec_tail -> empty .)
    FUNCTION_NAME   reduce using rule 163 (local_dec_tail -> empty .)
    IDENT           reduce using rule 163 (local_dec_tail -> empty .)
    DISPLAY         reduce using rule 163 (local_dec_tail -> empty .)
    CHECK           reduce using rule 163 (local_dec_tail -> empty .)
    FOR             reduce using rule 163 (local_dec_tail -> empty .)
    UNTIL           reduce using rule 163 (local_dec_tail -> empty .)
    REPEAT          reduce using rule 163 (local_dec_tail -> empty .)
    INPUT           reduce using rule 163 (local_dec_tail -> empty .)
    INT             reduce using rule 163 (local_dec_tail -> empty .)
    FLT             reduce using rule 163 (local_dec_tail -> empty .)
    BLN             reduce using rule 163 (local_dec_tail -> empty .)
    CHR             reduce using rule 163 (local_dec_tail -> empty .)
    STR             reduce using rule 163 (local_dec_tail -> empty .)
    REVIVE          reduce using rule 163 (local_dec_tail -> empty .)
    RBRACE          reduce using rule 163 (local_dec_tail -> empty .)
    SHIFT           reduce using rule 163 (local_dec_tail -> empty .)
    OTHERWISE       reduce using rule 163 (local_dec_tail -> empty .)


state 274

    (164) local_dec_tail -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 340


state 275

    (165) local_dec_tail -> EQ . local_value local_dec_tail2
    (168) local_value -> . local_value_value
    (169) local_value -> . list_value
    (170) local_value_value -> . local_type_cast
    (171) local_value_value -> . local_expression
    (172) local_value_value -> . function_call
    (23) list_value -> . LBRACKET list_element RBRACKET
    (199) local_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (200) local_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (201) local_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (202) local_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (173) local_expression -> . local_factor local_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    CONVERT_TO_INT  shift and go to state 347
    CONVERT_TO_FLT  shift and go to state 349
    CONVERT_TO_BLN  shift and go to state 350
    CONVERT_TO_STR  shift and go to state 351
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_value                    shift and go to state 341
    local_value_value              shift and go to state 342
    list_value                     shift and go to state 343
    local_type_cast                shift and go to state 344
    local_expression               shift and go to state 345
    function_call                  shift and go to state 346
    local_factor                   shift and go to state 352
    input_statement                shift and go to state 265
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 276

    (153) local_var_statement -> local_data_type IDENT local_list_dec .

    NEWLINE         reduce using rule 153 (local_var_statement -> local_data_type IDENT local_list_dec .)


state 277

    (159) local_list_dec -> empty .

    NEWLINE         reduce using rule 159 (local_list_dec -> empty .)


state 278

    (160) local_list_dec -> LBRACKET . RBRACKET local_2d_list

    RBRACKET        shift and go to state 361


state 279

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 6 (main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)


state 280

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline . RBRACE unli_newline function_statements_tail

    RBRACE          shift and go to state 362


state 281

    (107) revive -> REVIVE revive_value .

    NEWLINE         reduce using rule 107 (revive -> REVIVE revive_value .)
    RBRACE          reduce using rule 107 (revive -> REVIVE revive_value .)


state 282

    (109) revive_value -> revive_type_cast .

    NEWLINE         reduce using rule 109 (revive_value -> revive_type_cast .)
    RBRACE          reduce using rule 109 (revive_value -> revive_type_cast .)


state 283

    (110) revive_value -> revive_expression .

    NEWLINE         reduce using rule 110 (revive_value -> revive_expression .)
    RBRACE          reduce using rule 110 (revive_value -> revive_expression .)


state 284

    (111) revive_value -> function_call .

    NEWLINE         reduce using rule 111 (revive_value -> function_call .)
    RBRACE          reduce using rule 111 (revive_value -> function_call .)


state 285

    (138) revive_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 363


state 286

    (117) revive_factor -> LPAREN . revive_factor RPAREN
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 364
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 287

    (139) revive_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 365


state 288

    (140) revive_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 366


state 289

    (141) revive_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 367


state 290

    (112) revive_expression -> revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 368
    empty                          shift and go to state 383

state 291

    (113) revive_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 384
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 292

    (114) revive_factor -> revive_factor1 .

    PLUS            reduce using rule 114 (revive_factor -> revive_factor1 .)
    MINUS           reduce using rule 114 (revive_factor -> revive_factor1 .)
    MULTIPLY        reduce using rule 114 (revive_factor -> revive_factor1 .)
    DIVISION        reduce using rule 114 (revive_factor -> revive_factor1 .)
    MODULO          reduce using rule 114 (revive_factor -> revive_factor1 .)
    EXPONENT        reduce using rule 114 (revive_factor -> revive_factor1 .)
    GT              reduce using rule 114 (revive_factor -> revive_factor1 .)
    LT              reduce using rule 114 (revive_factor -> revive_factor1 .)
    EQ_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    GT_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    LT_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    NOT_EQ          reduce using rule 114 (revive_factor -> revive_factor1 .)
    AND             reduce using rule 114 (revive_factor -> revive_factor1 .)
    OR              reduce using rule 114 (revive_factor -> revive_factor1 .)
    NEWLINE         reduce using rule 114 (revive_factor -> revive_factor1 .)
    RBRACE          reduce using rule 114 (revive_factor -> revive_factor1 .)
    RPAREN          reduce using rule 114 (revive_factor -> revive_factor1 .)


state 293

    (115) revive_factor -> TILDE . INT_LIT
    (116) revive_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 385
    FLT_LIT         shift and go to state 386


state 294

    (133) revive_factor1 -> INT_LIT .

    PLUS            reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MINUS           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MODULO          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    GT              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    LT              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    AND             reduce using rule 133 (revive_factor1 -> INT_LIT .)
    OR              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 133 (revive_factor1 -> INT_LIT .)
    RBRACE          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 133 (revive_factor1 -> INT_LIT .)


state 295

    (134) revive_factor1 -> FLT_LIT .

    PLUS            reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    GT              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    LT              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    AND             reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    OR              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    RBRACE          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 134 (revive_factor1 -> FLT_LIT .)


state 296

    (135) revive_factor1 -> DAY .

    PLUS            reduce using rule 135 (revive_factor1 -> DAY .)
    MINUS           reduce using rule 135 (revive_factor1 -> DAY .)
    MULTIPLY        reduce using rule 135 (revive_factor1 -> DAY .)
    DIVISION        reduce using rule 135 (revive_factor1 -> DAY .)
    MODULO          reduce using rule 135 (revive_factor1 -> DAY .)
    EXPONENT        reduce using rule 135 (revive_factor1 -> DAY .)
    GT              reduce using rule 135 (revive_factor1 -> DAY .)
    LT              reduce using rule 135 (revive_factor1 -> DAY .)
    EQ_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    GT_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    LT_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    NOT_EQ          reduce using rule 135 (revive_factor1 -> DAY .)
    AND             reduce using rule 135 (revive_factor1 -> DAY .)
    OR              reduce using rule 135 (revive_factor1 -> DAY .)
    NEWLINE         reduce using rule 135 (revive_factor1 -> DAY .)
    RBRACE          reduce using rule 135 (revive_factor1 -> DAY .)
    RPAREN          reduce using rule 135 (revive_factor1 -> DAY .)


state 297

    (136) revive_factor1 -> NIGHT .

    PLUS            reduce using rule 136 (revive_factor1 -> NIGHT .)
    MINUS           reduce using rule 136 (revive_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 136 (revive_factor1 -> NIGHT .)
    DIVISION        reduce using rule 136 (revive_factor1 -> NIGHT .)
    MODULO          reduce using rule 136 (revive_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 136 (revive_factor1 -> NIGHT .)
    GT              reduce using rule 136 (revive_factor1 -> NIGHT .)
    LT              reduce using rule 136 (revive_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 136 (revive_factor1 -> NIGHT .)
    AND             reduce using rule 136 (revive_factor1 -> NIGHT .)
    OR              reduce using rule 136 (revive_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 136 (revive_factor1 -> NIGHT .)
    RBRACE          reduce using rule 136 (revive_factor1 -> NIGHT .)
    RPAREN          reduce using rule 136 (revive_factor1 -> NIGHT .)


state 298

    (137) revive_factor1 -> STR_LIT .

    PLUS            reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MINUS           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MODULO          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    GT              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    LT              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    AND             reduce using rule 137 (revive_factor1 -> STR_LIT .)
    OR              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 137 (revive_factor1 -> STR_LIT .)
    RBRACE          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 137 (revive_factor1 -> STR_LIT .)


state 299

    (144) statements_tail -> switch_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 387
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 300

    (145) statements_tail -> loop_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 388
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 301

    (146) statements_tail -> function_call unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 389
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 302

    (147) statements_tail -> assignment_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 390
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 303

    (148) statements_tail -> output_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 391
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 304

    (149) statements_tail -> conditional_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 392
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 305

    (232) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    IDENT           shift and go to state 393


state 306

    (379) assignment_statement -> IDENT assign_tail .

    NEWLINE         reduce using rule 379 (assignment_statement -> IDENT assign_tail .)


state 307

    (380) assign_tail -> DOT . SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (381) assign_tail -> DOT . PUSH LPAREN list_element RPAREN

    SPLICE          shift and go to state 394
    PUSH            shift and go to state 395


state 308

    (382) assign_tail -> assign_op . value
    (404) value -> . type_cast
    (405) value -> . value_expression
    (406) value -> . function_call
    (433) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (434) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (435) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (436) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (407) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 400
    CONVERT_TO_FLT  shift and go to state 402
    CONVERT_TO_BLN  shift and go to state 403
    CONVERT_TO_STR  shift and go to state 404
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value                          shift and go to state 396
    type_cast                      shift and go to state 397
    value_expression               shift and go to state 398
    function_call                  shift and go to state 399
    value_factor                   shift and go to state 405
    input_statement                shift and go to state 265
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 309

    (383) assign_op -> compound_op .

    CONVERT_TO_INT  reduce using rule 383 (assign_op -> compound_op .)
    CONVERT_TO_FLT  reduce using rule 383 (assign_op -> compound_op .)
    CONVERT_TO_BLN  reduce using rule 383 (assign_op -> compound_op .)
    CONVERT_TO_STR  reduce using rule 383 (assign_op -> compound_op .)
    FUNCTION_NAME   reduce using rule 383 (assign_op -> compound_op .)
    TILDE           reduce using rule 383 (assign_op -> compound_op .)
    LPAREN          reduce using rule 383 (assign_op -> compound_op .)
    INPUT           reduce using rule 383 (assign_op -> compound_op .)
    IDENT           reduce using rule 383 (assign_op -> compound_op .)
    INT_LIT         reduce using rule 383 (assign_op -> compound_op .)
    FLT_LIT         reduce using rule 383 (assign_op -> compound_op .)
    DAY             reduce using rule 383 (assign_op -> compound_op .)
    NIGHT           reduce using rule 383 (assign_op -> compound_op .)
    STR_LIT         reduce using rule 383 (assign_op -> compound_op .)


state 310

    (384) assign_op -> EQ .

    CONVERT_TO_INT  reduce using rule 384 (assign_op -> EQ .)
    CONVERT_TO_FLT  reduce using rule 384 (assign_op -> EQ .)
    CONVERT_TO_BLN  reduce using rule 384 (assign_op -> EQ .)
    CONVERT_TO_STR  reduce using rule 384 (assign_op -> EQ .)
    FUNCTION_NAME   reduce using rule 384 (assign_op -> EQ .)
    TILDE           reduce using rule 384 (assign_op -> EQ .)
    LPAREN          reduce using rule 384 (assign_op -> EQ .)
    INPUT           reduce using rule 384 (assign_op -> EQ .)
    IDENT           reduce using rule 384 (assign_op -> EQ .)
    INT_LIT         reduce using rule 384 (assign_op -> EQ .)
    FLT_LIT         reduce using rule 384 (assign_op -> EQ .)
    DAY             reduce using rule 384 (assign_op -> EQ .)
    NIGHT           reduce using rule 384 (assign_op -> EQ .)
    STR_LIT         reduce using rule 384 (assign_op -> EQ .)


state 311

    (385) compound_op -> PLUS_EQ .

    CONVERT_TO_INT  reduce using rule 385 (compound_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 385 (compound_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 385 (compound_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 385 (compound_op -> PLUS_EQ .)
    FUNCTION_NAME   reduce using rule 385 (compound_op -> PLUS_EQ .)
    TILDE           reduce using rule 385 (compound_op -> PLUS_EQ .)
    LPAREN          reduce using rule 385 (compound_op -> PLUS_EQ .)
    INPUT           reduce using rule 385 (compound_op -> PLUS_EQ .)
    IDENT           reduce using rule 385 (compound_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 385 (compound_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 385 (compound_op -> PLUS_EQ .)
    DAY             reduce using rule 385 (compound_op -> PLUS_EQ .)
    NIGHT           reduce using rule 385 (compound_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 385 (compound_op -> PLUS_EQ .)


state 312

    (386) compound_op -> MINUS_EQ .

    CONVERT_TO_INT  reduce using rule 386 (compound_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 386 (compound_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 386 (compound_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 386 (compound_op -> MINUS_EQ .)
    FUNCTION_NAME   reduce using rule 386 (compound_op -> MINUS_EQ .)
    TILDE           reduce using rule 386 (compound_op -> MINUS_EQ .)
    LPAREN          reduce using rule 386 (compound_op -> MINUS_EQ .)
    INPUT           reduce using rule 386 (compound_op -> MINUS_EQ .)
    IDENT           reduce using rule 386 (compound_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 386 (compound_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 386 (compound_op -> MINUS_EQ .)
    DAY             reduce using rule 386 (compound_op -> MINUS_EQ .)
    NIGHT           reduce using rule 386 (compound_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 386 (compound_op -> MINUS_EQ .)


state 313

    (387) compound_op -> MUL_EQ .

    CONVERT_TO_INT  reduce using rule 387 (compound_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 387 (compound_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 387 (compound_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 387 (compound_op -> MUL_EQ .)
    FUNCTION_NAME   reduce using rule 387 (compound_op -> MUL_EQ .)
    TILDE           reduce using rule 387 (compound_op -> MUL_EQ .)
    LPAREN          reduce using rule 387 (compound_op -> MUL_EQ .)
    INPUT           reduce using rule 387 (compound_op -> MUL_EQ .)
    IDENT           reduce using rule 387 (compound_op -> MUL_EQ .)
    INT_LIT         reduce using rule 387 (compound_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 387 (compound_op -> MUL_EQ .)
    DAY             reduce using rule 387 (compound_op -> MUL_EQ .)
    NIGHT           reduce using rule 387 (compound_op -> MUL_EQ .)
    STR_LIT         reduce using rule 387 (compound_op -> MUL_EQ .)


state 314

    (388) compound_op -> DIV_EQ .

    CONVERT_TO_INT  reduce using rule 388 (compound_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 388 (compound_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 388 (compound_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 388 (compound_op -> DIV_EQ .)
    FUNCTION_NAME   reduce using rule 388 (compound_op -> DIV_EQ .)
    TILDE           reduce using rule 388 (compound_op -> DIV_EQ .)
    LPAREN          reduce using rule 388 (compound_op -> DIV_EQ .)
    INPUT           reduce using rule 388 (compound_op -> DIV_EQ .)
    IDENT           reduce using rule 388 (compound_op -> DIV_EQ .)
    INT_LIT         reduce using rule 388 (compound_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 388 (compound_op -> DIV_EQ .)
    DAY             reduce using rule 388 (compound_op -> DIV_EQ .)
    NIGHT           reduce using rule 388 (compound_op -> DIV_EQ .)
    STR_LIT         reduce using rule 388 (compound_op -> DIV_EQ .)


state 315

    (389) compound_op -> MOD_EQ .

    CONVERT_TO_INT  reduce using rule 389 (compound_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 389 (compound_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 389 (compound_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 389 (compound_op -> MOD_EQ .)
    FUNCTION_NAME   reduce using rule 389 (compound_op -> MOD_EQ .)
    TILDE           reduce using rule 389 (compound_op -> MOD_EQ .)
    LPAREN          reduce using rule 389 (compound_op -> MOD_EQ .)
    INPUT           reduce using rule 389 (compound_op -> MOD_EQ .)
    IDENT           reduce using rule 389 (compound_op -> MOD_EQ .)
    INT_LIT         reduce using rule 389 (compound_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 389 (compound_op -> MOD_EQ .)
    DAY             reduce using rule 389 (compound_op -> MOD_EQ .)
    NIGHT           reduce using rule 389 (compound_op -> MOD_EQ .)
    STR_LIT         reduce using rule 389 (compound_op -> MOD_EQ .)


state 316

    (335) function_call -> FUNCTION_NAME LPAREN . arguments RPAREN
    (337) arguments -> . empty
    (338) arguments -> . arg_value arg_tail
    (467) empty -> .
    (341) arg_value -> . literal
    (342) arg_value -> . var_call
    (79) literal -> . literal1
    (80) literal -> . literal2
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 467 (empty -> .)
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    arguments                      shift and go to state 414
    empty                          shift and go to state 415
    arg_value                      shift and go to state 416
    literal                        shift and go to state 417
    var_call                       shift and go to state 418
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 317

    (343) output_statement -> DISPLAY output_value . next_val
    (377) next_val -> . COMMA value next_val
    (378) next_val -> . empty
    (467) empty -> .

    COMMA           shift and go to state 420
    NEWLINE         reduce using rule 467 (empty -> .)

    next_val                       shift and go to state 419
    empty                          shift and go to state 421

state 318

    (344) output_value -> output_type_cast .

    COMMA           reduce using rule 344 (output_value -> output_type_cast .)
    NEWLINE         reduce using rule 344 (output_value -> output_type_cast .)


state 319

    (345) output_value -> output_expression .

    COMMA           reduce using rule 345 (output_value -> output_expression .)
    NEWLINE         reduce using rule 345 (output_value -> output_expression .)


state 320

    (346) output_value -> function_call .

    COMMA           reduce using rule 346 (output_value -> function_call .)
    NEWLINE         reduce using rule 346 (output_value -> function_call .)


state 321

    (373) output_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 422


state 322

    (352) output_factor -> LPAREN . output_factor RPAREN
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 423
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 323

    (374) output_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 424


state 324

    (375) output_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 425


state 325

    (376) output_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 426


state 326

    (347) output_expression -> output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 427
    empty                          shift and go to state 442

state 327

    (348) output_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 443
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 328

    (349) output_factor -> output_factor1 .

    PLUS            reduce using rule 349 (output_factor -> output_factor1 .)
    MINUS           reduce using rule 349 (output_factor -> output_factor1 .)
    MULTIPLY        reduce using rule 349 (output_factor -> output_factor1 .)
    DIVISION        reduce using rule 349 (output_factor -> output_factor1 .)
    MODULO          reduce using rule 349 (output_factor -> output_factor1 .)
    EXPONENT        reduce using rule 349 (output_factor -> output_factor1 .)
    GT              reduce using rule 349 (output_factor -> output_factor1 .)
    LT              reduce using rule 349 (output_factor -> output_factor1 .)
    EQ_EQ           reduce using rule 349 (output_factor -> output_factor1 .)
    GT_EQ           reduce using rule 349 (output_factor -> output_factor1 .)
    LT_EQ           reduce using rule 349 (output_factor -> output_factor1 .)
    NOT_EQ          reduce using rule 349 (output_factor -> output_factor1 .)
    AND             reduce using rule 349 (output_factor -> output_factor1 .)
    OR              reduce using rule 349 (output_factor -> output_factor1 .)
    COMMA           reduce using rule 349 (output_factor -> output_factor1 .)
    NEWLINE         reduce using rule 349 (output_factor -> output_factor1 .)
    RPAREN          reduce using rule 349 (output_factor -> output_factor1 .)


state 329

    (350) output_factor -> TILDE . INT_LIT
    (351) output_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 444
    FLT_LIT         shift and go to state 445


state 330

    (368) output_factor1 -> INT_LIT .

    PLUS            reduce using rule 368 (output_factor1 -> INT_LIT .)
    MINUS           reduce using rule 368 (output_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 368 (output_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 368 (output_factor1 -> INT_LIT .)
    MODULO          reduce using rule 368 (output_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 368 (output_factor1 -> INT_LIT .)
    GT              reduce using rule 368 (output_factor1 -> INT_LIT .)
    LT              reduce using rule 368 (output_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 368 (output_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 368 (output_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 368 (output_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 368 (output_factor1 -> INT_LIT .)
    AND             reduce using rule 368 (output_factor1 -> INT_LIT .)
    OR              reduce using rule 368 (output_factor1 -> INT_LIT .)
    COMMA           reduce using rule 368 (output_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 368 (output_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 368 (output_factor1 -> INT_LIT .)


state 331

    (369) output_factor1 -> FLT_LIT .

    PLUS            reduce using rule 369 (output_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 369 (output_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 369 (output_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 369 (output_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 369 (output_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 369 (output_factor1 -> FLT_LIT .)
    GT              reduce using rule 369 (output_factor1 -> FLT_LIT .)
    LT              reduce using rule 369 (output_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 369 (output_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 369 (output_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 369 (output_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 369 (output_factor1 -> FLT_LIT .)
    AND             reduce using rule 369 (output_factor1 -> FLT_LIT .)
    OR              reduce using rule 369 (output_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 369 (output_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 369 (output_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 369 (output_factor1 -> FLT_LIT .)


state 332

    (370) output_factor1 -> DAY .

    PLUS            reduce using rule 370 (output_factor1 -> DAY .)
    MINUS           reduce using rule 370 (output_factor1 -> DAY .)
    MULTIPLY        reduce using rule 370 (output_factor1 -> DAY .)
    DIVISION        reduce using rule 370 (output_factor1 -> DAY .)
    MODULO          reduce using rule 370 (output_factor1 -> DAY .)
    EXPONENT        reduce using rule 370 (output_factor1 -> DAY .)
    GT              reduce using rule 370 (output_factor1 -> DAY .)
    LT              reduce using rule 370 (output_factor1 -> DAY .)
    EQ_EQ           reduce using rule 370 (output_factor1 -> DAY .)
    GT_EQ           reduce using rule 370 (output_factor1 -> DAY .)
    LT_EQ           reduce using rule 370 (output_factor1 -> DAY .)
    NOT_EQ          reduce using rule 370 (output_factor1 -> DAY .)
    AND             reduce using rule 370 (output_factor1 -> DAY .)
    OR              reduce using rule 370 (output_factor1 -> DAY .)
    COMMA           reduce using rule 370 (output_factor1 -> DAY .)
    NEWLINE         reduce using rule 370 (output_factor1 -> DAY .)
    RPAREN          reduce using rule 370 (output_factor1 -> DAY .)


state 333

    (371) output_factor1 -> NIGHT .

    PLUS            reduce using rule 371 (output_factor1 -> NIGHT .)
    MINUS           reduce using rule 371 (output_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 371 (output_factor1 -> NIGHT .)
    DIVISION        reduce using rule 371 (output_factor1 -> NIGHT .)
    MODULO          reduce using rule 371 (output_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 371 (output_factor1 -> NIGHT .)
    GT              reduce using rule 371 (output_factor1 -> NIGHT .)
    LT              reduce using rule 371 (output_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 371 (output_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 371 (output_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 371 (output_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 371 (output_factor1 -> NIGHT .)
    AND             reduce using rule 371 (output_factor1 -> NIGHT .)
    OR              reduce using rule 371 (output_factor1 -> NIGHT .)
    COMMA           reduce using rule 371 (output_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 371 (output_factor1 -> NIGHT .)
    RPAREN          reduce using rule 371 (output_factor1 -> NIGHT .)


state 334

    (372) output_factor1 -> STR_LIT .

    PLUS            reduce using rule 372 (output_factor1 -> STR_LIT .)
    MINUS           reduce using rule 372 (output_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 372 (output_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 372 (output_factor1 -> STR_LIT .)
    MODULO          reduce using rule 372 (output_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 372 (output_factor1 -> STR_LIT .)
    GT              reduce using rule 372 (output_factor1 -> STR_LIT .)
    LT              reduce using rule 372 (output_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 372 (output_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 372 (output_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 372 (output_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 372 (output_factor1 -> STR_LIT .)
    AND             reduce using rule 372 (output_factor1 -> STR_LIT .)
    OR              reduce using rule 372 (output_factor1 -> STR_LIT .)
    COMMA           reduce using rule 372 (output_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 372 (output_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 372 (output_factor1 -> STR_LIT .)


state 335

    (203) conditional_statement -> CHECK LPAREN . condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (206) condition -> . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition                      shift and go to state 447
    condition_factor               shift and go to state 448
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 336

    (272) for_loop -> FOR LPAREN . control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (327) control_variable -> . INT IDENT EQ control_var_tail

    INT             shift and go to state 458

    control_variable               shift and go to state 457

state 337

    (299) until_loop -> UNTIL LPAREN . until_expression RPAREN LBRACE statements RBRACE
    (300) until_expression -> . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_expression               shift and go to state 460
    until_factor                   shift and go to state 461
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 338

    (326) repeat_until -> REPEAT LBRACE . statements RBRACE UNTIL LPAREN until_expression RPAREN
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 470
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 339

    (466) input_statement -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 471


state 340

    (164) local_dec_tail -> COMMA IDENT . local_dec_tail
    (163) local_dec_tail -> . empty
    (164) local_dec_tail -> . COMMA IDENT local_dec_tail
    (165) local_dec_tail -> . EQ local_value local_dec_tail2
    (467) empty -> .

    COMMA           shift and go to state 274
    EQ              shift and go to state 275
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_dec_tail                 shift and go to state 472
    empty                          shift and go to state 273

state 341

    (165) local_dec_tail -> EQ local_value . local_dec_tail2
    (166) local_dec_tail2 -> . COMMA IDENT local_dec_tail
    (167) local_dec_tail2 -> . empty
    (467) empty -> .

    COMMA           shift and go to state 474
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_dec_tail2                shift and go to state 473
    empty                          shift and go to state 475

state 342

    (168) local_value -> local_value_value .

    COMMA           reduce using rule 168 (local_value -> local_value_value .)
    NEWLINE         reduce using rule 168 (local_value -> local_value_value .)
    SWAP            reduce using rule 168 (local_value -> local_value_value .)
    FUNCTION_NAME   reduce using rule 168 (local_value -> local_value_value .)
    IDENT           reduce using rule 168 (local_value -> local_value_value .)
    DISPLAY         reduce using rule 168 (local_value -> local_value_value .)
    CHECK           reduce using rule 168 (local_value -> local_value_value .)
    FOR             reduce using rule 168 (local_value -> local_value_value .)
    UNTIL           reduce using rule 168 (local_value -> local_value_value .)
    REPEAT          reduce using rule 168 (local_value -> local_value_value .)
    INPUT           reduce using rule 168 (local_value -> local_value_value .)
    INT             reduce using rule 168 (local_value -> local_value_value .)
    FLT             reduce using rule 168 (local_value -> local_value_value .)
    BLN             reduce using rule 168 (local_value -> local_value_value .)
    CHR             reduce using rule 168 (local_value -> local_value_value .)
    STR             reduce using rule 168 (local_value -> local_value_value .)
    REVIVE          reduce using rule 168 (local_value -> local_value_value .)
    RBRACE          reduce using rule 168 (local_value -> local_value_value .)
    SHIFT           reduce using rule 168 (local_value -> local_value_value .)
    OTHERWISE       reduce using rule 168 (local_value -> local_value_value .)


state 343

    (169) local_value -> list_value .

    COMMA           reduce using rule 169 (local_value -> list_value .)
    NEWLINE         reduce using rule 169 (local_value -> list_value .)
    SWAP            reduce using rule 169 (local_value -> list_value .)
    FUNCTION_NAME   reduce using rule 169 (local_value -> list_value .)
    IDENT           reduce using rule 169 (local_value -> list_value .)
    DISPLAY         reduce using rule 169 (local_value -> list_value .)
    CHECK           reduce using rule 169 (local_value -> list_value .)
    FOR             reduce using rule 169 (local_value -> list_value .)
    UNTIL           reduce using rule 169 (local_value -> list_value .)
    REPEAT          reduce using rule 169 (local_value -> list_value .)
    INPUT           reduce using rule 169 (local_value -> list_value .)
    INT             reduce using rule 169 (local_value -> list_value .)
    FLT             reduce using rule 169 (local_value -> list_value .)
    BLN             reduce using rule 169 (local_value -> list_value .)
    CHR             reduce using rule 169 (local_value -> list_value .)
    STR             reduce using rule 169 (local_value -> list_value .)
    REVIVE          reduce using rule 169 (local_value -> list_value .)
    RBRACE          reduce using rule 169 (local_value -> list_value .)
    SHIFT           reduce using rule 169 (local_value -> list_value .)
    OTHERWISE       reduce using rule 169 (local_value -> list_value .)


state 344

    (170) local_value_value -> local_type_cast .

    COMMA           reduce using rule 170 (local_value_value -> local_type_cast .)
    NEWLINE         reduce using rule 170 (local_value_value -> local_type_cast .)
    SWAP            reduce using rule 170 (local_value_value -> local_type_cast .)
    FUNCTION_NAME   reduce using rule 170 (local_value_value -> local_type_cast .)
    IDENT           reduce using rule 170 (local_value_value -> local_type_cast .)
    DISPLAY         reduce using rule 170 (local_value_value -> local_type_cast .)
    CHECK           reduce using rule 170 (local_value_value -> local_type_cast .)
    FOR             reduce using rule 170 (local_value_value -> local_type_cast .)
    UNTIL           reduce using rule 170 (local_value_value -> local_type_cast .)
    REPEAT          reduce using rule 170 (local_value_value -> local_type_cast .)
    INPUT           reduce using rule 170 (local_value_value -> local_type_cast .)
    INT             reduce using rule 170 (local_value_value -> local_type_cast .)
    FLT             reduce using rule 170 (local_value_value -> local_type_cast .)
    BLN             reduce using rule 170 (local_value_value -> local_type_cast .)
    CHR             reduce using rule 170 (local_value_value -> local_type_cast .)
    STR             reduce using rule 170 (local_value_value -> local_type_cast .)
    REVIVE          reduce using rule 170 (local_value_value -> local_type_cast .)
    RBRACE          reduce using rule 170 (local_value_value -> local_type_cast .)
    SHIFT           reduce using rule 170 (local_value_value -> local_type_cast .)
    OTHERWISE       reduce using rule 170 (local_value_value -> local_type_cast .)


state 345

    (171) local_value_value -> local_expression .

    COMMA           reduce using rule 171 (local_value_value -> local_expression .)
    NEWLINE         reduce using rule 171 (local_value_value -> local_expression .)
    SWAP            reduce using rule 171 (local_value_value -> local_expression .)
    FUNCTION_NAME   reduce using rule 171 (local_value_value -> local_expression .)
    IDENT           reduce using rule 171 (local_value_value -> local_expression .)
    DISPLAY         reduce using rule 171 (local_value_value -> local_expression .)
    CHECK           reduce using rule 171 (local_value_value -> local_expression .)
    FOR             reduce using rule 171 (local_value_value -> local_expression .)
    UNTIL           reduce using rule 171 (local_value_value -> local_expression .)
    REPEAT          reduce using rule 171 (local_value_value -> local_expression .)
    INPUT           reduce using rule 171 (local_value_value -> local_expression .)
    INT             reduce using rule 171 (local_value_value -> local_expression .)
    FLT             reduce using rule 171 (local_value_value -> local_expression .)
    BLN             reduce using rule 171 (local_value_value -> local_expression .)
    CHR             reduce using rule 171 (local_value_value -> local_expression .)
    STR             reduce using rule 171 (local_value_value -> local_expression .)
    REVIVE          reduce using rule 171 (local_value_value -> local_expression .)
    RBRACE          reduce using rule 171 (local_value_value -> local_expression .)
    SHIFT           reduce using rule 171 (local_value_value -> local_expression .)
    OTHERWISE       reduce using rule 171 (local_value_value -> local_expression .)


state 346

    (172) local_value_value -> function_call .

    COMMA           reduce using rule 172 (local_value_value -> function_call .)
    NEWLINE         reduce using rule 172 (local_value_value -> function_call .)
    SWAP            reduce using rule 172 (local_value_value -> function_call .)
    FUNCTION_NAME   reduce using rule 172 (local_value_value -> function_call .)
    IDENT           reduce using rule 172 (local_value_value -> function_call .)
    DISPLAY         reduce using rule 172 (local_value_value -> function_call .)
    CHECK           reduce using rule 172 (local_value_value -> function_call .)
    FOR             reduce using rule 172 (local_value_value -> function_call .)
    UNTIL           reduce using rule 172 (local_value_value -> function_call .)
    REPEAT          reduce using rule 172 (local_value_value -> function_call .)
    INPUT           reduce using rule 172 (local_value_value -> function_call .)
    INT             reduce using rule 172 (local_value_value -> function_call .)
    FLT             reduce using rule 172 (local_value_value -> function_call .)
    BLN             reduce using rule 172 (local_value_value -> function_call .)
    CHR             reduce using rule 172 (local_value_value -> function_call .)
    STR             reduce using rule 172 (local_value_value -> function_call .)
    REVIVE          reduce using rule 172 (local_value_value -> function_call .)
    RBRACE          reduce using rule 172 (local_value_value -> function_call .)
    SHIFT           reduce using rule 172 (local_value_value -> function_call .)
    OTHERWISE       reduce using rule 172 (local_value_value -> function_call .)


state 347

    (199) local_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 476


state 348

    (178) local_factor -> LPAREN . local_factor RPAREN
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 477
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 349

    (200) local_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 478


state 350

    (201) local_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 479


state 351

    (202) local_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 480


state 352

    (173) local_expression -> local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 481
    empty                          shift and go to state 496

state 353

    (174) local_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 497
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 354

    (175) local_factor -> local_factor1 .

    PLUS            reduce using rule 175 (local_factor -> local_factor1 .)
    MINUS           reduce using rule 175 (local_factor -> local_factor1 .)
    MULTIPLY        reduce using rule 175 (local_factor -> local_factor1 .)
    DIVISION        reduce using rule 175 (local_factor -> local_factor1 .)
    MODULO          reduce using rule 175 (local_factor -> local_factor1 .)
    EXPONENT        reduce using rule 175 (local_factor -> local_factor1 .)
    GT              reduce using rule 175 (local_factor -> local_factor1 .)
    LT              reduce using rule 175 (local_factor -> local_factor1 .)
    EQ_EQ           reduce using rule 175 (local_factor -> local_factor1 .)
    GT_EQ           reduce using rule 175 (local_factor -> local_factor1 .)
    LT_EQ           reduce using rule 175 (local_factor -> local_factor1 .)
    NOT_EQ          reduce using rule 175 (local_factor -> local_factor1 .)
    AND             reduce using rule 175 (local_factor -> local_factor1 .)
    OR              reduce using rule 175 (local_factor -> local_factor1 .)
    COMMA           reduce using rule 175 (local_factor -> local_factor1 .)
    NEWLINE         reduce using rule 175 (local_factor -> local_factor1 .)
    SWAP            reduce using rule 175 (local_factor -> local_factor1 .)
    FUNCTION_NAME   reduce using rule 175 (local_factor -> local_factor1 .)
    IDENT           reduce using rule 175 (local_factor -> local_factor1 .)
    DISPLAY         reduce using rule 175 (local_factor -> local_factor1 .)
    CHECK           reduce using rule 175 (local_factor -> local_factor1 .)
    FOR             reduce using rule 175 (local_factor -> local_factor1 .)
    UNTIL           reduce using rule 175 (local_factor -> local_factor1 .)
    REPEAT          reduce using rule 175 (local_factor -> local_factor1 .)
    INPUT           reduce using rule 175 (local_factor -> local_factor1 .)
    INT             reduce using rule 175 (local_factor -> local_factor1 .)
    FLT             reduce using rule 175 (local_factor -> local_factor1 .)
    BLN             reduce using rule 175 (local_factor -> local_factor1 .)
    CHR             reduce using rule 175 (local_factor -> local_factor1 .)
    STR             reduce using rule 175 (local_factor -> local_factor1 .)
    REVIVE          reduce using rule 175 (local_factor -> local_factor1 .)
    RBRACE          reduce using rule 175 (local_factor -> local_factor1 .)
    SHIFT           reduce using rule 175 (local_factor -> local_factor1 .)
    OTHERWISE       reduce using rule 175 (local_factor -> local_factor1 .)
    RPAREN          reduce using rule 175 (local_factor -> local_factor1 .)


state 355

    (176) local_factor -> TILDE . INT_LIT
    (177) local_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 498
    FLT_LIT         shift and go to state 499


state 356

    (194) local_factor1 -> INT_LIT .

    PLUS            reduce using rule 194 (local_factor1 -> INT_LIT .)
    MINUS           reduce using rule 194 (local_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 194 (local_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 194 (local_factor1 -> INT_LIT .)
    MODULO          reduce using rule 194 (local_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 194 (local_factor1 -> INT_LIT .)
    GT              reduce using rule 194 (local_factor1 -> INT_LIT .)
    LT              reduce using rule 194 (local_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 194 (local_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 194 (local_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 194 (local_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 194 (local_factor1 -> INT_LIT .)
    AND             reduce using rule 194 (local_factor1 -> INT_LIT .)
    OR              reduce using rule 194 (local_factor1 -> INT_LIT .)
    COMMA           reduce using rule 194 (local_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 194 (local_factor1 -> INT_LIT .)
    SWAP            reduce using rule 194 (local_factor1 -> INT_LIT .)
    FUNCTION_NAME   reduce using rule 194 (local_factor1 -> INT_LIT .)
    IDENT           reduce using rule 194 (local_factor1 -> INT_LIT .)
    DISPLAY         reduce using rule 194 (local_factor1 -> INT_LIT .)
    CHECK           reduce using rule 194 (local_factor1 -> INT_LIT .)
    FOR             reduce using rule 194 (local_factor1 -> INT_LIT .)
    UNTIL           reduce using rule 194 (local_factor1 -> INT_LIT .)
    REPEAT          reduce using rule 194 (local_factor1 -> INT_LIT .)
    INPUT           reduce using rule 194 (local_factor1 -> INT_LIT .)
    INT             reduce using rule 194 (local_factor1 -> INT_LIT .)
    FLT             reduce using rule 194 (local_factor1 -> INT_LIT .)
    BLN             reduce using rule 194 (local_factor1 -> INT_LIT .)
    CHR             reduce using rule 194 (local_factor1 -> INT_LIT .)
    STR             reduce using rule 194 (local_factor1 -> INT_LIT .)
    REVIVE          reduce using rule 194 (local_factor1 -> INT_LIT .)
    RBRACE          reduce using rule 194 (local_factor1 -> INT_LIT .)
    SHIFT           reduce using rule 194 (local_factor1 -> INT_LIT .)
    OTHERWISE       reduce using rule 194 (local_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 194 (local_factor1 -> INT_LIT .)


state 357

    (195) local_factor1 -> FLT_LIT .

    PLUS            reduce using rule 195 (local_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 195 (local_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 195 (local_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 195 (local_factor1 -> FLT_LIT .)
    GT              reduce using rule 195 (local_factor1 -> FLT_LIT .)
    LT              reduce using rule 195 (local_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    AND             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    OR              reduce using rule 195 (local_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 195 (local_factor1 -> FLT_LIT .)
    SWAP            reduce using rule 195 (local_factor1 -> FLT_LIT .)
    FUNCTION_NAME   reduce using rule 195 (local_factor1 -> FLT_LIT .)
    IDENT           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    DISPLAY         reduce using rule 195 (local_factor1 -> FLT_LIT .)
    CHECK           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    FOR             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    UNTIL           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    REPEAT          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    INPUT           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    INT             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    FLT             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    BLN             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    CHR             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    STR             reduce using rule 195 (local_factor1 -> FLT_LIT .)
    REVIVE          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    RBRACE          reduce using rule 195 (local_factor1 -> FLT_LIT .)
    SHIFT           reduce using rule 195 (local_factor1 -> FLT_LIT .)
    OTHERWISE       reduce using rule 195 (local_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 195 (local_factor1 -> FLT_LIT .)


state 358

    (196) local_factor1 -> DAY .

    PLUS            reduce using rule 196 (local_factor1 -> DAY .)
    MINUS           reduce using rule 196 (local_factor1 -> DAY .)
    MULTIPLY        reduce using rule 196 (local_factor1 -> DAY .)
    DIVISION        reduce using rule 196 (local_factor1 -> DAY .)
    MODULO          reduce using rule 196 (local_factor1 -> DAY .)
    EXPONENT        reduce using rule 196 (local_factor1 -> DAY .)
    GT              reduce using rule 196 (local_factor1 -> DAY .)
    LT              reduce using rule 196 (local_factor1 -> DAY .)
    EQ_EQ           reduce using rule 196 (local_factor1 -> DAY .)
    GT_EQ           reduce using rule 196 (local_factor1 -> DAY .)
    LT_EQ           reduce using rule 196 (local_factor1 -> DAY .)
    NOT_EQ          reduce using rule 196 (local_factor1 -> DAY .)
    AND             reduce using rule 196 (local_factor1 -> DAY .)
    OR              reduce using rule 196 (local_factor1 -> DAY .)
    COMMA           reduce using rule 196 (local_factor1 -> DAY .)
    NEWLINE         reduce using rule 196 (local_factor1 -> DAY .)
    SWAP            reduce using rule 196 (local_factor1 -> DAY .)
    FUNCTION_NAME   reduce using rule 196 (local_factor1 -> DAY .)
    IDENT           reduce using rule 196 (local_factor1 -> DAY .)
    DISPLAY         reduce using rule 196 (local_factor1 -> DAY .)
    CHECK           reduce using rule 196 (local_factor1 -> DAY .)
    FOR             reduce using rule 196 (local_factor1 -> DAY .)
    UNTIL           reduce using rule 196 (local_factor1 -> DAY .)
    REPEAT          reduce using rule 196 (local_factor1 -> DAY .)
    INPUT           reduce using rule 196 (local_factor1 -> DAY .)
    INT             reduce using rule 196 (local_factor1 -> DAY .)
    FLT             reduce using rule 196 (local_factor1 -> DAY .)
    BLN             reduce using rule 196 (local_factor1 -> DAY .)
    CHR             reduce using rule 196 (local_factor1 -> DAY .)
    STR             reduce using rule 196 (local_factor1 -> DAY .)
    REVIVE          reduce using rule 196 (local_factor1 -> DAY .)
    RBRACE          reduce using rule 196 (local_factor1 -> DAY .)
    SHIFT           reduce using rule 196 (local_factor1 -> DAY .)
    OTHERWISE       reduce using rule 196 (local_factor1 -> DAY .)
    RPAREN          reduce using rule 196 (local_factor1 -> DAY .)


state 359

    (197) local_factor1 -> NIGHT .

    PLUS            reduce using rule 197 (local_factor1 -> NIGHT .)
    MINUS           reduce using rule 197 (local_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 197 (local_factor1 -> NIGHT .)
    DIVISION        reduce using rule 197 (local_factor1 -> NIGHT .)
    MODULO          reduce using rule 197 (local_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 197 (local_factor1 -> NIGHT .)
    GT              reduce using rule 197 (local_factor1 -> NIGHT .)
    LT              reduce using rule 197 (local_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 197 (local_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 197 (local_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 197 (local_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 197 (local_factor1 -> NIGHT .)
    AND             reduce using rule 197 (local_factor1 -> NIGHT .)
    OR              reduce using rule 197 (local_factor1 -> NIGHT .)
    COMMA           reduce using rule 197 (local_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 197 (local_factor1 -> NIGHT .)
    SWAP            reduce using rule 197 (local_factor1 -> NIGHT .)
    FUNCTION_NAME   reduce using rule 197 (local_factor1 -> NIGHT .)
    IDENT           reduce using rule 197 (local_factor1 -> NIGHT .)
    DISPLAY         reduce using rule 197 (local_factor1 -> NIGHT .)
    CHECK           reduce using rule 197 (local_factor1 -> NIGHT .)
    FOR             reduce using rule 197 (local_factor1 -> NIGHT .)
    UNTIL           reduce using rule 197 (local_factor1 -> NIGHT .)
    REPEAT          reduce using rule 197 (local_factor1 -> NIGHT .)
    INPUT           reduce using rule 197 (local_factor1 -> NIGHT .)
    INT             reduce using rule 197 (local_factor1 -> NIGHT .)
    FLT             reduce using rule 197 (local_factor1 -> NIGHT .)
    BLN             reduce using rule 197 (local_factor1 -> NIGHT .)
    CHR             reduce using rule 197 (local_factor1 -> NIGHT .)
    STR             reduce using rule 197 (local_factor1 -> NIGHT .)
    REVIVE          reduce using rule 197 (local_factor1 -> NIGHT .)
    RBRACE          reduce using rule 197 (local_factor1 -> NIGHT .)
    SHIFT           reduce using rule 197 (local_factor1 -> NIGHT .)
    OTHERWISE       reduce using rule 197 (local_factor1 -> NIGHT .)
    RPAREN          reduce using rule 197 (local_factor1 -> NIGHT .)


state 360

    (198) local_factor1 -> STR_LIT .

    PLUS            reduce using rule 198 (local_factor1 -> STR_LIT .)
    MINUS           reduce using rule 198 (local_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 198 (local_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 198 (local_factor1 -> STR_LIT .)
    MODULO          reduce using rule 198 (local_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 198 (local_factor1 -> STR_LIT .)
    GT              reduce using rule 198 (local_factor1 -> STR_LIT .)
    LT              reduce using rule 198 (local_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 198 (local_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 198 (local_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 198 (local_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 198 (local_factor1 -> STR_LIT .)
    AND             reduce using rule 198 (local_factor1 -> STR_LIT .)
    OR              reduce using rule 198 (local_factor1 -> STR_LIT .)
    COMMA           reduce using rule 198 (local_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 198 (local_factor1 -> STR_LIT .)
    SWAP            reduce using rule 198 (local_factor1 -> STR_LIT .)
    FUNCTION_NAME   reduce using rule 198 (local_factor1 -> STR_LIT .)
    IDENT           reduce using rule 198 (local_factor1 -> STR_LIT .)
    DISPLAY         reduce using rule 198 (local_factor1 -> STR_LIT .)
    CHECK           reduce using rule 198 (local_factor1 -> STR_LIT .)
    FOR             reduce using rule 198 (local_factor1 -> STR_LIT .)
    UNTIL           reduce using rule 198 (local_factor1 -> STR_LIT .)
    REPEAT          reduce using rule 198 (local_factor1 -> STR_LIT .)
    INPUT           reduce using rule 198 (local_factor1 -> STR_LIT .)
    INT             reduce using rule 198 (local_factor1 -> STR_LIT .)
    FLT             reduce using rule 198 (local_factor1 -> STR_LIT .)
    BLN             reduce using rule 198 (local_factor1 -> STR_LIT .)
    CHR             reduce using rule 198 (local_factor1 -> STR_LIT .)
    STR             reduce using rule 198 (local_factor1 -> STR_LIT .)
    REVIVE          reduce using rule 198 (local_factor1 -> STR_LIT .)
    RBRACE          reduce using rule 198 (local_factor1 -> STR_LIT .)
    SHIFT           reduce using rule 198 (local_factor1 -> STR_LIT .)
    OTHERWISE       reduce using rule 198 (local_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 198 (local_factor1 -> STR_LIT .)


state 361

    (160) local_list_dec -> LBRACKET RBRACKET . local_2d_list
    (161) local_2d_list -> . empty
    (162) local_2d_list -> . LBRACKET RBRACKET
    (467) empty -> .

    LBRACKET        shift and go to state 500
    NEWLINE         reduce using rule 467 (empty -> .)

    local_2d_list                  shift and go to state 501
    empty                          shift and go to state 502

state 362

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE . unli_newline function_statements_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 503

state 363

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 505
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 364

    (117) revive_factor -> LPAREN revive_factor . RPAREN

    RPAREN          shift and go to state 518


state 365

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 519
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 366

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 520
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 367

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 521
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 368

    (112) revive_expression -> revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 112 (revive_expression -> revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 112 (revive_expression -> revive_factor revive_factor_tail .)


state 369

    (118) revive_factor_tail -> PLUS . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 522
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 370

    (119) revive_factor_tail -> MINUS . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 523
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 371

    (120) revive_factor_tail -> MULTIPLY . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 524
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 372

    (121) revive_factor_tail -> DIVISION . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 525
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 373

    (122) revive_factor_tail -> MODULO . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 526
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 374

    (123) revive_factor_tail -> EXPONENT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 527
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 375

    (124) revive_factor_tail -> GT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 528
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 376

    (125) revive_factor_tail -> LT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 529
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 377

    (126) revive_factor_tail -> EQ_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 530
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 378

    (127) revive_factor_tail -> GT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 531
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 379

    (128) revive_factor_tail -> LT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 532
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 380

    (129) revive_factor_tail -> NOT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 533
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 381

    (130) revive_factor_tail -> AND . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 534
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 382

    (131) revive_factor_tail -> OR . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (395) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 293
    LPAREN          shift and go to state 286
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 294
    FLT_LIT         shift and go to state 295
    DAY             shift and go to state 296
    NIGHT           shift and go to state 297
    STR_LIT         shift and go to state 298

    revive_factor                  shift and go to state 535
    var_call                       shift and go to state 291
    revive_factor1                 shift and go to state 292

state 383

    (132) revive_factor_tail -> empty .

    NEWLINE         reduce using rule 132 (revive_factor_tail -> empty .)
    RBRACE          reduce using rule 132 (revive_factor_tail -> empty .)


state 384

    (113) revive_factor -> var_call postfix .

    PLUS            reduce using rule 113 (revive_factor -> var_call postfix .)
    MINUS           reduce using rule 113 (revive_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 113 (revive_factor -> var_call postfix .)
    DIVISION        reduce using rule 113 (revive_factor -> var_call postfix .)
    MODULO          reduce using rule 113 (revive_factor -> var_call postfix .)
    EXPONENT        reduce using rule 113 (revive_factor -> var_call postfix .)
    GT              reduce using rule 113 (revive_factor -> var_call postfix .)
    LT              reduce using rule 113 (revive_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    GT_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    LT_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 113 (revive_factor -> var_call postfix .)
    AND             reduce using rule 113 (revive_factor -> var_call postfix .)
    OR              reduce using rule 113 (revive_factor -> var_call postfix .)
    NEWLINE         reduce using rule 113 (revive_factor -> var_call postfix .)
    RBRACE          reduce using rule 113 (revive_factor -> var_call postfix .)
    RPAREN          reduce using rule 113 (revive_factor -> var_call postfix .)


state 385

    (115) revive_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    GT              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    LT              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    AND             reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    OR              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    RBRACE          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)


state 386

    (116) revive_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    RBRACE          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)


state 387

    (144) statements_tail -> switch_statement unli_newline statements .

    NEWLINE         reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    REVIVE          reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    RBRACE          reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    SHIFT           reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    OTHERWISE       reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)


state 388

    (145) statements_tail -> loop_statement unli_newline statements .

    NEWLINE         reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    REVIVE          reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    RBRACE          reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    SHIFT           reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    OTHERWISE       reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)


state 389

    (146) statements_tail -> function_call unli_newline statements .

    NEWLINE         reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    REVIVE          reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    RBRACE          reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    SHIFT           reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    OTHERWISE       reduce using rule 146 (statements_tail -> function_call unli_newline statements .)


state 390

    (147) statements_tail -> assignment_statement unli_newline statements .

    NEWLINE         reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    REVIVE          reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    RBRACE          reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    SHIFT           reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    OTHERWISE       reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)


state 391

    (148) statements_tail -> output_statement unli_newline statements .

    NEWLINE         reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    REVIVE          reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    RBRACE          reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    SHIFT           reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    OTHERWISE       reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)


state 392

    (149) statements_tail -> conditional_statement unli_newline statements .

    NEWLINE         reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    REVIVE          reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    RBRACE          reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    SHIFT           reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    OTHERWISE       reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)


state 393

    (232) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    RPAREN          shift and go to state 536


state 394

    (380) assign_tail -> DOT SPLICE . LPAREN start COMMA deleteCount COMMA splice_items RPAREN

    LPAREN          shift and go to state 537


state 395

    (381) assign_tail -> DOT PUSH . LPAREN list_element RPAREN

    LPAREN          shift and go to state 538


state 396

    (382) assign_tail -> assign_op value .

    NEWLINE         reduce using rule 382 (assign_tail -> assign_op value .)


state 397

    (404) value -> type_cast .

    NEWLINE         reduce using rule 404 (value -> type_cast .)
    COMMA           reduce using rule 404 (value -> type_cast .)
    RPAREN          reduce using rule 404 (value -> type_cast .)


state 398

    (405) value -> value_expression .

    NEWLINE         reduce using rule 405 (value -> value_expression .)
    COMMA           reduce using rule 405 (value -> value_expression .)
    RPAREN          reduce using rule 405 (value -> value_expression .)


state 399

    (406) value -> function_call .

    NEWLINE         reduce using rule 406 (value -> function_call .)
    COMMA           reduce using rule 406 (value -> function_call .)
    RPAREN          reduce using rule 406 (value -> function_call .)


state 400

    (433) type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 539


state 401

    (412) value_factor -> LPAREN . value_factor RPAREN
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 540
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 402

    (434) type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 541


state 403

    (435) type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 542


state 404

    (436) type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 543


state 405

    (407) value_expression -> value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 544
    empty                          shift and go to state 559

state 406

    (408) value_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 560
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 407

    (409) value_factor -> value_factor1 .

    PLUS            reduce using rule 409 (value_factor -> value_factor1 .)
    MINUS           reduce using rule 409 (value_factor -> value_factor1 .)
    MULTIPLY        reduce using rule 409 (value_factor -> value_factor1 .)
    DIVISION        reduce using rule 409 (value_factor -> value_factor1 .)
    MODULO          reduce using rule 409 (value_factor -> value_factor1 .)
    EXPONENT        reduce using rule 409 (value_factor -> value_factor1 .)
    GT              reduce using rule 409 (value_factor -> value_factor1 .)
    LT              reduce using rule 409 (value_factor -> value_factor1 .)
    EQ_EQ           reduce using rule 409 (value_factor -> value_factor1 .)
    GT_EQ           reduce using rule 409 (value_factor -> value_factor1 .)
    LT_EQ           reduce using rule 409 (value_factor -> value_factor1 .)
    NOT_EQ          reduce using rule 409 (value_factor -> value_factor1 .)
    AND             reduce using rule 409 (value_factor -> value_factor1 .)
    OR              reduce using rule 409 (value_factor -> value_factor1 .)
    NEWLINE         reduce using rule 409 (value_factor -> value_factor1 .)
    RPAREN          reduce using rule 409 (value_factor -> value_factor1 .)
    COMMA           reduce using rule 409 (value_factor -> value_factor1 .)


state 408

    (410) value_factor -> TILDE . INT_LIT
    (411) value_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 561
    FLT_LIT         shift and go to state 562


state 409

    (428) value_factor1 -> INT_LIT .

    PLUS            reduce using rule 428 (value_factor1 -> INT_LIT .)
    MINUS           reduce using rule 428 (value_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 428 (value_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 428 (value_factor1 -> INT_LIT .)
    MODULO          reduce using rule 428 (value_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 428 (value_factor1 -> INT_LIT .)
    GT              reduce using rule 428 (value_factor1 -> INT_LIT .)
    LT              reduce using rule 428 (value_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 428 (value_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 428 (value_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 428 (value_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 428 (value_factor1 -> INT_LIT .)
    AND             reduce using rule 428 (value_factor1 -> INT_LIT .)
    OR              reduce using rule 428 (value_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 428 (value_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 428 (value_factor1 -> INT_LIT .)
    COMMA           reduce using rule 428 (value_factor1 -> INT_LIT .)


state 410

    (429) value_factor1 -> FLT_LIT .

    PLUS            reduce using rule 429 (value_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 429 (value_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 429 (value_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 429 (value_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 429 (value_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 429 (value_factor1 -> FLT_LIT .)
    GT              reduce using rule 429 (value_factor1 -> FLT_LIT .)
    LT              reduce using rule 429 (value_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 429 (value_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 429 (value_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 429 (value_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 429 (value_factor1 -> FLT_LIT .)
    AND             reduce using rule 429 (value_factor1 -> FLT_LIT .)
    OR              reduce using rule 429 (value_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 429 (value_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 429 (value_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 429 (value_factor1 -> FLT_LIT .)


state 411

    (430) value_factor1 -> DAY .

    PLUS            reduce using rule 430 (value_factor1 -> DAY .)
    MINUS           reduce using rule 430 (value_factor1 -> DAY .)
    MULTIPLY        reduce using rule 430 (value_factor1 -> DAY .)
    DIVISION        reduce using rule 430 (value_factor1 -> DAY .)
    MODULO          reduce using rule 430 (value_factor1 -> DAY .)
    EXPONENT        reduce using rule 430 (value_factor1 -> DAY .)
    GT              reduce using rule 430 (value_factor1 -> DAY .)
    LT              reduce using rule 430 (value_factor1 -> DAY .)
    EQ_EQ           reduce using rule 430 (value_factor1 -> DAY .)
    GT_EQ           reduce using rule 430 (value_factor1 -> DAY .)
    LT_EQ           reduce using rule 430 (value_factor1 -> DAY .)
    NOT_EQ          reduce using rule 430 (value_factor1 -> DAY .)
    AND             reduce using rule 430 (value_factor1 -> DAY .)
    OR              reduce using rule 430 (value_factor1 -> DAY .)
    NEWLINE         reduce using rule 430 (value_factor1 -> DAY .)
    RPAREN          reduce using rule 430 (value_factor1 -> DAY .)
    COMMA           reduce using rule 430 (value_factor1 -> DAY .)


state 412

    (431) value_factor1 -> NIGHT .

    PLUS            reduce using rule 431 (value_factor1 -> NIGHT .)
    MINUS           reduce using rule 431 (value_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 431 (value_factor1 -> NIGHT .)
    DIVISION        reduce using rule 431 (value_factor1 -> NIGHT .)
    MODULO          reduce using rule 431 (value_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 431 (value_factor1 -> NIGHT .)
    GT              reduce using rule 431 (value_factor1 -> NIGHT .)
    LT              reduce using rule 431 (value_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 431 (value_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 431 (value_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 431 (value_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 431 (value_factor1 -> NIGHT .)
    AND             reduce using rule 431 (value_factor1 -> NIGHT .)
    OR              reduce using rule 431 (value_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 431 (value_factor1 -> NIGHT .)
    RPAREN          reduce using rule 431 (value_factor1 -> NIGHT .)
    COMMA           reduce using rule 431 (value_factor1 -> NIGHT .)


state 413

    (432) value_factor1 -> STR_LIT .

    PLUS            reduce using rule 432 (value_factor1 -> STR_LIT .)
    MINUS           reduce using rule 432 (value_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 432 (value_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 432 (value_factor1 -> STR_LIT .)
    MODULO          reduce using rule 432 (value_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 432 (value_factor1 -> STR_LIT .)
    GT              reduce using rule 432 (value_factor1 -> STR_LIT .)
    LT              reduce using rule 432 (value_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 432 (value_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 432 (value_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 432 (value_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 432 (value_factor1 -> STR_LIT .)
    AND             reduce using rule 432 (value_factor1 -> STR_LIT .)
    OR              reduce using rule 432 (value_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 432 (value_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 432 (value_factor1 -> STR_LIT .)
    COMMA           reduce using rule 432 (value_factor1 -> STR_LIT .)


state 414

    (335) function_call -> FUNCTION_NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 563


state 415

    (337) arguments -> empty .

    RPAREN          reduce using rule 337 (arguments -> empty .)


state 416

    (338) arguments -> arg_value . arg_tail
    (339) arg_tail -> . COMMA arg_value arg_tail
    (340) arg_tail -> . empty
    (467) empty -> .

    COMMA           shift and go to state 565
    RPAREN          reduce using rule 467 (empty -> .)

    arg_tail                       shift and go to state 564
    empty                          shift and go to state 566

state 417

    (341) arg_value -> literal .

    COMMA           reduce using rule 341 (arg_value -> literal .)
    RPAREN          reduce using rule 341 (arg_value -> literal .)


state 418

    (342) arg_value -> var_call .

    COMMA           reduce using rule 342 (arg_value -> var_call .)
    RPAREN          reduce using rule 342 (arg_value -> var_call .)


state 419

    (343) output_statement -> DISPLAY output_value next_val .

    NEWLINE         reduce using rule 343 (output_statement -> DISPLAY output_value next_val .)


state 420

    (377) next_val -> COMMA . value next_val
    (404) value -> . type_cast
    (405) value -> . value_expression
    (406) value -> . function_call
    (433) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (434) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (435) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (436) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (407) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 400
    CONVERT_TO_FLT  shift and go to state 402
    CONVERT_TO_BLN  shift and go to state 403
    CONVERT_TO_STR  shift and go to state 404
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value                          shift and go to state 567
    type_cast                      shift and go to state 397
    value_expression               shift and go to state 398
    function_call                  shift and go to state 399
    value_factor                   shift and go to state 405
    input_statement                shift and go to state 265
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 421

    (378) next_val -> empty .

    NEWLINE         reduce using rule 378 (next_val -> empty .)


state 422

    (373) output_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 568
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 423

    (352) output_factor -> LPAREN output_factor . RPAREN

    RPAREN          shift and go to state 569


state 424

    (374) output_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 570
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 425

    (375) output_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 571
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 426

    (376) output_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 572
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 427

    (347) output_expression -> output_factor output_factor_tail .

    COMMA           reduce using rule 347 (output_expression -> output_factor output_factor_tail .)
    NEWLINE         reduce using rule 347 (output_expression -> output_factor output_factor_tail .)


state 428

    (353) output_factor_tail -> PLUS . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 573
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 429

    (354) output_factor_tail -> MINUS . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 574
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 430

    (355) output_factor_tail -> MULTIPLY . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 575
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 431

    (356) output_factor_tail -> DIVISION . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 576
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 432

    (357) output_factor_tail -> MODULO . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 577
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 433

    (358) output_factor_tail -> EXPONENT . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 578
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 434

    (359) output_factor_tail -> GT . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 579
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 435

    (360) output_factor_tail -> LT . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 580
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 436

    (361) output_factor_tail -> EQ_EQ . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 581
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 437

    (362) output_factor_tail -> GT_EQ . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 582
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 438

    (363) output_factor_tail -> LT_EQ . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 583
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 439

    (364) output_factor_tail -> NOT_EQ . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 584
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 440

    (365) output_factor_tail -> AND . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 585
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 441

    (366) output_factor_tail -> OR . output_factor output_factor_tail
    (348) output_factor -> . var_call postfix
    (349) output_factor -> . output_factor1
    (350) output_factor -> . TILDE INT_LIT
    (351) output_factor -> . TILDE FLT_LIT
    (352) output_factor -> . LPAREN output_factor RPAREN
    (395) var_call -> . IDENT list_index
    (368) output_factor1 -> . INT_LIT
    (369) output_factor1 -> . FLT_LIT
    (370) output_factor1 -> . DAY
    (371) output_factor1 -> . NIGHT
    (372) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 329
    LPAREN          shift and go to state 322
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 330
    FLT_LIT         shift and go to state 331
    DAY             shift and go to state 332
    NIGHT           shift and go to state 333
    STR_LIT         shift and go to state 334

    output_factor                  shift and go to state 586
    var_call                       shift and go to state 327
    output_factor1                 shift and go to state 328

state 442

    (367) output_factor_tail -> empty .

    COMMA           reduce using rule 367 (output_factor_tail -> empty .)
    NEWLINE         reduce using rule 367 (output_factor_tail -> empty .)


state 443

    (348) output_factor -> var_call postfix .

    PLUS            reduce using rule 348 (output_factor -> var_call postfix .)
    MINUS           reduce using rule 348 (output_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 348 (output_factor -> var_call postfix .)
    DIVISION        reduce using rule 348 (output_factor -> var_call postfix .)
    MODULO          reduce using rule 348 (output_factor -> var_call postfix .)
    EXPONENT        reduce using rule 348 (output_factor -> var_call postfix .)
    GT              reduce using rule 348 (output_factor -> var_call postfix .)
    LT              reduce using rule 348 (output_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 348 (output_factor -> var_call postfix .)
    GT_EQ           reduce using rule 348 (output_factor -> var_call postfix .)
    LT_EQ           reduce using rule 348 (output_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 348 (output_factor -> var_call postfix .)
    AND             reduce using rule 348 (output_factor -> var_call postfix .)
    OR              reduce using rule 348 (output_factor -> var_call postfix .)
    COMMA           reduce using rule 348 (output_factor -> var_call postfix .)
    NEWLINE         reduce using rule 348 (output_factor -> var_call postfix .)
    RPAREN          reduce using rule 348 (output_factor -> var_call postfix .)


state 444

    (350) output_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    GT              reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    LT              reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    AND             reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    OR              reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 350 (output_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 350 (output_factor -> TILDE INT_LIT .)


state 445

    (351) output_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 351 (output_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 351 (output_factor -> TILDE FLT_LIT .)


state 446

    (211) condition_factor -> LPAREN . condition RPAREN
    (206) condition -> . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition                      shift and go to state 587
    condition_factor               shift and go to state 448
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 447

    (203) conditional_statement -> CHECK LPAREN condition . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 588


state 448

    (206) condition -> condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 589
    empty                          shift and go to state 604

state 449

    (207) condition_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 605
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 450

    (208) condition_factor -> condition1 .

    PLUS            reduce using rule 208 (condition_factor -> condition1 .)
    MINUS           reduce using rule 208 (condition_factor -> condition1 .)
    MULTIPLY        reduce using rule 208 (condition_factor -> condition1 .)
    DIVISION        reduce using rule 208 (condition_factor -> condition1 .)
    MODULO          reduce using rule 208 (condition_factor -> condition1 .)
    EXPONENT        reduce using rule 208 (condition_factor -> condition1 .)
    GT              reduce using rule 208 (condition_factor -> condition1 .)
    LT              reduce using rule 208 (condition_factor -> condition1 .)
    EQ_EQ           reduce using rule 208 (condition_factor -> condition1 .)
    GT_EQ           reduce using rule 208 (condition_factor -> condition1 .)
    LT_EQ           reduce using rule 208 (condition_factor -> condition1 .)
    NOT_EQ          reduce using rule 208 (condition_factor -> condition1 .)
    AND             reduce using rule 208 (condition_factor -> condition1 .)
    OR              reduce using rule 208 (condition_factor -> condition1 .)
    RPAREN          reduce using rule 208 (condition_factor -> condition1 .)


state 451

    (209) condition_factor -> TILDE . INT_LIT
    (210) condition_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 606
    FLT_LIT         shift and go to state 607


state 452

    (227) condition1 -> INT_LIT .

    PLUS            reduce using rule 227 (condition1 -> INT_LIT .)
    MINUS           reduce using rule 227 (condition1 -> INT_LIT .)
    MULTIPLY        reduce using rule 227 (condition1 -> INT_LIT .)
    DIVISION        reduce using rule 227 (condition1 -> INT_LIT .)
    MODULO          reduce using rule 227 (condition1 -> INT_LIT .)
    EXPONENT        reduce using rule 227 (condition1 -> INT_LIT .)
    GT              reduce using rule 227 (condition1 -> INT_LIT .)
    LT              reduce using rule 227 (condition1 -> INT_LIT .)
    EQ_EQ           reduce using rule 227 (condition1 -> INT_LIT .)
    GT_EQ           reduce using rule 227 (condition1 -> INT_LIT .)
    LT_EQ           reduce using rule 227 (condition1 -> INT_LIT .)
    NOT_EQ          reduce using rule 227 (condition1 -> INT_LIT .)
    AND             reduce using rule 227 (condition1 -> INT_LIT .)
    OR              reduce using rule 227 (condition1 -> INT_LIT .)
    RPAREN          reduce using rule 227 (condition1 -> INT_LIT .)


state 453

    (228) condition1 -> FLT_LIT .

    PLUS            reduce using rule 228 (condition1 -> FLT_LIT .)
    MINUS           reduce using rule 228 (condition1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 228 (condition1 -> FLT_LIT .)
    DIVISION        reduce using rule 228 (condition1 -> FLT_LIT .)
    MODULO          reduce using rule 228 (condition1 -> FLT_LIT .)
    EXPONENT        reduce using rule 228 (condition1 -> FLT_LIT .)
    GT              reduce using rule 228 (condition1 -> FLT_LIT .)
    LT              reduce using rule 228 (condition1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 228 (condition1 -> FLT_LIT .)
    GT_EQ           reduce using rule 228 (condition1 -> FLT_LIT .)
    LT_EQ           reduce using rule 228 (condition1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 228 (condition1 -> FLT_LIT .)
    AND             reduce using rule 228 (condition1 -> FLT_LIT .)
    OR              reduce using rule 228 (condition1 -> FLT_LIT .)
    RPAREN          reduce using rule 228 (condition1 -> FLT_LIT .)


state 454

    (229) condition1 -> DAY .

    PLUS            reduce using rule 229 (condition1 -> DAY .)
    MINUS           reduce using rule 229 (condition1 -> DAY .)
    MULTIPLY        reduce using rule 229 (condition1 -> DAY .)
    DIVISION        reduce using rule 229 (condition1 -> DAY .)
    MODULO          reduce using rule 229 (condition1 -> DAY .)
    EXPONENT        reduce using rule 229 (condition1 -> DAY .)
    GT              reduce using rule 229 (condition1 -> DAY .)
    LT              reduce using rule 229 (condition1 -> DAY .)
    EQ_EQ           reduce using rule 229 (condition1 -> DAY .)
    GT_EQ           reduce using rule 229 (condition1 -> DAY .)
    LT_EQ           reduce using rule 229 (condition1 -> DAY .)
    NOT_EQ          reduce using rule 229 (condition1 -> DAY .)
    AND             reduce using rule 229 (condition1 -> DAY .)
    OR              reduce using rule 229 (condition1 -> DAY .)
    RPAREN          reduce using rule 229 (condition1 -> DAY .)


state 455

    (230) condition1 -> NIGHT .

    PLUS            reduce using rule 230 (condition1 -> NIGHT .)
    MINUS           reduce using rule 230 (condition1 -> NIGHT .)
    MULTIPLY        reduce using rule 230 (condition1 -> NIGHT .)
    DIVISION        reduce using rule 230 (condition1 -> NIGHT .)
    MODULO          reduce using rule 230 (condition1 -> NIGHT .)
    EXPONENT        reduce using rule 230 (condition1 -> NIGHT .)
    GT              reduce using rule 230 (condition1 -> NIGHT .)
    LT              reduce using rule 230 (condition1 -> NIGHT .)
    EQ_EQ           reduce using rule 230 (condition1 -> NIGHT .)
    GT_EQ           reduce using rule 230 (condition1 -> NIGHT .)
    LT_EQ           reduce using rule 230 (condition1 -> NIGHT .)
    NOT_EQ          reduce using rule 230 (condition1 -> NIGHT .)
    AND             reduce using rule 230 (condition1 -> NIGHT .)
    OR              reduce using rule 230 (condition1 -> NIGHT .)
    RPAREN          reduce using rule 230 (condition1 -> NIGHT .)


state 456

    (231) condition1 -> STR_LIT .

    PLUS            reduce using rule 231 (condition1 -> STR_LIT .)
    MINUS           reduce using rule 231 (condition1 -> STR_LIT .)
    MULTIPLY        reduce using rule 231 (condition1 -> STR_LIT .)
    DIVISION        reduce using rule 231 (condition1 -> STR_LIT .)
    MODULO          reduce using rule 231 (condition1 -> STR_LIT .)
    EXPONENT        reduce using rule 231 (condition1 -> STR_LIT .)
    GT              reduce using rule 231 (condition1 -> STR_LIT .)
    LT              reduce using rule 231 (condition1 -> STR_LIT .)
    EQ_EQ           reduce using rule 231 (condition1 -> STR_LIT .)
    GT_EQ           reduce using rule 231 (condition1 -> STR_LIT .)
    LT_EQ           reduce using rule 231 (condition1 -> STR_LIT .)
    NOT_EQ          reduce using rule 231 (condition1 -> STR_LIT .)
    AND             reduce using rule 231 (condition1 -> STR_LIT .)
    OR              reduce using rule 231 (condition1 -> STR_LIT .)
    RPAREN          reduce using rule 231 (condition1 -> STR_LIT .)


state 457

    (272) for_loop -> FOR LPAREN control_variable . SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 608


state 458

    (327) control_variable -> INT . IDENT EQ control_var_tail

    IDENT           shift and go to state 609


state 459

    (305) until_factor -> LPAREN . until_factor RPAREN
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 610
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 460

    (299) until_loop -> UNTIL LPAREN until_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 611


state 461

    (300) until_expression -> until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 612
    empty                          shift and go to state 627

state 462

    (301) until_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 628
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 463

    (302) until_factor -> until_factor1 .

    PLUS            reduce using rule 302 (until_factor -> until_factor1 .)
    MINUS           reduce using rule 302 (until_factor -> until_factor1 .)
    MULTIPLY        reduce using rule 302 (until_factor -> until_factor1 .)
    DIVISION        reduce using rule 302 (until_factor -> until_factor1 .)
    MODULO          reduce using rule 302 (until_factor -> until_factor1 .)
    EXPONENT        reduce using rule 302 (until_factor -> until_factor1 .)
    GT              reduce using rule 302 (until_factor -> until_factor1 .)
    LT              reduce using rule 302 (until_factor -> until_factor1 .)
    EQ_EQ           reduce using rule 302 (until_factor -> until_factor1 .)
    GT_EQ           reduce using rule 302 (until_factor -> until_factor1 .)
    LT_EQ           reduce using rule 302 (until_factor -> until_factor1 .)
    NOT_EQ          reduce using rule 302 (until_factor -> until_factor1 .)
    AND             reduce using rule 302 (until_factor -> until_factor1 .)
    OR              reduce using rule 302 (until_factor -> until_factor1 .)
    RPAREN          reduce using rule 302 (until_factor -> until_factor1 .)


state 464

    (303) until_factor -> TILDE . INT_LIT
    (304) until_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 629
    FLT_LIT         shift and go to state 630


state 465

    (321) until_factor1 -> INT_LIT .

    PLUS            reduce using rule 321 (until_factor1 -> INT_LIT .)
    MINUS           reduce using rule 321 (until_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 321 (until_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 321 (until_factor1 -> INT_LIT .)
    MODULO          reduce using rule 321 (until_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 321 (until_factor1 -> INT_LIT .)
    GT              reduce using rule 321 (until_factor1 -> INT_LIT .)
    LT              reduce using rule 321 (until_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 321 (until_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 321 (until_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 321 (until_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 321 (until_factor1 -> INT_LIT .)
    AND             reduce using rule 321 (until_factor1 -> INT_LIT .)
    OR              reduce using rule 321 (until_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 321 (until_factor1 -> INT_LIT .)


state 466

    (322) until_factor1 -> FLT_LIT .

    PLUS            reduce using rule 322 (until_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 322 (until_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 322 (until_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 322 (until_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 322 (until_factor1 -> FLT_LIT .)
    GT              reduce using rule 322 (until_factor1 -> FLT_LIT .)
    LT              reduce using rule 322 (until_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 322 (until_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 322 (until_factor1 -> FLT_LIT .)
    AND             reduce using rule 322 (until_factor1 -> FLT_LIT .)
    OR              reduce using rule 322 (until_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 322 (until_factor1 -> FLT_LIT .)


state 467

    (323) until_factor1 -> DAY .

    PLUS            reduce using rule 323 (until_factor1 -> DAY .)
    MINUS           reduce using rule 323 (until_factor1 -> DAY .)
    MULTIPLY        reduce using rule 323 (until_factor1 -> DAY .)
    DIVISION        reduce using rule 323 (until_factor1 -> DAY .)
    MODULO          reduce using rule 323 (until_factor1 -> DAY .)
    EXPONENT        reduce using rule 323 (until_factor1 -> DAY .)
    GT              reduce using rule 323 (until_factor1 -> DAY .)
    LT              reduce using rule 323 (until_factor1 -> DAY .)
    EQ_EQ           reduce using rule 323 (until_factor1 -> DAY .)
    GT_EQ           reduce using rule 323 (until_factor1 -> DAY .)
    LT_EQ           reduce using rule 323 (until_factor1 -> DAY .)
    NOT_EQ          reduce using rule 323 (until_factor1 -> DAY .)
    AND             reduce using rule 323 (until_factor1 -> DAY .)
    OR              reduce using rule 323 (until_factor1 -> DAY .)
    RPAREN          reduce using rule 323 (until_factor1 -> DAY .)


state 468

    (324) until_factor1 -> NIGHT .

    PLUS            reduce using rule 324 (until_factor1 -> NIGHT .)
    MINUS           reduce using rule 324 (until_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 324 (until_factor1 -> NIGHT .)
    DIVISION        reduce using rule 324 (until_factor1 -> NIGHT .)
    MODULO          reduce using rule 324 (until_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 324 (until_factor1 -> NIGHT .)
    GT              reduce using rule 324 (until_factor1 -> NIGHT .)
    LT              reduce using rule 324 (until_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 324 (until_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 324 (until_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 324 (until_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 324 (until_factor1 -> NIGHT .)
    AND             reduce using rule 324 (until_factor1 -> NIGHT .)
    OR              reduce using rule 324 (until_factor1 -> NIGHT .)
    RPAREN          reduce using rule 324 (until_factor1 -> NIGHT .)


state 469

    (325) until_factor1 -> STR_LIT .

    PLUS            reduce using rule 325 (until_factor1 -> STR_LIT .)
    MINUS           reduce using rule 325 (until_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 325 (until_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 325 (until_factor1 -> STR_LIT .)
    MODULO          reduce using rule 325 (until_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 325 (until_factor1 -> STR_LIT .)
    GT              reduce using rule 325 (until_factor1 -> STR_LIT .)
    LT              reduce using rule 325 (until_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 325 (until_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 325 (until_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 325 (until_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 325 (until_factor1 -> STR_LIT .)
    AND             reduce using rule 325 (until_factor1 -> STR_LIT .)
    OR              reduce using rule 325 (until_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 325 (until_factor1 -> STR_LIT .)


state 470

    (326) repeat_until -> REPEAT LBRACE statements . RBRACE UNTIL LPAREN until_expression RPAREN

    RBRACE          shift and go to state 631


state 471

    (466) input_statement -> INPUT LPAREN RPAREN .

    NEWLINE         reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    COMMA           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    SWAP            reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    FUNCTION_NAME   reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    IDENT           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    DISPLAY         reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    CHECK           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    UNTIL           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    REPEAT          reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    INT             reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    FLT             reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    BLN             reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    CHR             reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    STR             reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    REVIVE          reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    SHIFT           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    OTHERWISE       reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)
    COLON           reduce using rule 466 (input_statement -> INPUT LPAREN RPAREN .)


state 472

    (164) local_dec_tail -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    SWAP            reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    FUNCTION_NAME   reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    IDENT           reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    DISPLAY         reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    CHECK           reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    FOR             reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    UNTIL           reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    REPEAT          reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    INPUT           reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    INT             reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    FLT             reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    BLN             reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    CHR             reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    STR             reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    REVIVE          reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    RBRACE          reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    SHIFT           reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    OTHERWISE       reduce using rule 164 (local_dec_tail -> COMMA IDENT local_dec_tail .)


state 473

    (165) local_dec_tail -> EQ local_value local_dec_tail2 .

    NEWLINE         reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    SWAP            reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    FUNCTION_NAME   reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    IDENT           reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    DISPLAY         reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    CHECK           reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    FOR             reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    UNTIL           reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    REPEAT          reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    INPUT           reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    INT             reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    FLT             reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    BLN             reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    CHR             reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    STR             reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    REVIVE          reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    RBRACE          reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    SHIFT           reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    OTHERWISE       reduce using rule 165 (local_dec_tail -> EQ local_value local_dec_tail2 .)


state 474

    (166) local_dec_tail2 -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 632


state 475

    (167) local_dec_tail2 -> empty .

    NEWLINE         reduce using rule 167 (local_dec_tail2 -> empty .)
    SWAP            reduce using rule 167 (local_dec_tail2 -> empty .)
    FUNCTION_NAME   reduce using rule 167 (local_dec_tail2 -> empty .)
    IDENT           reduce using rule 167 (local_dec_tail2 -> empty .)
    DISPLAY         reduce using rule 167 (local_dec_tail2 -> empty .)
    CHECK           reduce using rule 167 (local_dec_tail2 -> empty .)
    FOR             reduce using rule 167 (local_dec_tail2 -> empty .)
    UNTIL           reduce using rule 167 (local_dec_tail2 -> empty .)
    REPEAT          reduce using rule 167 (local_dec_tail2 -> empty .)
    INPUT           reduce using rule 167 (local_dec_tail2 -> empty .)
    INT             reduce using rule 167 (local_dec_tail2 -> empty .)
    FLT             reduce using rule 167 (local_dec_tail2 -> empty .)
    BLN             reduce using rule 167 (local_dec_tail2 -> empty .)
    CHR             reduce using rule 167 (local_dec_tail2 -> empty .)
    STR             reduce using rule 167 (local_dec_tail2 -> empty .)
    REVIVE          reduce using rule 167 (local_dec_tail2 -> empty .)
    RBRACE          reduce using rule 167 (local_dec_tail2 -> empty .)
    SHIFT           reduce using rule 167 (local_dec_tail2 -> empty .)
    OTHERWISE       reduce using rule 167 (local_dec_tail2 -> empty .)


state 476

    (199) local_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 633
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 477

    (178) local_factor -> LPAREN local_factor . RPAREN

    RPAREN          shift and go to state 634


state 478

    (200) local_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 635
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 479

    (201) local_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 636
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 480

    (202) local_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 637
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 481

    (173) local_expression -> local_factor local_factor_tail .

    COMMA           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    NEWLINE         reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    SWAP            reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    IDENT           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    DISPLAY         reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    CHECK           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    FOR             reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    UNTIL           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    REPEAT          reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    INPUT           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    INT             reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    FLT             reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    BLN             reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    CHR             reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    STR             reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    REVIVE          reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    RBRACE          reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    SHIFT           reduce using rule 173 (local_expression -> local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 173 (local_expression -> local_factor local_factor_tail .)


state 482

    (179) local_factor_tail -> PLUS . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 638
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 483

    (180) local_factor_tail -> MINUS . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 639
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 484

    (181) local_factor_tail -> MULTIPLY . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 640
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 485

    (182) local_factor_tail -> DIVISION . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 641
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 486

    (183) local_factor_tail -> MODULO . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 642
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 487

    (184) local_factor_tail -> EXPONENT . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 643
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 488

    (185) local_factor_tail -> GT . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 644
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 489

    (186) local_factor_tail -> LT . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 645
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 490

    (187) local_factor_tail -> EQ_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 646
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 491

    (188) local_factor_tail -> GT_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 647
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 492

    (189) local_factor_tail -> LT_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 648
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 493

    (190) local_factor_tail -> NOT_EQ . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 649
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 494

    (191) local_factor_tail -> AND . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 650
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 495

    (192) local_factor_tail -> OR . local_factor local_factor_tail
    (174) local_factor -> . var_call postfix
    (175) local_factor -> . local_factor1
    (176) local_factor -> . TILDE INT_LIT
    (177) local_factor -> . TILDE FLT_LIT
    (178) local_factor -> . LPAREN local_factor RPAREN
    (395) var_call -> . IDENT list_index
    (194) local_factor1 -> . INT_LIT
    (195) local_factor1 -> . FLT_LIT
    (196) local_factor1 -> . DAY
    (197) local_factor1 -> . NIGHT
    (198) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 355
    LPAREN          shift and go to state 348
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 356
    FLT_LIT         shift and go to state 357
    DAY             shift and go to state 358
    NIGHT           shift and go to state 359
    STR_LIT         shift and go to state 360

    local_factor                   shift and go to state 651
    var_call                       shift and go to state 353
    local_factor1                  shift and go to state 354

state 496

    (193) local_factor_tail -> empty .

    COMMA           reduce using rule 193 (local_factor_tail -> empty .)
    NEWLINE         reduce using rule 193 (local_factor_tail -> empty .)
    SWAP            reduce using rule 193 (local_factor_tail -> empty .)
    FUNCTION_NAME   reduce using rule 193 (local_factor_tail -> empty .)
    IDENT           reduce using rule 193 (local_factor_tail -> empty .)
    DISPLAY         reduce using rule 193 (local_factor_tail -> empty .)
    CHECK           reduce using rule 193 (local_factor_tail -> empty .)
    FOR             reduce using rule 193 (local_factor_tail -> empty .)
    UNTIL           reduce using rule 193 (local_factor_tail -> empty .)
    REPEAT          reduce using rule 193 (local_factor_tail -> empty .)
    INPUT           reduce using rule 193 (local_factor_tail -> empty .)
    INT             reduce using rule 193 (local_factor_tail -> empty .)
    FLT             reduce using rule 193 (local_factor_tail -> empty .)
    BLN             reduce using rule 193 (local_factor_tail -> empty .)
    CHR             reduce using rule 193 (local_factor_tail -> empty .)
    STR             reduce using rule 193 (local_factor_tail -> empty .)
    REVIVE          reduce using rule 193 (local_factor_tail -> empty .)
    RBRACE          reduce using rule 193 (local_factor_tail -> empty .)
    SHIFT           reduce using rule 193 (local_factor_tail -> empty .)
    OTHERWISE       reduce using rule 193 (local_factor_tail -> empty .)


state 497

    (174) local_factor -> var_call postfix .

    PLUS            reduce using rule 174 (local_factor -> var_call postfix .)
    MINUS           reduce using rule 174 (local_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 174 (local_factor -> var_call postfix .)
    DIVISION        reduce using rule 174 (local_factor -> var_call postfix .)
    MODULO          reduce using rule 174 (local_factor -> var_call postfix .)
    EXPONENT        reduce using rule 174 (local_factor -> var_call postfix .)
    GT              reduce using rule 174 (local_factor -> var_call postfix .)
    LT              reduce using rule 174 (local_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 174 (local_factor -> var_call postfix .)
    GT_EQ           reduce using rule 174 (local_factor -> var_call postfix .)
    LT_EQ           reduce using rule 174 (local_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 174 (local_factor -> var_call postfix .)
    AND             reduce using rule 174 (local_factor -> var_call postfix .)
    OR              reduce using rule 174 (local_factor -> var_call postfix .)
    COMMA           reduce using rule 174 (local_factor -> var_call postfix .)
    NEWLINE         reduce using rule 174 (local_factor -> var_call postfix .)
    SWAP            reduce using rule 174 (local_factor -> var_call postfix .)
    FUNCTION_NAME   reduce using rule 174 (local_factor -> var_call postfix .)
    IDENT           reduce using rule 174 (local_factor -> var_call postfix .)
    DISPLAY         reduce using rule 174 (local_factor -> var_call postfix .)
    CHECK           reduce using rule 174 (local_factor -> var_call postfix .)
    FOR             reduce using rule 174 (local_factor -> var_call postfix .)
    UNTIL           reduce using rule 174 (local_factor -> var_call postfix .)
    REPEAT          reduce using rule 174 (local_factor -> var_call postfix .)
    INPUT           reduce using rule 174 (local_factor -> var_call postfix .)
    INT             reduce using rule 174 (local_factor -> var_call postfix .)
    FLT             reduce using rule 174 (local_factor -> var_call postfix .)
    BLN             reduce using rule 174 (local_factor -> var_call postfix .)
    CHR             reduce using rule 174 (local_factor -> var_call postfix .)
    STR             reduce using rule 174 (local_factor -> var_call postfix .)
    REVIVE          reduce using rule 174 (local_factor -> var_call postfix .)
    RBRACE          reduce using rule 174 (local_factor -> var_call postfix .)
    SHIFT           reduce using rule 174 (local_factor -> var_call postfix .)
    OTHERWISE       reduce using rule 174 (local_factor -> var_call postfix .)
    RPAREN          reduce using rule 174 (local_factor -> var_call postfix .)


state 498

    (176) local_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    GT              reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    LT              reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    AND             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    OR              reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    SWAP            reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    FUNCTION_NAME   reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    IDENT           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    DISPLAY         reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    CHECK           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    FOR             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    UNTIL           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    REPEAT          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    INPUT           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    INT             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    FLT             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    BLN             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    CHR             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    STR             reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    REVIVE          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    RBRACE          reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    SHIFT           reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    OTHERWISE       reduce using rule 176 (local_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 176 (local_factor -> TILDE INT_LIT .)


state 499

    (177) local_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    SWAP            reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    FUNCTION_NAME   reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    IDENT           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    DISPLAY         reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    CHECK           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    FOR             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    UNTIL           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    REPEAT          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    INPUT           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    INT             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    FLT             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    BLN             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    CHR             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    STR             reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    REVIVE          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    RBRACE          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    SHIFT           reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    OTHERWISE       reduce using rule 177 (local_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 177 (local_factor -> TILDE FLT_LIT .)


state 500

    (162) local_2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 652


state 501

    (160) local_list_dec -> LBRACKET RBRACKET local_2d_list .

    NEWLINE         reduce using rule 160 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)


state 502

    (161) local_2d_list -> empty .

    NEWLINE         reduce using rule 161 (local_2d_list -> empty .)


state 503

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline . function_statements_tail
    (89) function_statements_tail -> . function_statements
    (90) function_statements_tail -> . empty
    (87) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (88) function_statements -> . empty
    (467) empty -> .
    (91) ret_type -> . FUNCTION
    (92) ret_type -> . function_dtype
    (93) function_dtype -> . FUNCTION_INT
    (94) function_dtype -> . FUNCTION_FLT
    (95) function_dtype -> . FUNCTION_CHR
    (96) function_dtype -> . FUNCTION_BLN
    (97) function_dtype -> . FUNCTION_STR
    (98) function_dtype -> . FUNCTION_LIST_INT
    (99) function_dtype -> . FUNCTION_LIST_FLT
    (100) function_dtype -> . FUNCTION_LIST_CHR
    (101) function_dtype -> . FUNCTION_LIST_STR
    (102) function_dtype -> . FUNCTION_LIST_BLN

    NEWLINE         reduce using rule 467 (empty -> .)
    MAIN_CASPER     reduce using rule 467 (empty -> .)
    FUNCTION        shift and go to state 28
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    ret_type                       shift and go to state 26
    function_statements_tail       shift and go to state 653
    function_statements            shift and go to state 654
    empty                          shift and go to state 655
    function_dtype                 shift and go to state 29

state 504

    (445) typecast_factor -> LPAREN . typecast_factor RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 656
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 505

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 657


state 506

    (437) typecast_value -> typecast_expression .

    RPAREN          reduce using rule 437 (typecast_value -> typecast_expression .)


state 507

    (438) typecast_value -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 658


state 508

    (439) typecast_value -> input_statement .

    RPAREN          reduce using rule 439 (typecast_value -> input_statement .)


state 509

    (440) typecast_expression -> typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 659
    empty                          shift and go to state 674

state 510

    (441) typecast_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 675
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 511

    (442) typecast_factor -> typecast_factor1 .

    PLUS            reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    MINUS           reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    MULTIPLY        reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    DIVISION        reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    MODULO          reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    EXPONENT        reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    GT              reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    LT              reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    EQ_EQ           reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    GT_EQ           reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    LT_EQ           reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    NOT_EQ          reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    AND             reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    OR              reduce using rule 442 (typecast_factor -> typecast_factor1 .)
    RPAREN          reduce using rule 442 (typecast_factor -> typecast_factor1 .)


state 512

    (443) typecast_factor -> TILDE . INT_LIT
    (444) typecast_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 676
    FLT_LIT         shift and go to state 677


state 513

    (461) typecast_factor1 -> INT_LIT .

    PLUS            reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    MINUS           reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    MODULO          reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    GT              reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    LT              reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    AND             reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    OR              reduce using rule 461 (typecast_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 461 (typecast_factor1 -> INT_LIT .)


state 514

    (462) typecast_factor1 -> FLT_LIT .

    PLUS            reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    GT              reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    LT              reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    AND             reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    OR              reduce using rule 462 (typecast_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 462 (typecast_factor1 -> FLT_LIT .)


state 515

    (463) typecast_factor1 -> DAY .

    PLUS            reduce using rule 463 (typecast_factor1 -> DAY .)
    MINUS           reduce using rule 463 (typecast_factor1 -> DAY .)
    MULTIPLY        reduce using rule 463 (typecast_factor1 -> DAY .)
    DIVISION        reduce using rule 463 (typecast_factor1 -> DAY .)
    MODULO          reduce using rule 463 (typecast_factor1 -> DAY .)
    EXPONENT        reduce using rule 463 (typecast_factor1 -> DAY .)
    GT              reduce using rule 463 (typecast_factor1 -> DAY .)
    LT              reduce using rule 463 (typecast_factor1 -> DAY .)
    EQ_EQ           reduce using rule 463 (typecast_factor1 -> DAY .)
    GT_EQ           reduce using rule 463 (typecast_factor1 -> DAY .)
    LT_EQ           reduce using rule 463 (typecast_factor1 -> DAY .)
    NOT_EQ          reduce using rule 463 (typecast_factor1 -> DAY .)
    AND             reduce using rule 463 (typecast_factor1 -> DAY .)
    OR              reduce using rule 463 (typecast_factor1 -> DAY .)
    RPAREN          reduce using rule 463 (typecast_factor1 -> DAY .)


state 516

    (464) typecast_factor1 -> NIGHT .

    PLUS            reduce using rule 464 (typecast_factor1 -> NIGHT .)
    MINUS           reduce using rule 464 (typecast_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 464 (typecast_factor1 -> NIGHT .)
    DIVISION        reduce using rule 464 (typecast_factor1 -> NIGHT .)
    MODULO          reduce using rule 464 (typecast_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 464 (typecast_factor1 -> NIGHT .)
    GT              reduce using rule 464 (typecast_factor1 -> NIGHT .)
    LT              reduce using rule 464 (typecast_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 464 (typecast_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 464 (typecast_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 464 (typecast_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 464 (typecast_factor1 -> NIGHT .)
    AND             reduce using rule 464 (typecast_factor1 -> NIGHT .)
    OR              reduce using rule 464 (typecast_factor1 -> NIGHT .)
    RPAREN          reduce using rule 464 (typecast_factor1 -> NIGHT .)


state 517

    (465) typecast_factor1 -> STR_LIT .

    PLUS            reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    MINUS           reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    MODULO          reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    GT              reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    LT              reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    AND             reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    OR              reduce using rule 465 (typecast_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 465 (typecast_factor1 -> STR_LIT .)


state 518

    (117) revive_factor -> LPAREN revive_factor RPAREN .

    PLUS            reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MINUS           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MULTIPLY        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    DIVISION        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MODULO          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    EXPONENT        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    EQ_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    NOT_EQ          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    AND             reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    OR              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    NEWLINE         reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    RBRACE          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    RPAREN          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)


state 519

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 678


state 520

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 679


state 521

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 680


state 522

    (118) revive_factor_tail -> PLUS revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 681
    empty                          shift and go to state 383

state 523

    (119) revive_factor_tail -> MINUS revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 682
    empty                          shift and go to state 383

state 524

    (120) revive_factor_tail -> MULTIPLY revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 683
    empty                          shift and go to state 383

state 525

    (121) revive_factor_tail -> DIVISION revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 684
    empty                          shift and go to state 383

state 526

    (122) revive_factor_tail -> MODULO revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 685
    empty                          shift and go to state 383

state 527

    (123) revive_factor_tail -> EXPONENT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 686
    empty                          shift and go to state 383

state 528

    (124) revive_factor_tail -> GT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 687
    empty                          shift and go to state 383

state 529

    (125) revive_factor_tail -> LT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 688
    empty                          shift and go to state 383

state 530

    (126) revive_factor_tail -> EQ_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 689
    empty                          shift and go to state 383

state 531

    (127) revive_factor_tail -> GT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 690
    empty                          shift and go to state 383

state 532

    (128) revive_factor_tail -> LT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 691
    empty                          shift and go to state 383

state 533

    (129) revive_factor_tail -> NOT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 692
    empty                          shift and go to state 383

state 534

    (130) revive_factor_tail -> AND revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 693
    empty                          shift and go to state 383

state 535

    (131) revive_factor_tail -> OR revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 369
    MINUS           shift and go to state 370
    MULTIPLY        shift and go to state 371
    DIVISION        shift and go to state 372
    MODULO          shift and go to state 373
    EXPONENT        shift and go to state 374
    GT              shift and go to state 375
    LT              shift and go to state 376
    EQ_EQ           shift and go to state 377
    GT_EQ           shift and go to state 378
    LT_EQ           shift and go to state 379
    NOT_EQ          shift and go to state 380
    AND             shift and go to state 381
    OR              shift and go to state 382
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)

    revive_factor_tail             shift and go to state 694
    empty                          shift and go to state 383

state 536

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    LBRACE          shift and go to state 695


state 537

    (380) assign_tail -> DOT SPLICE LPAREN . start COMMA deleteCount COMMA splice_items RPAREN
    (390) start -> . INT_LIT

    INT_LIT         shift and go to state 697

    start                          shift and go to state 696

state 538

    (381) assign_tail -> DOT PUSH LPAREN . list_element RPAREN
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 698
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 539

    (433) type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 699
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 540

    (412) value_factor -> LPAREN value_factor . RPAREN

    RPAREN          shift and go to state 700


state 541

    (434) type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 701
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 542

    (435) type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 702
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 543

    (436) type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 703
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 544

    (407) value_expression -> value_factor value_factor_tail .

    NEWLINE         reduce using rule 407 (value_expression -> value_factor value_factor_tail .)
    COMMA           reduce using rule 407 (value_expression -> value_factor value_factor_tail .)
    RPAREN          reduce using rule 407 (value_expression -> value_factor value_factor_tail .)


state 545

    (413) value_factor_tail -> PLUS . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 704
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 546

    (414) value_factor_tail -> MINUS . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 705
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 547

    (415) value_factor_tail -> MULTIPLY . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 706
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 548

    (416) value_factor_tail -> DIVISION . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 707
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 549

    (417) value_factor_tail -> MODULO . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 708
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 550

    (418) value_factor_tail -> EXPONENT . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 709
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 551

    (419) value_factor_tail -> GT . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 710
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 552

    (420) value_factor_tail -> LT . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 711
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 553

    (421) value_factor_tail -> EQ_EQ . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 712
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 554

    (422) value_factor_tail -> GT_EQ . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 713
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 555

    (423) value_factor_tail -> LT_EQ . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 714
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 556

    (424) value_factor_tail -> NOT_EQ . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 715
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 557

    (425) value_factor_tail -> AND . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 716
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 558

    (426) value_factor_tail -> OR . value_factor value_factor_tail
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value_factor                   shift and go to state 717
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 559

    (427) value_factor_tail -> empty .

    NEWLINE         reduce using rule 427 (value_factor_tail -> empty .)
    COMMA           reduce using rule 427 (value_factor_tail -> empty .)
    RPAREN          reduce using rule 427 (value_factor_tail -> empty .)


state 560

    (408) value_factor -> var_call postfix .

    PLUS            reduce using rule 408 (value_factor -> var_call postfix .)
    MINUS           reduce using rule 408 (value_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 408 (value_factor -> var_call postfix .)
    DIVISION        reduce using rule 408 (value_factor -> var_call postfix .)
    MODULO          reduce using rule 408 (value_factor -> var_call postfix .)
    EXPONENT        reduce using rule 408 (value_factor -> var_call postfix .)
    GT              reduce using rule 408 (value_factor -> var_call postfix .)
    LT              reduce using rule 408 (value_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 408 (value_factor -> var_call postfix .)
    GT_EQ           reduce using rule 408 (value_factor -> var_call postfix .)
    LT_EQ           reduce using rule 408 (value_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 408 (value_factor -> var_call postfix .)
    AND             reduce using rule 408 (value_factor -> var_call postfix .)
    OR              reduce using rule 408 (value_factor -> var_call postfix .)
    NEWLINE         reduce using rule 408 (value_factor -> var_call postfix .)
    RPAREN          reduce using rule 408 (value_factor -> var_call postfix .)
    COMMA           reduce using rule 408 (value_factor -> var_call postfix .)


state 561

    (410) value_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    GT              reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    LT              reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    AND             reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    OR              reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 410 (value_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 410 (value_factor -> TILDE INT_LIT .)


state 562

    (411) value_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 411 (value_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 411 (value_factor -> TILDE FLT_LIT .)


state 563

    (335) function_call -> FUNCTION_NAME LPAREN arguments RPAREN .

    NEWLINE         reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COMMA           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    SWAP            reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FUNCTION_NAME   reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    IDENT           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    DISPLAY         reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    CHECK           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FOR             reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    UNTIL           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    REPEAT          reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    INPUT           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    INT             reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FLT             reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    BLN             reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    CHR             reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    STR             reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    REVIVE          reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    SHIFT           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    OTHERWISE       reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COLON           reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 335 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)


state 564

    (338) arguments -> arg_value arg_tail .

    RPAREN          reduce using rule 338 (arguments -> arg_value arg_tail .)


state 565

    (339) arg_tail -> COMMA . arg_value arg_tail
    (341) arg_value -> . literal
    (342) arg_value -> . var_call
    (79) literal -> . literal1
    (80) literal -> . literal2
    (395) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    arg_value                      shift and go to state 718
    literal                        shift and go to state 417
    var_call                       shift and go to state 418
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 566

    (340) arg_tail -> empty .

    RPAREN          reduce using rule 340 (arg_tail -> empty .)


state 567

    (377) next_val -> COMMA value . next_val
    (377) next_val -> . COMMA value next_val
    (378) next_val -> . empty
    (467) empty -> .

    COMMA           shift and go to state 420
    NEWLINE         reduce using rule 467 (empty -> .)

    next_val                       shift and go to state 719
    empty                          shift and go to state 421

state 568

    (373) output_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 720


state 569

    (352) output_factor -> LPAREN output_factor RPAREN .

    PLUS            reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    MINUS           reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    MULTIPLY        reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    DIVISION        reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    MODULO          reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    EXPONENT        reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    GT              reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    LT              reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    EQ_EQ           reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    GT_EQ           reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    LT_EQ           reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    NOT_EQ          reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    AND             reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    OR              reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    COMMA           reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    NEWLINE         reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)
    RPAREN          reduce using rule 352 (output_factor -> LPAREN output_factor RPAREN .)


state 570

    (374) output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 721


state 571

    (375) output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 722


state 572

    (376) output_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 723


state 573

    (353) output_factor_tail -> PLUS output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 724
    empty                          shift and go to state 442

state 574

    (354) output_factor_tail -> MINUS output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 725
    empty                          shift and go to state 442

state 575

    (355) output_factor_tail -> MULTIPLY output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 726
    empty                          shift and go to state 442

state 576

    (356) output_factor_tail -> DIVISION output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 727
    empty                          shift and go to state 442

state 577

    (357) output_factor_tail -> MODULO output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 728
    empty                          shift and go to state 442

state 578

    (358) output_factor_tail -> EXPONENT output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 729
    empty                          shift and go to state 442

state 579

    (359) output_factor_tail -> GT output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 730
    empty                          shift and go to state 442

state 580

    (360) output_factor_tail -> LT output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 731
    empty                          shift and go to state 442

state 581

    (361) output_factor_tail -> EQ_EQ output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 732
    empty                          shift and go to state 442

state 582

    (362) output_factor_tail -> GT_EQ output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 733
    empty                          shift and go to state 442

state 583

    (363) output_factor_tail -> LT_EQ output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 734
    empty                          shift and go to state 442

state 584

    (364) output_factor_tail -> NOT_EQ output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 735
    empty                          shift and go to state 442

state 585

    (365) output_factor_tail -> AND output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 736
    empty                          shift and go to state 442

state 586

    (366) output_factor_tail -> OR output_factor . output_factor_tail
    (353) output_factor_tail -> . PLUS output_factor output_factor_tail
    (354) output_factor_tail -> . MINUS output_factor output_factor_tail
    (355) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (356) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (357) output_factor_tail -> . MODULO output_factor output_factor_tail
    (358) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (359) output_factor_tail -> . GT output_factor output_factor_tail
    (360) output_factor_tail -> . LT output_factor output_factor_tail
    (361) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (362) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (363) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (364) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (365) output_factor_tail -> . AND output_factor output_factor_tail
    (366) output_factor_tail -> . OR output_factor output_factor_tail
    (367) output_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVISION        shift and go to state 431
    MODULO          shift and go to state 432
    EXPONENT        shift and go to state 433
    GT              shift and go to state 434
    LT              shift and go to state 435
    EQ_EQ           shift and go to state 436
    GT_EQ           shift and go to state 437
    LT_EQ           shift and go to state 438
    NOT_EQ          shift and go to state 439
    AND             shift and go to state 440
    OR              shift and go to state 441
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)

    output_factor_tail             shift and go to state 737
    empty                          shift and go to state 442

state 587

    (211) condition_factor -> LPAREN condition . RPAREN

    RPAREN          shift and go to state 738


state 588

    (203) conditional_statement -> CHECK LPAREN condition RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 739


state 589

    (206) condition -> condition_factor condition_tail .

    RPAREN          reduce using rule 206 (condition -> condition_factor condition_tail .)


state 590

    (212) condition_tail -> PLUS . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 740
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 591

    (213) condition_tail -> MINUS . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 741
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 592

    (214) condition_tail -> MULTIPLY . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 742
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 593

    (215) condition_tail -> DIVISION . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 743
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 594

    (216) condition_tail -> MODULO . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 744
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 595

    (217) condition_tail -> EXPONENT . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 745
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 596

    (218) condition_tail -> GT . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 746
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 597

    (219) condition_tail -> LT . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 747
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 598

    (220) condition_tail -> EQ_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 748
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 599

    (221) condition_tail -> GT_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 749
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 600

    (222) condition_tail -> LT_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 750
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 601

    (223) condition_tail -> NOT_EQ . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 751
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 602

    (224) condition_tail -> AND . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 752
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 603

    (225) condition_tail -> OR . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition_factor               shift and go to state 753
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 604

    (226) condition_tail -> empty .

    RPAREN          reduce using rule 226 (condition_tail -> empty .)


state 605

    (207) condition_factor -> var_call postfix .

    PLUS            reduce using rule 207 (condition_factor -> var_call postfix .)
    MINUS           reduce using rule 207 (condition_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 207 (condition_factor -> var_call postfix .)
    DIVISION        reduce using rule 207 (condition_factor -> var_call postfix .)
    MODULO          reduce using rule 207 (condition_factor -> var_call postfix .)
    EXPONENT        reduce using rule 207 (condition_factor -> var_call postfix .)
    GT              reduce using rule 207 (condition_factor -> var_call postfix .)
    LT              reduce using rule 207 (condition_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 207 (condition_factor -> var_call postfix .)
    GT_EQ           reduce using rule 207 (condition_factor -> var_call postfix .)
    LT_EQ           reduce using rule 207 (condition_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 207 (condition_factor -> var_call postfix .)
    AND             reduce using rule 207 (condition_factor -> var_call postfix .)
    OR              reduce using rule 207 (condition_factor -> var_call postfix .)
    RPAREN          reduce using rule 207 (condition_factor -> var_call postfix .)


state 606

    (209) condition_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    GT              reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    LT              reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    AND             reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    OR              reduce using rule 209 (condition_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 209 (condition_factor -> TILDE INT_LIT .)


state 607

    (210) condition_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 210 (condition_factor -> TILDE FLT_LIT .)


state 608

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON . for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (273) for_expression -> . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_expression                 shift and go to state 755
    for_factor                     shift and go to state 756
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 609

    (327) control_variable -> INT IDENT . EQ control_var_tail

    EQ              shift and go to state 765


state 610

    (305) until_factor -> LPAREN until_factor . RPAREN

    RPAREN          shift and go to state 766


state 611

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 767


state 612

    (300) until_expression -> until_factor until_factor_tail .

    RPAREN          reduce using rule 300 (until_expression -> until_factor until_factor_tail .)


state 613

    (306) until_factor_tail -> PLUS . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 768
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 614

    (307) until_factor_tail -> MINUS . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 769
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 615

    (308) until_factor_tail -> MULTIPLY . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 770
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 616

    (309) until_factor_tail -> DIVISION . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 771
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 617

    (310) until_factor_tail -> MODULO . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 772
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 618

    (311) until_factor_tail -> EXPONENT . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 773
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 619

    (312) until_factor_tail -> GT . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 774
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 620

    (313) until_factor_tail -> LT . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 775
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 621

    (314) until_factor_tail -> EQ_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 776
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 622

    (315) until_factor_tail -> GT_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 777
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 623

    (316) until_factor_tail -> LT_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 778
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 624

    (317) until_factor_tail -> NOT_EQ . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 779
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 625

    (318) until_factor_tail -> AND . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 780
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 626

    (319) until_factor_tail -> OR . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_factor                   shift and go to state 781
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 627

    (320) until_factor_tail -> empty .

    RPAREN          reduce using rule 320 (until_factor_tail -> empty .)


state 628

    (301) until_factor -> var_call postfix .

    PLUS            reduce using rule 301 (until_factor -> var_call postfix .)
    MINUS           reduce using rule 301 (until_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 301 (until_factor -> var_call postfix .)
    DIVISION        reduce using rule 301 (until_factor -> var_call postfix .)
    MODULO          reduce using rule 301 (until_factor -> var_call postfix .)
    EXPONENT        reduce using rule 301 (until_factor -> var_call postfix .)
    GT              reduce using rule 301 (until_factor -> var_call postfix .)
    LT              reduce using rule 301 (until_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 301 (until_factor -> var_call postfix .)
    GT_EQ           reduce using rule 301 (until_factor -> var_call postfix .)
    LT_EQ           reduce using rule 301 (until_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 301 (until_factor -> var_call postfix .)
    AND             reduce using rule 301 (until_factor -> var_call postfix .)
    OR              reduce using rule 301 (until_factor -> var_call postfix .)
    RPAREN          reduce using rule 301 (until_factor -> var_call postfix .)


state 629

    (303) until_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    GT              reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    LT              reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    AND             reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    OR              reduce using rule 303 (until_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 303 (until_factor -> TILDE INT_LIT .)


state 630

    (304) until_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 304 (until_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 304 (until_factor -> TILDE FLT_LIT .)


state 631

    (326) repeat_until -> REPEAT LBRACE statements RBRACE . UNTIL LPAREN until_expression RPAREN

    UNTIL           shift and go to state 782


state 632

    (166) local_dec_tail2 -> COMMA IDENT . local_dec_tail
    (163) local_dec_tail -> . empty
    (164) local_dec_tail -> . COMMA IDENT local_dec_tail
    (165) local_dec_tail -> . EQ local_value local_dec_tail2
    (467) empty -> .

    COMMA           shift and go to state 274
    EQ              shift and go to state 275
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_dec_tail                 shift and go to state 783
    empty                          shift and go to state 273

state 633

    (199) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 784


state 634

    (178) local_factor -> LPAREN local_factor RPAREN .

    PLUS            reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    MINUS           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    MULTIPLY        reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    DIVISION        reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    MODULO          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    EXPONENT        reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    GT              reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    LT              reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    EQ_EQ           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    GT_EQ           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    LT_EQ           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    NOT_EQ          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    AND             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    OR              reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    COMMA           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    NEWLINE         reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    SWAP            reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    FUNCTION_NAME   reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    IDENT           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    DISPLAY         reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    CHECK           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    FOR             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    UNTIL           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    REPEAT          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    INPUT           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    INT             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    FLT             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    BLN             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    CHR             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    STR             reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    REVIVE          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    RBRACE          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    SHIFT           reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    OTHERWISE       reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)
    RPAREN          reduce using rule 178 (local_factor -> LPAREN local_factor RPAREN .)


state 635

    (200) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 785


state 636

    (201) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 786


state 637

    (202) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 787


state 638

    (179) local_factor_tail -> PLUS local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 788
    empty                          shift and go to state 496

state 639

    (180) local_factor_tail -> MINUS local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 789
    empty                          shift and go to state 496

state 640

    (181) local_factor_tail -> MULTIPLY local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 790
    empty                          shift and go to state 496

state 641

    (182) local_factor_tail -> DIVISION local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 791
    empty                          shift and go to state 496

state 642

    (183) local_factor_tail -> MODULO local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 792
    empty                          shift and go to state 496

state 643

    (184) local_factor_tail -> EXPONENT local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 793
    empty                          shift and go to state 496

state 644

    (185) local_factor_tail -> GT local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 794
    empty                          shift and go to state 496

state 645

    (186) local_factor_tail -> LT local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 795
    empty                          shift and go to state 496

state 646

    (187) local_factor_tail -> EQ_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 796
    empty                          shift and go to state 496

state 647

    (188) local_factor_tail -> GT_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 797
    empty                          shift and go to state 496

state 648

    (189) local_factor_tail -> LT_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 798
    empty                          shift and go to state 496

state 649

    (190) local_factor_tail -> NOT_EQ local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 799
    empty                          shift and go to state 496

state 650

    (191) local_factor_tail -> AND local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 800
    empty                          shift and go to state 496

state 651

    (192) local_factor_tail -> OR local_factor . local_factor_tail
    (179) local_factor_tail -> . PLUS local_factor local_factor_tail
    (180) local_factor_tail -> . MINUS local_factor local_factor_tail
    (181) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (182) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (183) local_factor_tail -> . MODULO local_factor local_factor_tail
    (184) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (185) local_factor_tail -> . GT local_factor local_factor_tail
    (186) local_factor_tail -> . LT local_factor local_factor_tail
    (187) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (188) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (189) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (190) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (191) local_factor_tail -> . AND local_factor local_factor_tail
    (192) local_factor_tail -> . OR local_factor local_factor_tail
    (193) local_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 482
    MINUS           shift and go to state 483
    MULTIPLY        shift and go to state 484
    DIVISION        shift and go to state 485
    MODULO          shift and go to state 486
    EXPONENT        shift and go to state 487
    GT              shift and go to state 488
    LT              shift and go to state 489
    EQ_EQ           shift and go to state 490
    GT_EQ           shift and go to state 491
    LT_EQ           shift and go to state 492
    NOT_EQ          shift and go to state 493
    AND             shift and go to state 494
    OR              shift and go to state 495
    COMMA           reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    REVIVE          reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    local_factor_tail              shift and go to state 801
    empty                          shift and go to state 496

state 652

    (162) local_2d_list -> LBRACKET RBRACKET .

    NEWLINE         reduce using rule 162 (local_2d_list -> LBRACKET RBRACKET .)


state 653

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail .

    NEWLINE         reduce using rule 87 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail .)
    MAIN_CASPER     reduce using rule 87 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail .)


state 654

    (89) function_statements_tail -> function_statements .

    NEWLINE         reduce using rule 89 (function_statements_tail -> function_statements .)
    MAIN_CASPER     reduce using rule 89 (function_statements_tail -> function_statements .)


state 655

    (90) function_statements_tail -> empty .
    (88) function_statements -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 88 (function_statements -> empty .)
  ! reduce/reduce conflict for MAIN_CASPER resolved using rule 88 (function_statements -> empty .)
    NEWLINE         reduce using rule 88 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 88 (function_statements -> empty .)

  ! NEWLINE         [ reduce using rule 90 (function_statements_tail -> empty .) ]
  ! MAIN_CASPER     [ reduce using rule 90 (function_statements_tail -> empty .) ]


state 656

    (445) typecast_factor -> LPAREN typecast_factor . RPAREN

    RPAREN          shift and go to state 802


state 657

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 138 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 138 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 658

    (438) typecast_value -> FUNCTION_NAME LPAREN . RPAREN

    RPAREN          shift and go to state 803


state 659

    (440) typecast_expression -> typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 440 (typecast_expression -> typecast_factor typecast_factor_tail .)


state 660

    (446) typecast_factor_tail -> PLUS . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 804
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 661

    (447) typecast_factor_tail -> MINUS . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 805
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 662

    (448) typecast_factor_tail -> MULTIPLY . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 806
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 663

    (449) typecast_factor_tail -> DIVISION . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 807
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 664

    (450) typecast_factor_tail -> MODULO . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 808
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 665

    (451) typecast_factor_tail -> EXPONENT . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 809
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 666

    (452) typecast_factor_tail -> GT . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 810
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 667

    (453) typecast_factor_tail -> LT . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 811
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 668

    (454) typecast_factor_tail -> EQ_EQ . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 812
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 669

    (455) typecast_factor_tail -> GT_EQ . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 813
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 670

    (456) typecast_factor_tail -> LT_EQ . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 814
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 671

    (457) typecast_factor_tail -> NOT_EQ . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 815
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 672

    (458) typecast_factor_tail -> AND . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 816
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 673

    (459) typecast_factor_tail -> OR . typecast_factor typecast_factor_tail
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_factor                shift and go to state 817
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 674

    (460) typecast_factor_tail -> empty .

    RPAREN          reduce using rule 460 (typecast_factor_tail -> empty .)


state 675

    (441) typecast_factor -> var_call postfix .

    PLUS            reduce using rule 441 (typecast_factor -> var_call postfix .)
    MINUS           reduce using rule 441 (typecast_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 441 (typecast_factor -> var_call postfix .)
    DIVISION        reduce using rule 441 (typecast_factor -> var_call postfix .)
    MODULO          reduce using rule 441 (typecast_factor -> var_call postfix .)
    EXPONENT        reduce using rule 441 (typecast_factor -> var_call postfix .)
    GT              reduce using rule 441 (typecast_factor -> var_call postfix .)
    LT              reduce using rule 441 (typecast_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 441 (typecast_factor -> var_call postfix .)
    GT_EQ           reduce using rule 441 (typecast_factor -> var_call postfix .)
    LT_EQ           reduce using rule 441 (typecast_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 441 (typecast_factor -> var_call postfix .)
    AND             reduce using rule 441 (typecast_factor -> var_call postfix .)
    OR              reduce using rule 441 (typecast_factor -> var_call postfix .)
    RPAREN          reduce using rule 441 (typecast_factor -> var_call postfix .)


state 676

    (443) typecast_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    GT              reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    LT              reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    AND             reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    OR              reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 443 (typecast_factor -> TILDE INT_LIT .)


state 677

    (444) typecast_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 444 (typecast_factor -> TILDE FLT_LIT .)


state 678

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 139 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 139 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 679

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 140 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 140 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 680

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 141 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 141 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 681

    (118) revive_factor_tail -> PLUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 118 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 118 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)


state 682

    (119) revive_factor_tail -> MINUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 119 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 119 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)


state 683

    (120) revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 120 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 120 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)


state 684

    (121) revive_factor_tail -> DIVISION revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 121 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 121 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)


state 685

    (122) revive_factor_tail -> MODULO revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 122 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 122 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)


state 686

    (123) revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 123 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 123 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)


state 687

    (124) revive_factor_tail -> GT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 124 (revive_factor_tail -> GT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 124 (revive_factor_tail -> GT revive_factor revive_factor_tail .)


state 688

    (125) revive_factor_tail -> LT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 125 (revive_factor_tail -> LT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 125 (revive_factor_tail -> LT revive_factor revive_factor_tail .)


state 689

    (126) revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 126 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 126 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)


state 690

    (127) revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 127 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 127 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)


state 691

    (128) revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 128 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 128 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)


state 692

    (129) revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 129 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 129 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)


state 693

    (130) revive_factor_tail -> AND revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 130 (revive_factor_tail -> AND revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 130 (revive_factor_tail -> AND revive_factor revive_factor_tail .)


state 694

    (131) revive_factor_tail -> OR revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 131 (revive_factor_tail -> OR revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 131 (revive_factor_tail -> OR revive_factor revive_factor_tail .)


state 695

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
    (233) switch_condition -> . SHIFT switch_value COLON statements switchcond_tail

    SHIFT           shift and go to state 819

    switch_condition               shift and go to state 818

state 696

    (380) assign_tail -> DOT SPLICE LPAREN start . COMMA deleteCount COMMA splice_items RPAREN

    COMMA           shift and go to state 820


state 697

    (390) start -> INT_LIT .

    COMMA           reduce using rule 390 (start -> INT_LIT .)


state 698

    (381) assign_tail -> DOT PUSH LPAREN list_element . RPAREN

    RPAREN          shift and go to state 821


state 699

    (433) type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 822


state 700

    (412) value_factor -> LPAREN value_factor RPAREN .

    PLUS            reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    MINUS           reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    MULTIPLY        reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    DIVISION        reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    MODULO          reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    EXPONENT        reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    GT              reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    LT              reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    EQ_EQ           reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    GT_EQ           reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    LT_EQ           reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    NOT_EQ          reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    AND             reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    OR              reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    NEWLINE         reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    RPAREN          reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)
    COMMA           reduce using rule 412 (value_factor -> LPAREN value_factor RPAREN .)


state 701

    (434) type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 823


state 702

    (435) type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 824


state 703

    (436) type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 825


state 704

    (413) value_factor_tail -> PLUS value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 826
    empty                          shift and go to state 559

state 705

    (414) value_factor_tail -> MINUS value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 827
    empty                          shift and go to state 559

state 706

    (415) value_factor_tail -> MULTIPLY value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 828
    empty                          shift and go to state 559

state 707

    (416) value_factor_tail -> DIVISION value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 829
    empty                          shift and go to state 559

state 708

    (417) value_factor_tail -> MODULO value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 830
    empty                          shift and go to state 559

state 709

    (418) value_factor_tail -> EXPONENT value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 831
    empty                          shift and go to state 559

state 710

    (419) value_factor_tail -> GT value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 832
    empty                          shift and go to state 559

state 711

    (420) value_factor_tail -> LT value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 833
    empty                          shift and go to state 559

state 712

    (421) value_factor_tail -> EQ_EQ value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 834
    empty                          shift and go to state 559

state 713

    (422) value_factor_tail -> GT_EQ value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 835
    empty                          shift and go to state 559

state 714

    (423) value_factor_tail -> LT_EQ value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 836
    empty                          shift and go to state 559

state 715

    (424) value_factor_tail -> NOT_EQ value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 837
    empty                          shift and go to state 559

state 716

    (425) value_factor_tail -> AND value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 838
    empty                          shift and go to state 559

state 717

    (426) value_factor_tail -> OR value_factor . value_factor_tail
    (413) value_factor_tail -> . PLUS value_factor value_factor_tail
    (414) value_factor_tail -> . MINUS value_factor value_factor_tail
    (415) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (416) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (417) value_factor_tail -> . MODULO value_factor value_factor_tail
    (418) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (419) value_factor_tail -> . GT value_factor value_factor_tail
    (420) value_factor_tail -> . LT value_factor value_factor_tail
    (421) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (422) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (423) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (424) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (425) value_factor_tail -> . AND value_factor value_factor_tail
    (426) value_factor_tail -> . OR value_factor value_factor_tail
    (427) value_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 545
    MINUS           shift and go to state 546
    MULTIPLY        shift and go to state 547
    DIVISION        shift and go to state 548
    MODULO          shift and go to state 549
    EXPONENT        shift and go to state 550
    GT              shift and go to state 551
    LT              shift and go to state 552
    EQ_EQ           shift and go to state 553
    GT_EQ           shift and go to state 554
    LT_EQ           shift and go to state 555
    NOT_EQ          shift and go to state 556
    AND             shift and go to state 557
    OR              shift and go to state 558
    NEWLINE         reduce using rule 467 (empty -> .)
    COMMA           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)

    value_factor_tail              shift and go to state 839
    empty                          shift and go to state 559

state 718

    (339) arg_tail -> COMMA arg_value . arg_tail
    (339) arg_tail -> . COMMA arg_value arg_tail
    (340) arg_tail -> . empty
    (467) empty -> .

    COMMA           shift and go to state 565
    RPAREN          reduce using rule 467 (empty -> .)

    arg_tail                       shift and go to state 840
    empty                          shift and go to state 566

state 719

    (377) next_val -> COMMA value next_val .

    NEWLINE         reduce using rule 377 (next_val -> COMMA value next_val .)


state 720

    (373) output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 373 (output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 373 (output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 721

    (374) output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 374 (output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 374 (output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 722

    (375) output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 375 (output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 375 (output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 723

    (376) output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 376 (output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 376 (output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 724

    (353) output_factor_tail -> PLUS output_factor output_factor_tail .

    COMMA           reduce using rule 353 (output_factor_tail -> PLUS output_factor output_factor_tail .)
    NEWLINE         reduce using rule 353 (output_factor_tail -> PLUS output_factor output_factor_tail .)


state 725

    (354) output_factor_tail -> MINUS output_factor output_factor_tail .

    COMMA           reduce using rule 354 (output_factor_tail -> MINUS output_factor output_factor_tail .)
    NEWLINE         reduce using rule 354 (output_factor_tail -> MINUS output_factor output_factor_tail .)


state 726

    (355) output_factor_tail -> MULTIPLY output_factor output_factor_tail .

    COMMA           reduce using rule 355 (output_factor_tail -> MULTIPLY output_factor output_factor_tail .)
    NEWLINE         reduce using rule 355 (output_factor_tail -> MULTIPLY output_factor output_factor_tail .)


state 727

    (356) output_factor_tail -> DIVISION output_factor output_factor_tail .

    COMMA           reduce using rule 356 (output_factor_tail -> DIVISION output_factor output_factor_tail .)
    NEWLINE         reduce using rule 356 (output_factor_tail -> DIVISION output_factor output_factor_tail .)


state 728

    (357) output_factor_tail -> MODULO output_factor output_factor_tail .

    COMMA           reduce using rule 357 (output_factor_tail -> MODULO output_factor output_factor_tail .)
    NEWLINE         reduce using rule 357 (output_factor_tail -> MODULO output_factor output_factor_tail .)


state 729

    (358) output_factor_tail -> EXPONENT output_factor output_factor_tail .

    COMMA           reduce using rule 358 (output_factor_tail -> EXPONENT output_factor output_factor_tail .)
    NEWLINE         reduce using rule 358 (output_factor_tail -> EXPONENT output_factor output_factor_tail .)


state 730

    (359) output_factor_tail -> GT output_factor output_factor_tail .

    COMMA           reduce using rule 359 (output_factor_tail -> GT output_factor output_factor_tail .)
    NEWLINE         reduce using rule 359 (output_factor_tail -> GT output_factor output_factor_tail .)


state 731

    (360) output_factor_tail -> LT output_factor output_factor_tail .

    COMMA           reduce using rule 360 (output_factor_tail -> LT output_factor output_factor_tail .)
    NEWLINE         reduce using rule 360 (output_factor_tail -> LT output_factor output_factor_tail .)


state 732

    (361) output_factor_tail -> EQ_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 361 (output_factor_tail -> EQ_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 361 (output_factor_tail -> EQ_EQ output_factor output_factor_tail .)


state 733

    (362) output_factor_tail -> GT_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 362 (output_factor_tail -> GT_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 362 (output_factor_tail -> GT_EQ output_factor output_factor_tail .)


state 734

    (363) output_factor_tail -> LT_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 363 (output_factor_tail -> LT_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 363 (output_factor_tail -> LT_EQ output_factor output_factor_tail .)


state 735

    (364) output_factor_tail -> NOT_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 364 (output_factor_tail -> NOT_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 364 (output_factor_tail -> NOT_EQ output_factor output_factor_tail .)


state 736

    (365) output_factor_tail -> AND output_factor output_factor_tail .

    COMMA           reduce using rule 365 (output_factor_tail -> AND output_factor output_factor_tail .)
    NEWLINE         reduce using rule 365 (output_factor_tail -> AND output_factor output_factor_tail .)


state 737

    (366) output_factor_tail -> OR output_factor output_factor_tail .

    COMMA           reduce using rule 366 (output_factor_tail -> OR output_factor output_factor_tail .)
    NEWLINE         reduce using rule 366 (output_factor_tail -> OR output_factor output_factor_tail .)


state 738

    (211) condition_factor -> LPAREN condition RPAREN .

    PLUS            reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    MINUS           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    MULTIPLY        reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    DIVISION        reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    MODULO          reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    EXPONENT        reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    GT              reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    LT              reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    EQ_EQ           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    GT_EQ           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    LT_EQ           reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    NOT_EQ          reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    AND             reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    OR              reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)
    RPAREN          reduce using rule 211 (condition_factor -> LPAREN condition RPAREN .)


state 739

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 841
    empty                          shift and go to state 17

state 740

    (212) condition_tail -> PLUS condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 842
    empty                          shift and go to state 604

state 741

    (213) condition_tail -> MINUS condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 843
    empty                          shift and go to state 604

state 742

    (214) condition_tail -> MULTIPLY condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 844
    empty                          shift and go to state 604

state 743

    (215) condition_tail -> DIVISION condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 845
    empty                          shift and go to state 604

state 744

    (216) condition_tail -> MODULO condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 846
    empty                          shift and go to state 604

state 745

    (217) condition_tail -> EXPONENT condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 847
    empty                          shift and go to state 604

state 746

    (218) condition_tail -> GT condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 848
    empty                          shift and go to state 604

state 747

    (219) condition_tail -> LT condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 849
    empty                          shift and go to state 604

state 748

    (220) condition_tail -> EQ_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 850
    empty                          shift and go to state 604

state 749

    (221) condition_tail -> GT_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 851
    empty                          shift and go to state 604

state 750

    (222) condition_tail -> LT_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 852
    empty                          shift and go to state 604

state 751

    (223) condition_tail -> NOT_EQ condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 853
    empty                          shift and go to state 604

state 752

    (224) condition_tail -> AND condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 854
    empty                          shift and go to state 604

state 753

    (225) condition_tail -> OR condition_factor . condition_tail
    (212) condition_tail -> . PLUS condition_factor condition_tail
    (213) condition_tail -> . MINUS condition_factor condition_tail
    (214) condition_tail -> . MULTIPLY condition_factor condition_tail
    (215) condition_tail -> . DIVISION condition_factor condition_tail
    (216) condition_tail -> . MODULO condition_factor condition_tail
    (217) condition_tail -> . EXPONENT condition_factor condition_tail
    (218) condition_tail -> . GT condition_factor condition_tail
    (219) condition_tail -> . LT condition_factor condition_tail
    (220) condition_tail -> . EQ_EQ condition_factor condition_tail
    (221) condition_tail -> . GT_EQ condition_factor condition_tail
    (222) condition_tail -> . LT_EQ condition_factor condition_tail
    (223) condition_tail -> . NOT_EQ condition_factor condition_tail
    (224) condition_tail -> . AND condition_factor condition_tail
    (225) condition_tail -> . OR condition_factor condition_tail
    (226) condition_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 590
    MINUS           shift and go to state 591
    MULTIPLY        shift and go to state 592
    DIVISION        shift and go to state 593
    MODULO          shift and go to state 594
    EXPONENT        shift and go to state 595
    GT              shift and go to state 596
    LT              shift and go to state 597
    EQ_EQ           shift and go to state 598
    GT_EQ           shift and go to state 599
    LT_EQ           shift and go to state 600
    NOT_EQ          shift and go to state 601
    AND             shift and go to state 602
    OR              shift and go to state 603
    RPAREN          reduce using rule 467 (empty -> .)

    condition_tail                 shift and go to state 855
    empty                          shift and go to state 604

state 754

    (278) for_factor -> LPAREN . for_factor RPAREN
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 856
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 755

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression . SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 857


state 756

    (273) for_expression -> for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 858
    empty                          shift and go to state 873

state 757

    (274) for_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    SEMICOLON       reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 874
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 758

    (275) for_factor -> for_factor1 .

    PLUS            reduce using rule 275 (for_factor -> for_factor1 .)
    MINUS           reduce using rule 275 (for_factor -> for_factor1 .)
    MULTIPLY        reduce using rule 275 (for_factor -> for_factor1 .)
    DIVISION        reduce using rule 275 (for_factor -> for_factor1 .)
    MODULO          reduce using rule 275 (for_factor -> for_factor1 .)
    EXPONENT        reduce using rule 275 (for_factor -> for_factor1 .)
    GT              reduce using rule 275 (for_factor -> for_factor1 .)
    LT              reduce using rule 275 (for_factor -> for_factor1 .)
    EQ_EQ           reduce using rule 275 (for_factor -> for_factor1 .)
    GT_EQ           reduce using rule 275 (for_factor -> for_factor1 .)
    LT_EQ           reduce using rule 275 (for_factor -> for_factor1 .)
    NOT_EQ          reduce using rule 275 (for_factor -> for_factor1 .)
    AND             reduce using rule 275 (for_factor -> for_factor1 .)
    OR              reduce using rule 275 (for_factor -> for_factor1 .)
    SEMICOLON       reduce using rule 275 (for_factor -> for_factor1 .)
    RPAREN          reduce using rule 275 (for_factor -> for_factor1 .)


state 759

    (276) for_factor -> TILDE . INT_LIT
    (277) for_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 875
    FLT_LIT         shift and go to state 876


state 760

    (294) for_factor1 -> INT_LIT .

    PLUS            reduce using rule 294 (for_factor1 -> INT_LIT .)
    MINUS           reduce using rule 294 (for_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 294 (for_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 294 (for_factor1 -> INT_LIT .)
    MODULO          reduce using rule 294 (for_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 294 (for_factor1 -> INT_LIT .)
    GT              reduce using rule 294 (for_factor1 -> INT_LIT .)
    LT              reduce using rule 294 (for_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 294 (for_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 294 (for_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 294 (for_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 294 (for_factor1 -> INT_LIT .)
    AND             reduce using rule 294 (for_factor1 -> INT_LIT .)
    OR              reduce using rule 294 (for_factor1 -> INT_LIT .)
    SEMICOLON       reduce using rule 294 (for_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 294 (for_factor1 -> INT_LIT .)


state 761

    (295) for_factor1 -> FLT_LIT .

    PLUS            reduce using rule 295 (for_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 295 (for_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 295 (for_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 295 (for_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 295 (for_factor1 -> FLT_LIT .)
    GT              reduce using rule 295 (for_factor1 -> FLT_LIT .)
    LT              reduce using rule 295 (for_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 295 (for_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 295 (for_factor1 -> FLT_LIT .)
    AND             reduce using rule 295 (for_factor1 -> FLT_LIT .)
    OR              reduce using rule 295 (for_factor1 -> FLT_LIT .)
    SEMICOLON       reduce using rule 295 (for_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 295 (for_factor1 -> FLT_LIT .)


state 762

    (296) for_factor1 -> DAY .

    PLUS            reduce using rule 296 (for_factor1 -> DAY .)
    MINUS           reduce using rule 296 (for_factor1 -> DAY .)
    MULTIPLY        reduce using rule 296 (for_factor1 -> DAY .)
    DIVISION        reduce using rule 296 (for_factor1 -> DAY .)
    MODULO          reduce using rule 296 (for_factor1 -> DAY .)
    EXPONENT        reduce using rule 296 (for_factor1 -> DAY .)
    GT              reduce using rule 296 (for_factor1 -> DAY .)
    LT              reduce using rule 296 (for_factor1 -> DAY .)
    EQ_EQ           reduce using rule 296 (for_factor1 -> DAY .)
    GT_EQ           reduce using rule 296 (for_factor1 -> DAY .)
    LT_EQ           reduce using rule 296 (for_factor1 -> DAY .)
    NOT_EQ          reduce using rule 296 (for_factor1 -> DAY .)
    AND             reduce using rule 296 (for_factor1 -> DAY .)
    OR              reduce using rule 296 (for_factor1 -> DAY .)
    SEMICOLON       reduce using rule 296 (for_factor1 -> DAY .)
    RPAREN          reduce using rule 296 (for_factor1 -> DAY .)


state 763

    (297) for_factor1 -> NIGHT .

    PLUS            reduce using rule 297 (for_factor1 -> NIGHT .)
    MINUS           reduce using rule 297 (for_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 297 (for_factor1 -> NIGHT .)
    DIVISION        reduce using rule 297 (for_factor1 -> NIGHT .)
    MODULO          reduce using rule 297 (for_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 297 (for_factor1 -> NIGHT .)
    GT              reduce using rule 297 (for_factor1 -> NIGHT .)
    LT              reduce using rule 297 (for_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 297 (for_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 297 (for_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 297 (for_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 297 (for_factor1 -> NIGHT .)
    AND             reduce using rule 297 (for_factor1 -> NIGHT .)
    OR              reduce using rule 297 (for_factor1 -> NIGHT .)
    SEMICOLON       reduce using rule 297 (for_factor1 -> NIGHT .)
    RPAREN          reduce using rule 297 (for_factor1 -> NIGHT .)


state 764

    (298) for_factor1 -> STR_LIT .

    PLUS            reduce using rule 298 (for_factor1 -> STR_LIT .)
    MINUS           reduce using rule 298 (for_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 298 (for_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 298 (for_factor1 -> STR_LIT .)
    MODULO          reduce using rule 298 (for_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 298 (for_factor1 -> STR_LIT .)
    GT              reduce using rule 298 (for_factor1 -> STR_LIT .)
    LT              reduce using rule 298 (for_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 298 (for_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 298 (for_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 298 (for_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 298 (for_factor1 -> STR_LIT .)
    AND             reduce using rule 298 (for_factor1 -> STR_LIT .)
    OR              reduce using rule 298 (for_factor1 -> STR_LIT .)
    SEMICOLON       reduce using rule 298 (for_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 298 (for_factor1 -> STR_LIT .)


state 765

    (327) control_variable -> INT IDENT EQ . control_var_tail
    (328) control_var_tail -> . INT_LIT
    (329) control_var_tail -> . var_call
    (395) var_call -> . IDENT list_index

    INT_LIT         shift and go to state 878
    IDENT           shift and go to state 55

    control_var_tail               shift and go to state 877
    var_call                       shift and go to state 879

state 766

    (305) until_factor -> LPAREN until_factor RPAREN .

    PLUS            reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    MINUS           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    MULTIPLY        reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    DIVISION        reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    MODULO          reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    EXPONENT        reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    GT              reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    LT              reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    EQ_EQ           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    GT_EQ           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    LT_EQ           reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    NOT_EQ          reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    AND             reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    OR              reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)
    RPAREN          reduce using rule 305 (until_factor -> LPAREN until_factor RPAREN .)


state 767

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE . statements RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 880
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 768

    (306) until_factor_tail -> PLUS until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 881
    empty                          shift and go to state 627

state 769

    (307) until_factor_tail -> MINUS until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 882
    empty                          shift and go to state 627

state 770

    (308) until_factor_tail -> MULTIPLY until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 883
    empty                          shift and go to state 627

state 771

    (309) until_factor_tail -> DIVISION until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 884
    empty                          shift and go to state 627

state 772

    (310) until_factor_tail -> MODULO until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 885
    empty                          shift and go to state 627

state 773

    (311) until_factor_tail -> EXPONENT until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 886
    empty                          shift and go to state 627

state 774

    (312) until_factor_tail -> GT until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 887
    empty                          shift and go to state 627

state 775

    (313) until_factor_tail -> LT until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 888
    empty                          shift and go to state 627

state 776

    (314) until_factor_tail -> EQ_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 889
    empty                          shift and go to state 627

state 777

    (315) until_factor_tail -> GT_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 890
    empty                          shift and go to state 627

state 778

    (316) until_factor_tail -> LT_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 891
    empty                          shift and go to state 627

state 779

    (317) until_factor_tail -> NOT_EQ until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 892
    empty                          shift and go to state 627

state 780

    (318) until_factor_tail -> AND until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 893
    empty                          shift and go to state 627

state 781

    (319) until_factor_tail -> OR until_factor . until_factor_tail
    (306) until_factor_tail -> . PLUS until_factor until_factor_tail
    (307) until_factor_tail -> . MINUS until_factor until_factor_tail
    (308) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (309) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (310) until_factor_tail -> . MODULO until_factor until_factor_tail
    (311) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (312) until_factor_tail -> . GT until_factor until_factor_tail
    (313) until_factor_tail -> . LT until_factor until_factor_tail
    (314) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (315) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (316) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (317) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (318) until_factor_tail -> . AND until_factor until_factor_tail
    (319) until_factor_tail -> . OR until_factor until_factor_tail
    (320) until_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 613
    MINUS           shift and go to state 614
    MULTIPLY        shift and go to state 615
    DIVISION        shift and go to state 616
    MODULO          shift and go to state 617
    EXPONENT        shift and go to state 618
    GT              shift and go to state 619
    LT              shift and go to state 620
    EQ_EQ           shift and go to state 621
    GT_EQ           shift and go to state 622
    LT_EQ           shift and go to state 623
    NOT_EQ          shift and go to state 624
    AND             shift and go to state 625
    OR              shift and go to state 626
    RPAREN          reduce using rule 467 (empty -> .)

    until_factor_tail              shift and go to state 894
    empty                          shift and go to state 627

state 782

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL . LPAREN until_expression RPAREN

    LPAREN          shift and go to state 895


state 783

    (166) local_dec_tail2 -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    SWAP            reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    FUNCTION_NAME   reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    IDENT           reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    DISPLAY         reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    CHECK           reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    FOR             reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    UNTIL           reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    REPEAT          reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    INPUT           reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    INT             reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    FLT             reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    BLN             reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    CHR             reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    STR             reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    REVIVE          reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    RBRACE          reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    SHIFT           reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    OTHERWISE       reduce using rule 166 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)


state 784

    (199) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    INT             reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    STR             reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 199 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 785

    (200) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    INT             reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    STR             reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 200 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 786

    (201) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    INT             reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    STR             reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 201 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 787

    (202) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    INT             reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    STR             reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 202 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 788

    (179) local_factor_tail -> PLUS local_factor local_factor_tail .

    COMMA           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    SWAP            reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    IDENT           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    DISPLAY         reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    CHECK           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    FOR             reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    UNTIL           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    REPEAT          reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    INPUT           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    INT             reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    FLT             reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    BLN             reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    CHR             reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    STR             reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    REVIVE          reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    RBRACE          reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    SHIFT           reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 179 (local_factor_tail -> PLUS local_factor local_factor_tail .)


state 789

    (180) local_factor_tail -> MINUS local_factor local_factor_tail .

    COMMA           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    SWAP            reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    IDENT           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    DISPLAY         reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    CHECK           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    FOR             reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    UNTIL           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    REPEAT          reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    INPUT           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    INT             reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    FLT             reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    BLN             reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    CHR             reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    STR             reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    REVIVE          reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    RBRACE          reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    SHIFT           reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 180 (local_factor_tail -> MINUS local_factor local_factor_tail .)


state 790

    (181) local_factor_tail -> MULTIPLY local_factor local_factor_tail .

    COMMA           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    NEWLINE         reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    SWAP            reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    IDENT           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    DISPLAY         reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    CHECK           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    FOR             reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    UNTIL           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    REPEAT          reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    INPUT           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    INT             reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    FLT             reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    BLN             reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    CHR             reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    STR             reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    REVIVE          reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    RBRACE          reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    SHIFT           reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 181 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)


state 791

    (182) local_factor_tail -> DIVISION local_factor local_factor_tail .

    COMMA           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    NEWLINE         reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    SWAP            reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    IDENT           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    DISPLAY         reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    CHECK           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    FOR             reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    UNTIL           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    REPEAT          reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    INPUT           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    INT             reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    FLT             reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    BLN             reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    CHR             reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    STR             reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    REVIVE          reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    RBRACE          reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    SHIFT           reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 182 (local_factor_tail -> DIVISION local_factor local_factor_tail .)


state 792

    (183) local_factor_tail -> MODULO local_factor local_factor_tail .

    COMMA           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    NEWLINE         reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    SWAP            reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    IDENT           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    DISPLAY         reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    CHECK           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    FOR             reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    UNTIL           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    REPEAT          reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    INPUT           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    INT             reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    FLT             reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    BLN             reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    CHR             reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    STR             reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    REVIVE          reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    RBRACE          reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    SHIFT           reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 183 (local_factor_tail -> MODULO local_factor local_factor_tail .)


state 793

    (184) local_factor_tail -> EXPONENT local_factor local_factor_tail .

    COMMA           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    SWAP            reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    IDENT           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    DISPLAY         reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    CHECK           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    FOR             reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    UNTIL           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    REPEAT          reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    INPUT           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    INT             reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    FLT             reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    BLN             reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    CHR             reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    STR             reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    REVIVE          reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    RBRACE          reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    SHIFT           reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 184 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)


state 794

    (185) local_factor_tail -> GT local_factor local_factor_tail .

    COMMA           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    SWAP            reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    IDENT           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    DISPLAY         reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    CHECK           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    FOR             reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    UNTIL           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    REPEAT          reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    INPUT           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    INT             reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    FLT             reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    BLN             reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    CHR             reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    STR             reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    REVIVE          reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    RBRACE          reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    SHIFT           reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 185 (local_factor_tail -> GT local_factor local_factor_tail .)


state 795

    (186) local_factor_tail -> LT local_factor local_factor_tail .

    COMMA           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    SWAP            reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    IDENT           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    DISPLAY         reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    CHECK           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    FOR             reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    UNTIL           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    REPEAT          reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    INPUT           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    INT             reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    FLT             reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    BLN             reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    CHR             reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    STR             reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    REVIVE          reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    RBRACE          reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    SHIFT           reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 186 (local_factor_tail -> LT local_factor local_factor_tail .)


state 796

    (187) local_factor_tail -> EQ_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    INT             reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    STR             reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 187 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)


state 797

    (188) local_factor_tail -> GT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    INT             reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    STR             reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 188 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)


state 798

    (189) local_factor_tail -> LT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    INT             reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    STR             reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 189 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)


state 799

    (190) local_factor_tail -> NOT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    INT             reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    STR             reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 190 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)


state 800

    (191) local_factor_tail -> AND local_factor local_factor_tail .

    COMMA           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    NEWLINE         reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    SWAP            reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    IDENT           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    DISPLAY         reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    CHECK           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    FOR             reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    UNTIL           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    REPEAT          reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    INPUT           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    INT             reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    FLT             reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    BLN             reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    CHR             reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    STR             reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    REVIVE          reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    RBRACE          reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    SHIFT           reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 191 (local_factor_tail -> AND local_factor local_factor_tail .)


state 801

    (192) local_factor_tail -> OR local_factor local_factor_tail .

    COMMA           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    NEWLINE         reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    SWAP            reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    IDENT           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    DISPLAY         reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    CHECK           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    FOR             reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    UNTIL           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    REPEAT          reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    INPUT           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    INT             reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    FLT             reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    BLN             reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    CHR             reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    STR             reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    REVIVE          reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    RBRACE          reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    SHIFT           reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 192 (local_factor_tail -> OR local_factor local_factor_tail .)


state 802

    (445) typecast_factor -> LPAREN typecast_factor RPAREN .

    PLUS            reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MINUS           reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MULTIPLY        reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    DIVISION        reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MODULO          reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    EXPONENT        reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    GT              reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    LT              reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    EQ_EQ           reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    GT_EQ           reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    LT_EQ           reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    NOT_EQ          reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    AND             reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    OR              reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    RPAREN          reduce using rule 445 (typecast_factor -> LPAREN typecast_factor RPAREN .)


state 803

    (438) typecast_value -> FUNCTION_NAME LPAREN RPAREN .

    RPAREN          reduce using rule 438 (typecast_value -> FUNCTION_NAME LPAREN RPAREN .)


state 804

    (446) typecast_factor_tail -> PLUS typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 896
    empty                          shift and go to state 674

state 805

    (447) typecast_factor_tail -> MINUS typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 897
    empty                          shift and go to state 674

state 806

    (448) typecast_factor_tail -> MULTIPLY typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 898
    empty                          shift and go to state 674

state 807

    (449) typecast_factor_tail -> DIVISION typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 899
    empty                          shift and go to state 674

state 808

    (450) typecast_factor_tail -> MODULO typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 900
    empty                          shift and go to state 674

state 809

    (451) typecast_factor_tail -> EXPONENT typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 901
    empty                          shift and go to state 674

state 810

    (452) typecast_factor_tail -> GT typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 902
    empty                          shift and go to state 674

state 811

    (453) typecast_factor_tail -> LT typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 903
    empty                          shift and go to state 674

state 812

    (454) typecast_factor_tail -> EQ_EQ typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 904
    empty                          shift and go to state 674

state 813

    (455) typecast_factor_tail -> GT_EQ typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 905
    empty                          shift and go to state 674

state 814

    (456) typecast_factor_tail -> LT_EQ typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 906
    empty                          shift and go to state 674

state 815

    (457) typecast_factor_tail -> NOT_EQ typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 907
    empty                          shift and go to state 674

state 816

    (458) typecast_factor_tail -> AND typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 908
    empty                          shift and go to state 674

state 817

    (459) typecast_factor_tail -> OR typecast_factor . typecast_factor_tail
    (446) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (447) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (448) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (449) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (450) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (451) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (452) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (453) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (454) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (455) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (456) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (457) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (458) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (459) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (460) typecast_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 660
    MINUS           shift and go to state 661
    MULTIPLY        shift and go to state 662
    DIVISION        shift and go to state 663
    MODULO          shift and go to state 664
    EXPONENT        shift and go to state 665
    GT              shift and go to state 666
    LT              shift and go to state 667
    EQ_EQ           shift and go to state 668
    GT_EQ           shift and go to state 669
    LT_EQ           shift and go to state 670
    NOT_EQ          shift and go to state 671
    AND             shift and go to state 672
    OR              shift and go to state 673
    RPAREN          reduce using rule 467 (empty -> .)

    typecast_factor_tail           shift and go to state 909
    empty                          shift and go to state 674

state 818

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition . OTHERWISE LBRACE statements RBRACE RBRACE

    OTHERWISE       shift and go to state 910


state 819

    (233) switch_condition -> SHIFT . switch_value COLON statements switchcond_tail
    (234) switch_value -> . switch_type_cast
    (235) switch_value -> . switch_expression
    (236) switch_value -> . function_call
    (263) switch_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (264) switch_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (265) switch_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (266) switch_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (237) switch_expression -> . switch_factor switch_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 915
    CONVERT_TO_FLT  shift and go to state 917
    CONVERT_TO_BLN  shift and go to state 918
    CONVERT_TO_STR  shift and go to state 919
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_value                   shift and go to state 911
    switch_type_cast               shift and go to state 912
    switch_expression              shift and go to state 913
    function_call                  shift and go to state 914
    switch_factor                  shift and go to state 920
    input_statement                shift and go to state 265
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 820

    (380) assign_tail -> DOT SPLICE LPAREN start COMMA . deleteCount COMMA splice_items RPAREN
    (391) deleteCount -> . empty
    (392) deleteCount -> . INT_LIT
    (467) empty -> .

    INT_LIT         shift and go to state 931
    COMMA           reduce using rule 467 (empty -> .)

    deleteCount                    shift and go to state 929
    empty                          shift and go to state 930

state 821

    (381) assign_tail -> DOT PUSH LPAREN list_element RPAREN .

    NEWLINE         reduce using rule 381 (assign_tail -> DOT PUSH LPAREN list_element RPAREN .)


state 822

    (433) type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 433 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 433 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 433 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 823

    (434) type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 434 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 434 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 434 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 824

    (435) type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 435 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 435 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 435 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 825

    (436) type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 436 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 436 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 436 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 826

    (413) value_factor_tail -> PLUS value_factor value_factor_tail .

    NEWLINE         reduce using rule 413 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    COMMA           reduce using rule 413 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 413 (value_factor_tail -> PLUS value_factor value_factor_tail .)


state 827

    (414) value_factor_tail -> MINUS value_factor value_factor_tail .

    NEWLINE         reduce using rule 414 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    COMMA           reduce using rule 414 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 414 (value_factor_tail -> MINUS value_factor value_factor_tail .)


state 828

    (415) value_factor_tail -> MULTIPLY value_factor value_factor_tail .

    NEWLINE         reduce using rule 415 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    COMMA           reduce using rule 415 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    RPAREN          reduce using rule 415 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)


state 829

    (416) value_factor_tail -> DIVISION value_factor value_factor_tail .

    NEWLINE         reduce using rule 416 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    COMMA           reduce using rule 416 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    RPAREN          reduce using rule 416 (value_factor_tail -> DIVISION value_factor value_factor_tail .)


state 830

    (417) value_factor_tail -> MODULO value_factor value_factor_tail .

    NEWLINE         reduce using rule 417 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    COMMA           reduce using rule 417 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    RPAREN          reduce using rule 417 (value_factor_tail -> MODULO value_factor value_factor_tail .)


state 831

    (418) value_factor_tail -> EXPONENT value_factor value_factor_tail .

    NEWLINE         reduce using rule 418 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    COMMA           reduce using rule 418 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    RPAREN          reduce using rule 418 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)


state 832

    (419) value_factor_tail -> GT value_factor value_factor_tail .

    NEWLINE         reduce using rule 419 (value_factor_tail -> GT value_factor value_factor_tail .)
    COMMA           reduce using rule 419 (value_factor_tail -> GT value_factor value_factor_tail .)
    RPAREN          reduce using rule 419 (value_factor_tail -> GT value_factor value_factor_tail .)


state 833

    (420) value_factor_tail -> LT value_factor value_factor_tail .

    NEWLINE         reduce using rule 420 (value_factor_tail -> LT value_factor value_factor_tail .)
    COMMA           reduce using rule 420 (value_factor_tail -> LT value_factor value_factor_tail .)
    RPAREN          reduce using rule 420 (value_factor_tail -> LT value_factor value_factor_tail .)


state 834

    (421) value_factor_tail -> EQ_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 421 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 421 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 421 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)


state 835

    (422) value_factor_tail -> GT_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 422 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 422 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 422 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)


state 836

    (423) value_factor_tail -> LT_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 423 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 423 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 423 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)


state 837

    (424) value_factor_tail -> NOT_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 424 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 424 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 424 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)


state 838

    (425) value_factor_tail -> AND value_factor value_factor_tail .

    NEWLINE         reduce using rule 425 (value_factor_tail -> AND value_factor value_factor_tail .)
    COMMA           reduce using rule 425 (value_factor_tail -> AND value_factor value_factor_tail .)
    RPAREN          reduce using rule 425 (value_factor_tail -> AND value_factor value_factor_tail .)


state 839

    (426) value_factor_tail -> OR value_factor value_factor_tail .

    NEWLINE         reduce using rule 426 (value_factor_tail -> OR value_factor value_factor_tail .)
    COMMA           reduce using rule 426 (value_factor_tail -> OR value_factor value_factor_tail .)
    RPAREN          reduce using rule 426 (value_factor_tail -> OR value_factor value_factor_tail .)


state 840

    (339) arg_tail -> COMMA arg_value arg_tail .

    RPAREN          reduce using rule 339 (arg_tail -> COMMA arg_value arg_tail .)


state 841

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 932
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 842

    (212) condition_tail -> PLUS condition_factor condition_tail .

    RPAREN          reduce using rule 212 (condition_tail -> PLUS condition_factor condition_tail .)


state 843

    (213) condition_tail -> MINUS condition_factor condition_tail .

    RPAREN          reduce using rule 213 (condition_tail -> MINUS condition_factor condition_tail .)


state 844

    (214) condition_tail -> MULTIPLY condition_factor condition_tail .

    RPAREN          reduce using rule 214 (condition_tail -> MULTIPLY condition_factor condition_tail .)


state 845

    (215) condition_tail -> DIVISION condition_factor condition_tail .

    RPAREN          reduce using rule 215 (condition_tail -> DIVISION condition_factor condition_tail .)


state 846

    (216) condition_tail -> MODULO condition_factor condition_tail .

    RPAREN          reduce using rule 216 (condition_tail -> MODULO condition_factor condition_tail .)


state 847

    (217) condition_tail -> EXPONENT condition_factor condition_tail .

    RPAREN          reduce using rule 217 (condition_tail -> EXPONENT condition_factor condition_tail .)


state 848

    (218) condition_tail -> GT condition_factor condition_tail .

    RPAREN          reduce using rule 218 (condition_tail -> GT condition_factor condition_tail .)


state 849

    (219) condition_tail -> LT condition_factor condition_tail .

    RPAREN          reduce using rule 219 (condition_tail -> LT condition_factor condition_tail .)


state 850

    (220) condition_tail -> EQ_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 220 (condition_tail -> EQ_EQ condition_factor condition_tail .)


state 851

    (221) condition_tail -> GT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 221 (condition_tail -> GT_EQ condition_factor condition_tail .)


state 852

    (222) condition_tail -> LT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 222 (condition_tail -> LT_EQ condition_factor condition_tail .)


state 853

    (223) condition_tail -> NOT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 223 (condition_tail -> NOT_EQ condition_factor condition_tail .)


state 854

    (224) condition_tail -> AND condition_factor condition_tail .

    RPAREN          reduce using rule 224 (condition_tail -> AND condition_factor condition_tail .)


state 855

    (225) condition_tail -> OR condition_factor condition_tail .

    RPAREN          reduce using rule 225 (condition_tail -> OR condition_factor condition_tail .)


state 856

    (278) for_factor -> LPAREN for_factor . RPAREN

    RPAREN          shift and go to state 933


state 857

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON . update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (330) update -> . var_call update_tail
    (395) var_call -> . IDENT list_index

    IDENT           shift and go to state 55

    update                         shift and go to state 934
    var_call                       shift and go to state 935

state 858

    (273) for_expression -> for_factor for_factor_tail .

    SEMICOLON       reduce using rule 273 (for_expression -> for_factor for_factor_tail .)


state 859

    (279) for_factor_tail -> PLUS . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 936
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 860

    (280) for_factor_tail -> MINUS . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 937
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 861

    (281) for_factor_tail -> MULTIPLY . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 938
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 862

    (282) for_factor_tail -> DIVISION . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 939
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 863

    (283) for_factor_tail -> MODULO . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 940
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 864

    (284) for_factor_tail -> EXPONENT . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 941
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 865

    (285) for_factor_tail -> GT . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 942
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 866

    (286) for_factor_tail -> LT . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 943
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 867

    (287) for_factor_tail -> EQ_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 944
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 868

    (288) for_factor_tail -> GT_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 945
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 869

    (289) for_factor_tail -> LT_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 946
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 870

    (290) for_factor_tail -> NOT_EQ . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 947
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 871

    (291) for_factor_tail -> AND . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 948
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 872

    (292) for_factor_tail -> OR . for_factor for_factor_tail
    (274) for_factor -> . var_call postfix
    (275) for_factor -> . for_factor1
    (276) for_factor -> . TILDE INT_LIT
    (277) for_factor -> . TILDE FLT_LIT
    (278) for_factor -> . LPAREN for_factor RPAREN
    (395) var_call -> . IDENT list_index
    (294) for_factor1 -> . INT_LIT
    (295) for_factor1 -> . FLT_LIT
    (296) for_factor1 -> . DAY
    (297) for_factor1 -> . NIGHT
    (298) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 759
    LPAREN          shift and go to state 754
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 760
    FLT_LIT         shift and go to state 761
    DAY             shift and go to state 762
    NIGHT           shift and go to state 763
    STR_LIT         shift and go to state 764

    for_factor                     shift and go to state 949
    var_call                       shift and go to state 757
    for_factor1                    shift and go to state 758

state 873

    (293) for_factor_tail -> empty .

    SEMICOLON       reduce using rule 293 (for_factor_tail -> empty .)


state 874

    (274) for_factor -> var_call postfix .

    PLUS            reduce using rule 274 (for_factor -> var_call postfix .)
    MINUS           reduce using rule 274 (for_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 274 (for_factor -> var_call postfix .)
    DIVISION        reduce using rule 274 (for_factor -> var_call postfix .)
    MODULO          reduce using rule 274 (for_factor -> var_call postfix .)
    EXPONENT        reduce using rule 274 (for_factor -> var_call postfix .)
    GT              reduce using rule 274 (for_factor -> var_call postfix .)
    LT              reduce using rule 274 (for_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 274 (for_factor -> var_call postfix .)
    GT_EQ           reduce using rule 274 (for_factor -> var_call postfix .)
    LT_EQ           reduce using rule 274 (for_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 274 (for_factor -> var_call postfix .)
    AND             reduce using rule 274 (for_factor -> var_call postfix .)
    OR              reduce using rule 274 (for_factor -> var_call postfix .)
    SEMICOLON       reduce using rule 274 (for_factor -> var_call postfix .)
    RPAREN          reduce using rule 274 (for_factor -> var_call postfix .)


state 875

    (276) for_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    GT              reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    LT              reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    AND             reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    OR              reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    SEMICOLON       reduce using rule 276 (for_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 276 (for_factor -> TILDE INT_LIT .)


state 876

    (277) for_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    SEMICOLON       reduce using rule 277 (for_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 277 (for_factor -> TILDE FLT_LIT .)


state 877

    (327) control_variable -> INT IDENT EQ control_var_tail .

    SEMICOLON       reduce using rule 327 (control_variable -> INT IDENT EQ control_var_tail .)


state 878

    (328) control_var_tail -> INT_LIT .

    SEMICOLON       reduce using rule 328 (control_var_tail -> INT_LIT .)


state 879

    (329) control_var_tail -> var_call .

    SEMICOLON       reduce using rule 329 (control_var_tail -> var_call .)


state 880

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 950


state 881

    (306) until_factor_tail -> PLUS until_factor until_factor_tail .

    RPAREN          reduce using rule 306 (until_factor_tail -> PLUS until_factor until_factor_tail .)


state 882

    (307) until_factor_tail -> MINUS until_factor until_factor_tail .

    RPAREN          reduce using rule 307 (until_factor_tail -> MINUS until_factor until_factor_tail .)


state 883

    (308) until_factor_tail -> MULTIPLY until_factor until_factor_tail .

    RPAREN          reduce using rule 308 (until_factor_tail -> MULTIPLY until_factor until_factor_tail .)


state 884

    (309) until_factor_tail -> DIVISION until_factor until_factor_tail .

    RPAREN          reduce using rule 309 (until_factor_tail -> DIVISION until_factor until_factor_tail .)


state 885

    (310) until_factor_tail -> MODULO until_factor until_factor_tail .

    RPAREN          reduce using rule 310 (until_factor_tail -> MODULO until_factor until_factor_tail .)


state 886

    (311) until_factor_tail -> EXPONENT until_factor until_factor_tail .

    RPAREN          reduce using rule 311 (until_factor_tail -> EXPONENT until_factor until_factor_tail .)


state 887

    (312) until_factor_tail -> GT until_factor until_factor_tail .

    RPAREN          reduce using rule 312 (until_factor_tail -> GT until_factor until_factor_tail .)


state 888

    (313) until_factor_tail -> LT until_factor until_factor_tail .

    RPAREN          reduce using rule 313 (until_factor_tail -> LT until_factor until_factor_tail .)


state 889

    (314) until_factor_tail -> EQ_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 314 (until_factor_tail -> EQ_EQ until_factor until_factor_tail .)


state 890

    (315) until_factor_tail -> GT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 315 (until_factor_tail -> GT_EQ until_factor until_factor_tail .)


state 891

    (316) until_factor_tail -> LT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 316 (until_factor_tail -> LT_EQ until_factor until_factor_tail .)


state 892

    (317) until_factor_tail -> NOT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 317 (until_factor_tail -> NOT_EQ until_factor until_factor_tail .)


state 893

    (318) until_factor_tail -> AND until_factor until_factor_tail .

    RPAREN          reduce using rule 318 (until_factor_tail -> AND until_factor until_factor_tail .)


state 894

    (319) until_factor_tail -> OR until_factor until_factor_tail .

    RPAREN          reduce using rule 319 (until_factor_tail -> OR until_factor until_factor_tail .)


state 895

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN . until_expression RPAREN
    (300) until_expression -> . until_factor until_factor_tail
    (301) until_factor -> . var_call postfix
    (302) until_factor -> . until_factor1
    (303) until_factor -> . TILDE INT_LIT
    (304) until_factor -> . TILDE FLT_LIT
    (305) until_factor -> . LPAREN until_factor RPAREN
    (395) var_call -> . IDENT list_index
    (321) until_factor1 -> . INT_LIT
    (322) until_factor1 -> . FLT_LIT
    (323) until_factor1 -> . DAY
    (324) until_factor1 -> . NIGHT
    (325) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 464
    LPAREN          shift and go to state 459
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 465
    FLT_LIT         shift and go to state 466
    DAY             shift and go to state 467
    NIGHT           shift and go to state 468
    STR_LIT         shift and go to state 469

    until_expression               shift and go to state 951
    until_factor                   shift and go to state 461
    var_call                       shift and go to state 462
    until_factor1                  shift and go to state 463

state 896

    (446) typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 446 (typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail .)


state 897

    (447) typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 447 (typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail .)


state 898

    (448) typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 448 (typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail .)


state 899

    (449) typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 449 (typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail .)


state 900

    (450) typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 450 (typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail .)


state 901

    (451) typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 451 (typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail .)


state 902

    (452) typecast_factor_tail -> GT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 452 (typecast_factor_tail -> GT typecast_factor typecast_factor_tail .)


state 903

    (453) typecast_factor_tail -> LT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 453 (typecast_factor_tail -> LT typecast_factor typecast_factor_tail .)


state 904

    (454) typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 454 (typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail .)


state 905

    (455) typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 455 (typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail .)


state 906

    (456) typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 456 (typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail .)


state 907

    (457) typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 457 (typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail .)


state 908

    (458) typecast_factor_tail -> AND typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 458 (typecast_factor_tail -> AND typecast_factor typecast_factor_tail .)


state 909

    (459) typecast_factor_tail -> OR typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 459 (typecast_factor_tail -> OR typecast_factor typecast_factor_tail .)


state 910

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE . LBRACE statements RBRACE RBRACE

    LBRACE          shift and go to state 952


state 911

    (233) switch_condition -> SHIFT switch_value . COLON statements switchcond_tail

    COLON           shift and go to state 953


state 912

    (234) switch_value -> switch_type_cast .

    COLON           reduce using rule 234 (switch_value -> switch_type_cast .)


state 913

    (235) switch_value -> switch_expression .

    COLON           reduce using rule 235 (switch_value -> switch_expression .)


state 914

    (236) switch_value -> function_call .

    COLON           reduce using rule 236 (switch_value -> function_call .)


state 915

    (263) switch_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 954


state 916

    (242) switch_factor -> LPAREN . switch_factor RPAREN
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 955
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 917

    (264) switch_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 956


state 918

    (265) switch_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 957


state 919

    (266) switch_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 958


state 920

    (237) switch_expression -> switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 959
    empty                          shift and go to state 974

state 921

    (238) switch_factor -> var_call . postfix
    (402) postfix -> . empty
    (403) postfix -> . postfix_op
    (467) empty -> .
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 467 (empty -> .)
    MINUS           reduce using rule 467 (empty -> .)
    MULTIPLY        reduce using rule 467 (empty -> .)
    DIVISION        reduce using rule 467 (empty -> .)
    MODULO          reduce using rule 467 (empty -> .)
    EXPONENT        reduce using rule 467 (empty -> .)
    GT              reduce using rule 467 (empty -> .)
    LT              reduce using rule 467 (empty -> .)
    EQ_EQ           reduce using rule 467 (empty -> .)
    GT_EQ           reduce using rule 467 (empty -> .)
    LT_EQ           reduce using rule 467 (empty -> .)
    NOT_EQ          reduce using rule 467 (empty -> .)
    AND             reduce using rule 467 (empty -> .)
    OR              reduce using rule 467 (empty -> .)
    COLON           reduce using rule 467 (empty -> .)
    RPAREN          reduce using rule 467 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 975
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 922

    (239) switch_factor -> switch_factor1 .

    PLUS            reduce using rule 239 (switch_factor -> switch_factor1 .)
    MINUS           reduce using rule 239 (switch_factor -> switch_factor1 .)
    MULTIPLY        reduce using rule 239 (switch_factor -> switch_factor1 .)
    DIVISION        reduce using rule 239 (switch_factor -> switch_factor1 .)
    MODULO          reduce using rule 239 (switch_factor -> switch_factor1 .)
    EXPONENT        reduce using rule 239 (switch_factor -> switch_factor1 .)
    GT              reduce using rule 239 (switch_factor -> switch_factor1 .)
    LT              reduce using rule 239 (switch_factor -> switch_factor1 .)
    EQ_EQ           reduce using rule 239 (switch_factor -> switch_factor1 .)
    GT_EQ           reduce using rule 239 (switch_factor -> switch_factor1 .)
    LT_EQ           reduce using rule 239 (switch_factor -> switch_factor1 .)
    NOT_EQ          reduce using rule 239 (switch_factor -> switch_factor1 .)
    AND             reduce using rule 239 (switch_factor -> switch_factor1 .)
    OR              reduce using rule 239 (switch_factor -> switch_factor1 .)
    COLON           reduce using rule 239 (switch_factor -> switch_factor1 .)
    RPAREN          reduce using rule 239 (switch_factor -> switch_factor1 .)


state 923

    (240) switch_factor -> TILDE . INT_LIT
    (241) switch_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 976
    FLT_LIT         shift and go to state 977


state 924

    (258) switch_factor1 -> INT_LIT .

    PLUS            reduce using rule 258 (switch_factor1 -> INT_LIT .)
    MINUS           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 258 (switch_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 258 (switch_factor1 -> INT_LIT .)
    MODULO          reduce using rule 258 (switch_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 258 (switch_factor1 -> INT_LIT .)
    GT              reduce using rule 258 (switch_factor1 -> INT_LIT .)
    LT              reduce using rule 258 (switch_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 258 (switch_factor1 -> INT_LIT .)
    AND             reduce using rule 258 (switch_factor1 -> INT_LIT .)
    OR              reduce using rule 258 (switch_factor1 -> INT_LIT .)
    COLON           reduce using rule 258 (switch_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 258 (switch_factor1 -> INT_LIT .)


state 925

    (259) switch_factor1 -> FLT_LIT .

    PLUS            reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    GT              reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    LT              reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    AND             reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    OR              reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    COLON           reduce using rule 259 (switch_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 259 (switch_factor1 -> FLT_LIT .)


state 926

    (260) switch_factor1 -> DAY .

    PLUS            reduce using rule 260 (switch_factor1 -> DAY .)
    MINUS           reduce using rule 260 (switch_factor1 -> DAY .)
    MULTIPLY        reduce using rule 260 (switch_factor1 -> DAY .)
    DIVISION        reduce using rule 260 (switch_factor1 -> DAY .)
    MODULO          reduce using rule 260 (switch_factor1 -> DAY .)
    EXPONENT        reduce using rule 260 (switch_factor1 -> DAY .)
    GT              reduce using rule 260 (switch_factor1 -> DAY .)
    LT              reduce using rule 260 (switch_factor1 -> DAY .)
    EQ_EQ           reduce using rule 260 (switch_factor1 -> DAY .)
    GT_EQ           reduce using rule 260 (switch_factor1 -> DAY .)
    LT_EQ           reduce using rule 260 (switch_factor1 -> DAY .)
    NOT_EQ          reduce using rule 260 (switch_factor1 -> DAY .)
    AND             reduce using rule 260 (switch_factor1 -> DAY .)
    OR              reduce using rule 260 (switch_factor1 -> DAY .)
    COLON           reduce using rule 260 (switch_factor1 -> DAY .)
    RPAREN          reduce using rule 260 (switch_factor1 -> DAY .)


state 927

    (261) switch_factor1 -> NIGHT .

    PLUS            reduce using rule 261 (switch_factor1 -> NIGHT .)
    MINUS           reduce using rule 261 (switch_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 261 (switch_factor1 -> NIGHT .)
    DIVISION        reduce using rule 261 (switch_factor1 -> NIGHT .)
    MODULO          reduce using rule 261 (switch_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 261 (switch_factor1 -> NIGHT .)
    GT              reduce using rule 261 (switch_factor1 -> NIGHT .)
    LT              reduce using rule 261 (switch_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 261 (switch_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 261 (switch_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 261 (switch_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 261 (switch_factor1 -> NIGHT .)
    AND             reduce using rule 261 (switch_factor1 -> NIGHT .)
    OR              reduce using rule 261 (switch_factor1 -> NIGHT .)
    COLON           reduce using rule 261 (switch_factor1 -> NIGHT .)
    RPAREN          reduce using rule 261 (switch_factor1 -> NIGHT .)


state 928

    (262) switch_factor1 -> STR_LIT .

    PLUS            reduce using rule 262 (switch_factor1 -> STR_LIT .)
    MINUS           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 262 (switch_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 262 (switch_factor1 -> STR_LIT .)
    MODULO          reduce using rule 262 (switch_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 262 (switch_factor1 -> STR_LIT .)
    GT              reduce using rule 262 (switch_factor1 -> STR_LIT .)
    LT              reduce using rule 262 (switch_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 262 (switch_factor1 -> STR_LIT .)
    AND             reduce using rule 262 (switch_factor1 -> STR_LIT .)
    OR              reduce using rule 262 (switch_factor1 -> STR_LIT .)
    COLON           reduce using rule 262 (switch_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 262 (switch_factor1 -> STR_LIT .)


state 929

    (380) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount . COMMA splice_items RPAREN

    COMMA           shift and go to state 978


state 930

    (391) deleteCount -> empty .

    COMMA           reduce using rule 391 (deleteCount -> empty .)


state 931

    (392) deleteCount -> INT_LIT .

    COMMA           reduce using rule 392 (deleteCount -> INT_LIT .)


state 932

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 979
    empty                          shift and go to state 17

state 933

    (278) for_factor -> LPAREN for_factor RPAREN .

    PLUS            reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    MINUS           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    MULTIPLY        reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    DIVISION        reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    MODULO          reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    EXPONENT        reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    GT              reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    LT              reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    EQ_EQ           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    GT_EQ           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    LT_EQ           reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    NOT_EQ          reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    AND             reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    OR              reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    SEMICOLON       reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)
    RPAREN          reduce using rule 278 (for_factor -> LPAREN for_factor RPAREN .)


state 934

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 980


state 935

    (330) update -> var_call . update_tail
    (331) update_tail -> . postfix_op
    (332) update_tail -> . compound_op value
    (333) postfix_op -> . PLUS_PLUS
    (334) postfix_op -> . MINUS_MINUS
    (385) compound_op -> . PLUS_EQ
    (386) compound_op -> . MINUS_EQ
    (387) compound_op -> . MUL_EQ
    (388) compound_op -> . DIV_EQ
    (389) compound_op -> . MOD_EQ

    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    PLUS_EQ         shift and go to state 311
    MINUS_EQ        shift and go to state 312
    MUL_EQ          shift and go to state 313
    DIV_EQ          shift and go to state 314
    MOD_EQ          shift and go to state 315

    update_tail                    shift and go to state 981
    postfix_op                     shift and go to state 982
    compound_op                    shift and go to state 983

state 936

    (279) for_factor_tail -> PLUS for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 984
    empty                          shift and go to state 873

state 937

    (280) for_factor_tail -> MINUS for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 985
    empty                          shift and go to state 873

state 938

    (281) for_factor_tail -> MULTIPLY for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 986
    empty                          shift and go to state 873

state 939

    (282) for_factor_tail -> DIVISION for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 987
    empty                          shift and go to state 873

state 940

    (283) for_factor_tail -> MODULO for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 988
    empty                          shift and go to state 873

state 941

    (284) for_factor_tail -> EXPONENT for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 989
    empty                          shift and go to state 873

state 942

    (285) for_factor_tail -> GT for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 990
    empty                          shift and go to state 873

state 943

    (286) for_factor_tail -> LT for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 991
    empty                          shift and go to state 873

state 944

    (287) for_factor_tail -> EQ_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 992
    empty                          shift and go to state 873

state 945

    (288) for_factor_tail -> GT_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 993
    empty                          shift and go to state 873

state 946

    (289) for_factor_tail -> LT_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 994
    empty                          shift and go to state 873

state 947

    (290) for_factor_tail -> NOT_EQ for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 995
    empty                          shift and go to state 873

state 948

    (291) for_factor_tail -> AND for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 996
    empty                          shift and go to state 873

state 949

    (292) for_factor_tail -> OR for_factor . for_factor_tail
    (279) for_factor_tail -> . PLUS for_factor for_factor_tail
    (280) for_factor_tail -> . MINUS for_factor for_factor_tail
    (281) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (282) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (283) for_factor_tail -> . MODULO for_factor for_factor_tail
    (284) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (285) for_factor_tail -> . GT for_factor for_factor_tail
    (286) for_factor_tail -> . LT for_factor for_factor_tail
    (287) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (288) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (289) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (290) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (291) for_factor_tail -> . AND for_factor for_factor_tail
    (292) for_factor_tail -> . OR for_factor for_factor_tail
    (293) for_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 859
    MINUS           shift and go to state 860
    MULTIPLY        shift and go to state 861
    DIVISION        shift and go to state 862
    MODULO          shift and go to state 863
    EXPONENT        shift and go to state 864
    GT              shift and go to state 865
    LT              shift and go to state 866
    EQ_EQ           shift and go to state 867
    GT_EQ           shift and go to state 868
    LT_EQ           shift and go to state 869
    NOT_EQ          shift and go to state 870
    AND             shift and go to state 871
    OR              shift and go to state 872
    SEMICOLON       reduce using rule 467 (empty -> .)

    for_factor_tail                shift and go to state 997
    empty                          shift and go to state 873

state 950

    (299) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .

    NEWLINE         reduce using rule 299 (until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .)


state 951

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression . RPAREN

    RPAREN          shift and go to state 998


state 952

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE . statements RBRACE RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 999
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 953

    (233) switch_condition -> SHIFT switch_value COLON . statements switchcond_tail
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SHIFT           reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 1000
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 954

    (263) switch_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 1001
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 955

    (242) switch_factor -> LPAREN switch_factor . RPAREN

    RPAREN          shift and go to state 1002


state 956

    (264) switch_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 1003
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 957

    (265) switch_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 1004
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 958

    (266) switch_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (437) typecast_value -> . typecast_expression
    (438) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (439) typecast_value -> . input_statement
    (440) typecast_expression -> . typecast_factor typecast_factor_tail
    (466) input_statement -> . INPUT LPAREN RPAREN
    (441) typecast_factor -> . var_call postfix
    (442) typecast_factor -> . typecast_factor1
    (443) typecast_factor -> . TILDE INT_LIT
    (444) typecast_factor -> . TILDE FLT_LIT
    (445) typecast_factor -> . LPAREN typecast_factor RPAREN
    (395) var_call -> . IDENT list_index
    (461) typecast_factor1 -> . INT_LIT
    (462) typecast_factor1 -> . FLT_LIT
    (463) typecast_factor1 -> . DAY
    (464) typecast_factor1 -> . NIGHT
    (465) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 507
    INPUT           shift and go to state 271
    TILDE           shift and go to state 512
    LPAREN          shift and go to state 504
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514
    DAY             shift and go to state 515
    NIGHT           shift and go to state 516
    STR_LIT         shift and go to state 517

    typecast_value                 shift and go to state 1005
    typecast_expression            shift and go to state 506
    input_statement                shift and go to state 508
    typecast_factor                shift and go to state 509
    var_call                       shift and go to state 510
    typecast_factor1               shift and go to state 511

state 959

    (237) switch_expression -> switch_factor switch_factor_tail .

    COLON           reduce using rule 237 (switch_expression -> switch_factor switch_factor_tail .)


state 960

    (243) switch_factor_tail -> PLUS . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1006
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 961

    (244) switch_factor_tail -> MINUS . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1007
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 962

    (245) switch_factor_tail -> MULTIPLY . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1008
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 963

    (246) switch_factor_tail -> DIVISION . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1009
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 964

    (247) switch_factor_tail -> MODULO . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1010
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 965

    (248) switch_factor_tail -> EXPONENT . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1011
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 966

    (249) switch_factor_tail -> GT . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1012
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 967

    (250) switch_factor_tail -> LT . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1013
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 968

    (251) switch_factor_tail -> EQ_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1014
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 969

    (252) switch_factor_tail -> GT_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1015
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 970

    (253) switch_factor_tail -> LT_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1016
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 971

    (254) switch_factor_tail -> NOT_EQ . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1017
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 972

    (255) switch_factor_tail -> AND . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1018
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 973

    (256) switch_factor_tail -> OR . switch_factor switch_factor_tail
    (238) switch_factor -> . var_call postfix
    (239) switch_factor -> . switch_factor1
    (240) switch_factor -> . TILDE INT_LIT
    (241) switch_factor -> . TILDE FLT_LIT
    (242) switch_factor -> . LPAREN switch_factor RPAREN
    (395) var_call -> . IDENT list_index
    (258) switch_factor1 -> . INT_LIT
    (259) switch_factor1 -> . FLT_LIT
    (260) switch_factor1 -> . DAY
    (261) switch_factor1 -> . NIGHT
    (262) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 923
    LPAREN          shift and go to state 916
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 924
    FLT_LIT         shift and go to state 925
    DAY             shift and go to state 926
    NIGHT           shift and go to state 927
    STR_LIT         shift and go to state 928

    switch_factor                  shift and go to state 1019
    var_call                       shift and go to state 921
    switch_factor1                 shift and go to state 922

state 974

    (257) switch_factor_tail -> empty .

    COLON           reduce using rule 257 (switch_factor_tail -> empty .)


state 975

    (238) switch_factor -> var_call postfix .

    PLUS            reduce using rule 238 (switch_factor -> var_call postfix .)
    MINUS           reduce using rule 238 (switch_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 238 (switch_factor -> var_call postfix .)
    DIVISION        reduce using rule 238 (switch_factor -> var_call postfix .)
    MODULO          reduce using rule 238 (switch_factor -> var_call postfix .)
    EXPONENT        reduce using rule 238 (switch_factor -> var_call postfix .)
    GT              reduce using rule 238 (switch_factor -> var_call postfix .)
    LT              reduce using rule 238 (switch_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 238 (switch_factor -> var_call postfix .)
    GT_EQ           reduce using rule 238 (switch_factor -> var_call postfix .)
    LT_EQ           reduce using rule 238 (switch_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 238 (switch_factor -> var_call postfix .)
    AND             reduce using rule 238 (switch_factor -> var_call postfix .)
    OR              reduce using rule 238 (switch_factor -> var_call postfix .)
    COLON           reduce using rule 238 (switch_factor -> var_call postfix .)
    RPAREN          reduce using rule 238 (switch_factor -> var_call postfix .)


state 976

    (240) switch_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    GT              reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    LT              reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    AND             reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    OR              reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    COLON           reduce using rule 240 (switch_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 240 (switch_factor -> TILDE INT_LIT .)


state 977

    (241) switch_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    COLON           reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 241 (switch_factor -> TILDE FLT_LIT .)


state 978

    (380) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA . splice_items RPAREN
    (393) splice_items -> . empty
    (394) splice_items -> . list_element
    (467) empty -> .
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 467 (empty -> .)
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    splice_items                   shift and go to state 1020
    empty                          shift and go to state 1021
    list_element                   shift and go to state 1022
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 979

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RBRACE          shift and go to state 1023


state 980

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 1024


state 981

    (330) update -> var_call update_tail .

    RPAREN          reduce using rule 330 (update -> var_call update_tail .)


state 982

    (331) update_tail -> postfix_op .

    RPAREN          reduce using rule 331 (update_tail -> postfix_op .)


state 983

    (332) update_tail -> compound_op . value
    (404) value -> . type_cast
    (405) value -> . value_expression
    (406) value -> . function_call
    (433) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (434) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (435) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (436) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (407) value_expression -> . value_factor value_factor_tail
    (335) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (336) function_call -> . input_statement
    (408) value_factor -> . var_call postfix
    (409) value_factor -> . value_factor1
    (410) value_factor -> . TILDE INT_LIT
    (411) value_factor -> . TILDE FLT_LIT
    (412) value_factor -> . LPAREN value_factor RPAREN
    (466) input_statement -> . INPUT LPAREN RPAREN
    (395) var_call -> . IDENT list_index
    (428) value_factor1 -> . INT_LIT
    (429) value_factor1 -> . FLT_LIT
    (430) value_factor1 -> . DAY
    (431) value_factor1 -> . NIGHT
    (432) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 400
    CONVERT_TO_FLT  shift and go to state 402
    CONVERT_TO_BLN  shift and go to state 403
    CONVERT_TO_STR  shift and go to state 404
    FUNCTION_NAME   shift and go to state 264
    TILDE           shift and go to state 408
    LPAREN          shift and go to state 401
    INPUT           shift and go to state 271
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 409
    FLT_LIT         shift and go to state 410
    DAY             shift and go to state 411
    NIGHT           shift and go to state 412
    STR_LIT         shift and go to state 413

    value                          shift and go to state 1025
    type_cast                      shift and go to state 397
    value_expression               shift and go to state 398
    function_call                  shift and go to state 399
    value_factor                   shift and go to state 405
    input_statement                shift and go to state 265
    var_call                       shift and go to state 406
    value_factor1                  shift and go to state 407

state 984

    (279) for_factor_tail -> PLUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 279 (for_factor_tail -> PLUS for_factor for_factor_tail .)


state 985

    (280) for_factor_tail -> MINUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 280 (for_factor_tail -> MINUS for_factor for_factor_tail .)


state 986

    (281) for_factor_tail -> MULTIPLY for_factor for_factor_tail .

    SEMICOLON       reduce using rule 281 (for_factor_tail -> MULTIPLY for_factor for_factor_tail .)


state 987

    (282) for_factor_tail -> DIVISION for_factor for_factor_tail .

    SEMICOLON       reduce using rule 282 (for_factor_tail -> DIVISION for_factor for_factor_tail .)


state 988

    (283) for_factor_tail -> MODULO for_factor for_factor_tail .

    SEMICOLON       reduce using rule 283 (for_factor_tail -> MODULO for_factor for_factor_tail .)


state 989

    (284) for_factor_tail -> EXPONENT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 284 (for_factor_tail -> EXPONENT for_factor for_factor_tail .)


state 990

    (285) for_factor_tail -> GT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 285 (for_factor_tail -> GT for_factor for_factor_tail .)


state 991

    (286) for_factor_tail -> LT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 286 (for_factor_tail -> LT for_factor for_factor_tail .)


state 992

    (287) for_factor_tail -> EQ_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 287 (for_factor_tail -> EQ_EQ for_factor for_factor_tail .)


state 993

    (288) for_factor_tail -> GT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 288 (for_factor_tail -> GT_EQ for_factor for_factor_tail .)


state 994

    (289) for_factor_tail -> LT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 289 (for_factor_tail -> LT_EQ for_factor for_factor_tail .)


state 995

    (290) for_factor_tail -> NOT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 290 (for_factor_tail -> NOT_EQ for_factor for_factor_tail .)


state 996

    (291) for_factor_tail -> AND for_factor for_factor_tail .

    SEMICOLON       reduce using rule 291 (for_factor_tail -> AND for_factor for_factor_tail .)


state 997

    (292) for_factor_tail -> OR for_factor for_factor_tail .

    SEMICOLON       reduce using rule 292 (for_factor_tail -> OR for_factor for_factor_tail .)


state 998

    (326) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .

    NEWLINE         reduce using rule 326 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .)


state 999

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements . RBRACE RBRACE

    RBRACE          shift and go to state 1026


state 1000

    (233) switch_condition -> SHIFT switch_value COLON statements . switchcond_tail
    (267) switchcond_tail -> . switch_condition
    (268) switchcond_tail -> . empty
    (233) switch_condition -> . SHIFT switch_value COLON statements switchcond_tail
    (467) empty -> .

    SHIFT           shift and go to state 819
    OTHERWISE       reduce using rule 467 (empty -> .)

    switchcond_tail                shift and go to state 1027
    switch_condition               shift and go to state 1028
    empty                          shift and go to state 1029

state 1001

    (263) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1030


state 1002

    (242) switch_factor -> LPAREN switch_factor RPAREN .

    PLUS            reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    MINUS           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    MULTIPLY        reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    DIVISION        reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    MODULO          reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    EXPONENT        reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT              reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT              reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    EQ_EQ           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT_EQ           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT_EQ           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    NOT_EQ          reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    AND             reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    OR              reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    COLON           reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)
    RPAREN          reduce using rule 242 (switch_factor -> LPAREN switch_factor RPAREN .)


state 1003

    (264) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1031


state 1004

    (265) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1032


state 1005

    (266) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1033


state 1006

    (243) switch_factor_tail -> PLUS switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1034
    empty                          shift and go to state 974

state 1007

    (244) switch_factor_tail -> MINUS switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1035
    empty                          shift and go to state 974

state 1008

    (245) switch_factor_tail -> MULTIPLY switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1036
    empty                          shift and go to state 974

state 1009

    (246) switch_factor_tail -> DIVISION switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1037
    empty                          shift and go to state 974

state 1010

    (247) switch_factor_tail -> MODULO switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1038
    empty                          shift and go to state 974

state 1011

    (248) switch_factor_tail -> EXPONENT switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1039
    empty                          shift and go to state 974

state 1012

    (249) switch_factor_tail -> GT switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1040
    empty                          shift and go to state 974

state 1013

    (250) switch_factor_tail -> LT switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1041
    empty                          shift and go to state 974

state 1014

    (251) switch_factor_tail -> EQ_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1042
    empty                          shift and go to state 974

state 1015

    (252) switch_factor_tail -> GT_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1043
    empty                          shift and go to state 974

state 1016

    (253) switch_factor_tail -> LT_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1044
    empty                          shift and go to state 974

state 1017

    (254) switch_factor_tail -> NOT_EQ switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1045
    empty                          shift and go to state 974

state 1018

    (255) switch_factor_tail -> AND switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1046
    empty                          shift and go to state 974

state 1019

    (256) switch_factor_tail -> OR switch_factor . switch_factor_tail
    (243) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (244) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (245) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (246) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (247) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (248) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (249) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (250) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (251) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (252) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (253) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (254) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (255) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (256) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (257) switch_factor_tail -> . empty
    (467) empty -> .

    PLUS            shift and go to state 960
    MINUS           shift and go to state 961
    MULTIPLY        shift and go to state 962
    DIVISION        shift and go to state 963
    MODULO          shift and go to state 964
    EXPONENT        shift and go to state 965
    GT              shift and go to state 966
    LT              shift and go to state 967
    EQ_EQ           shift and go to state 968
    GT_EQ           shift and go to state 969
    LT_EQ           shift and go to state 970
    NOT_EQ          shift and go to state 971
    AND             shift and go to state 972
    OR              shift and go to state 973
    COLON           reduce using rule 467 (empty -> .)

    switch_factor_tail             shift and go to state 1047
    empty                          shift and go to state 974

state 1020

    (380) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items . RPAREN

    RPAREN          shift and go to state 1048


state 1021

    (393) splice_items -> empty .

    RPAREN          reduce using rule 393 (splice_items -> empty .)


state 1022

    (394) splice_items -> list_element .

    RPAREN          reduce using rule 394 (splice_items -> list_element .)


state 1023

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    OTHERWISE_CHECK reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 1049
    empty                          shift and go to state 17

state 1024

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 1050
    empty                          shift and go to state 17

state 1025

    (332) update_tail -> compound_op value .

    RPAREN          reduce using rule 332 (update_tail -> compound_op value .)


state 1026

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE . RBRACE

    RBRACE          shift and go to state 1051


state 1027

    (233) switch_condition -> SHIFT switch_value COLON statements switchcond_tail .

    OTHERWISE       reduce using rule 233 (switch_condition -> SHIFT switch_value COLON statements switchcond_tail .)


state 1028

    (267) switchcond_tail -> switch_condition .

    OTHERWISE       reduce using rule 267 (switchcond_tail -> switch_condition .)


state 1029

    (268) switchcond_tail -> empty .

    OTHERWISE       reduce using rule 268 (switchcond_tail -> empty .)


state 1030

    (263) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 263 (switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 1031

    (264) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 264 (switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 1032

    (265) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COLON           reduce using rule 265 (switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 1033

    (266) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COLON           reduce using rule 266 (switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 1034

    (243) switch_factor_tail -> PLUS switch_factor switch_factor_tail .

    COLON           reduce using rule 243 (switch_factor_tail -> PLUS switch_factor switch_factor_tail .)


state 1035

    (244) switch_factor_tail -> MINUS switch_factor switch_factor_tail .

    COLON           reduce using rule 244 (switch_factor_tail -> MINUS switch_factor switch_factor_tail .)


state 1036

    (245) switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .

    COLON           reduce using rule 245 (switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .)


state 1037

    (246) switch_factor_tail -> DIVISION switch_factor switch_factor_tail .

    COLON           reduce using rule 246 (switch_factor_tail -> DIVISION switch_factor switch_factor_tail .)


state 1038

    (247) switch_factor_tail -> MODULO switch_factor switch_factor_tail .

    COLON           reduce using rule 247 (switch_factor_tail -> MODULO switch_factor switch_factor_tail .)


state 1039

    (248) switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .

    COLON           reduce using rule 248 (switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .)


state 1040

    (249) switch_factor_tail -> GT switch_factor switch_factor_tail .

    COLON           reduce using rule 249 (switch_factor_tail -> GT switch_factor switch_factor_tail .)


state 1041

    (250) switch_factor_tail -> LT switch_factor switch_factor_tail .

    COLON           reduce using rule 250 (switch_factor_tail -> LT switch_factor switch_factor_tail .)


state 1042

    (251) switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 251 (switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .)


state 1043

    (252) switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 252 (switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .)


state 1044

    (253) switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 253 (switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .)


state 1045

    (254) switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 254 (switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .)


state 1046

    (255) switch_factor_tail -> AND switch_factor switch_factor_tail .

    COLON           reduce using rule 255 (switch_factor_tail -> AND switch_factor switch_factor_tail .)


state 1047

    (256) switch_factor_tail -> OR switch_factor switch_factor_tail .

    COLON           reduce using rule 256 (switch_factor_tail -> OR switch_factor switch_factor_tail .)


state 1048

    (380) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .

    NEWLINE         reduce using rule 380 (assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .)


state 1049

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (204) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (205) conditional_tail -> . empty
    (467) empty -> .

    OTHERWISE_CHECK shift and go to state 1053
    NEWLINE         reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    conditional_tail               shift and go to state 1052
    empty                          shift and go to state 1054

state 1050

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 1055
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 1051

    (232) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE .

    NEWLINE         reduce using rule 232 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE .)


state 1052

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail . maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    OTHERWISE       reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 1056
    empty                          shift and go to state 17

state 1053

    (204) conditional_tail -> OTHERWISE_CHECK . LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail

    LPAREN          shift and go to state 1057


state 1054

    (205) conditional_tail -> empty .

    NEWLINE         reduce using rule 205 (conditional_tail -> empty .)
    OTHERWISE       reduce using rule 205 (conditional_tail -> empty .)


state 1055

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 1058
    empty                          shift and go to state 17

state 1056

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline . OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    OTHERWISE       shift and go to state 1059


state 1057

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN . condition RPAREN LBRACE statements RBRACE conditional_tail
    (206) condition -> . condition_factor condition_tail
    (207) condition_factor -> . var_call postfix
    (208) condition_factor -> . condition1
    (209) condition_factor -> . TILDE INT_LIT
    (210) condition_factor -> . TILDE FLT_LIT
    (211) condition_factor -> . LPAREN condition RPAREN
    (395) var_call -> . IDENT list_index
    (227) condition1 -> . INT_LIT
    (228) condition1 -> . FLT_LIT
    (229) condition1 -> . DAY
    (230) condition1 -> . NIGHT
    (231) condition1 -> . STR_LIT

    TILDE           shift and go to state 451
    LPAREN          shift and go to state 446
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 452
    FLT_LIT         shift and go to state 453
    DAY             shift and go to state 454
    NIGHT           shift and go to state 455
    STR_LIT         shift and go to state 456

    condition                      shift and go to state 1060
    condition_factor               shift and go to state 448
    var_call                       shift and go to state 449
    condition1                     shift and go to state 450

state 1058

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 1061


state 1059

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 1062
    empty                          shift and go to state 17

state 1060

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition . RPAREN LBRACE statements RBRACE conditional_tail

    RPAREN          shift and go to state 1063


state 1061

    (272) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 272 (for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .)


state 1062

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 1064


state 1063

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN . LBRACE statements RBRACE conditional_tail

    LBRACE          shift and go to state 1065


state 1064

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 467 (empty -> .)
    FLT             reduce using rule 467 (empty -> .)
    BLN             reduce using rule 467 (empty -> .)
    CHR             reduce using rule 467 (empty -> .)
    STR             reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)

  ! NEWLINE         [ reduce using rule 467 (empty -> .) ]

    maybe_newline                  shift and go to state 1066
    empty                          shift and go to state 17

state 1065

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE . statements RBRACE conditional_tail
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 467 (empty -> .)
    NEWLINE         reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 1067
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 1066

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (467) empty -> .
    (151) local_dec -> . local_var_statement unli_newline local_dec_tail
    (152) local_dec -> . empty
    (153) local_var_statement -> . local_data_type IDENT local_list_dec
    (154) local_data_type -> . INT
    (155) local_data_type -> . FLT
    (156) local_data_type -> . BLN
    (157) local_data_type -> . CHR
    (158) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 467 (empty -> .)
    RBRACE          reduce using rule 467 (empty -> .)
    SWAP            reduce using rule 467 (empty -> .)
    FUNCTION_NAME   reduce using rule 467 (empty -> .)
    IDENT           reduce using rule 467 (empty -> .)
    DISPLAY         reduce using rule 467 (empty -> .)
    CHECK           reduce using rule 467 (empty -> .)
    FOR             reduce using rule 467 (empty -> .)
    UNTIL           reduce using rule 467 (empty -> .)
    REPEAT          reduce using rule 467 (empty -> .)
    INPUT           reduce using rule 467 (empty -> .)
    INT             shift and go to state 235
    FLT             shift and go to state 236
    BLN             shift and go to state 237
    CHR             shift and go to state 238
    STR             shift and go to state 239

  ! INT             [ reduce using rule 467 (empty -> .) ]
  ! FLT             [ reduce using rule 467 (empty -> .) ]
  ! BLN             [ reduce using rule 467 (empty -> .) ]
  ! CHR             [ reduce using rule 467 (empty -> .) ]
  ! STR             [ reduce using rule 467 (empty -> .) ]

    statements                     shift and go to state 1068
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    local_var_statement            shift and go to state 233
    local_data_type                shift and go to state 234

state 1067

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements . RBRACE conditional_tail

    RBRACE          shift and go to state 1069


state 1068

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (467) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 467 (empty -> .)

    maybe_newline                  shift and go to state 1070
    empty                          shift and go to state 17

state 1069

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE . conditional_tail
    (204) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (205) conditional_tail -> . empty
    (467) empty -> .

    OTHERWISE_CHECK shift and go to state 1053
    NEWLINE         reduce using rule 467 (empty -> .)
    OTHERWISE       reduce using rule 467 (empty -> .)

    conditional_tail               shift and go to state 1071
    empty                          shift and go to state 1054

state 1070

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 1072


state 1071

    (204) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .

    NEWLINE         reduce using rule 204 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    OTHERWISE       reduce using rule 204 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)


state 1072

    (203) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 203 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 18 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 220 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 225 resolved as shift
WARNING: shift/reduce conflict for INT in state 226 resolved as shift
WARNING: shift/reduce conflict for FLT in state 226 resolved as shift
WARNING: shift/reduce conflict for BLN in state 226 resolved as shift
WARNING: shift/reduce conflict for CHR in state 226 resolved as shift
WARNING: shift/reduce conflict for STR in state 226 resolved as shift
WARNING: shift/reduce conflict for INT in state 229 resolved as shift
WARNING: shift/reduce conflict for FLT in state 229 resolved as shift
WARNING: shift/reduce conflict for BLN in state 229 resolved as shift
WARNING: shift/reduce conflict for CHR in state 229 resolved as shift
WARNING: shift/reduce conflict for STR in state 229 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 230 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 232 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 243 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 243 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 243 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 243 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 243 resolved as shift
WARNING: shift/reduce conflict for FOR in state 243 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 243 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 243 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 243 resolved as shift
WARNING: shift/reduce conflict for INT in state 243 resolved as shift
WARNING: shift/reduce conflict for FLT in state 243 resolved as shift
WARNING: shift/reduce conflict for BLN in state 243 resolved as shift
WARNING: shift/reduce conflict for CHR in state 243 resolved as shift
WARNING: shift/reduce conflict for STR in state 243 resolved as shift
WARNING: shift/reduce conflict for INT in state 299 resolved as shift
WARNING: shift/reduce conflict for FLT in state 299 resolved as shift
WARNING: shift/reduce conflict for BLN in state 299 resolved as shift
WARNING: shift/reduce conflict for CHR in state 299 resolved as shift
WARNING: shift/reduce conflict for STR in state 299 resolved as shift
WARNING: shift/reduce conflict for INT in state 300 resolved as shift
WARNING: shift/reduce conflict for FLT in state 300 resolved as shift
WARNING: shift/reduce conflict for BLN in state 300 resolved as shift
WARNING: shift/reduce conflict for CHR in state 300 resolved as shift
WARNING: shift/reduce conflict for STR in state 300 resolved as shift
WARNING: shift/reduce conflict for INT in state 301 resolved as shift
WARNING: shift/reduce conflict for FLT in state 301 resolved as shift
WARNING: shift/reduce conflict for BLN in state 301 resolved as shift
WARNING: shift/reduce conflict for CHR in state 301 resolved as shift
WARNING: shift/reduce conflict for STR in state 301 resolved as shift
WARNING: shift/reduce conflict for INT in state 302 resolved as shift
WARNING: shift/reduce conflict for FLT in state 302 resolved as shift
WARNING: shift/reduce conflict for BLN in state 302 resolved as shift
WARNING: shift/reduce conflict for CHR in state 302 resolved as shift
WARNING: shift/reduce conflict for STR in state 302 resolved as shift
WARNING: shift/reduce conflict for INT in state 303 resolved as shift
WARNING: shift/reduce conflict for FLT in state 303 resolved as shift
WARNING: shift/reduce conflict for BLN in state 303 resolved as shift
WARNING: shift/reduce conflict for CHR in state 303 resolved as shift
WARNING: shift/reduce conflict for STR in state 303 resolved as shift
WARNING: shift/reduce conflict for INT in state 304 resolved as shift
WARNING: shift/reduce conflict for FLT in state 304 resolved as shift
WARNING: shift/reduce conflict for BLN in state 304 resolved as shift
WARNING: shift/reduce conflict for CHR in state 304 resolved as shift
WARNING: shift/reduce conflict for STR in state 304 resolved as shift
WARNING: shift/reduce conflict for INT in state 338 resolved as shift
WARNING: shift/reduce conflict for FLT in state 338 resolved as shift
WARNING: shift/reduce conflict for BLN in state 338 resolved as shift
WARNING: shift/reduce conflict for CHR in state 338 resolved as shift
WARNING: shift/reduce conflict for STR in state 338 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 739 resolved as shift
WARNING: shift/reduce conflict for INT in state 767 resolved as shift
WARNING: shift/reduce conflict for FLT in state 767 resolved as shift
WARNING: shift/reduce conflict for BLN in state 767 resolved as shift
WARNING: shift/reduce conflict for CHR in state 767 resolved as shift
WARNING: shift/reduce conflict for STR in state 767 resolved as shift
WARNING: shift/reduce conflict for INT in state 841 resolved as shift
WARNING: shift/reduce conflict for FLT in state 841 resolved as shift
WARNING: shift/reduce conflict for BLN in state 841 resolved as shift
WARNING: shift/reduce conflict for CHR in state 841 resolved as shift
WARNING: shift/reduce conflict for STR in state 841 resolved as shift
WARNING: shift/reduce conflict for INT in state 952 resolved as shift
WARNING: shift/reduce conflict for FLT in state 952 resolved as shift
WARNING: shift/reduce conflict for BLN in state 952 resolved as shift
WARNING: shift/reduce conflict for CHR in state 952 resolved as shift
WARNING: shift/reduce conflict for STR in state 952 resolved as shift
WARNING: shift/reduce conflict for INT in state 953 resolved as shift
WARNING: shift/reduce conflict for FLT in state 953 resolved as shift
WARNING: shift/reduce conflict for BLN in state 953 resolved as shift
WARNING: shift/reduce conflict for CHR in state 953 resolved as shift
WARNING: shift/reduce conflict for STR in state 953 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1023 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1024 resolved as shift
WARNING: shift/reduce conflict for INT in state 1050 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1050 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1050 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1050 resolved as shift
WARNING: shift/reduce conflict for STR in state 1050 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1064 resolved as shift
WARNING: shift/reduce conflict for INT in state 1065 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1065 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1065 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1065 resolved as shift
WARNING: shift/reduce conflict for STR in state 1065 resolved as shift
WARNING: shift/reduce conflict for INT in state 1066 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1066 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1066 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1066 resolved as shift
WARNING: shift/reduce conflict for STR in state 1066 resolved as shift
WARNING: reduce/reduce conflict in state 231 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 231
WARNING: reduce/reduce conflict in state 655 resolved using rule (function_statements -> empty)
WARNING: rejected rule (function_statements_tail -> empty) in state 655
WARNING: Rule (function_statements_tail -> empty) is never reduced
