Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLN_LIT
    CARRIAGE_RETURN
    COMMENT
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    ILLEGAL
    IN
    LIST_BLN
    LIST_BLN2D
    LIST_CHR
    LIST_CHR2D
    LIST_FLT
    LIST_FLT2D
    LIST_INT
    LIST_INT2D
    LIST_STR
    LIST_STR2D
    MEASURE
    NOT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
Rule 2     maybe_newline -> empty
Rule 3     maybe_newline -> NEWLINE maybe_newline
Rule 4     unli_newline -> NEWLINE
Rule 5     unli_newline -> NEWLINE unli_newline
Rule 6     main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 7     global_dec -> global_statement unli_newline global_tail
Rule 8     global_dec -> empty
Rule 9     global_tail -> global_dec
Rule 10    global_statement -> data_type IDENT global_statement_tail
Rule 11    global_statement_tail -> empty
Rule 12    global_statement_tail -> COMMA IDENT global_statement_tail
Rule 13    global_statement_tail -> EQ global_dec_value global_tail2
Rule 14    global_tail2 -> empty
Rule 15    global_tail2 -> COMMA IDENT global_statement_tail
Rule 16    global_dec_value -> global_value
Rule 17    global_dec_value -> LBRACKET list_element RBRACKET
Rule 18    global_value -> expression
Rule 19    var_statement -> data_type IDENT var_tail unli_newline
Rule 20    var_tail -> empty
Rule 21    var_tail -> EQ tail_value var_tail2
Rule 22    var_tail -> COMMA IDENT var_tail
Rule 23    var_tail2 -> empty
Rule 24    var_tail2 -> COMMA IDENT var_tail
Rule 25    tail_value -> value
Rule 26    tail_value -> LBRACKET list_element RBRACKET
Rule 27    list_element -> literal element_tail
Rule 28    element_tail -> empty
Rule 29    element_tail -> COMMA list_element
Rule 30    index -> INT_LIT
Rule 31    index -> IDENT
Rule 32    data_type -> INT
Rule 33    data_type -> FLT
Rule 34    data_type -> BLN
Rule 35    data_type -> CHR
Rule 36    data_type -> STR
Rule 37    value -> type_cast
Rule 38    value -> expression
Rule 39    value -> function_call
Rule 40    type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 41    type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 42    type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 43    type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 44    typecast_value -> expression
Rule 45    typecast_value -> FUNCTION_NAME LPAREN RPAREN
Rule 46    typecast_value -> input_statement
Rule 47    literal -> INT_LIT
Rule 48    literal -> FLT_LIT
Rule 49    literal -> DAY
Rule 50    literal -> NIGHT
Rule 51    literal -> CHR_LIT
Rule 52    literal -> STR_LIT
Rule 53    expression -> factor factor_tail
Rule 54    factor -> var_call
Rule 55    factor -> literal
Rule 56    factor -> TILDE literal
Rule 57    factor -> LPAREN expression RPAREN
Rule 58    factor_tail -> empty
Rule 59    factor_tail -> PLUS expression
Rule 60    factor_tail -> MINUS expression
Rule 61    factor_tail -> MULTIPLY expression
Rule 62    factor_tail -> DIVISION expression
Rule 63    factor_tail -> MODULO expression
Rule 64    factor_tail -> EXPONENT expression
Rule 65    factor_tail -> GT expression
Rule 66    factor_tail -> LT expression
Rule 67    factor_tail -> EQ_EQ expression
Rule 68    factor_tail -> GT_EQ expression
Rule 69    factor_tail -> LT_EQ expression
Rule 70    factor_tail -> NOT_EQ expression
Rule 71    factor_tail -> AND expression
Rule 72    factor_tail -> OR expression
Rule 73    var_call -> IDENT var_call_tail
Rule 74    var_call_tail -> empty
Rule 75    var_call_tail -> LBRACKET index RBRACKET
Rule 76    function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
Rule 77    function_statements -> empty
Rule 78    function_statements_tail -> function_statements
Rule 79    function_statements_tail -> empty
Rule 80    ret_type -> FUNCTION
Rule 81    ret_type -> function_dtype
Rule 82    function_dtype -> FUNCTION_INT
Rule 83    function_dtype -> FUNCTION_FLT
Rule 84    function_dtype -> FUNCTION_CHR
Rule 85    function_dtype -> FUNCTION_BLN
Rule 86    function_dtype -> FUNCTION_STR
Rule 87    function_dtype -> FUNCTION_LIST_INT
Rule 88    function_dtype -> FUNCTION_LIST_FLT
Rule 89    function_dtype -> FUNCTION_LIST_CHR
Rule 90    function_dtype -> FUNCTION_LIST_STR
Rule 91    function_dtype -> FUNCTION_LIST_BLN
Rule 92    parameters -> data_type IDENT parameters_tail
Rule 93    parameters -> empty
Rule 94    parameters_tail -> empty
Rule 95    parameters_tail -> COMMA data_type IDENT parameters_tail
Rule 96    revive -> REVIVE value
Rule 97    revive -> empty
Rule 98    statements -> empty
Rule 99    statements -> local_dec maybe_newline statements_tail
Rule 100   statements_tail -> string_operation_statement unli_newline statements
Rule 101   statements_tail -> conditional_statement unli_newline statements
Rule 102   statements_tail -> switch_statement unli_newline statements
Rule 103   statements_tail -> loop_statement unli_newline statements
Rule 104   statements_tail -> function_call unli_newline statements
Rule 105   statements_tail -> output_statement unli_newline statements
Rule 106   statements_tail -> statements
Rule 107   local_dec -> empty
Rule 108   local_dec -> var_statement
Rule 109   conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
Rule 110   conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail
Rule 111   conditional_tail -> empty
Rule 112   condition -> arithmetic_expression condition_tail
Rule 113   condition_tail -> condition_op arithmetic_expression condition_tail
Rule 114   condition_tail -> empty
Rule 115   condition_op -> AND
Rule 116   condition_op -> OR
Rule 117   condition_op -> EQ_EQ
Rule 118   condition_op -> NOT_EQ
Rule 119   condition_op -> LT
Rule 120   condition_op -> GT
Rule 121   condition_op -> LT_EQ
Rule 122   condition_op -> GT_EQ
Rule 123   arithmetic_expression -> arith_term arith_tail
Rule 124   arith_term -> cond_literal
Rule 125   arith_term -> var_call
Rule 126   arith_tail -> empty
Rule 127   arith_tail -> arith_op arithmetic_expression
Rule 128   arith_op -> PLUS
Rule 129   arith_op -> MINUS
Rule 130   arith_op -> MULTIPLY
Rule 131   arith_op -> DIVISION
Rule 132   arith_op -> MODULO
Rule 133   cond_literal -> INT_LIT
Rule 134   cond_literal -> FLT_LIT
Rule 135   cond_literal -> DAY
Rule 136   cond_literal -> NIGHT
Rule 137   cond_literal -> CHR_LIT
Rule 138   cond_literal -> STR_LIT
Rule 139   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
Rule 140   switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail
Rule 141   switchcond_tail -> empty
Rule 142   switchcond_tail -> switch_condition
Rule 143   loop_statement -> for_loop
Rule 144   loop_statement -> until_loop
Rule 145   loop_statement -> repeat_until
Rule 146   for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE
Rule 147   for_loop_condition -> for_loop_arithmetic_expression for_loop_condition_tail
Rule 148   for_loop_condition_tail -> for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail
Rule 149   for_loop_condition_tail -> empty
Rule 150   for_loop_condition_op -> AND
Rule 151   for_loop_condition_op -> OR
Rule 152   for_loop_condition_op -> EQ_EQ
Rule 153   for_loop_condition_op -> NOT_EQ
Rule 154   for_loop_condition_op -> LT
Rule 155   for_loop_condition_op -> GT
Rule 156   for_loop_condition_op -> LT_EQ
Rule 157   for_loop_condition_op -> GT_EQ
Rule 158   for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail
Rule 159   for_loop_arith_term -> for_loop_literal
Rule 160   for_loop_arith_term -> var_call
Rule 161   for_loop_arith_tail -> empty
Rule 162   for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression
Rule 163   for_loop_arith_op -> PLUS
Rule 164   for_loop_arith_op -> MINUS
Rule 165   for_loop_arith_op -> MULTIPLY
Rule 166   for_loop_arith_op -> DIVISION
Rule 167   for_loop_arith_op -> MODULO
Rule 168   for_loop_literal -> INT_LIT
Rule 169   for_loop_literal -> FLT_LIT
Rule 170   for_loop_literal -> DAY
Rule 171   for_loop_literal -> NIGHT
Rule 172   for_loop_literal -> CHR_LIT
Rule 173   for_loop_literal -> STR_LIT
Rule 174   until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE
Rule 175   repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN
Rule 176   until_loop_condition -> until_loop_arithmetic_expression until_loop_condition_tail
Rule 177   until_loop_condition_tail -> until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail
Rule 178   until_loop_condition_tail -> empty
Rule 179   until_loop_condition_op -> AND
Rule 180   until_loop_condition_op -> OR
Rule 181   until_loop_condition_op -> EQ_EQ
Rule 182   until_loop_condition_op -> NOT_EQ
Rule 183   until_loop_condition_op -> LT
Rule 184   until_loop_condition_op -> GT
Rule 185   until_loop_condition_op -> LT_EQ
Rule 186   until_loop_condition_op -> GT_EQ
Rule 187   until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail
Rule 188   until_loop_arith_term -> until_loop_literal
Rule 189   until_loop_arith_term -> var_call
Rule 190   until_loop_arith_tail -> empty
Rule 191   until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression
Rule 192   until_loop_arith_op -> PLUS
Rule 193   until_loop_arith_op -> MINUS
Rule 194   until_loop_arith_op -> MULTIPLY
Rule 195   until_loop_arith_op -> DIVISION
Rule 196   until_loop_arith_op -> MODULO
Rule 197   until_loop_literal -> INT_LIT
Rule 198   until_loop_literal -> FLT_LIT
Rule 199   until_loop_literal -> DAY
Rule 200   until_loop_literal -> NIGHT
Rule 201   until_loop_literal -> CHR_LIT
Rule 202   until_loop_literal -> STR_LIT
Rule 203   control_variable -> INT IDENT EQ INT_LIT
Rule 204   update -> var_call update_tail
Rule 205   update_tail -> postfix
Rule 206   update_tail -> assign_op value
Rule 207   postfix -> PLUS_PLUS
Rule 208   postfix -> MINUS_MINUS
Rule 209   function_call -> FUNCTION_NAME LPAREN arguments RPAREN
Rule 210   function_call -> output_statement
Rule 211   arguments -> empty
Rule 212   arguments -> arg_value arg_tail
Rule 213   arg_tail -> empty
Rule 214   arg_tail -> COMMA arg_value arg_tail
Rule 215   arg_value -> literal
Rule 216   arg_value -> var_call
Rule 217   output_statement -> DISPLAY value next_val
Rule 218   output_statement -> DISPLAY LPAREN value next_val RPAREN
Rule 219   next_val -> empty
Rule 220   next_val -> COMMA value next_val
Rule 221   input_statement -> INPUT LPAREN RPAREN
Rule 222   string_operation_statement -> var_call string_operation_tail
Rule 223   string_operation_tail -> PLUS string_val stringcon_tail
Rule 224   string_operation_tail -> update_tail
Rule 225   assign_op -> PLUS_EQ
Rule 226   assign_op -> MINUS_EQ
Rule 227   assign_op -> MUL_EQ
Rule 228   assign_op -> DIV_EQ
Rule 229   assign_op -> MOD_EQ
Rule 230   assign_op -> EQ
Rule 231   stringcon_tail -> empty
Rule 232   stringcon_tail -> PLUS string_val stringcon_tail
Rule 233   string_val -> var_call
Rule 234   string_val -> STR_LIT
Rule 235   empty -> <empty>

Terminals, with rules where they appear

AND                  : 71 115 150 179
BIRTH                : 1
BLN                  : 34
BLN_LIT              : 
CARRIAGE_RETURN      : 
CHECK                : 109
CHR                  : 35
CHR_LIT              : 51 137 172 201
COLON                : 140
COMMA                : 12 15 22 24 29 95 214 220
COMMENT              : 
CONVERT_TO_BLN       : 42
CONVERT_TO_FLT       : 41
CONVERT_TO_INT       : 40
CONVERT_TO_STR       : 43
DAY                  : 49 135 170 199
DISPLAY              : 217 218
DIVISION             : 62 131 166 195
DIV_EQ               : 228
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 13 21 203 230
EQ_EQ                : 67 117 152 181
EXPONENT             : 64
FLT                  : 33
FLT_LIT              : 48 134 169 198
FOR                  : 146
FUNCTION             : 80
FUNCTION_BLN         : 85
FUNCTION_CHR         : 84
FUNCTION_FLT         : 83
FUNCTION_INT         : 82
FUNCTION_LIST_BLN    : 91
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 89
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 88
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 87
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 90
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 45 76 209
FUNCTION_STR         : 86
GHOST                : 1
GT                   : 65 120 155 184
GT_EQ                : 68 122 157 186
IDENT                : 10 12 15 19 22 24 31 73 92 95 139 203
ILLEGAL              : 
IN                   : 
INPUT                : 221
INT                  : 32 203
INT_LIT              : 30 47 133 168 197 203
LBRACE               : 6 76 109 109 110 139 139 146 174 175
LBRACKET             : 17 26 75
LIST_BLN             : 
LIST_BLN2D           : 
LIST_CHR             : 
LIST_CHR2D           : 
LIST_FLT             : 
LIST_FLT2D           : 
LIST_INT             : 
LIST_INT2D           : 
LIST_STR             : 
LIST_STR2D           : 
LPAREN               : 6 40 41 42 43 45 57 76 109 110 139 146 174 175 209 218 221
LT                   : 66 119 154 183
LT_EQ                : 69 121 156 185
MAIN_CASPER          : 6
MEASURE              : 
MINUS                : 60 129 164 193
MINUS_EQ             : 226
MINUS_MINUS          : 208
MODULO               : 63 132 167 196
MOD_EQ               : 229
MULTIPLY             : 61 130 165 194
MUL_EQ               : 227
NEWLINE              : 3 4 5
NIGHT                : 50 136 171 200
NOT                  : 
NOT_EQ               : 70 118 153 182
OR                   : 72 116 151 180
OTHERWISE            : 109 139
OTHERWISE_CHECK      : 110
PLUS                 : 59 128 163 192 223 232
PLUS_EQ              : 225
PLUS_PLUS            : 207
POW                  : 
RBRACE               : 6 76 109 109 110 139 139 146 174 175
RBRACKET             : 17 26 75
REPEAT               : 175
REVIVE               : 96
RPAREN               : 6 40 41 42 43 45 57 76 109 110 139 146 174 175 209 218 221
SEMICOLON            : 146 146
SHIFT                : 140
SKIP                 : 
STOP                 : 
STR                  : 36
STR_LIT              : 52 138 173 202 234
SWAP                 : 139
TILDE                : 56
TYPE                 : 
UNTIL                : 174 175
error                : 

Nonterminals, with rules where they appear

arg_tail             : 212 214
arg_value            : 212 214
arguments            : 209
arith_op             : 127
arith_tail           : 123
arith_term           : 123
arithmetic_expression : 112 113 127
assign_op            : 206
cond_literal         : 124
condition            : 109 110
condition_op         : 113
condition_tail       : 112 113
conditional_statement : 101
conditional_tail     : 109 110
control_variable     : 146
data_type            : 10 19 92 95
element_tail         : 27
empty                : 2 8 11 14 20 23 28 58 74 77 79 93 94 97 98 107 111 114 126 141 149 161 178 190 211 213 219 231
expression           : 18 38 44 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72
factor               : 53
factor_tail          : 53
for_loop             : 143
for_loop_arith_op    : 162
for_loop_arith_tail  : 158
for_loop_arith_term  : 158
for_loop_arithmetic_expression : 147 148 162
for_loop_condition   : 146
for_loop_condition_op : 148
for_loop_condition_tail : 147 148
for_loop_literal     : 159
function_call        : 39 104
function_dtype       : 81
function_statements  : 1 78
function_statements_tail : 76
global_dec           : 1 9
global_dec_value     : 13
global_statement     : 7
global_statement_tail : 10 12 15
global_tail          : 7
global_tail2         : 13
global_value         : 16
index                : 75
input_statement      : 46
list_element         : 17 26 29
literal              : 27 55 56 215
local_dec            : 99
loop_statement       : 103
main_function        : 1
maybe_newline        : 1 1 3 6 6 6 76 76 99 109 109 109 109 109 110 110 110 139 139 139 139 139 139 140 146 146 174 175
next_val             : 217 218 220
output_statement     : 105 210
parameters           : 76
parameters_tail      : 92 95
postfix              : 205
program              : 0
repeat_until         : 145
ret_type             : 76
revive               : 76
statements           : 6 76 100 101 102 103 104 105 106 109 109 110 139 140 146 174 175
statements_tail      : 99
string_operation_statement : 100
string_operation_tail : 222
string_val           : 223 232
stringcon_tail       : 223 232
switch_condition     : 139 142
switch_statement     : 102
switchcond_tail      : 140
tail_value           : 21
type_cast            : 37
typecast_value       : 40 41 42 43
unli_newline         : 1 1 5 7 19 76 100 101 102 103 104 105
until_loop           : 144
until_loop_arith_op  : 191
until_loop_arith_tail : 187
until_loop_arith_term : 187
until_loop_arithmetic_expression : 176 177 191
until_loop_condition : 174 175
until_loop_condition_op : 177
until_loop_condition_tail : 176 177
until_loop_literal   : 188
update               : 146
update_tail          : 204 224
value                : 25 96 140 206 217 218 220
var_call             : 54 125 160 189 204 216 222 233
var_call_tail        : 73
var_statement        : 108
var_tail             : 19 22 24
var_tail2            : 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 3

state 3

    (1) program -> BIRTH unli_newline . global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . data_type IDENT global_statement_tail
    (235) empty -> .
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

    NEWLINE         reduce using rule 235 (empty -> .)
    FUNCTION        reduce using rule 235 (empty -> .)
    FUNCTION_INT    reduce using rule 235 (empty -> .)
    FUNCTION_FLT    reduce using rule 235 (empty -> .)
    FUNCTION_CHR    reduce using rule 235 (empty -> .)
    FUNCTION_BLN    reduce using rule 235 (empty -> .)
    FUNCTION_STR    reduce using rule 235 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 235 (empty -> .)
    MAIN_CASPER     reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

    global_dec                     shift and go to state 5
    global_statement               shift and go to state 6
    empty                          shift and go to state 7
    data_type                      shift and go to state 8

state 4

    (4) unli_newline -> NEWLINE .
    (5) unli_newline -> NEWLINE . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    INT             reduce using rule 4 (unli_newline -> NEWLINE .)
    FLT             reduce using rule 4 (unli_newline -> NEWLINE .)
    BLN             reduce using rule 4 (unli_newline -> NEWLINE .)
    CHR             reduce using rule 4 (unli_newline -> NEWLINE .)
    STR             reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION        reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_INT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_FLT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_CHR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_BLN    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_STR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_INT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_FLT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_CHR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_STR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_BLN reduce using rule 4 (unli_newline -> NEWLINE .)
    MAIN_CASPER     reduce using rule 4 (unli_newline -> NEWLINE .)
    GHOST           reduce using rule 4 (unli_newline -> NEWLINE .)
    CHECK           reduce using rule 4 (unli_newline -> NEWLINE .)
    SWAP            reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_NAME   reduce using rule 4 (unli_newline -> NEWLINE .)
    DISPLAY         reduce using rule 4 (unli_newline -> NEWLINE .)
    IDENT           reduce using rule 4 (unli_newline -> NEWLINE .)
    FOR             reduce using rule 4 (unli_newline -> NEWLINE .)
    UNTIL           reduce using rule 4 (unli_newline -> NEWLINE .)
    REPEAT          reduce using rule 4 (unli_newline -> NEWLINE .)
    REVIVE          reduce using rule 4 (unli_newline -> NEWLINE .)
    RBRACE          reduce using rule 4 (unli_newline -> NEWLINE .)
    SHIFT           reduce using rule 4 (unli_newline -> NEWLINE .)
    OTHERWISE       reduce using rule 4 (unli_newline -> NEWLINE .)
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 4 (unli_newline -> NEWLINE .) ]

    unli_newline                   shift and go to state 14

state 5

    (1) program -> BIRTH unli_newline global_dec . maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    FUNCTION        reduce using rule 235 (empty -> .)
    FUNCTION_INT    reduce using rule 235 (empty -> .)
    FUNCTION_FLT    reduce using rule 235 (empty -> .)
    FUNCTION_CHR    reduce using rule 235 (empty -> .)
    FUNCTION_BLN    reduce using rule 235 (empty -> .)
    FUNCTION_STR    reduce using rule 235 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 235 (empty -> .)
    MAIN_CASPER     reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 15
    empty                          shift and go to state 16

state 6

    (7) global_dec -> global_statement . unli_newline global_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 18

state 7

    (8) global_dec -> empty .

    NEWLINE         reduce using rule 8 (global_dec -> empty .)
    FUNCTION        reduce using rule 8 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 8 (global_dec -> empty .)
    MAIN_CASPER     reduce using rule 8 (global_dec -> empty .)


state 8

    (10) global_statement -> data_type . IDENT global_statement_tail

    IDENT           shift and go to state 19


state 9

    (32) data_type -> INT .

    IDENT           reduce using rule 32 (data_type -> INT .)


state 10

    (33) data_type -> FLT .

    IDENT           reduce using rule 33 (data_type -> FLT .)


state 11

    (34) data_type -> BLN .

    IDENT           reduce using rule 34 (data_type -> BLN .)


state 12

    (35) data_type -> CHR .

    IDENT           reduce using rule 35 (data_type -> CHR .)


state 13

    (36) data_type -> STR .

    IDENT           reduce using rule 36 (data_type -> STR .)


state 14

    (5) unli_newline -> NEWLINE unli_newline .

    INT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FLT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    BLN             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    STR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    NEWLINE         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION        reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_INT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_FLT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_CHR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_BLN    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_STR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_INT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_FLT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_CHR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_STR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_BLN reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    MAIN_CASPER     reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    GHOST           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHECK           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SWAP            reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_NAME   reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    DISPLAY         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    IDENT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FOR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    UNTIL           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REPEAT          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REVIVE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    RBRACE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SHIFT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    OTHERWISE       reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)


state 15

    (1) program -> BIRTH unli_newline global_dec maybe_newline . function_statements maybe_newline main_function unli_newline GHOST
    (76) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (77) function_statements -> . empty
    (80) ret_type -> . FUNCTION
    (81) ret_type -> . function_dtype
    (235) empty -> .
    (82) function_dtype -> . FUNCTION_INT
    (83) function_dtype -> . FUNCTION_FLT
    (84) function_dtype -> . FUNCTION_CHR
    (85) function_dtype -> . FUNCTION_BLN
    (86) function_dtype -> . FUNCTION_STR
    (87) function_dtype -> . FUNCTION_LIST_INT
    (88) function_dtype -> . FUNCTION_LIST_FLT
    (89) function_dtype -> . FUNCTION_LIST_CHR
    (90) function_dtype -> . FUNCTION_LIST_STR
    (91) function_dtype -> . FUNCTION_LIST_BLN

    FUNCTION        shift and go to state 23
    NEWLINE         reduce using rule 235 (empty -> .)
    MAIN_CASPER     reduce using rule 235 (empty -> .)
    FUNCTION_INT    shift and go to state 25
    FUNCTION_FLT    shift and go to state 26
    FUNCTION_CHR    shift and go to state 27
    FUNCTION_BLN    shift and go to state 28
    FUNCTION_STR    shift and go to state 29
    FUNCTION_LIST_INT shift and go to state 30
    FUNCTION_LIST_FLT shift and go to state 31
    FUNCTION_LIST_CHR shift and go to state 32
    FUNCTION_LIST_STR shift and go to state 33
    FUNCTION_LIST_BLN shift and go to state 34

    function_statements            shift and go to state 20
    ret_type                       shift and go to state 21
    empty                          shift and go to state 22
    function_dtype                 shift and go to state 24

state 16

    (2) maybe_newline -> empty .

    FUNCTION        reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_INT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_FLT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_CHR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_BLN    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_STR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_INT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_FLT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_CHR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_STR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_BLN reduce using rule 2 (maybe_newline -> empty .)
    NEWLINE         reduce using rule 2 (maybe_newline -> empty .)
    MAIN_CASPER     reduce using rule 2 (maybe_newline -> empty .)
    LBRACE          reduce using rule 2 (maybe_newline -> empty .)
    INT             reduce using rule 2 (maybe_newline -> empty .)
    FLT             reduce using rule 2 (maybe_newline -> empty .)
    BLN             reduce using rule 2 (maybe_newline -> empty .)
    CHR             reduce using rule 2 (maybe_newline -> empty .)
    STR             reduce using rule 2 (maybe_newline -> empty .)
    REVIVE          reduce using rule 2 (maybe_newline -> empty .)
    RBRACE          reduce using rule 2 (maybe_newline -> empty .)
    CHECK           reduce using rule 2 (maybe_newline -> empty .)
    SWAP            reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_NAME   reduce using rule 2 (maybe_newline -> empty .)
    DISPLAY         reduce using rule 2 (maybe_newline -> empty .)
    IDENT           reduce using rule 2 (maybe_newline -> empty .)
    FOR             reduce using rule 2 (maybe_newline -> empty .)
    UNTIL           reduce using rule 2 (maybe_newline -> empty .)
    REPEAT          reduce using rule 2 (maybe_newline -> empty .)
    SHIFT           reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE       reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE_CHECK reduce using rule 2 (maybe_newline -> empty .)


state 17

    (3) maybe_newline -> NEWLINE . maybe_newline
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    FUNCTION        reduce using rule 235 (empty -> .)
    FUNCTION_INT    reduce using rule 235 (empty -> .)
    FUNCTION_FLT    reduce using rule 235 (empty -> .)
    FUNCTION_CHR    reduce using rule 235 (empty -> .)
    FUNCTION_BLN    reduce using rule 235 (empty -> .)
    FUNCTION_STR    reduce using rule 235 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 235 (empty -> .)
    MAIN_CASPER     reduce using rule 235 (empty -> .)
    LBRACE          reduce using rule 235 (empty -> .)
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    REVIVE          reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    OTHERWISE_CHECK reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 35
    empty                          shift and go to state 16

state 18

    (7) global_dec -> global_statement unli_newline . global_tail
    (9) global_tail -> . global_dec
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . data_type IDENT global_statement_tail
    (235) empty -> .
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

    NEWLINE         reduce using rule 235 (empty -> .)
    FUNCTION        reduce using rule 235 (empty -> .)
    FUNCTION_INT    reduce using rule 235 (empty -> .)
    FUNCTION_FLT    reduce using rule 235 (empty -> .)
    FUNCTION_CHR    reduce using rule 235 (empty -> .)
    FUNCTION_BLN    reduce using rule 235 (empty -> .)
    FUNCTION_STR    reduce using rule 235 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 235 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 235 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 235 (empty -> .)
    MAIN_CASPER     reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

    global_statement               shift and go to state 6
    global_tail                    shift and go to state 36
    global_dec                     shift and go to state 37
    empty                          shift and go to state 7
    data_type                      shift and go to state 8

state 19

    (10) global_statement -> data_type IDENT . global_statement_tail
    (11) global_statement_tail -> . empty
    (12) global_statement_tail -> . COMMA IDENT global_statement_tail
    (13) global_statement_tail -> . EQ global_dec_value global_tail2
    (235) empty -> .

    COMMA           shift and go to state 40
    EQ              shift and go to state 41
    NEWLINE         reduce using rule 235 (empty -> .)

    global_statement_tail          shift and go to state 38
    empty                          shift and go to state 39

state 20

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements . maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    MAIN_CASPER     reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 42
    empty                          shift and go to state 16

state 21

    (76) function_statements -> ret_type . FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    FUNCTION_NAME   shift and go to state 43


state 22

    (77) function_statements -> empty .

    NEWLINE         reduce using rule 77 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 77 (function_statements -> empty .)


state 23

    (80) ret_type -> FUNCTION .

    FUNCTION_NAME   reduce using rule 80 (ret_type -> FUNCTION .)


state 24

    (81) ret_type -> function_dtype .

    FUNCTION_NAME   reduce using rule 81 (ret_type -> function_dtype .)


state 25

    (82) function_dtype -> FUNCTION_INT .

    FUNCTION_NAME   reduce using rule 82 (function_dtype -> FUNCTION_INT .)


state 26

    (83) function_dtype -> FUNCTION_FLT .

    FUNCTION_NAME   reduce using rule 83 (function_dtype -> FUNCTION_FLT .)


state 27

    (84) function_dtype -> FUNCTION_CHR .

    FUNCTION_NAME   reduce using rule 84 (function_dtype -> FUNCTION_CHR .)


state 28

    (85) function_dtype -> FUNCTION_BLN .

    FUNCTION_NAME   reduce using rule 85 (function_dtype -> FUNCTION_BLN .)


state 29

    (86) function_dtype -> FUNCTION_STR .

    FUNCTION_NAME   reduce using rule 86 (function_dtype -> FUNCTION_STR .)


state 30

    (87) function_dtype -> FUNCTION_LIST_INT .

    FUNCTION_NAME   reduce using rule 87 (function_dtype -> FUNCTION_LIST_INT .)


state 31

    (88) function_dtype -> FUNCTION_LIST_FLT .

    FUNCTION_NAME   reduce using rule 88 (function_dtype -> FUNCTION_LIST_FLT .)


state 32

    (89) function_dtype -> FUNCTION_LIST_CHR .

    FUNCTION_NAME   reduce using rule 89 (function_dtype -> FUNCTION_LIST_CHR .)


state 33

    (90) function_dtype -> FUNCTION_LIST_STR .

    FUNCTION_NAME   reduce using rule 90 (function_dtype -> FUNCTION_LIST_STR .)


state 34

    (91) function_dtype -> FUNCTION_LIST_BLN .

    FUNCTION_NAME   reduce using rule 91 (function_dtype -> FUNCTION_LIST_BLN .)


state 35

    (3) maybe_newline -> NEWLINE maybe_newline .

    FUNCTION        reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_INT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_FLT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_CHR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_BLN    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_STR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_INT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_FLT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_CHR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_STR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_BLN reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    NEWLINE         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    MAIN_CASPER     reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    LBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FLT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    BLN             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    STR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REVIVE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    RBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHECK           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SWAP            reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_NAME   reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    DISPLAY         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    IDENT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FOR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    UNTIL           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REPEAT          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SHIFT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE       reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE_CHECK reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)


state 36

    (7) global_dec -> global_statement unli_newline global_tail .

    NEWLINE         reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION        reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_INT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_FLT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_CHR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_BLN    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_STR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_INT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_FLT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_CHR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_STR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_BLN reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    MAIN_CASPER     reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)


state 37

    (9) global_tail -> global_dec .

    NEWLINE         reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION        reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_INT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_FLT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_CHR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_BLN    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_STR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_INT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_FLT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_CHR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_STR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_BLN reduce using rule 9 (global_tail -> global_dec .)
    MAIN_CASPER     reduce using rule 9 (global_tail -> global_dec .)


state 38

    (10) global_statement -> data_type IDENT global_statement_tail .

    NEWLINE         reduce using rule 10 (global_statement -> data_type IDENT global_statement_tail .)


state 39

    (11) global_statement_tail -> empty .

    NEWLINE         reduce using rule 11 (global_statement_tail -> empty .)


state 40

    (12) global_statement_tail -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 44


state 41

    (13) global_statement_tail -> EQ . global_dec_value global_tail2
    (16) global_dec_value -> . global_value
    (17) global_dec_value -> . LBRACKET list_element RBRACKET
    (18) global_value -> . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    LBRACKET        shift and go to state 47
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    global_dec_value               shift and go to state 45
    global_value                   shift and go to state 46
    expression                     shift and go to state 48
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 42

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline . main_function unli_newline GHOST
    (6) main_function -> . MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    MAIN_CASPER     shift and go to state 62

    main_function                  shift and go to state 61

state 43

    (76) function_statements -> ret_type FUNCTION_NAME . LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    LPAREN          shift and go to state 63


state 44

    (12) global_statement_tail -> COMMA IDENT . global_statement_tail
    (11) global_statement_tail -> . empty
    (12) global_statement_tail -> . COMMA IDENT global_statement_tail
    (13) global_statement_tail -> . EQ global_dec_value global_tail2
    (235) empty -> .

    COMMA           shift and go to state 40
    EQ              shift and go to state 41
    NEWLINE         reduce using rule 235 (empty -> .)

    global_statement_tail          shift and go to state 64
    empty                          shift and go to state 39

state 45

    (13) global_statement_tail -> EQ global_dec_value . global_tail2
    (14) global_tail2 -> . empty
    (15) global_tail2 -> . COMMA IDENT global_statement_tail
    (235) empty -> .

    COMMA           shift and go to state 67
    NEWLINE         reduce using rule 235 (empty -> .)

    global_tail2                   shift and go to state 65
    empty                          shift and go to state 66

state 46

    (16) global_dec_value -> global_value .

    COMMA           reduce using rule 16 (global_dec_value -> global_value .)
    NEWLINE         reduce using rule 16 (global_dec_value -> global_value .)


state 47

    (17) global_dec_value -> LBRACKET . list_element RBRACKET
    (27) list_element -> . literal element_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    list_element                   shift and go to state 68
    literal                        shift and go to state 69

state 48

    (18) global_value -> expression .

    COMMA           reduce using rule 18 (global_value -> expression .)
    NEWLINE         reduce using rule 18 (global_value -> expression .)


state 49

    (53) expression -> factor . factor_tail
    (58) factor_tail -> . empty
    (59) factor_tail -> . PLUS expression
    (60) factor_tail -> . MINUS expression
    (61) factor_tail -> . MULTIPLY expression
    (62) factor_tail -> . DIVISION expression
    (63) factor_tail -> . MODULO expression
    (64) factor_tail -> . EXPONENT expression
    (65) factor_tail -> . GT expression
    (66) factor_tail -> . LT expression
    (67) factor_tail -> . EQ_EQ expression
    (68) factor_tail -> . GT_EQ expression
    (69) factor_tail -> . LT_EQ expression
    (70) factor_tail -> . NOT_EQ expression
    (71) factor_tail -> . AND expression
    (72) factor_tail -> . OR expression
    (235) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MULTIPLY        shift and go to state 74
    DIVISION        shift and go to state 75
    MODULO          shift and go to state 76
    EXPONENT        shift and go to state 77
    GT              shift and go to state 78
    LT              shift and go to state 79
    EQ_EQ           shift and go to state 80
    GT_EQ           shift and go to state 81
    LT_EQ           shift and go to state 82
    NOT_EQ          shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    COMMA           reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RPAREN          reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    COLON           reduce using rule 235 (empty -> .)

    factor_tail                    shift and go to state 70
    empty                          shift and go to state 71

state 50

    (54) factor -> var_call .

    PLUS            reduce using rule 54 (factor -> var_call .)
    MINUS           reduce using rule 54 (factor -> var_call .)
    MULTIPLY        reduce using rule 54 (factor -> var_call .)
    DIVISION        reduce using rule 54 (factor -> var_call .)
    MODULO          reduce using rule 54 (factor -> var_call .)
    EXPONENT        reduce using rule 54 (factor -> var_call .)
    GT              reduce using rule 54 (factor -> var_call .)
    LT              reduce using rule 54 (factor -> var_call .)
    EQ_EQ           reduce using rule 54 (factor -> var_call .)
    GT_EQ           reduce using rule 54 (factor -> var_call .)
    LT_EQ           reduce using rule 54 (factor -> var_call .)
    NOT_EQ          reduce using rule 54 (factor -> var_call .)
    AND             reduce using rule 54 (factor -> var_call .)
    OR              reduce using rule 54 (factor -> var_call .)
    COMMA           reduce using rule 54 (factor -> var_call .)
    NEWLINE         reduce using rule 54 (factor -> var_call .)
    RPAREN          reduce using rule 54 (factor -> var_call .)
    RBRACE          reduce using rule 54 (factor -> var_call .)
    COLON           reduce using rule 54 (factor -> var_call .)


state 51

    (55) factor -> literal .

    PLUS            reduce using rule 55 (factor -> literal .)
    MINUS           reduce using rule 55 (factor -> literal .)
    MULTIPLY        reduce using rule 55 (factor -> literal .)
    DIVISION        reduce using rule 55 (factor -> literal .)
    MODULO          reduce using rule 55 (factor -> literal .)
    EXPONENT        reduce using rule 55 (factor -> literal .)
    GT              reduce using rule 55 (factor -> literal .)
    LT              reduce using rule 55 (factor -> literal .)
    EQ_EQ           reduce using rule 55 (factor -> literal .)
    GT_EQ           reduce using rule 55 (factor -> literal .)
    LT_EQ           reduce using rule 55 (factor -> literal .)
    NOT_EQ          reduce using rule 55 (factor -> literal .)
    AND             reduce using rule 55 (factor -> literal .)
    OR              reduce using rule 55 (factor -> literal .)
    COMMA           reduce using rule 55 (factor -> literal .)
    NEWLINE         reduce using rule 55 (factor -> literal .)
    RPAREN          reduce using rule 55 (factor -> literal .)
    RBRACE          reduce using rule 55 (factor -> literal .)
    COLON           reduce using rule 55 (factor -> literal .)


state 52

    (56) factor -> TILDE . literal
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    literal                        shift and go to state 86

state 53

    (57) factor -> LPAREN . expression RPAREN
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 87
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 54

    (73) var_call -> IDENT . var_call_tail
    (74) var_call_tail -> . empty
    (75) var_call_tail -> . LBRACKET index RBRACKET
    (235) empty -> .

    LBRACKET        shift and go to state 90
    PLUS            reduce using rule 235 (empty -> .)
    MINUS           reduce using rule 235 (empty -> .)
    MULTIPLY        reduce using rule 235 (empty -> .)
    DIVISION        reduce using rule 235 (empty -> .)
    MODULO          reduce using rule 235 (empty -> .)
    EXPONENT        reduce using rule 235 (empty -> .)
    GT              reduce using rule 235 (empty -> .)
    LT              reduce using rule 235 (empty -> .)
    EQ_EQ           reduce using rule 235 (empty -> .)
    GT_EQ           reduce using rule 235 (empty -> .)
    LT_EQ           reduce using rule 235 (empty -> .)
    NOT_EQ          reduce using rule 235 (empty -> .)
    AND             reduce using rule 235 (empty -> .)
    OR              reduce using rule 235 (empty -> .)
    COMMA           reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RPAREN          reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    COLON           reduce using rule 235 (empty -> .)
    PLUS_PLUS       reduce using rule 235 (empty -> .)
    MINUS_MINUS     reduce using rule 235 (empty -> .)
    PLUS_EQ         reduce using rule 235 (empty -> .)
    MINUS_EQ        reduce using rule 235 (empty -> .)
    MUL_EQ          reduce using rule 235 (empty -> .)
    DIV_EQ          reduce using rule 235 (empty -> .)
    MOD_EQ          reduce using rule 235 (empty -> .)
    EQ              reduce using rule 235 (empty -> .)
    SEMICOLON       reduce using rule 235 (empty -> .)

    var_call_tail                  shift and go to state 88
    empty                          shift and go to state 89

state 55

    (47) literal -> INT_LIT .

    PLUS            reduce using rule 47 (literal -> INT_LIT .)
    MINUS           reduce using rule 47 (literal -> INT_LIT .)
    MULTIPLY        reduce using rule 47 (literal -> INT_LIT .)
    DIVISION        reduce using rule 47 (literal -> INT_LIT .)
    MODULO          reduce using rule 47 (literal -> INT_LIT .)
    EXPONENT        reduce using rule 47 (literal -> INT_LIT .)
    GT              reduce using rule 47 (literal -> INT_LIT .)
    LT              reduce using rule 47 (literal -> INT_LIT .)
    EQ_EQ           reduce using rule 47 (literal -> INT_LIT .)
    GT_EQ           reduce using rule 47 (literal -> INT_LIT .)
    LT_EQ           reduce using rule 47 (literal -> INT_LIT .)
    NOT_EQ          reduce using rule 47 (literal -> INT_LIT .)
    AND             reduce using rule 47 (literal -> INT_LIT .)
    OR              reduce using rule 47 (literal -> INT_LIT .)
    COMMA           reduce using rule 47 (literal -> INT_LIT .)
    NEWLINE         reduce using rule 47 (literal -> INT_LIT .)
    RBRACKET        reduce using rule 47 (literal -> INT_LIT .)
    RPAREN          reduce using rule 47 (literal -> INT_LIT .)
    RBRACE          reduce using rule 47 (literal -> INT_LIT .)
    COLON           reduce using rule 47 (literal -> INT_LIT .)


state 56

    (48) literal -> FLT_LIT .

    PLUS            reduce using rule 48 (literal -> FLT_LIT .)
    MINUS           reduce using rule 48 (literal -> FLT_LIT .)
    MULTIPLY        reduce using rule 48 (literal -> FLT_LIT .)
    DIVISION        reduce using rule 48 (literal -> FLT_LIT .)
    MODULO          reduce using rule 48 (literal -> FLT_LIT .)
    EXPONENT        reduce using rule 48 (literal -> FLT_LIT .)
    GT              reduce using rule 48 (literal -> FLT_LIT .)
    LT              reduce using rule 48 (literal -> FLT_LIT .)
    EQ_EQ           reduce using rule 48 (literal -> FLT_LIT .)
    GT_EQ           reduce using rule 48 (literal -> FLT_LIT .)
    LT_EQ           reduce using rule 48 (literal -> FLT_LIT .)
    NOT_EQ          reduce using rule 48 (literal -> FLT_LIT .)
    AND             reduce using rule 48 (literal -> FLT_LIT .)
    OR              reduce using rule 48 (literal -> FLT_LIT .)
    COMMA           reduce using rule 48 (literal -> FLT_LIT .)
    NEWLINE         reduce using rule 48 (literal -> FLT_LIT .)
    RBRACKET        reduce using rule 48 (literal -> FLT_LIT .)
    RPAREN          reduce using rule 48 (literal -> FLT_LIT .)
    RBRACE          reduce using rule 48 (literal -> FLT_LIT .)
    COLON           reduce using rule 48 (literal -> FLT_LIT .)


state 57

    (49) literal -> DAY .

    PLUS            reduce using rule 49 (literal -> DAY .)
    MINUS           reduce using rule 49 (literal -> DAY .)
    MULTIPLY        reduce using rule 49 (literal -> DAY .)
    DIVISION        reduce using rule 49 (literal -> DAY .)
    MODULO          reduce using rule 49 (literal -> DAY .)
    EXPONENT        reduce using rule 49 (literal -> DAY .)
    GT              reduce using rule 49 (literal -> DAY .)
    LT              reduce using rule 49 (literal -> DAY .)
    EQ_EQ           reduce using rule 49 (literal -> DAY .)
    GT_EQ           reduce using rule 49 (literal -> DAY .)
    LT_EQ           reduce using rule 49 (literal -> DAY .)
    NOT_EQ          reduce using rule 49 (literal -> DAY .)
    AND             reduce using rule 49 (literal -> DAY .)
    OR              reduce using rule 49 (literal -> DAY .)
    COMMA           reduce using rule 49 (literal -> DAY .)
    NEWLINE         reduce using rule 49 (literal -> DAY .)
    RBRACKET        reduce using rule 49 (literal -> DAY .)
    RPAREN          reduce using rule 49 (literal -> DAY .)
    RBRACE          reduce using rule 49 (literal -> DAY .)
    COLON           reduce using rule 49 (literal -> DAY .)


state 58

    (50) literal -> NIGHT .

    PLUS            reduce using rule 50 (literal -> NIGHT .)
    MINUS           reduce using rule 50 (literal -> NIGHT .)
    MULTIPLY        reduce using rule 50 (literal -> NIGHT .)
    DIVISION        reduce using rule 50 (literal -> NIGHT .)
    MODULO          reduce using rule 50 (literal -> NIGHT .)
    EXPONENT        reduce using rule 50 (literal -> NIGHT .)
    GT              reduce using rule 50 (literal -> NIGHT .)
    LT              reduce using rule 50 (literal -> NIGHT .)
    EQ_EQ           reduce using rule 50 (literal -> NIGHT .)
    GT_EQ           reduce using rule 50 (literal -> NIGHT .)
    LT_EQ           reduce using rule 50 (literal -> NIGHT .)
    NOT_EQ          reduce using rule 50 (literal -> NIGHT .)
    AND             reduce using rule 50 (literal -> NIGHT .)
    OR              reduce using rule 50 (literal -> NIGHT .)
    COMMA           reduce using rule 50 (literal -> NIGHT .)
    NEWLINE         reduce using rule 50 (literal -> NIGHT .)
    RBRACKET        reduce using rule 50 (literal -> NIGHT .)
    RPAREN          reduce using rule 50 (literal -> NIGHT .)
    RBRACE          reduce using rule 50 (literal -> NIGHT .)
    COLON           reduce using rule 50 (literal -> NIGHT .)


state 59

    (51) literal -> CHR_LIT .

    PLUS            reduce using rule 51 (literal -> CHR_LIT .)
    MINUS           reduce using rule 51 (literal -> CHR_LIT .)
    MULTIPLY        reduce using rule 51 (literal -> CHR_LIT .)
    DIVISION        reduce using rule 51 (literal -> CHR_LIT .)
    MODULO          reduce using rule 51 (literal -> CHR_LIT .)
    EXPONENT        reduce using rule 51 (literal -> CHR_LIT .)
    GT              reduce using rule 51 (literal -> CHR_LIT .)
    LT              reduce using rule 51 (literal -> CHR_LIT .)
    EQ_EQ           reduce using rule 51 (literal -> CHR_LIT .)
    GT_EQ           reduce using rule 51 (literal -> CHR_LIT .)
    LT_EQ           reduce using rule 51 (literal -> CHR_LIT .)
    NOT_EQ          reduce using rule 51 (literal -> CHR_LIT .)
    AND             reduce using rule 51 (literal -> CHR_LIT .)
    OR              reduce using rule 51 (literal -> CHR_LIT .)
    COMMA           reduce using rule 51 (literal -> CHR_LIT .)
    NEWLINE         reduce using rule 51 (literal -> CHR_LIT .)
    RBRACKET        reduce using rule 51 (literal -> CHR_LIT .)
    RPAREN          reduce using rule 51 (literal -> CHR_LIT .)
    RBRACE          reduce using rule 51 (literal -> CHR_LIT .)
    COLON           reduce using rule 51 (literal -> CHR_LIT .)


state 60

    (52) literal -> STR_LIT .

    PLUS            reduce using rule 52 (literal -> STR_LIT .)
    MINUS           reduce using rule 52 (literal -> STR_LIT .)
    MULTIPLY        reduce using rule 52 (literal -> STR_LIT .)
    DIVISION        reduce using rule 52 (literal -> STR_LIT .)
    MODULO          reduce using rule 52 (literal -> STR_LIT .)
    EXPONENT        reduce using rule 52 (literal -> STR_LIT .)
    GT              reduce using rule 52 (literal -> STR_LIT .)
    LT              reduce using rule 52 (literal -> STR_LIT .)
    EQ_EQ           reduce using rule 52 (literal -> STR_LIT .)
    GT_EQ           reduce using rule 52 (literal -> STR_LIT .)
    LT_EQ           reduce using rule 52 (literal -> STR_LIT .)
    NOT_EQ          reduce using rule 52 (literal -> STR_LIT .)
    AND             reduce using rule 52 (literal -> STR_LIT .)
    OR              reduce using rule 52 (literal -> STR_LIT .)
    COMMA           reduce using rule 52 (literal -> STR_LIT .)
    NEWLINE         reduce using rule 52 (literal -> STR_LIT .)
    RBRACKET        reduce using rule 52 (literal -> STR_LIT .)
    RPAREN          reduce using rule 52 (literal -> STR_LIT .)
    RBRACE          reduce using rule 52 (literal -> STR_LIT .)
    COLON           reduce using rule 52 (literal -> STR_LIT .)


state 61

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function . unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 91

state 62

    (6) main_function -> MAIN_CASPER . LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 92


state 63

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN . parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (92) parameters -> . data_type IDENT parameters_tail
    (93) parameters -> . empty
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR
    (235) empty -> .

    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13
    RPAREN          reduce using rule 235 (empty -> .)

    parameters                     shift and go to state 93
    data_type                      shift and go to state 94
    empty                          shift and go to state 95

state 64

    (12) global_statement_tail -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 12 (global_statement_tail -> COMMA IDENT global_statement_tail .)


state 65

    (13) global_statement_tail -> EQ global_dec_value global_tail2 .

    NEWLINE         reduce using rule 13 (global_statement_tail -> EQ global_dec_value global_tail2 .)


state 66

    (14) global_tail2 -> empty .

    NEWLINE         reduce using rule 14 (global_tail2 -> empty .)


state 67

    (15) global_tail2 -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 96


state 68

    (17) global_dec_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 97


state 69

    (27) list_element -> literal . element_tail
    (28) element_tail -> . empty
    (29) element_tail -> . COMMA list_element
    (235) empty -> .

    COMMA           shift and go to state 100
    RBRACKET        reduce using rule 235 (empty -> .)

    element_tail                   shift and go to state 98
    empty                          shift and go to state 99

state 70

    (53) expression -> factor factor_tail .

    COMMA           reduce using rule 53 (expression -> factor factor_tail .)
    NEWLINE         reduce using rule 53 (expression -> factor factor_tail .)
    RPAREN          reduce using rule 53 (expression -> factor factor_tail .)
    RBRACE          reduce using rule 53 (expression -> factor factor_tail .)
    COLON           reduce using rule 53 (expression -> factor factor_tail .)


state 71

    (58) factor_tail -> empty .

    COMMA           reduce using rule 58 (factor_tail -> empty .)
    NEWLINE         reduce using rule 58 (factor_tail -> empty .)
    RPAREN          reduce using rule 58 (factor_tail -> empty .)
    RBRACE          reduce using rule 58 (factor_tail -> empty .)
    COLON           reduce using rule 58 (factor_tail -> empty .)


state 72

    (59) factor_tail -> PLUS . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 101
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 73

    (60) factor_tail -> MINUS . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 102
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 74

    (61) factor_tail -> MULTIPLY . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 103
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 75

    (62) factor_tail -> DIVISION . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 104
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 76

    (63) factor_tail -> MODULO . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 105
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 77

    (64) factor_tail -> EXPONENT . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 106
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 78

    (65) factor_tail -> GT . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 107
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 79

    (66) factor_tail -> LT . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 108
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 80

    (67) factor_tail -> EQ_EQ . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 109
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 81

    (68) factor_tail -> GT_EQ . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 110
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 82

    (69) factor_tail -> LT_EQ . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 111
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 83

    (70) factor_tail -> NOT_EQ . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 112
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 84

    (71) factor_tail -> AND . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 113
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 85

    (72) factor_tail -> OR . expression
    (53) expression -> . factor factor_tail
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    expression                     shift and go to state 114
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 86

    (56) factor -> TILDE literal .

    PLUS            reduce using rule 56 (factor -> TILDE literal .)
    MINUS           reduce using rule 56 (factor -> TILDE literal .)
    MULTIPLY        reduce using rule 56 (factor -> TILDE literal .)
    DIVISION        reduce using rule 56 (factor -> TILDE literal .)
    MODULO          reduce using rule 56 (factor -> TILDE literal .)
    EXPONENT        reduce using rule 56 (factor -> TILDE literal .)
    GT              reduce using rule 56 (factor -> TILDE literal .)
    LT              reduce using rule 56 (factor -> TILDE literal .)
    EQ_EQ           reduce using rule 56 (factor -> TILDE literal .)
    GT_EQ           reduce using rule 56 (factor -> TILDE literal .)
    LT_EQ           reduce using rule 56 (factor -> TILDE literal .)
    NOT_EQ          reduce using rule 56 (factor -> TILDE literal .)
    AND             reduce using rule 56 (factor -> TILDE literal .)
    OR              reduce using rule 56 (factor -> TILDE literal .)
    COMMA           reduce using rule 56 (factor -> TILDE literal .)
    NEWLINE         reduce using rule 56 (factor -> TILDE literal .)
    RPAREN          reduce using rule 56 (factor -> TILDE literal .)
    RBRACE          reduce using rule 56 (factor -> TILDE literal .)
    COLON           reduce using rule 56 (factor -> TILDE literal .)


state 87

    (57) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 115


state 88

    (73) var_call -> IDENT var_call_tail .

    PLUS            reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MINUS           reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MULTIPLY        reduce using rule 73 (var_call -> IDENT var_call_tail .)
    DIVISION        reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MODULO          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    EXPONENT        reduce using rule 73 (var_call -> IDENT var_call_tail .)
    GT              reduce using rule 73 (var_call -> IDENT var_call_tail .)
    LT              reduce using rule 73 (var_call -> IDENT var_call_tail .)
    EQ_EQ           reduce using rule 73 (var_call -> IDENT var_call_tail .)
    GT_EQ           reduce using rule 73 (var_call -> IDENT var_call_tail .)
    LT_EQ           reduce using rule 73 (var_call -> IDENT var_call_tail .)
    NOT_EQ          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    AND             reduce using rule 73 (var_call -> IDENT var_call_tail .)
    OR              reduce using rule 73 (var_call -> IDENT var_call_tail .)
    COMMA           reduce using rule 73 (var_call -> IDENT var_call_tail .)
    NEWLINE         reduce using rule 73 (var_call -> IDENT var_call_tail .)
    RPAREN          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    RBRACE          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    COLON           reduce using rule 73 (var_call -> IDENT var_call_tail .)
    PLUS_PLUS       reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MINUS_MINUS     reduce using rule 73 (var_call -> IDENT var_call_tail .)
    PLUS_EQ         reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MINUS_EQ        reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MUL_EQ          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    DIV_EQ          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    MOD_EQ          reduce using rule 73 (var_call -> IDENT var_call_tail .)
    EQ              reduce using rule 73 (var_call -> IDENT var_call_tail .)
    SEMICOLON       reduce using rule 73 (var_call -> IDENT var_call_tail .)


state 89

    (74) var_call_tail -> empty .

    PLUS            reduce using rule 74 (var_call_tail -> empty .)
    MINUS           reduce using rule 74 (var_call_tail -> empty .)
    MULTIPLY        reduce using rule 74 (var_call_tail -> empty .)
    DIVISION        reduce using rule 74 (var_call_tail -> empty .)
    MODULO          reduce using rule 74 (var_call_tail -> empty .)
    EXPONENT        reduce using rule 74 (var_call_tail -> empty .)
    GT              reduce using rule 74 (var_call_tail -> empty .)
    LT              reduce using rule 74 (var_call_tail -> empty .)
    EQ_EQ           reduce using rule 74 (var_call_tail -> empty .)
    GT_EQ           reduce using rule 74 (var_call_tail -> empty .)
    LT_EQ           reduce using rule 74 (var_call_tail -> empty .)
    NOT_EQ          reduce using rule 74 (var_call_tail -> empty .)
    AND             reduce using rule 74 (var_call_tail -> empty .)
    OR              reduce using rule 74 (var_call_tail -> empty .)
    COMMA           reduce using rule 74 (var_call_tail -> empty .)
    NEWLINE         reduce using rule 74 (var_call_tail -> empty .)
    RPAREN          reduce using rule 74 (var_call_tail -> empty .)
    RBRACE          reduce using rule 74 (var_call_tail -> empty .)
    COLON           reduce using rule 74 (var_call_tail -> empty .)
    PLUS_PLUS       reduce using rule 74 (var_call_tail -> empty .)
    MINUS_MINUS     reduce using rule 74 (var_call_tail -> empty .)
    PLUS_EQ         reduce using rule 74 (var_call_tail -> empty .)
    MINUS_EQ        reduce using rule 74 (var_call_tail -> empty .)
    MUL_EQ          reduce using rule 74 (var_call_tail -> empty .)
    DIV_EQ          reduce using rule 74 (var_call_tail -> empty .)
    MOD_EQ          reduce using rule 74 (var_call_tail -> empty .)
    EQ              reduce using rule 74 (var_call_tail -> empty .)
    SEMICOLON       reduce using rule 74 (var_call_tail -> empty .)


state 90

    (75) var_call_tail -> LBRACKET . index RBRACKET
    (30) index -> . INT_LIT
    (31) index -> . IDENT

    INT_LIT         shift and go to state 117
    IDENT           shift and go to state 118

    index                          shift and go to state 116

state 91

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline . GHOST

    GHOST           shift and go to state 119


state 92

    (6) main_function -> MAIN_CASPER LPAREN . RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 120


state 93

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters . RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    RPAREN          shift and go to state 121


state 94

    (92) parameters -> data_type . IDENT parameters_tail

    IDENT           shift and go to state 122


state 95

    (93) parameters -> empty .

    RPAREN          reduce using rule 93 (parameters -> empty .)


state 96

    (15) global_tail2 -> COMMA IDENT . global_statement_tail
    (11) global_statement_tail -> . empty
    (12) global_statement_tail -> . COMMA IDENT global_statement_tail
    (13) global_statement_tail -> . EQ global_dec_value global_tail2
    (235) empty -> .

    COMMA           shift and go to state 40
    EQ              shift and go to state 41
    NEWLINE         reduce using rule 235 (empty -> .)

    global_statement_tail          shift and go to state 123
    empty                          shift and go to state 39

state 97

    (17) global_dec_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 17 (global_dec_value -> LBRACKET list_element RBRACKET .)
    NEWLINE         reduce using rule 17 (global_dec_value -> LBRACKET list_element RBRACKET .)


state 98

    (27) list_element -> literal element_tail .

    RBRACKET        reduce using rule 27 (list_element -> literal element_tail .)


state 99

    (28) element_tail -> empty .

    RBRACKET        reduce using rule 28 (element_tail -> empty .)


state 100

    (29) element_tail -> COMMA . list_element
    (27) list_element -> . literal element_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    list_element                   shift and go to state 124
    literal                        shift and go to state 69

state 101

    (59) factor_tail -> PLUS expression .

    COMMA           reduce using rule 59 (factor_tail -> PLUS expression .)
    NEWLINE         reduce using rule 59 (factor_tail -> PLUS expression .)
    RPAREN          reduce using rule 59 (factor_tail -> PLUS expression .)
    RBRACE          reduce using rule 59 (factor_tail -> PLUS expression .)
    COLON           reduce using rule 59 (factor_tail -> PLUS expression .)


state 102

    (60) factor_tail -> MINUS expression .

    COMMA           reduce using rule 60 (factor_tail -> MINUS expression .)
    NEWLINE         reduce using rule 60 (factor_tail -> MINUS expression .)
    RPAREN          reduce using rule 60 (factor_tail -> MINUS expression .)
    RBRACE          reduce using rule 60 (factor_tail -> MINUS expression .)
    COLON           reduce using rule 60 (factor_tail -> MINUS expression .)


state 103

    (61) factor_tail -> MULTIPLY expression .

    COMMA           reduce using rule 61 (factor_tail -> MULTIPLY expression .)
    NEWLINE         reduce using rule 61 (factor_tail -> MULTIPLY expression .)
    RPAREN          reduce using rule 61 (factor_tail -> MULTIPLY expression .)
    RBRACE          reduce using rule 61 (factor_tail -> MULTIPLY expression .)
    COLON           reduce using rule 61 (factor_tail -> MULTIPLY expression .)


state 104

    (62) factor_tail -> DIVISION expression .

    COMMA           reduce using rule 62 (factor_tail -> DIVISION expression .)
    NEWLINE         reduce using rule 62 (factor_tail -> DIVISION expression .)
    RPAREN          reduce using rule 62 (factor_tail -> DIVISION expression .)
    RBRACE          reduce using rule 62 (factor_tail -> DIVISION expression .)
    COLON           reduce using rule 62 (factor_tail -> DIVISION expression .)


state 105

    (63) factor_tail -> MODULO expression .

    COMMA           reduce using rule 63 (factor_tail -> MODULO expression .)
    NEWLINE         reduce using rule 63 (factor_tail -> MODULO expression .)
    RPAREN          reduce using rule 63 (factor_tail -> MODULO expression .)
    RBRACE          reduce using rule 63 (factor_tail -> MODULO expression .)
    COLON           reduce using rule 63 (factor_tail -> MODULO expression .)


state 106

    (64) factor_tail -> EXPONENT expression .

    COMMA           reduce using rule 64 (factor_tail -> EXPONENT expression .)
    NEWLINE         reduce using rule 64 (factor_tail -> EXPONENT expression .)
    RPAREN          reduce using rule 64 (factor_tail -> EXPONENT expression .)
    RBRACE          reduce using rule 64 (factor_tail -> EXPONENT expression .)
    COLON           reduce using rule 64 (factor_tail -> EXPONENT expression .)


state 107

    (65) factor_tail -> GT expression .

    COMMA           reduce using rule 65 (factor_tail -> GT expression .)
    NEWLINE         reduce using rule 65 (factor_tail -> GT expression .)
    RPAREN          reduce using rule 65 (factor_tail -> GT expression .)
    RBRACE          reduce using rule 65 (factor_tail -> GT expression .)
    COLON           reduce using rule 65 (factor_tail -> GT expression .)


state 108

    (66) factor_tail -> LT expression .

    COMMA           reduce using rule 66 (factor_tail -> LT expression .)
    NEWLINE         reduce using rule 66 (factor_tail -> LT expression .)
    RPAREN          reduce using rule 66 (factor_tail -> LT expression .)
    RBRACE          reduce using rule 66 (factor_tail -> LT expression .)
    COLON           reduce using rule 66 (factor_tail -> LT expression .)


state 109

    (67) factor_tail -> EQ_EQ expression .

    COMMA           reduce using rule 67 (factor_tail -> EQ_EQ expression .)
    NEWLINE         reduce using rule 67 (factor_tail -> EQ_EQ expression .)
    RPAREN          reduce using rule 67 (factor_tail -> EQ_EQ expression .)
    RBRACE          reduce using rule 67 (factor_tail -> EQ_EQ expression .)
    COLON           reduce using rule 67 (factor_tail -> EQ_EQ expression .)


state 110

    (68) factor_tail -> GT_EQ expression .

    COMMA           reduce using rule 68 (factor_tail -> GT_EQ expression .)
    NEWLINE         reduce using rule 68 (factor_tail -> GT_EQ expression .)
    RPAREN          reduce using rule 68 (factor_tail -> GT_EQ expression .)
    RBRACE          reduce using rule 68 (factor_tail -> GT_EQ expression .)
    COLON           reduce using rule 68 (factor_tail -> GT_EQ expression .)


state 111

    (69) factor_tail -> LT_EQ expression .

    COMMA           reduce using rule 69 (factor_tail -> LT_EQ expression .)
    NEWLINE         reduce using rule 69 (factor_tail -> LT_EQ expression .)
    RPAREN          reduce using rule 69 (factor_tail -> LT_EQ expression .)
    RBRACE          reduce using rule 69 (factor_tail -> LT_EQ expression .)
    COLON           reduce using rule 69 (factor_tail -> LT_EQ expression .)


state 112

    (70) factor_tail -> NOT_EQ expression .

    COMMA           reduce using rule 70 (factor_tail -> NOT_EQ expression .)
    NEWLINE         reduce using rule 70 (factor_tail -> NOT_EQ expression .)
    RPAREN          reduce using rule 70 (factor_tail -> NOT_EQ expression .)
    RBRACE          reduce using rule 70 (factor_tail -> NOT_EQ expression .)
    COLON           reduce using rule 70 (factor_tail -> NOT_EQ expression .)


state 113

    (71) factor_tail -> AND expression .

    COMMA           reduce using rule 71 (factor_tail -> AND expression .)
    NEWLINE         reduce using rule 71 (factor_tail -> AND expression .)
    RPAREN          reduce using rule 71 (factor_tail -> AND expression .)
    RBRACE          reduce using rule 71 (factor_tail -> AND expression .)
    COLON           reduce using rule 71 (factor_tail -> AND expression .)


state 114

    (72) factor_tail -> OR expression .

    COMMA           reduce using rule 72 (factor_tail -> OR expression .)
    NEWLINE         reduce using rule 72 (factor_tail -> OR expression .)
    RPAREN          reduce using rule 72 (factor_tail -> OR expression .)
    RBRACE          reduce using rule 72 (factor_tail -> OR expression .)
    COLON           reduce using rule 72 (factor_tail -> OR expression .)


state 115

    (57) factor -> LPAREN expression RPAREN .

    PLUS            reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    EQ_EQ           reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    GT_EQ           reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    LT_EQ           reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 57 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 57 (factor -> LPAREN expression RPAREN .)


state 116

    (75) var_call_tail -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 125


state 117

    (30) index -> INT_LIT .

    RBRACKET        reduce using rule 30 (index -> INT_LIT .)


state 118

    (31) index -> IDENT .

    RBRACKET        reduce using rule 31 (index -> IDENT .)


state 119

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .

    $end            reduce using rule 1 (program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .)


state 120

    (6) main_function -> MAIN_CASPER LPAREN RPAREN . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    LBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 126
    empty                          shift and go to state 16

state 121

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN . LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail

    LBRACE          shift and go to state 127


state 122

    (92) parameters -> data_type IDENT . parameters_tail
    (94) parameters_tail -> . empty
    (95) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (235) empty -> .

    COMMA           shift and go to state 130
    RPAREN          reduce using rule 235 (empty -> .)

    parameters_tail                shift and go to state 128
    empty                          shift and go to state 129

state 123

    (15) global_tail2 -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 15 (global_tail2 -> COMMA IDENT global_statement_tail .)


state 124

    (29) element_tail -> COMMA list_element .

    RBRACKET        reduce using rule 29 (element_tail -> COMMA list_element .)


state 125

    (75) var_call_tail -> LBRACKET index RBRACKET .

    PLUS            reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MODULO          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    GT              reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    LT              reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    EQ_EQ           reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    AND             reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    OR              reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    NEWLINE         reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    RBRACE          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    COLON           reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    PLUS_PLUS       reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    PLUS_EQ         reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    EQ              reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 75 (var_call_tail -> LBRACKET index RBRACKET .)


state 126

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 131


state 127

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE . maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    REVIVE          reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 132
    empty                          shift and go to state 16

state 128

    (92) parameters -> data_type IDENT parameters_tail .

    RPAREN          reduce using rule 92 (parameters -> data_type IDENT parameters_tail .)


state 129

    (94) parameters_tail -> empty .

    RPAREN          reduce using rule 94 (parameters_tail -> empty .)


state 130

    (95) parameters_tail -> COMMA . data_type IDENT parameters_tail
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

    data_type                      shift and go to state 133

state 131

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 134
    empty                          shift and go to state 16

state 132

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline . statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 135
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 133

    (95) parameters_tail -> COMMA data_type . IDENT parameters_tail

    IDENT           shift and go to state 140


state 134

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 141
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 135

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements . revive maybe_newline RBRACE unli_newline function_statements_tail
    (96) revive -> . REVIVE value
    (97) revive -> . empty
    (235) empty -> .

    REVIVE          shift and go to state 143
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)

    revive                         shift and go to state 142
    empty                          shift and go to state 144

state 136

    (98) statements -> empty .
    (107) local_dec -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 98 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 98 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 98 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 98 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 98 (statements -> empty .)
    REVIVE          reduce using rule 98 (statements -> empty .)
    NEWLINE         reduce using rule 98 (statements -> empty .)
    RBRACE          reduce using rule 98 (statements -> empty .)
    SHIFT           reduce using rule 98 (statements -> empty .)
    OTHERWISE       reduce using rule 98 (statements -> empty .)
    CHECK           reduce using rule 107 (local_dec -> empty .)
    SWAP            reduce using rule 107 (local_dec -> empty .)
    FUNCTION_NAME   reduce using rule 107 (local_dec -> empty .)
    DISPLAY         reduce using rule 107 (local_dec -> empty .)
    IDENT           reduce using rule 107 (local_dec -> empty .)
    FOR             reduce using rule 107 (local_dec -> empty .)
    UNTIL           reduce using rule 107 (local_dec -> empty .)
    REPEAT          reduce using rule 107 (local_dec -> empty .)
    INT             reduce using rule 107 (local_dec -> empty .)
    FLT             reduce using rule 107 (local_dec -> empty .)
    BLN             reduce using rule 107 (local_dec -> empty .)
    CHR             reduce using rule 107 (local_dec -> empty .)
    STR             reduce using rule 107 (local_dec -> empty .)

  ! NEWLINE         [ reduce using rule 107 (local_dec -> empty .) ]
  ! REVIVE          [ reduce using rule 107 (local_dec -> empty .) ]
  ! RBRACE          [ reduce using rule 107 (local_dec -> empty .) ]
  ! SHIFT           [ reduce using rule 107 (local_dec -> empty .) ]
  ! OTHERWISE       [ reduce using rule 107 (local_dec -> empty .) ]


state 137

    (99) statements -> local_dec . maybe_newline statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    REVIVE          reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 145
    empty                          shift and go to state 16

state 138

    (108) local_dec -> var_statement .

    NEWLINE         reduce using rule 108 (local_dec -> var_statement .)
    CHECK           reduce using rule 108 (local_dec -> var_statement .)
    SWAP            reduce using rule 108 (local_dec -> var_statement .)
    FUNCTION_NAME   reduce using rule 108 (local_dec -> var_statement .)
    DISPLAY         reduce using rule 108 (local_dec -> var_statement .)
    IDENT           reduce using rule 108 (local_dec -> var_statement .)
    FOR             reduce using rule 108 (local_dec -> var_statement .)
    UNTIL           reduce using rule 108 (local_dec -> var_statement .)
    REPEAT          reduce using rule 108 (local_dec -> var_statement .)
    INT             reduce using rule 108 (local_dec -> var_statement .)
    FLT             reduce using rule 108 (local_dec -> var_statement .)
    BLN             reduce using rule 108 (local_dec -> var_statement .)
    CHR             reduce using rule 108 (local_dec -> var_statement .)
    STR             reduce using rule 108 (local_dec -> var_statement .)
    REVIVE          reduce using rule 108 (local_dec -> var_statement .)
    RBRACE          reduce using rule 108 (local_dec -> var_statement .)
    SHIFT           reduce using rule 108 (local_dec -> var_statement .)
    OTHERWISE       reduce using rule 108 (local_dec -> var_statement .)


state 139

    (19) var_statement -> data_type . IDENT var_tail unli_newline

    IDENT           shift and go to state 146


state 140

    (95) parameters_tail -> COMMA data_type IDENT . parameters_tail
    (94) parameters_tail -> . empty
    (95) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (235) empty -> .

    COMMA           shift and go to state 130
    RPAREN          reduce using rule 235 (empty -> .)

    parameters_tail                shift and go to state 147
    empty                          shift and go to state 129

state 141

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    RBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 148
    empty                          shift and go to state 16

state 142

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive . maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    RBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 149
    empty                          shift and go to state 16

state 143

    (96) revive -> REVIVE . value
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (53) expression -> . factor factor_tail
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    value                          shift and go to state 150
    type_cast                      shift and go to state 151
    expression                     shift and go to state 152
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 144

    (97) revive -> empty .

    NEWLINE         reduce using rule 97 (revive -> empty .)
    RBRACE          reduce using rule 97 (revive -> empty .)


state 145

    (99) statements -> local_dec maybe_newline . statements_tail
    (100) statements_tail -> . string_operation_statement unli_newline statements
    (101) statements_tail -> . conditional_statement unli_newline statements
    (102) statements_tail -> . switch_statement unli_newline statements
    (103) statements_tail -> . loop_statement unli_newline statements
    (104) statements_tail -> . function_call unli_newline statements
    (105) statements_tail -> . output_statement unli_newline statements
    (106) statements_tail -> . statements
    (222) string_operation_statement -> . var_call string_operation_tail
    (109) conditional_statement -> . CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (139) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (143) loop_statement -> . for_loop
    (144) loop_statement -> . until_loop
    (145) loop_statement -> . repeat_until
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (73) var_call -> . IDENT var_call_tail
    (146) for_loop -> . FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE
    (174) until_loop -> . UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE
    (175) repeat_until -> . REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    CHECK           shift and go to state 170
    SWAP            shift and go to state 171
    FUNCTION_NAME   shift and go to state 158
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    FOR             shift and go to state 175
    UNTIL           shift and go to state 176
    REPEAT          shift and go to state 177
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! CHECK           [ reduce using rule 235 (empty -> .) ]
  ! SWAP            [ reduce using rule 235 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 235 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 235 (empty -> .) ]
  ! IDENT           [ reduce using rule 235 (empty -> .) ]
  ! FOR             [ reduce using rule 235 (empty -> .) ]
  ! UNTIL           [ reduce using rule 235 (empty -> .) ]
  ! REPEAT          [ reduce using rule 235 (empty -> .) ]
  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    local_dec                      shift and go to state 137
    statements_tail                shift and go to state 161
    string_operation_statement     shift and go to state 162
    statements                     shift and go to state 163
    conditional_statement          shift and go to state 164
    switch_statement               shift and go to state 165
    loop_statement                 shift and go to state 166
    function_call                  shift and go to state 167
    output_statement               shift and go to state 168
    var_call                       shift and go to state 169
    for_loop                       shift and go to state 172
    until_loop                     shift and go to state 173
    repeat_until                   shift and go to state 174
    empty                          shift and go to state 136
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 146

    (19) var_statement -> data_type IDENT . var_tail unli_newline
    (20) var_tail -> . empty
    (21) var_tail -> . EQ tail_value var_tail2
    (22) var_tail -> . COMMA IDENT var_tail
    (235) empty -> .

    EQ              shift and go to state 180
    COMMA           shift and go to state 181
    NEWLINE         reduce using rule 235 (empty -> .)

    var_tail                       shift and go to state 178
    empty                          shift and go to state 179

state 147

    (95) parameters_tail -> COMMA data_type IDENT parameters_tail .

    RPAREN          reduce using rule 95 (parameters_tail -> COMMA data_type IDENT parameters_tail .)


state 148

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 182


state 149

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline . RBRACE unli_newline function_statements_tail

    RBRACE          shift and go to state 183


state 150

    (96) revive -> REVIVE value .

    NEWLINE         reduce using rule 96 (revive -> REVIVE value .)
    RBRACE          reduce using rule 96 (revive -> REVIVE value .)


state 151

    (37) value -> type_cast .

    NEWLINE         reduce using rule 37 (value -> type_cast .)
    RBRACE          reduce using rule 37 (value -> type_cast .)
    COMMA           reduce using rule 37 (value -> type_cast .)
    RPAREN          reduce using rule 37 (value -> type_cast .)
    COLON           reduce using rule 37 (value -> type_cast .)


state 152

    (38) value -> expression .

    NEWLINE         reduce using rule 38 (value -> expression .)
    RBRACE          reduce using rule 38 (value -> expression .)
    COMMA           reduce using rule 38 (value -> expression .)
    RPAREN          reduce using rule 38 (value -> expression .)
    COLON           reduce using rule 38 (value -> expression .)


state 153

    (39) value -> function_call .

    NEWLINE         reduce using rule 39 (value -> function_call .)
    RBRACE          reduce using rule 39 (value -> function_call .)
    COMMA           reduce using rule 39 (value -> function_call .)
    RPAREN          reduce using rule 39 (value -> function_call .)
    COLON           reduce using rule 39 (value -> function_call .)


state 154

    (40) type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 184


state 155

    (41) type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 185


state 156

    (42) type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 186


state 157

    (43) type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 187


state 158

    (209) function_call -> FUNCTION_NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 188


state 159

    (210) function_call -> output_statement .

    NEWLINE         reduce using rule 210 (function_call -> output_statement .)
    RBRACE          reduce using rule 210 (function_call -> output_statement .)
    COMMA           reduce using rule 210 (function_call -> output_statement .)
    RPAREN          reduce using rule 210 (function_call -> output_statement .)
    COLON           reduce using rule 210 (function_call -> output_statement .)


state 160

    (217) output_statement -> DISPLAY . value next_val
    (218) output_statement -> DISPLAY . LPAREN value next_val RPAREN
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (53) expression -> . factor factor_tail
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    LPAREN          shift and go to state 190
    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    value                          shift and go to state 189
    type_cast                      shift and go to state 151
    expression                     shift and go to state 152
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 161

    (99) statements -> local_dec maybe_newline statements_tail .

    REVIVE          reduce using rule 99 (statements -> local_dec maybe_newline statements_tail .)
    NEWLINE         reduce using rule 99 (statements -> local_dec maybe_newline statements_tail .)
    RBRACE          reduce using rule 99 (statements -> local_dec maybe_newline statements_tail .)
    SHIFT           reduce using rule 99 (statements -> local_dec maybe_newline statements_tail .)
    OTHERWISE       reduce using rule 99 (statements -> local_dec maybe_newline statements_tail .)


state 162

    (100) statements_tail -> string_operation_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 191

state 163

    (106) statements_tail -> statements .

    REVIVE          reduce using rule 106 (statements_tail -> statements .)
    NEWLINE         reduce using rule 106 (statements_tail -> statements .)
    RBRACE          reduce using rule 106 (statements_tail -> statements .)
    SHIFT           reduce using rule 106 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 106 (statements_tail -> statements .)


state 164

    (101) statements_tail -> conditional_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 192

state 165

    (102) statements_tail -> switch_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 193

state 166

    (103) statements_tail -> loop_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 194

state 167

    (104) statements_tail -> function_call . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 195

state 168

    (105) statements_tail -> output_statement . unli_newline statements
    (210) function_call -> output_statement .
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 210 (function_call -> output_statement .) ]

    unli_newline                   shift and go to state 196

state 169

    (222) string_operation_statement -> var_call . string_operation_tail
    (223) string_operation_tail -> . PLUS string_val stringcon_tail
    (224) string_operation_tail -> . update_tail
    (205) update_tail -> . postfix
    (206) update_tail -> . assign_op value
    (207) postfix -> . PLUS_PLUS
    (208) postfix -> . MINUS_MINUS
    (225) assign_op -> . PLUS_EQ
    (226) assign_op -> . MINUS_EQ
    (227) assign_op -> . MUL_EQ
    (228) assign_op -> . DIV_EQ
    (229) assign_op -> . MOD_EQ
    (230) assign_op -> . EQ

    PLUS            shift and go to state 198
    PLUS_PLUS       shift and go to state 202
    MINUS_MINUS     shift and go to state 203
    PLUS_EQ         shift and go to state 204
    MINUS_EQ        shift and go to state 205
    MUL_EQ          shift and go to state 206
    DIV_EQ          shift and go to state 207
    MOD_EQ          shift and go to state 208
    EQ              shift and go to state 209

    string_operation_tail          shift and go to state 197
    update_tail                    shift and go to state 199
    postfix                        shift and go to state 200
    assign_op                      shift and go to state 201

state 170

    (109) conditional_statement -> CHECK . LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE

    LPAREN          shift and go to state 210


state 171

    (139) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    LPAREN          shift and go to state 211


state 172

    (143) loop_statement -> for_loop .

    NEWLINE         reduce using rule 143 (loop_statement -> for_loop .)


state 173

    (144) loop_statement -> until_loop .

    NEWLINE         reduce using rule 144 (loop_statement -> until_loop .)


state 174

    (145) loop_statement -> repeat_until .

    NEWLINE         reduce using rule 145 (loop_statement -> repeat_until .)


state 175

    (146) for_loop -> FOR . LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE

    LPAREN          shift and go to state 212


state 176

    (174) until_loop -> UNTIL . LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE

    LPAREN          shift and go to state 213


state 177

    (175) repeat_until -> REPEAT . LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN

    LBRACE          shift and go to state 214


state 178

    (19) var_statement -> data_type IDENT var_tail . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 215

state 179

    (20) var_tail -> empty .

    NEWLINE         reduce using rule 20 (var_tail -> empty .)


state 180

    (21) var_tail -> EQ . tail_value var_tail2
    (25) tail_value -> . value
    (26) tail_value -> . LBRACKET list_element RBRACKET
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (53) expression -> . factor factor_tail
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    LBRACKET        shift and go to state 218
    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    tail_value                     shift and go to state 216
    value                          shift and go to state 217
    type_cast                      shift and go to state 151
    expression                     shift and go to state 152
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 181

    (22) var_tail -> COMMA . IDENT var_tail

    IDENT           shift and go to state 219


state 182

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 6 (main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)


state 183

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE . unli_newline function_statements_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 220

state 184

    (40) type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (44) typecast_value -> . expression
    (45) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (46) typecast_value -> . input_statement
    (53) expression -> . factor factor_tail
    (221) input_statement -> . INPUT LPAREN RPAREN
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    FUNCTION_NAME   shift and go to state 223
    INPUT           shift and go to state 225
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    typecast_value                 shift and go to state 221
    expression                     shift and go to state 222
    input_statement                shift and go to state 224
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 185

    (41) type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (44) typecast_value -> . expression
    (45) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (46) typecast_value -> . input_statement
    (53) expression -> . factor factor_tail
    (221) input_statement -> . INPUT LPAREN RPAREN
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    FUNCTION_NAME   shift and go to state 223
    INPUT           shift and go to state 225
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    typecast_value                 shift and go to state 226
    expression                     shift and go to state 222
    input_statement                shift and go to state 224
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 186

    (42) type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (44) typecast_value -> . expression
    (45) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (46) typecast_value -> . input_statement
    (53) expression -> . factor factor_tail
    (221) input_statement -> . INPUT LPAREN RPAREN
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    FUNCTION_NAME   shift and go to state 223
    INPUT           shift and go to state 225
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    typecast_value                 shift and go to state 227
    expression                     shift and go to state 222
    input_statement                shift and go to state 224
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 187

    (43) type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (44) typecast_value -> . expression
    (45) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (46) typecast_value -> . input_statement
    (53) expression -> . factor factor_tail
    (221) input_statement -> . INPUT LPAREN RPAREN
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    FUNCTION_NAME   shift and go to state 223
    INPUT           shift and go to state 225
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    typecast_value                 shift and go to state 228
    expression                     shift and go to state 222
    input_statement                shift and go to state 224
    factor                         shift and go to state 49
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 188

    (209) function_call -> FUNCTION_NAME LPAREN . arguments RPAREN
    (211) arguments -> . empty
    (212) arguments -> . arg_value arg_tail
    (235) empty -> .
    (215) arg_value -> . literal
    (216) arg_value -> . var_call
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    RPAREN          reduce using rule 235 (empty -> .)
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60
    IDENT           shift and go to state 54

    arguments                      shift and go to state 229
    empty                          shift and go to state 230
    arg_value                      shift and go to state 231
    literal                        shift and go to state 232
    var_call                       shift and go to state 233

state 189

    (217) output_statement -> DISPLAY value . next_val
    (219) next_val -> . empty
    (220) next_val -> . COMMA value next_val
    (235) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 236
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    RPAREN          reduce using rule 235 (empty -> .)
    COLON           reduce using rule 235 (empty -> .)

  ! COMMA           [ reduce using rule 235 (empty -> .) ]

    next_val                       shift and go to state 234
    empty                          shift and go to state 235

state 190

    (218) output_statement -> DISPLAY LPAREN . value next_val RPAREN
    (57) factor -> LPAREN . expression RPAREN
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (53) expression -> . factor factor_tail
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    value                          shift and go to state 237
    expression                     shift and go to state 238
    type_cast                      shift and go to state 151
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 191

    (100) statements_tail -> string_operation_statement unli_newline . statements
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 239
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 192

    (101) statements_tail -> conditional_statement unli_newline . statements
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 240
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 193

    (102) statements_tail -> switch_statement unli_newline . statements
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 241
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 194

    (103) statements_tail -> loop_statement unli_newline . statements
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 242
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 195

    (104) statements_tail -> function_call unli_newline . statements
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 243
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 196

    (105) statements_tail -> output_statement unli_newline . statements
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 244
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 197

    (222) string_operation_statement -> var_call string_operation_tail .

    NEWLINE         reduce using rule 222 (string_operation_statement -> var_call string_operation_tail .)


state 198

    (223) string_operation_tail -> PLUS . string_val stringcon_tail
    (233) string_val -> . var_call
    (234) string_val -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    STR_LIT         shift and go to state 247
    IDENT           shift and go to state 54

    string_val                     shift and go to state 245
    var_call                       shift and go to state 246

state 199

    (224) string_operation_tail -> update_tail .

    NEWLINE         reduce using rule 224 (string_operation_tail -> update_tail .)


state 200

    (205) update_tail -> postfix .

    NEWLINE         reduce using rule 205 (update_tail -> postfix .)
    RPAREN          reduce using rule 205 (update_tail -> postfix .)


state 201

    (206) update_tail -> assign_op . value
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (53) expression -> . factor factor_tail
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    value                          shift and go to state 248
    type_cast                      shift and go to state 151
    expression                     shift and go to state 152
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 202

    (207) postfix -> PLUS_PLUS .

    NEWLINE         reduce using rule 207 (postfix -> PLUS_PLUS .)
    RPAREN          reduce using rule 207 (postfix -> PLUS_PLUS .)


state 203

    (208) postfix -> MINUS_MINUS .

    NEWLINE         reduce using rule 208 (postfix -> MINUS_MINUS .)
    RPAREN          reduce using rule 208 (postfix -> MINUS_MINUS .)


state 204

    (225) assign_op -> PLUS_EQ .

    CONVERT_TO_INT  reduce using rule 225 (assign_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 225 (assign_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 225 (assign_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 225 (assign_op -> PLUS_EQ .)
    FUNCTION_NAME   reduce using rule 225 (assign_op -> PLUS_EQ .)
    TILDE           reduce using rule 225 (assign_op -> PLUS_EQ .)
    LPAREN          reduce using rule 225 (assign_op -> PLUS_EQ .)
    DISPLAY         reduce using rule 225 (assign_op -> PLUS_EQ .)
    IDENT           reduce using rule 225 (assign_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 225 (assign_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 225 (assign_op -> PLUS_EQ .)
    DAY             reduce using rule 225 (assign_op -> PLUS_EQ .)
    NIGHT           reduce using rule 225 (assign_op -> PLUS_EQ .)
    CHR_LIT         reduce using rule 225 (assign_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 225 (assign_op -> PLUS_EQ .)


state 205

    (226) assign_op -> MINUS_EQ .

    CONVERT_TO_INT  reduce using rule 226 (assign_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 226 (assign_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 226 (assign_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 226 (assign_op -> MINUS_EQ .)
    FUNCTION_NAME   reduce using rule 226 (assign_op -> MINUS_EQ .)
    TILDE           reduce using rule 226 (assign_op -> MINUS_EQ .)
    LPAREN          reduce using rule 226 (assign_op -> MINUS_EQ .)
    DISPLAY         reduce using rule 226 (assign_op -> MINUS_EQ .)
    IDENT           reduce using rule 226 (assign_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 226 (assign_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 226 (assign_op -> MINUS_EQ .)
    DAY             reduce using rule 226 (assign_op -> MINUS_EQ .)
    NIGHT           reduce using rule 226 (assign_op -> MINUS_EQ .)
    CHR_LIT         reduce using rule 226 (assign_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 226 (assign_op -> MINUS_EQ .)


state 206

    (227) assign_op -> MUL_EQ .

    CONVERT_TO_INT  reduce using rule 227 (assign_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 227 (assign_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 227 (assign_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 227 (assign_op -> MUL_EQ .)
    FUNCTION_NAME   reduce using rule 227 (assign_op -> MUL_EQ .)
    TILDE           reduce using rule 227 (assign_op -> MUL_EQ .)
    LPAREN          reduce using rule 227 (assign_op -> MUL_EQ .)
    DISPLAY         reduce using rule 227 (assign_op -> MUL_EQ .)
    IDENT           reduce using rule 227 (assign_op -> MUL_EQ .)
    INT_LIT         reduce using rule 227 (assign_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 227 (assign_op -> MUL_EQ .)
    DAY             reduce using rule 227 (assign_op -> MUL_EQ .)
    NIGHT           reduce using rule 227 (assign_op -> MUL_EQ .)
    CHR_LIT         reduce using rule 227 (assign_op -> MUL_EQ .)
    STR_LIT         reduce using rule 227 (assign_op -> MUL_EQ .)


state 207

    (228) assign_op -> DIV_EQ .

    CONVERT_TO_INT  reduce using rule 228 (assign_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 228 (assign_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 228 (assign_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 228 (assign_op -> DIV_EQ .)
    FUNCTION_NAME   reduce using rule 228 (assign_op -> DIV_EQ .)
    TILDE           reduce using rule 228 (assign_op -> DIV_EQ .)
    LPAREN          reduce using rule 228 (assign_op -> DIV_EQ .)
    DISPLAY         reduce using rule 228 (assign_op -> DIV_EQ .)
    IDENT           reduce using rule 228 (assign_op -> DIV_EQ .)
    INT_LIT         reduce using rule 228 (assign_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 228 (assign_op -> DIV_EQ .)
    DAY             reduce using rule 228 (assign_op -> DIV_EQ .)
    NIGHT           reduce using rule 228 (assign_op -> DIV_EQ .)
    CHR_LIT         reduce using rule 228 (assign_op -> DIV_EQ .)
    STR_LIT         reduce using rule 228 (assign_op -> DIV_EQ .)


state 208

    (229) assign_op -> MOD_EQ .

    CONVERT_TO_INT  reduce using rule 229 (assign_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 229 (assign_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 229 (assign_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 229 (assign_op -> MOD_EQ .)
    FUNCTION_NAME   reduce using rule 229 (assign_op -> MOD_EQ .)
    TILDE           reduce using rule 229 (assign_op -> MOD_EQ .)
    LPAREN          reduce using rule 229 (assign_op -> MOD_EQ .)
    DISPLAY         reduce using rule 229 (assign_op -> MOD_EQ .)
    IDENT           reduce using rule 229 (assign_op -> MOD_EQ .)
    INT_LIT         reduce using rule 229 (assign_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 229 (assign_op -> MOD_EQ .)
    DAY             reduce using rule 229 (assign_op -> MOD_EQ .)
    NIGHT           reduce using rule 229 (assign_op -> MOD_EQ .)
    CHR_LIT         reduce using rule 229 (assign_op -> MOD_EQ .)
    STR_LIT         reduce using rule 229 (assign_op -> MOD_EQ .)


state 209

    (230) assign_op -> EQ .

    CONVERT_TO_INT  reduce using rule 230 (assign_op -> EQ .)
    CONVERT_TO_FLT  reduce using rule 230 (assign_op -> EQ .)
    CONVERT_TO_BLN  reduce using rule 230 (assign_op -> EQ .)
    CONVERT_TO_STR  reduce using rule 230 (assign_op -> EQ .)
    FUNCTION_NAME   reduce using rule 230 (assign_op -> EQ .)
    TILDE           reduce using rule 230 (assign_op -> EQ .)
    LPAREN          reduce using rule 230 (assign_op -> EQ .)
    DISPLAY         reduce using rule 230 (assign_op -> EQ .)
    IDENT           reduce using rule 230 (assign_op -> EQ .)
    INT_LIT         reduce using rule 230 (assign_op -> EQ .)
    FLT_LIT         reduce using rule 230 (assign_op -> EQ .)
    DAY             reduce using rule 230 (assign_op -> EQ .)
    NIGHT           reduce using rule 230 (assign_op -> EQ .)
    CHR_LIT         reduce using rule 230 (assign_op -> EQ .)
    STR_LIT         reduce using rule 230 (assign_op -> EQ .)


state 210

    (109) conditional_statement -> CHECK LPAREN . condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (112) condition -> . arithmetic_expression condition_tail
    (123) arithmetic_expression -> . arith_term arith_tail
    (124) arith_term -> . cond_literal
    (125) arith_term -> . var_call
    (133) cond_literal -> . INT_LIT
    (134) cond_literal -> . FLT_LIT
    (135) cond_literal -> . DAY
    (136) cond_literal -> . NIGHT
    (137) cond_literal -> . CHR_LIT
    (138) cond_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 254
    FLT_LIT         shift and go to state 255
    DAY             shift and go to state 256
    NIGHT           shift and go to state 257
    CHR_LIT         shift and go to state 258
    STR_LIT         shift and go to state 259
    IDENT           shift and go to state 54

    condition                      shift and go to state 249
    arithmetic_expression          shift and go to state 250
    arith_term                     shift and go to state 251
    cond_literal                   shift and go to state 252
    var_call                       shift and go to state 253

state 211

    (139) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    IDENT           shift and go to state 260


state 212

    (146) for_loop -> FOR LPAREN . control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE
    (203) control_variable -> . INT IDENT EQ INT_LIT

    INT             shift and go to state 262

    control_variable               shift and go to state 261

state 213

    (174) until_loop -> UNTIL LPAREN . until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE
    (176) until_loop_condition -> . until_loop_arithmetic_expression until_loop_condition_tail
    (187) until_loop_arithmetic_expression -> . until_loop_arith_term until_loop_arith_tail
    (188) until_loop_arith_term -> . until_loop_literal
    (189) until_loop_arith_term -> . var_call
    (197) until_loop_literal -> . INT_LIT
    (198) until_loop_literal -> . FLT_LIT
    (199) until_loop_literal -> . DAY
    (200) until_loop_literal -> . NIGHT
    (201) until_loop_literal -> . CHR_LIT
    (202) until_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 268
    FLT_LIT         shift and go to state 269
    DAY             shift and go to state 270
    NIGHT           shift and go to state 271
    CHR_LIT         shift and go to state 272
    STR_LIT         shift and go to state 273
    IDENT           shift and go to state 54

    until_loop_condition           shift and go to state 263
    until_loop_arithmetic_expression shift and go to state 264
    until_loop_arith_term          shift and go to state 265
    until_loop_literal             shift and go to state 266
    var_call                       shift and go to state 267

state 214

    (175) repeat_until -> REPEAT LBRACE . maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 274
    empty                          shift and go to state 16

state 215

    (19) var_statement -> data_type IDENT var_tail unli_newline .

    NEWLINE         reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    CHECK           reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    SWAP            reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    FUNCTION_NAME   reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    DISPLAY         reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    IDENT           reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    FOR             reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    UNTIL           reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    REPEAT          reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    INT             reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    FLT             reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    BLN             reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    CHR             reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    STR             reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    REVIVE          reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    RBRACE          reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    SHIFT           reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)
    OTHERWISE       reduce using rule 19 (var_statement -> data_type IDENT var_tail unli_newline .)


state 216

    (21) var_tail -> EQ tail_value . var_tail2
    (23) var_tail2 -> . empty
    (24) var_tail2 -> . COMMA IDENT var_tail
    (235) empty -> .

    COMMA           shift and go to state 277
    NEWLINE         reduce using rule 235 (empty -> .)

    var_tail2                      shift and go to state 275
    empty                          shift and go to state 276

state 217

    (25) tail_value -> value .

    COMMA           reduce using rule 25 (tail_value -> value .)
    NEWLINE         reduce using rule 25 (tail_value -> value .)


state 218

    (26) tail_value -> LBRACKET . list_element RBRACKET
    (27) list_element -> . literal element_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    list_element                   shift and go to state 278
    literal                        shift and go to state 69

state 219

    (22) var_tail -> COMMA IDENT . var_tail
    (20) var_tail -> . empty
    (21) var_tail -> . EQ tail_value var_tail2
    (22) var_tail -> . COMMA IDENT var_tail
    (235) empty -> .

    EQ              shift and go to state 180
    COMMA           shift and go to state 181
    NEWLINE         reduce using rule 235 (empty -> .)

    var_tail                       shift and go to state 279
    empty                          shift and go to state 179

state 220

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline . function_statements_tail
    (78) function_statements_tail -> . function_statements
    (79) function_statements_tail -> . empty
    (76) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail
    (77) function_statements -> . empty
    (235) empty -> .
    (80) ret_type -> . FUNCTION
    (81) ret_type -> . function_dtype
    (82) function_dtype -> . FUNCTION_INT
    (83) function_dtype -> . FUNCTION_FLT
    (84) function_dtype -> . FUNCTION_CHR
    (85) function_dtype -> . FUNCTION_BLN
    (86) function_dtype -> . FUNCTION_STR
    (87) function_dtype -> . FUNCTION_LIST_INT
    (88) function_dtype -> . FUNCTION_LIST_FLT
    (89) function_dtype -> . FUNCTION_LIST_CHR
    (90) function_dtype -> . FUNCTION_LIST_STR
    (91) function_dtype -> . FUNCTION_LIST_BLN

    NEWLINE         reduce using rule 235 (empty -> .)
    MAIN_CASPER     reduce using rule 235 (empty -> .)
    FUNCTION        shift and go to state 23
    FUNCTION_INT    shift and go to state 25
    FUNCTION_FLT    shift and go to state 26
    FUNCTION_CHR    shift and go to state 27
    FUNCTION_BLN    shift and go to state 28
    FUNCTION_STR    shift and go to state 29
    FUNCTION_LIST_INT shift and go to state 30
    FUNCTION_LIST_FLT shift and go to state 31
    FUNCTION_LIST_CHR shift and go to state 32
    FUNCTION_LIST_STR shift and go to state 33
    FUNCTION_LIST_BLN shift and go to state 34

    ret_type                       shift and go to state 21
    function_statements_tail       shift and go to state 280
    function_statements            shift and go to state 281
    empty                          shift and go to state 282
    function_dtype                 shift and go to state 24

state 221

    (40) type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 283


state 222

    (44) typecast_value -> expression .

    RPAREN          reduce using rule 44 (typecast_value -> expression .)


state 223

    (45) typecast_value -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 284


state 224

    (46) typecast_value -> input_statement .

    RPAREN          reduce using rule 46 (typecast_value -> input_statement .)


state 225

    (221) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 285


state 226

    (41) type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 286


state 227

    (42) type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 287


state 228

    (43) type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 288


state 229

    (209) function_call -> FUNCTION_NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 289


state 230

    (211) arguments -> empty .

    RPAREN          reduce using rule 211 (arguments -> empty .)


state 231

    (212) arguments -> arg_value . arg_tail
    (213) arg_tail -> . empty
    (214) arg_tail -> . COMMA arg_value arg_tail
    (235) empty -> .

    COMMA           shift and go to state 292
    RPAREN          reduce using rule 235 (empty -> .)

    arg_tail                       shift and go to state 290
    empty                          shift and go to state 291

state 232

    (215) arg_value -> literal .

    COMMA           reduce using rule 215 (arg_value -> literal .)
    RPAREN          reduce using rule 215 (arg_value -> literal .)


state 233

    (216) arg_value -> var_call .

    COMMA           reduce using rule 216 (arg_value -> var_call .)
    RPAREN          reduce using rule 216 (arg_value -> var_call .)


state 234

    (217) output_statement -> DISPLAY value next_val .

    NEWLINE         reduce using rule 217 (output_statement -> DISPLAY value next_val .)
    RBRACE          reduce using rule 217 (output_statement -> DISPLAY value next_val .)
    COMMA           reduce using rule 217 (output_statement -> DISPLAY value next_val .)
    RPAREN          reduce using rule 217 (output_statement -> DISPLAY value next_val .)
    COLON           reduce using rule 217 (output_statement -> DISPLAY value next_val .)


state 235

    (219) next_val -> empty .

    COMMA           reduce using rule 219 (next_val -> empty .)
    NEWLINE         reduce using rule 219 (next_val -> empty .)
    RBRACE          reduce using rule 219 (next_val -> empty .)
    RPAREN          reduce using rule 219 (next_val -> empty .)
    COLON           reduce using rule 219 (next_val -> empty .)


state 236

    (220) next_val -> COMMA . value next_val
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (53) expression -> . factor factor_tail
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    value                          shift and go to state 293
    type_cast                      shift and go to state 151
    expression                     shift and go to state 152
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 237

    (218) output_statement -> DISPLAY LPAREN value . next_val RPAREN
    (219) next_val -> . empty
    (220) next_val -> . COMMA value next_val
    (235) empty -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 235 (empty -> .)

    next_val                       shift and go to state 294
    empty                          shift and go to state 235

state 238

    (57) factor -> LPAREN expression . RPAREN
    (38) value -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 115
    COMMA           reduce using rule 38 (value -> expression .)

  ! RPAREN          [ reduce using rule 38 (value -> expression .) ]


state 239

    (100) statements_tail -> string_operation_statement unli_newline statements .

    REVIVE          reduce using rule 100 (statements_tail -> string_operation_statement unli_newline statements .)
    NEWLINE         reduce using rule 100 (statements_tail -> string_operation_statement unli_newline statements .)
    RBRACE          reduce using rule 100 (statements_tail -> string_operation_statement unli_newline statements .)
    SHIFT           reduce using rule 100 (statements_tail -> string_operation_statement unli_newline statements .)
    OTHERWISE       reduce using rule 100 (statements_tail -> string_operation_statement unli_newline statements .)


state 240

    (101) statements_tail -> conditional_statement unli_newline statements .

    REVIVE          reduce using rule 101 (statements_tail -> conditional_statement unli_newline statements .)
    NEWLINE         reduce using rule 101 (statements_tail -> conditional_statement unli_newline statements .)
    RBRACE          reduce using rule 101 (statements_tail -> conditional_statement unli_newline statements .)
    SHIFT           reduce using rule 101 (statements_tail -> conditional_statement unli_newline statements .)
    OTHERWISE       reduce using rule 101 (statements_tail -> conditional_statement unli_newline statements .)


state 241

    (102) statements_tail -> switch_statement unli_newline statements .

    REVIVE          reduce using rule 102 (statements_tail -> switch_statement unli_newline statements .)
    NEWLINE         reduce using rule 102 (statements_tail -> switch_statement unli_newline statements .)
    RBRACE          reduce using rule 102 (statements_tail -> switch_statement unli_newline statements .)
    SHIFT           reduce using rule 102 (statements_tail -> switch_statement unli_newline statements .)
    OTHERWISE       reduce using rule 102 (statements_tail -> switch_statement unli_newline statements .)


state 242

    (103) statements_tail -> loop_statement unli_newline statements .

    REVIVE          reduce using rule 103 (statements_tail -> loop_statement unli_newline statements .)
    NEWLINE         reduce using rule 103 (statements_tail -> loop_statement unli_newline statements .)
    RBRACE          reduce using rule 103 (statements_tail -> loop_statement unli_newline statements .)
    SHIFT           reduce using rule 103 (statements_tail -> loop_statement unli_newline statements .)
    OTHERWISE       reduce using rule 103 (statements_tail -> loop_statement unli_newline statements .)


state 243

    (104) statements_tail -> function_call unli_newline statements .

    REVIVE          reduce using rule 104 (statements_tail -> function_call unli_newline statements .)
    NEWLINE         reduce using rule 104 (statements_tail -> function_call unli_newline statements .)
    RBRACE          reduce using rule 104 (statements_tail -> function_call unli_newline statements .)
    SHIFT           reduce using rule 104 (statements_tail -> function_call unli_newline statements .)
    OTHERWISE       reduce using rule 104 (statements_tail -> function_call unli_newline statements .)


state 244

    (105) statements_tail -> output_statement unli_newline statements .

    REVIVE          reduce using rule 105 (statements_tail -> output_statement unli_newline statements .)
    NEWLINE         reduce using rule 105 (statements_tail -> output_statement unli_newline statements .)
    RBRACE          reduce using rule 105 (statements_tail -> output_statement unli_newline statements .)
    SHIFT           reduce using rule 105 (statements_tail -> output_statement unli_newline statements .)
    OTHERWISE       reduce using rule 105 (statements_tail -> output_statement unli_newline statements .)


state 245

    (223) string_operation_tail -> PLUS string_val . stringcon_tail
    (231) stringcon_tail -> . empty
    (232) stringcon_tail -> . PLUS string_val stringcon_tail
    (235) empty -> .

    PLUS            shift and go to state 295
    NEWLINE         reduce using rule 235 (empty -> .)

    stringcon_tail                 shift and go to state 296
    empty                          shift and go to state 297

state 246

    (233) string_val -> var_call .

    PLUS            reduce using rule 233 (string_val -> var_call .)
    NEWLINE         reduce using rule 233 (string_val -> var_call .)


state 247

    (234) string_val -> STR_LIT .

    PLUS            reduce using rule 234 (string_val -> STR_LIT .)
    NEWLINE         reduce using rule 234 (string_val -> STR_LIT .)


state 248

    (206) update_tail -> assign_op value .

    NEWLINE         reduce using rule 206 (update_tail -> assign_op value .)
    RPAREN          reduce using rule 206 (update_tail -> assign_op value .)


state 249

    (109) conditional_statement -> CHECK LPAREN condition . RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE

    RPAREN          shift and go to state 298


state 250

    (112) condition -> arithmetic_expression . condition_tail
    (113) condition_tail -> . condition_op arithmetic_expression condition_tail
    (114) condition_tail -> . empty
    (115) condition_op -> . AND
    (116) condition_op -> . OR
    (117) condition_op -> . EQ_EQ
    (118) condition_op -> . NOT_EQ
    (119) condition_op -> . LT
    (120) condition_op -> . GT
    (121) condition_op -> . LT_EQ
    (122) condition_op -> . GT_EQ
    (235) empty -> .

    AND             shift and go to state 302
    OR              shift and go to state 303
    EQ_EQ           shift and go to state 304
    NOT_EQ          shift and go to state 305
    LT              shift and go to state 306
    GT              shift and go to state 307
    LT_EQ           shift and go to state 308
    GT_EQ           shift and go to state 309
    RPAREN          reduce using rule 235 (empty -> .)

    condition_tail                 shift and go to state 299
    condition_op                   shift and go to state 300
    empty                          shift and go to state 301

state 251

    (123) arithmetic_expression -> arith_term . arith_tail
    (126) arith_tail -> . empty
    (127) arith_tail -> . arith_op arithmetic_expression
    (235) empty -> .
    (128) arith_op -> . PLUS
    (129) arith_op -> . MINUS
    (130) arith_op -> . MULTIPLY
    (131) arith_op -> . DIVISION
    (132) arith_op -> . MODULO

    AND             reduce using rule 235 (empty -> .)
    OR              reduce using rule 235 (empty -> .)
    EQ_EQ           reduce using rule 235 (empty -> .)
    NOT_EQ          reduce using rule 235 (empty -> .)
    LT              reduce using rule 235 (empty -> .)
    GT              reduce using rule 235 (empty -> .)
    LT_EQ           reduce using rule 235 (empty -> .)
    GT_EQ           reduce using rule 235 (empty -> .)
    RPAREN          reduce using rule 235 (empty -> .)
    PLUS            shift and go to state 313
    MINUS           shift and go to state 314
    MULTIPLY        shift and go to state 315
    DIVISION        shift and go to state 316
    MODULO          shift and go to state 317

    arith_tail                     shift and go to state 310
    empty                          shift and go to state 311
    arith_op                       shift and go to state 312

state 252

    (124) arith_term -> cond_literal .

    PLUS            reduce using rule 124 (arith_term -> cond_literal .)
    MINUS           reduce using rule 124 (arith_term -> cond_literal .)
    MULTIPLY        reduce using rule 124 (arith_term -> cond_literal .)
    DIVISION        reduce using rule 124 (arith_term -> cond_literal .)
    MODULO          reduce using rule 124 (arith_term -> cond_literal .)
    AND             reduce using rule 124 (arith_term -> cond_literal .)
    OR              reduce using rule 124 (arith_term -> cond_literal .)
    EQ_EQ           reduce using rule 124 (arith_term -> cond_literal .)
    NOT_EQ          reduce using rule 124 (arith_term -> cond_literal .)
    LT              reduce using rule 124 (arith_term -> cond_literal .)
    GT              reduce using rule 124 (arith_term -> cond_literal .)
    LT_EQ           reduce using rule 124 (arith_term -> cond_literal .)
    GT_EQ           reduce using rule 124 (arith_term -> cond_literal .)
    RPAREN          reduce using rule 124 (arith_term -> cond_literal .)


state 253

    (125) arith_term -> var_call .

    PLUS            reduce using rule 125 (arith_term -> var_call .)
    MINUS           reduce using rule 125 (arith_term -> var_call .)
    MULTIPLY        reduce using rule 125 (arith_term -> var_call .)
    DIVISION        reduce using rule 125 (arith_term -> var_call .)
    MODULO          reduce using rule 125 (arith_term -> var_call .)
    AND             reduce using rule 125 (arith_term -> var_call .)
    OR              reduce using rule 125 (arith_term -> var_call .)
    EQ_EQ           reduce using rule 125 (arith_term -> var_call .)
    NOT_EQ          reduce using rule 125 (arith_term -> var_call .)
    LT              reduce using rule 125 (arith_term -> var_call .)
    GT              reduce using rule 125 (arith_term -> var_call .)
    LT_EQ           reduce using rule 125 (arith_term -> var_call .)
    GT_EQ           reduce using rule 125 (arith_term -> var_call .)
    RPAREN          reduce using rule 125 (arith_term -> var_call .)


state 254

    (133) cond_literal -> INT_LIT .

    PLUS            reduce using rule 133 (cond_literal -> INT_LIT .)
    MINUS           reduce using rule 133 (cond_literal -> INT_LIT .)
    MULTIPLY        reduce using rule 133 (cond_literal -> INT_LIT .)
    DIVISION        reduce using rule 133 (cond_literal -> INT_LIT .)
    MODULO          reduce using rule 133 (cond_literal -> INT_LIT .)
    AND             reduce using rule 133 (cond_literal -> INT_LIT .)
    OR              reduce using rule 133 (cond_literal -> INT_LIT .)
    EQ_EQ           reduce using rule 133 (cond_literal -> INT_LIT .)
    NOT_EQ          reduce using rule 133 (cond_literal -> INT_LIT .)
    LT              reduce using rule 133 (cond_literal -> INT_LIT .)
    GT              reduce using rule 133 (cond_literal -> INT_LIT .)
    LT_EQ           reduce using rule 133 (cond_literal -> INT_LIT .)
    GT_EQ           reduce using rule 133 (cond_literal -> INT_LIT .)
    RPAREN          reduce using rule 133 (cond_literal -> INT_LIT .)


state 255

    (134) cond_literal -> FLT_LIT .

    PLUS            reduce using rule 134 (cond_literal -> FLT_LIT .)
    MINUS           reduce using rule 134 (cond_literal -> FLT_LIT .)
    MULTIPLY        reduce using rule 134 (cond_literal -> FLT_LIT .)
    DIVISION        reduce using rule 134 (cond_literal -> FLT_LIT .)
    MODULO          reduce using rule 134 (cond_literal -> FLT_LIT .)
    AND             reduce using rule 134 (cond_literal -> FLT_LIT .)
    OR              reduce using rule 134 (cond_literal -> FLT_LIT .)
    EQ_EQ           reduce using rule 134 (cond_literal -> FLT_LIT .)
    NOT_EQ          reduce using rule 134 (cond_literal -> FLT_LIT .)
    LT              reduce using rule 134 (cond_literal -> FLT_LIT .)
    GT              reduce using rule 134 (cond_literal -> FLT_LIT .)
    LT_EQ           reduce using rule 134 (cond_literal -> FLT_LIT .)
    GT_EQ           reduce using rule 134 (cond_literal -> FLT_LIT .)
    RPAREN          reduce using rule 134 (cond_literal -> FLT_LIT .)


state 256

    (135) cond_literal -> DAY .

    PLUS            reduce using rule 135 (cond_literal -> DAY .)
    MINUS           reduce using rule 135 (cond_literal -> DAY .)
    MULTIPLY        reduce using rule 135 (cond_literal -> DAY .)
    DIVISION        reduce using rule 135 (cond_literal -> DAY .)
    MODULO          reduce using rule 135 (cond_literal -> DAY .)
    AND             reduce using rule 135 (cond_literal -> DAY .)
    OR              reduce using rule 135 (cond_literal -> DAY .)
    EQ_EQ           reduce using rule 135 (cond_literal -> DAY .)
    NOT_EQ          reduce using rule 135 (cond_literal -> DAY .)
    LT              reduce using rule 135 (cond_literal -> DAY .)
    GT              reduce using rule 135 (cond_literal -> DAY .)
    LT_EQ           reduce using rule 135 (cond_literal -> DAY .)
    GT_EQ           reduce using rule 135 (cond_literal -> DAY .)
    RPAREN          reduce using rule 135 (cond_literal -> DAY .)


state 257

    (136) cond_literal -> NIGHT .

    PLUS            reduce using rule 136 (cond_literal -> NIGHT .)
    MINUS           reduce using rule 136 (cond_literal -> NIGHT .)
    MULTIPLY        reduce using rule 136 (cond_literal -> NIGHT .)
    DIVISION        reduce using rule 136 (cond_literal -> NIGHT .)
    MODULO          reduce using rule 136 (cond_literal -> NIGHT .)
    AND             reduce using rule 136 (cond_literal -> NIGHT .)
    OR              reduce using rule 136 (cond_literal -> NIGHT .)
    EQ_EQ           reduce using rule 136 (cond_literal -> NIGHT .)
    NOT_EQ          reduce using rule 136 (cond_literal -> NIGHT .)
    LT              reduce using rule 136 (cond_literal -> NIGHT .)
    GT              reduce using rule 136 (cond_literal -> NIGHT .)
    LT_EQ           reduce using rule 136 (cond_literal -> NIGHT .)
    GT_EQ           reduce using rule 136 (cond_literal -> NIGHT .)
    RPAREN          reduce using rule 136 (cond_literal -> NIGHT .)


state 258

    (137) cond_literal -> CHR_LIT .

    PLUS            reduce using rule 137 (cond_literal -> CHR_LIT .)
    MINUS           reduce using rule 137 (cond_literal -> CHR_LIT .)
    MULTIPLY        reduce using rule 137 (cond_literal -> CHR_LIT .)
    DIVISION        reduce using rule 137 (cond_literal -> CHR_LIT .)
    MODULO          reduce using rule 137 (cond_literal -> CHR_LIT .)
    AND             reduce using rule 137 (cond_literal -> CHR_LIT .)
    OR              reduce using rule 137 (cond_literal -> CHR_LIT .)
    EQ_EQ           reduce using rule 137 (cond_literal -> CHR_LIT .)
    NOT_EQ          reduce using rule 137 (cond_literal -> CHR_LIT .)
    LT              reduce using rule 137 (cond_literal -> CHR_LIT .)
    GT              reduce using rule 137 (cond_literal -> CHR_LIT .)
    LT_EQ           reduce using rule 137 (cond_literal -> CHR_LIT .)
    GT_EQ           reduce using rule 137 (cond_literal -> CHR_LIT .)
    RPAREN          reduce using rule 137 (cond_literal -> CHR_LIT .)


state 259

    (138) cond_literal -> STR_LIT .

    PLUS            reduce using rule 138 (cond_literal -> STR_LIT .)
    MINUS           reduce using rule 138 (cond_literal -> STR_LIT .)
    MULTIPLY        reduce using rule 138 (cond_literal -> STR_LIT .)
    DIVISION        reduce using rule 138 (cond_literal -> STR_LIT .)
    MODULO          reduce using rule 138 (cond_literal -> STR_LIT .)
    AND             reduce using rule 138 (cond_literal -> STR_LIT .)
    OR              reduce using rule 138 (cond_literal -> STR_LIT .)
    EQ_EQ           reduce using rule 138 (cond_literal -> STR_LIT .)
    NOT_EQ          reduce using rule 138 (cond_literal -> STR_LIT .)
    LT              reduce using rule 138 (cond_literal -> STR_LIT .)
    GT              reduce using rule 138 (cond_literal -> STR_LIT .)
    LT_EQ           reduce using rule 138 (cond_literal -> STR_LIT .)
    GT_EQ           reduce using rule 138 (cond_literal -> STR_LIT .)
    RPAREN          reduce using rule 138 (cond_literal -> STR_LIT .)


state 260

    (139) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    RPAREN          shift and go to state 318


state 261

    (146) for_loop -> FOR LPAREN control_variable . SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE

    SEMICOLON       shift and go to state 319


state 262

    (203) control_variable -> INT . IDENT EQ INT_LIT

    IDENT           shift and go to state 320


state 263

    (174) until_loop -> UNTIL LPAREN until_loop_condition . RPAREN LBRACE maybe_newline statements RBRACE

    RPAREN          shift and go to state 321


state 264

    (176) until_loop_condition -> until_loop_arithmetic_expression . until_loop_condition_tail
    (177) until_loop_condition_tail -> . until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail
    (178) until_loop_condition_tail -> . empty
    (179) until_loop_condition_op -> . AND
    (180) until_loop_condition_op -> . OR
    (181) until_loop_condition_op -> . EQ_EQ
    (182) until_loop_condition_op -> . NOT_EQ
    (183) until_loop_condition_op -> . LT
    (184) until_loop_condition_op -> . GT
    (185) until_loop_condition_op -> . LT_EQ
    (186) until_loop_condition_op -> . GT_EQ
    (235) empty -> .

    AND             shift and go to state 325
    OR              shift and go to state 326
    EQ_EQ           shift and go to state 327
    NOT_EQ          shift and go to state 328
    LT              shift and go to state 329
    GT              shift and go to state 330
    LT_EQ           shift and go to state 331
    GT_EQ           shift and go to state 332
    RPAREN          reduce using rule 235 (empty -> .)

    until_loop_condition_tail      shift and go to state 322
    until_loop_condition_op        shift and go to state 323
    empty                          shift and go to state 324

state 265

    (187) until_loop_arithmetic_expression -> until_loop_arith_term . until_loop_arith_tail
    (190) until_loop_arith_tail -> . empty
    (191) until_loop_arith_tail -> . until_loop_arith_op until_loop_arithmetic_expression
    (235) empty -> .
    (192) until_loop_arith_op -> . PLUS
    (193) until_loop_arith_op -> . MINUS
    (194) until_loop_arith_op -> . MULTIPLY
    (195) until_loop_arith_op -> . DIVISION
    (196) until_loop_arith_op -> . MODULO

    AND             reduce using rule 235 (empty -> .)
    OR              reduce using rule 235 (empty -> .)
    EQ_EQ           reduce using rule 235 (empty -> .)
    NOT_EQ          reduce using rule 235 (empty -> .)
    LT              reduce using rule 235 (empty -> .)
    GT              reduce using rule 235 (empty -> .)
    LT_EQ           reduce using rule 235 (empty -> .)
    GT_EQ           reduce using rule 235 (empty -> .)
    RPAREN          reduce using rule 235 (empty -> .)
    PLUS            shift and go to state 336
    MINUS           shift and go to state 337
    MULTIPLY        shift and go to state 338
    DIVISION        shift and go to state 339
    MODULO          shift and go to state 340

    until_loop_arith_tail          shift and go to state 333
    empty                          shift and go to state 334
    until_loop_arith_op            shift and go to state 335

state 266

    (188) until_loop_arith_term -> until_loop_literal .

    PLUS            reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    MINUS           reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    MULTIPLY        reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    DIVISION        reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    MODULO          reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    AND             reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    OR              reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    EQ_EQ           reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    NOT_EQ          reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    LT              reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    GT              reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    LT_EQ           reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    GT_EQ           reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)
    RPAREN          reduce using rule 188 (until_loop_arith_term -> until_loop_literal .)


state 267

    (189) until_loop_arith_term -> var_call .

    PLUS            reduce using rule 189 (until_loop_arith_term -> var_call .)
    MINUS           reduce using rule 189 (until_loop_arith_term -> var_call .)
    MULTIPLY        reduce using rule 189 (until_loop_arith_term -> var_call .)
    DIVISION        reduce using rule 189 (until_loop_arith_term -> var_call .)
    MODULO          reduce using rule 189 (until_loop_arith_term -> var_call .)
    AND             reduce using rule 189 (until_loop_arith_term -> var_call .)
    OR              reduce using rule 189 (until_loop_arith_term -> var_call .)
    EQ_EQ           reduce using rule 189 (until_loop_arith_term -> var_call .)
    NOT_EQ          reduce using rule 189 (until_loop_arith_term -> var_call .)
    LT              reduce using rule 189 (until_loop_arith_term -> var_call .)
    GT              reduce using rule 189 (until_loop_arith_term -> var_call .)
    LT_EQ           reduce using rule 189 (until_loop_arith_term -> var_call .)
    GT_EQ           reduce using rule 189 (until_loop_arith_term -> var_call .)
    RPAREN          reduce using rule 189 (until_loop_arith_term -> var_call .)


state 268

    (197) until_loop_literal -> INT_LIT .

    PLUS            reduce using rule 197 (until_loop_literal -> INT_LIT .)
    MINUS           reduce using rule 197 (until_loop_literal -> INT_LIT .)
    MULTIPLY        reduce using rule 197 (until_loop_literal -> INT_LIT .)
    DIVISION        reduce using rule 197 (until_loop_literal -> INT_LIT .)
    MODULO          reduce using rule 197 (until_loop_literal -> INT_LIT .)
    AND             reduce using rule 197 (until_loop_literal -> INT_LIT .)
    OR              reduce using rule 197 (until_loop_literal -> INT_LIT .)
    EQ_EQ           reduce using rule 197 (until_loop_literal -> INT_LIT .)
    NOT_EQ          reduce using rule 197 (until_loop_literal -> INT_LIT .)
    LT              reduce using rule 197 (until_loop_literal -> INT_LIT .)
    GT              reduce using rule 197 (until_loop_literal -> INT_LIT .)
    LT_EQ           reduce using rule 197 (until_loop_literal -> INT_LIT .)
    GT_EQ           reduce using rule 197 (until_loop_literal -> INT_LIT .)
    RPAREN          reduce using rule 197 (until_loop_literal -> INT_LIT .)


state 269

    (198) until_loop_literal -> FLT_LIT .

    PLUS            reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    MINUS           reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    MULTIPLY        reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    DIVISION        reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    MODULO          reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    AND             reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    OR              reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    EQ_EQ           reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    NOT_EQ          reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    LT              reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    GT              reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    LT_EQ           reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    GT_EQ           reduce using rule 198 (until_loop_literal -> FLT_LIT .)
    RPAREN          reduce using rule 198 (until_loop_literal -> FLT_LIT .)


state 270

    (199) until_loop_literal -> DAY .

    PLUS            reduce using rule 199 (until_loop_literal -> DAY .)
    MINUS           reduce using rule 199 (until_loop_literal -> DAY .)
    MULTIPLY        reduce using rule 199 (until_loop_literal -> DAY .)
    DIVISION        reduce using rule 199 (until_loop_literal -> DAY .)
    MODULO          reduce using rule 199 (until_loop_literal -> DAY .)
    AND             reduce using rule 199 (until_loop_literal -> DAY .)
    OR              reduce using rule 199 (until_loop_literal -> DAY .)
    EQ_EQ           reduce using rule 199 (until_loop_literal -> DAY .)
    NOT_EQ          reduce using rule 199 (until_loop_literal -> DAY .)
    LT              reduce using rule 199 (until_loop_literal -> DAY .)
    GT              reduce using rule 199 (until_loop_literal -> DAY .)
    LT_EQ           reduce using rule 199 (until_loop_literal -> DAY .)
    GT_EQ           reduce using rule 199 (until_loop_literal -> DAY .)
    RPAREN          reduce using rule 199 (until_loop_literal -> DAY .)


state 271

    (200) until_loop_literal -> NIGHT .

    PLUS            reduce using rule 200 (until_loop_literal -> NIGHT .)
    MINUS           reduce using rule 200 (until_loop_literal -> NIGHT .)
    MULTIPLY        reduce using rule 200 (until_loop_literal -> NIGHT .)
    DIVISION        reduce using rule 200 (until_loop_literal -> NIGHT .)
    MODULO          reduce using rule 200 (until_loop_literal -> NIGHT .)
    AND             reduce using rule 200 (until_loop_literal -> NIGHT .)
    OR              reduce using rule 200 (until_loop_literal -> NIGHT .)
    EQ_EQ           reduce using rule 200 (until_loop_literal -> NIGHT .)
    NOT_EQ          reduce using rule 200 (until_loop_literal -> NIGHT .)
    LT              reduce using rule 200 (until_loop_literal -> NIGHT .)
    GT              reduce using rule 200 (until_loop_literal -> NIGHT .)
    LT_EQ           reduce using rule 200 (until_loop_literal -> NIGHT .)
    GT_EQ           reduce using rule 200 (until_loop_literal -> NIGHT .)
    RPAREN          reduce using rule 200 (until_loop_literal -> NIGHT .)


state 272

    (201) until_loop_literal -> CHR_LIT .

    PLUS            reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    MINUS           reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    MULTIPLY        reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    DIVISION        reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    MODULO          reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    AND             reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    OR              reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    EQ_EQ           reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    NOT_EQ          reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    LT              reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    GT              reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    LT_EQ           reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    GT_EQ           reduce using rule 201 (until_loop_literal -> CHR_LIT .)
    RPAREN          reduce using rule 201 (until_loop_literal -> CHR_LIT .)


state 273

    (202) until_loop_literal -> STR_LIT .

    PLUS            reduce using rule 202 (until_loop_literal -> STR_LIT .)
    MINUS           reduce using rule 202 (until_loop_literal -> STR_LIT .)
    MULTIPLY        reduce using rule 202 (until_loop_literal -> STR_LIT .)
    DIVISION        reduce using rule 202 (until_loop_literal -> STR_LIT .)
    MODULO          reduce using rule 202 (until_loop_literal -> STR_LIT .)
    AND             reduce using rule 202 (until_loop_literal -> STR_LIT .)
    OR              reduce using rule 202 (until_loop_literal -> STR_LIT .)
    EQ_EQ           reduce using rule 202 (until_loop_literal -> STR_LIT .)
    NOT_EQ          reduce using rule 202 (until_loop_literal -> STR_LIT .)
    LT              reduce using rule 202 (until_loop_literal -> STR_LIT .)
    GT              reduce using rule 202 (until_loop_literal -> STR_LIT .)
    LT_EQ           reduce using rule 202 (until_loop_literal -> STR_LIT .)
    GT_EQ           reduce using rule 202 (until_loop_literal -> STR_LIT .)
    RPAREN          reduce using rule 202 (until_loop_literal -> STR_LIT .)


state 274

    (175) repeat_until -> REPEAT LBRACE maybe_newline . statements RBRACE UNTIL LPAREN until_loop_condition RPAREN
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 341
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 275

    (21) var_tail -> EQ tail_value var_tail2 .

    NEWLINE         reduce using rule 21 (var_tail -> EQ tail_value var_tail2 .)


state 276

    (23) var_tail2 -> empty .

    NEWLINE         reduce using rule 23 (var_tail2 -> empty .)


state 277

    (24) var_tail2 -> COMMA . IDENT var_tail

    IDENT           shift and go to state 342


state 278

    (26) tail_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 343


state 279

    (22) var_tail -> COMMA IDENT var_tail .

    NEWLINE         reduce using rule 22 (var_tail -> COMMA IDENT var_tail .)


state 280

    (76) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail .

    NEWLINE         reduce using rule 76 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail .)
    MAIN_CASPER     reduce using rule 76 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail .)


state 281

    (78) function_statements_tail -> function_statements .

    NEWLINE         reduce using rule 78 (function_statements_tail -> function_statements .)
    MAIN_CASPER     reduce using rule 78 (function_statements_tail -> function_statements .)


state 282

    (79) function_statements_tail -> empty .
    (77) function_statements -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 77 (function_statements -> empty .)
  ! reduce/reduce conflict for MAIN_CASPER resolved using rule 77 (function_statements -> empty .)
    NEWLINE         reduce using rule 77 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 77 (function_statements -> empty .)

  ! NEWLINE         [ reduce using rule 79 (function_statements_tail -> empty .) ]
  ! MAIN_CASPER     [ reduce using rule 79 (function_statements_tail -> empty .) ]


state 283

    (40) type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 40 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 40 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 40 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 40 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 40 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 284

    (45) typecast_value -> FUNCTION_NAME LPAREN . RPAREN

    RPAREN          shift and go to state 344


state 285

    (221) input_statement -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 345


state 286

    (41) type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 41 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 41 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 41 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 41 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 41 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 287

    (42) type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 42 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 42 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 42 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 42 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 42 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 288

    (43) type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 43 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 43 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 43 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 43 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 43 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 289

    (209) function_call -> FUNCTION_NAME LPAREN arguments RPAREN .

    NEWLINE         reduce using rule 209 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 209 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COMMA           reduce using rule 209 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 209 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COLON           reduce using rule 209 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)


state 290

    (212) arguments -> arg_value arg_tail .

    RPAREN          reduce using rule 212 (arguments -> arg_value arg_tail .)


state 291

    (213) arg_tail -> empty .

    RPAREN          reduce using rule 213 (arg_tail -> empty .)


state 292

    (214) arg_tail -> COMMA . arg_value arg_tail
    (215) arg_value -> . literal
    (216) arg_value -> . var_call
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60
    IDENT           shift and go to state 54

    arg_value                      shift and go to state 346
    literal                        shift and go to state 232
    var_call                       shift and go to state 233

state 293

    (220) next_val -> COMMA value . next_val
    (219) next_val -> . empty
    (220) next_val -> . COMMA value next_val
    (235) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 236
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    RPAREN          reduce using rule 235 (empty -> .)
    COLON           reduce using rule 235 (empty -> .)

  ! COMMA           [ reduce using rule 235 (empty -> .) ]

    next_val                       shift and go to state 347
    empty                          shift and go to state 235

state 294

    (218) output_statement -> DISPLAY LPAREN value next_val . RPAREN

    RPAREN          shift and go to state 348


state 295

    (232) stringcon_tail -> PLUS . string_val stringcon_tail
    (233) string_val -> . var_call
    (234) string_val -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    STR_LIT         shift and go to state 247
    IDENT           shift and go to state 54

    string_val                     shift and go to state 349
    var_call                       shift and go to state 246

state 296

    (223) string_operation_tail -> PLUS string_val stringcon_tail .

    NEWLINE         reduce using rule 223 (string_operation_tail -> PLUS string_val stringcon_tail .)


state 297

    (231) stringcon_tail -> empty .

    NEWLINE         reduce using rule 231 (stringcon_tail -> empty .)


state 298

    (109) conditional_statement -> CHECK LPAREN condition RPAREN . maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    LBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 350
    empty                          shift and go to state 16

state 299

    (112) condition -> arithmetic_expression condition_tail .

    RPAREN          reduce using rule 112 (condition -> arithmetic_expression condition_tail .)


state 300

    (113) condition_tail -> condition_op . arithmetic_expression condition_tail
    (123) arithmetic_expression -> . arith_term arith_tail
    (124) arith_term -> . cond_literal
    (125) arith_term -> . var_call
    (133) cond_literal -> . INT_LIT
    (134) cond_literal -> . FLT_LIT
    (135) cond_literal -> . DAY
    (136) cond_literal -> . NIGHT
    (137) cond_literal -> . CHR_LIT
    (138) cond_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 254
    FLT_LIT         shift and go to state 255
    DAY             shift and go to state 256
    NIGHT           shift and go to state 257
    CHR_LIT         shift and go to state 258
    STR_LIT         shift and go to state 259
    IDENT           shift and go to state 54

    arithmetic_expression          shift and go to state 351
    arith_term                     shift and go to state 251
    cond_literal                   shift and go to state 252
    var_call                       shift and go to state 253

state 301

    (114) condition_tail -> empty .

    RPAREN          reduce using rule 114 (condition_tail -> empty .)


state 302

    (115) condition_op -> AND .

    INT_LIT         reduce using rule 115 (condition_op -> AND .)
    FLT_LIT         reduce using rule 115 (condition_op -> AND .)
    DAY             reduce using rule 115 (condition_op -> AND .)
    NIGHT           reduce using rule 115 (condition_op -> AND .)
    CHR_LIT         reduce using rule 115 (condition_op -> AND .)
    STR_LIT         reduce using rule 115 (condition_op -> AND .)
    IDENT           reduce using rule 115 (condition_op -> AND .)


state 303

    (116) condition_op -> OR .

    INT_LIT         reduce using rule 116 (condition_op -> OR .)
    FLT_LIT         reduce using rule 116 (condition_op -> OR .)
    DAY             reduce using rule 116 (condition_op -> OR .)
    NIGHT           reduce using rule 116 (condition_op -> OR .)
    CHR_LIT         reduce using rule 116 (condition_op -> OR .)
    STR_LIT         reduce using rule 116 (condition_op -> OR .)
    IDENT           reduce using rule 116 (condition_op -> OR .)


state 304

    (117) condition_op -> EQ_EQ .

    INT_LIT         reduce using rule 117 (condition_op -> EQ_EQ .)
    FLT_LIT         reduce using rule 117 (condition_op -> EQ_EQ .)
    DAY             reduce using rule 117 (condition_op -> EQ_EQ .)
    NIGHT           reduce using rule 117 (condition_op -> EQ_EQ .)
    CHR_LIT         reduce using rule 117 (condition_op -> EQ_EQ .)
    STR_LIT         reduce using rule 117 (condition_op -> EQ_EQ .)
    IDENT           reduce using rule 117 (condition_op -> EQ_EQ .)


state 305

    (118) condition_op -> NOT_EQ .

    INT_LIT         reduce using rule 118 (condition_op -> NOT_EQ .)
    FLT_LIT         reduce using rule 118 (condition_op -> NOT_EQ .)
    DAY             reduce using rule 118 (condition_op -> NOT_EQ .)
    NIGHT           reduce using rule 118 (condition_op -> NOT_EQ .)
    CHR_LIT         reduce using rule 118 (condition_op -> NOT_EQ .)
    STR_LIT         reduce using rule 118 (condition_op -> NOT_EQ .)
    IDENT           reduce using rule 118 (condition_op -> NOT_EQ .)


state 306

    (119) condition_op -> LT .

    INT_LIT         reduce using rule 119 (condition_op -> LT .)
    FLT_LIT         reduce using rule 119 (condition_op -> LT .)
    DAY             reduce using rule 119 (condition_op -> LT .)
    NIGHT           reduce using rule 119 (condition_op -> LT .)
    CHR_LIT         reduce using rule 119 (condition_op -> LT .)
    STR_LIT         reduce using rule 119 (condition_op -> LT .)
    IDENT           reduce using rule 119 (condition_op -> LT .)


state 307

    (120) condition_op -> GT .

    INT_LIT         reduce using rule 120 (condition_op -> GT .)
    FLT_LIT         reduce using rule 120 (condition_op -> GT .)
    DAY             reduce using rule 120 (condition_op -> GT .)
    NIGHT           reduce using rule 120 (condition_op -> GT .)
    CHR_LIT         reduce using rule 120 (condition_op -> GT .)
    STR_LIT         reduce using rule 120 (condition_op -> GT .)
    IDENT           reduce using rule 120 (condition_op -> GT .)


state 308

    (121) condition_op -> LT_EQ .

    INT_LIT         reduce using rule 121 (condition_op -> LT_EQ .)
    FLT_LIT         reduce using rule 121 (condition_op -> LT_EQ .)
    DAY             reduce using rule 121 (condition_op -> LT_EQ .)
    NIGHT           reduce using rule 121 (condition_op -> LT_EQ .)
    CHR_LIT         reduce using rule 121 (condition_op -> LT_EQ .)
    STR_LIT         reduce using rule 121 (condition_op -> LT_EQ .)
    IDENT           reduce using rule 121 (condition_op -> LT_EQ .)


state 309

    (122) condition_op -> GT_EQ .

    INT_LIT         reduce using rule 122 (condition_op -> GT_EQ .)
    FLT_LIT         reduce using rule 122 (condition_op -> GT_EQ .)
    DAY             reduce using rule 122 (condition_op -> GT_EQ .)
    NIGHT           reduce using rule 122 (condition_op -> GT_EQ .)
    CHR_LIT         reduce using rule 122 (condition_op -> GT_EQ .)
    STR_LIT         reduce using rule 122 (condition_op -> GT_EQ .)
    IDENT           reduce using rule 122 (condition_op -> GT_EQ .)


state 310

    (123) arithmetic_expression -> arith_term arith_tail .

    AND             reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    OR              reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    EQ_EQ           reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    NOT_EQ          reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    LT              reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    GT              reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    LT_EQ           reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    GT_EQ           reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)
    RPAREN          reduce using rule 123 (arithmetic_expression -> arith_term arith_tail .)


state 311

    (126) arith_tail -> empty .

    AND             reduce using rule 126 (arith_tail -> empty .)
    OR              reduce using rule 126 (arith_tail -> empty .)
    EQ_EQ           reduce using rule 126 (arith_tail -> empty .)
    NOT_EQ          reduce using rule 126 (arith_tail -> empty .)
    LT              reduce using rule 126 (arith_tail -> empty .)
    GT              reduce using rule 126 (arith_tail -> empty .)
    LT_EQ           reduce using rule 126 (arith_tail -> empty .)
    GT_EQ           reduce using rule 126 (arith_tail -> empty .)
    RPAREN          reduce using rule 126 (arith_tail -> empty .)


state 312

    (127) arith_tail -> arith_op . arithmetic_expression
    (123) arithmetic_expression -> . arith_term arith_tail
    (124) arith_term -> . cond_literal
    (125) arith_term -> . var_call
    (133) cond_literal -> . INT_LIT
    (134) cond_literal -> . FLT_LIT
    (135) cond_literal -> . DAY
    (136) cond_literal -> . NIGHT
    (137) cond_literal -> . CHR_LIT
    (138) cond_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 254
    FLT_LIT         shift and go to state 255
    DAY             shift and go to state 256
    NIGHT           shift and go to state 257
    CHR_LIT         shift and go to state 258
    STR_LIT         shift and go to state 259
    IDENT           shift and go to state 54

    arithmetic_expression          shift and go to state 352
    arith_term                     shift and go to state 251
    cond_literal                   shift and go to state 252
    var_call                       shift and go to state 253

state 313

    (128) arith_op -> PLUS .

    INT_LIT         reduce using rule 128 (arith_op -> PLUS .)
    FLT_LIT         reduce using rule 128 (arith_op -> PLUS .)
    DAY             reduce using rule 128 (arith_op -> PLUS .)
    NIGHT           reduce using rule 128 (arith_op -> PLUS .)
    CHR_LIT         reduce using rule 128 (arith_op -> PLUS .)
    STR_LIT         reduce using rule 128 (arith_op -> PLUS .)
    IDENT           reduce using rule 128 (arith_op -> PLUS .)


state 314

    (129) arith_op -> MINUS .

    INT_LIT         reduce using rule 129 (arith_op -> MINUS .)
    FLT_LIT         reduce using rule 129 (arith_op -> MINUS .)
    DAY             reduce using rule 129 (arith_op -> MINUS .)
    NIGHT           reduce using rule 129 (arith_op -> MINUS .)
    CHR_LIT         reduce using rule 129 (arith_op -> MINUS .)
    STR_LIT         reduce using rule 129 (arith_op -> MINUS .)
    IDENT           reduce using rule 129 (arith_op -> MINUS .)


state 315

    (130) arith_op -> MULTIPLY .

    INT_LIT         reduce using rule 130 (arith_op -> MULTIPLY .)
    FLT_LIT         reduce using rule 130 (arith_op -> MULTIPLY .)
    DAY             reduce using rule 130 (arith_op -> MULTIPLY .)
    NIGHT           reduce using rule 130 (arith_op -> MULTIPLY .)
    CHR_LIT         reduce using rule 130 (arith_op -> MULTIPLY .)
    STR_LIT         reduce using rule 130 (arith_op -> MULTIPLY .)
    IDENT           reduce using rule 130 (arith_op -> MULTIPLY .)


state 316

    (131) arith_op -> DIVISION .

    INT_LIT         reduce using rule 131 (arith_op -> DIVISION .)
    FLT_LIT         reduce using rule 131 (arith_op -> DIVISION .)
    DAY             reduce using rule 131 (arith_op -> DIVISION .)
    NIGHT           reduce using rule 131 (arith_op -> DIVISION .)
    CHR_LIT         reduce using rule 131 (arith_op -> DIVISION .)
    STR_LIT         reduce using rule 131 (arith_op -> DIVISION .)
    IDENT           reduce using rule 131 (arith_op -> DIVISION .)


state 317

    (132) arith_op -> MODULO .

    INT_LIT         reduce using rule 132 (arith_op -> MODULO .)
    FLT_LIT         reduce using rule 132 (arith_op -> MODULO .)
    DAY             reduce using rule 132 (arith_op -> MODULO .)
    NIGHT           reduce using rule 132 (arith_op -> MODULO .)
    CHR_LIT         reduce using rule 132 (arith_op -> MODULO .)
    STR_LIT         reduce using rule 132 (arith_op -> MODULO .)
    IDENT           reduce using rule 132 (arith_op -> MODULO .)


state 318

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    LBRACE          shift and go to state 353


state 319

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON . for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE
    (147) for_loop_condition -> . for_loop_arithmetic_expression for_loop_condition_tail
    (158) for_loop_arithmetic_expression -> . for_loop_arith_term for_loop_arith_tail
    (159) for_loop_arith_term -> . for_loop_literal
    (160) for_loop_arith_term -> . var_call
    (168) for_loop_literal -> . INT_LIT
    (169) for_loop_literal -> . FLT_LIT
    (170) for_loop_literal -> . DAY
    (171) for_loop_literal -> . NIGHT
    (172) for_loop_literal -> . CHR_LIT
    (173) for_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 359
    FLT_LIT         shift and go to state 360
    DAY             shift and go to state 361
    NIGHT           shift and go to state 362
    CHR_LIT         shift and go to state 363
    STR_LIT         shift and go to state 364
    IDENT           shift and go to state 54

    for_loop_condition             shift and go to state 354
    for_loop_arithmetic_expression shift and go to state 355
    for_loop_arith_term            shift and go to state 356
    for_loop_literal               shift and go to state 357
    var_call                       shift and go to state 358

state 320

    (203) control_variable -> INT IDENT . EQ INT_LIT

    EQ              shift and go to state 365


state 321

    (174) until_loop -> UNTIL LPAREN until_loop_condition RPAREN . LBRACE maybe_newline statements RBRACE

    LBRACE          shift and go to state 366


state 322

    (176) until_loop_condition -> until_loop_arithmetic_expression until_loop_condition_tail .

    RPAREN          reduce using rule 176 (until_loop_condition -> until_loop_arithmetic_expression until_loop_condition_tail .)


state 323

    (177) until_loop_condition_tail -> until_loop_condition_op . until_loop_arithmetic_expression until_loop_condition_tail
    (187) until_loop_arithmetic_expression -> . until_loop_arith_term until_loop_arith_tail
    (188) until_loop_arith_term -> . until_loop_literal
    (189) until_loop_arith_term -> . var_call
    (197) until_loop_literal -> . INT_LIT
    (198) until_loop_literal -> . FLT_LIT
    (199) until_loop_literal -> . DAY
    (200) until_loop_literal -> . NIGHT
    (201) until_loop_literal -> . CHR_LIT
    (202) until_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 268
    FLT_LIT         shift and go to state 269
    DAY             shift and go to state 270
    NIGHT           shift and go to state 271
    CHR_LIT         shift and go to state 272
    STR_LIT         shift and go to state 273
    IDENT           shift and go to state 54

    until_loop_arithmetic_expression shift and go to state 367
    until_loop_arith_term          shift and go to state 265
    until_loop_literal             shift and go to state 266
    var_call                       shift and go to state 267

state 324

    (178) until_loop_condition_tail -> empty .

    RPAREN          reduce using rule 178 (until_loop_condition_tail -> empty .)


state 325

    (179) until_loop_condition_op -> AND .

    INT_LIT         reduce using rule 179 (until_loop_condition_op -> AND .)
    FLT_LIT         reduce using rule 179 (until_loop_condition_op -> AND .)
    DAY             reduce using rule 179 (until_loop_condition_op -> AND .)
    NIGHT           reduce using rule 179 (until_loop_condition_op -> AND .)
    CHR_LIT         reduce using rule 179 (until_loop_condition_op -> AND .)
    STR_LIT         reduce using rule 179 (until_loop_condition_op -> AND .)
    IDENT           reduce using rule 179 (until_loop_condition_op -> AND .)


state 326

    (180) until_loop_condition_op -> OR .

    INT_LIT         reduce using rule 180 (until_loop_condition_op -> OR .)
    FLT_LIT         reduce using rule 180 (until_loop_condition_op -> OR .)
    DAY             reduce using rule 180 (until_loop_condition_op -> OR .)
    NIGHT           reduce using rule 180 (until_loop_condition_op -> OR .)
    CHR_LIT         reduce using rule 180 (until_loop_condition_op -> OR .)
    STR_LIT         reduce using rule 180 (until_loop_condition_op -> OR .)
    IDENT           reduce using rule 180 (until_loop_condition_op -> OR .)


state 327

    (181) until_loop_condition_op -> EQ_EQ .

    INT_LIT         reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)
    FLT_LIT         reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)
    DAY             reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)
    NIGHT           reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)
    CHR_LIT         reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)
    STR_LIT         reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)
    IDENT           reduce using rule 181 (until_loop_condition_op -> EQ_EQ .)


state 328

    (182) until_loop_condition_op -> NOT_EQ .

    INT_LIT         reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)
    FLT_LIT         reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)
    DAY             reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)
    NIGHT           reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)
    CHR_LIT         reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)
    STR_LIT         reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)
    IDENT           reduce using rule 182 (until_loop_condition_op -> NOT_EQ .)


state 329

    (183) until_loop_condition_op -> LT .

    INT_LIT         reduce using rule 183 (until_loop_condition_op -> LT .)
    FLT_LIT         reduce using rule 183 (until_loop_condition_op -> LT .)
    DAY             reduce using rule 183 (until_loop_condition_op -> LT .)
    NIGHT           reduce using rule 183 (until_loop_condition_op -> LT .)
    CHR_LIT         reduce using rule 183 (until_loop_condition_op -> LT .)
    STR_LIT         reduce using rule 183 (until_loop_condition_op -> LT .)
    IDENT           reduce using rule 183 (until_loop_condition_op -> LT .)


state 330

    (184) until_loop_condition_op -> GT .

    INT_LIT         reduce using rule 184 (until_loop_condition_op -> GT .)
    FLT_LIT         reduce using rule 184 (until_loop_condition_op -> GT .)
    DAY             reduce using rule 184 (until_loop_condition_op -> GT .)
    NIGHT           reduce using rule 184 (until_loop_condition_op -> GT .)
    CHR_LIT         reduce using rule 184 (until_loop_condition_op -> GT .)
    STR_LIT         reduce using rule 184 (until_loop_condition_op -> GT .)
    IDENT           reduce using rule 184 (until_loop_condition_op -> GT .)


state 331

    (185) until_loop_condition_op -> LT_EQ .

    INT_LIT         reduce using rule 185 (until_loop_condition_op -> LT_EQ .)
    FLT_LIT         reduce using rule 185 (until_loop_condition_op -> LT_EQ .)
    DAY             reduce using rule 185 (until_loop_condition_op -> LT_EQ .)
    NIGHT           reduce using rule 185 (until_loop_condition_op -> LT_EQ .)
    CHR_LIT         reduce using rule 185 (until_loop_condition_op -> LT_EQ .)
    STR_LIT         reduce using rule 185 (until_loop_condition_op -> LT_EQ .)
    IDENT           reduce using rule 185 (until_loop_condition_op -> LT_EQ .)


state 332

    (186) until_loop_condition_op -> GT_EQ .

    INT_LIT         reduce using rule 186 (until_loop_condition_op -> GT_EQ .)
    FLT_LIT         reduce using rule 186 (until_loop_condition_op -> GT_EQ .)
    DAY             reduce using rule 186 (until_loop_condition_op -> GT_EQ .)
    NIGHT           reduce using rule 186 (until_loop_condition_op -> GT_EQ .)
    CHR_LIT         reduce using rule 186 (until_loop_condition_op -> GT_EQ .)
    STR_LIT         reduce using rule 186 (until_loop_condition_op -> GT_EQ .)
    IDENT           reduce using rule 186 (until_loop_condition_op -> GT_EQ .)


state 333

    (187) until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .

    AND             reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    OR              reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    EQ_EQ           reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    NOT_EQ          reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    LT              reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    GT              reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    LT_EQ           reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    GT_EQ           reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)
    RPAREN          reduce using rule 187 (until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail .)


state 334

    (190) until_loop_arith_tail -> empty .

    AND             reduce using rule 190 (until_loop_arith_tail -> empty .)
    OR              reduce using rule 190 (until_loop_arith_tail -> empty .)
    EQ_EQ           reduce using rule 190 (until_loop_arith_tail -> empty .)
    NOT_EQ          reduce using rule 190 (until_loop_arith_tail -> empty .)
    LT              reduce using rule 190 (until_loop_arith_tail -> empty .)
    GT              reduce using rule 190 (until_loop_arith_tail -> empty .)
    LT_EQ           reduce using rule 190 (until_loop_arith_tail -> empty .)
    GT_EQ           reduce using rule 190 (until_loop_arith_tail -> empty .)
    RPAREN          reduce using rule 190 (until_loop_arith_tail -> empty .)


state 335

    (191) until_loop_arith_tail -> until_loop_arith_op . until_loop_arithmetic_expression
    (187) until_loop_arithmetic_expression -> . until_loop_arith_term until_loop_arith_tail
    (188) until_loop_arith_term -> . until_loop_literal
    (189) until_loop_arith_term -> . var_call
    (197) until_loop_literal -> . INT_LIT
    (198) until_loop_literal -> . FLT_LIT
    (199) until_loop_literal -> . DAY
    (200) until_loop_literal -> . NIGHT
    (201) until_loop_literal -> . CHR_LIT
    (202) until_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 268
    FLT_LIT         shift and go to state 269
    DAY             shift and go to state 270
    NIGHT           shift and go to state 271
    CHR_LIT         shift and go to state 272
    STR_LIT         shift and go to state 273
    IDENT           shift and go to state 54

    until_loop_arithmetic_expression shift and go to state 368
    until_loop_arith_term          shift and go to state 265
    until_loop_literal             shift and go to state 266
    var_call                       shift and go to state 267

state 336

    (192) until_loop_arith_op -> PLUS .

    INT_LIT         reduce using rule 192 (until_loop_arith_op -> PLUS .)
    FLT_LIT         reduce using rule 192 (until_loop_arith_op -> PLUS .)
    DAY             reduce using rule 192 (until_loop_arith_op -> PLUS .)
    NIGHT           reduce using rule 192 (until_loop_arith_op -> PLUS .)
    CHR_LIT         reduce using rule 192 (until_loop_arith_op -> PLUS .)
    STR_LIT         reduce using rule 192 (until_loop_arith_op -> PLUS .)
    IDENT           reduce using rule 192 (until_loop_arith_op -> PLUS .)


state 337

    (193) until_loop_arith_op -> MINUS .

    INT_LIT         reduce using rule 193 (until_loop_arith_op -> MINUS .)
    FLT_LIT         reduce using rule 193 (until_loop_arith_op -> MINUS .)
    DAY             reduce using rule 193 (until_loop_arith_op -> MINUS .)
    NIGHT           reduce using rule 193 (until_loop_arith_op -> MINUS .)
    CHR_LIT         reduce using rule 193 (until_loop_arith_op -> MINUS .)
    STR_LIT         reduce using rule 193 (until_loop_arith_op -> MINUS .)
    IDENT           reduce using rule 193 (until_loop_arith_op -> MINUS .)


state 338

    (194) until_loop_arith_op -> MULTIPLY .

    INT_LIT         reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)
    FLT_LIT         reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)
    DAY             reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)
    NIGHT           reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)
    CHR_LIT         reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)
    STR_LIT         reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)
    IDENT           reduce using rule 194 (until_loop_arith_op -> MULTIPLY .)


state 339

    (195) until_loop_arith_op -> DIVISION .

    INT_LIT         reduce using rule 195 (until_loop_arith_op -> DIVISION .)
    FLT_LIT         reduce using rule 195 (until_loop_arith_op -> DIVISION .)
    DAY             reduce using rule 195 (until_loop_arith_op -> DIVISION .)
    NIGHT           reduce using rule 195 (until_loop_arith_op -> DIVISION .)
    CHR_LIT         reduce using rule 195 (until_loop_arith_op -> DIVISION .)
    STR_LIT         reduce using rule 195 (until_loop_arith_op -> DIVISION .)
    IDENT           reduce using rule 195 (until_loop_arith_op -> DIVISION .)


state 340

    (196) until_loop_arith_op -> MODULO .

    INT_LIT         reduce using rule 196 (until_loop_arith_op -> MODULO .)
    FLT_LIT         reduce using rule 196 (until_loop_arith_op -> MODULO .)
    DAY             reduce using rule 196 (until_loop_arith_op -> MODULO .)
    NIGHT           reduce using rule 196 (until_loop_arith_op -> MODULO .)
    CHR_LIT         reduce using rule 196 (until_loop_arith_op -> MODULO .)
    STR_LIT         reduce using rule 196 (until_loop_arith_op -> MODULO .)
    IDENT           reduce using rule 196 (until_loop_arith_op -> MODULO .)


state 341

    (175) repeat_until -> REPEAT LBRACE maybe_newline statements . RBRACE UNTIL LPAREN until_loop_condition RPAREN

    RBRACE          shift and go to state 369


state 342

    (24) var_tail2 -> COMMA IDENT . var_tail
    (20) var_tail -> . empty
    (21) var_tail -> . EQ tail_value var_tail2
    (22) var_tail -> . COMMA IDENT var_tail
    (235) empty -> .

    EQ              shift and go to state 180
    COMMA           shift and go to state 181
    NEWLINE         reduce using rule 235 (empty -> .)

    var_tail                       shift and go to state 370
    empty                          shift and go to state 179

state 343

    (26) tail_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 26 (tail_value -> LBRACKET list_element RBRACKET .)
    NEWLINE         reduce using rule 26 (tail_value -> LBRACKET list_element RBRACKET .)


state 344

    (45) typecast_value -> FUNCTION_NAME LPAREN RPAREN .

    RPAREN          reduce using rule 45 (typecast_value -> FUNCTION_NAME LPAREN RPAREN .)


state 345

    (221) input_statement -> INPUT LPAREN RPAREN .

    RPAREN          reduce using rule 221 (input_statement -> INPUT LPAREN RPAREN .)


state 346

    (214) arg_tail -> COMMA arg_value . arg_tail
    (213) arg_tail -> . empty
    (214) arg_tail -> . COMMA arg_value arg_tail
    (235) empty -> .

    COMMA           shift and go to state 292
    RPAREN          reduce using rule 235 (empty -> .)

    arg_tail                       shift and go to state 371
    empty                          shift and go to state 291

state 347

    (220) next_val -> COMMA value next_val .

    COMMA           reduce using rule 220 (next_val -> COMMA value next_val .)
    NEWLINE         reduce using rule 220 (next_val -> COMMA value next_val .)
    RBRACE          reduce using rule 220 (next_val -> COMMA value next_val .)
    RPAREN          reduce using rule 220 (next_val -> COMMA value next_val .)
    COLON           reduce using rule 220 (next_val -> COMMA value next_val .)


state 348

    (218) output_statement -> DISPLAY LPAREN value next_val RPAREN .

    NEWLINE         reduce using rule 218 (output_statement -> DISPLAY LPAREN value next_val RPAREN .)
    RBRACE          reduce using rule 218 (output_statement -> DISPLAY LPAREN value next_val RPAREN .)
    COMMA           reduce using rule 218 (output_statement -> DISPLAY LPAREN value next_val RPAREN .)
    RPAREN          reduce using rule 218 (output_statement -> DISPLAY LPAREN value next_val RPAREN .)
    COLON           reduce using rule 218 (output_statement -> DISPLAY LPAREN value next_val RPAREN .)


state 349

    (232) stringcon_tail -> PLUS string_val . stringcon_tail
    (231) stringcon_tail -> . empty
    (232) stringcon_tail -> . PLUS string_val stringcon_tail
    (235) empty -> .

    PLUS            shift and go to state 295
    NEWLINE         reduce using rule 235 (empty -> .)

    stringcon_tail                 shift and go to state 372
    empty                          shift and go to state 297

state 350

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline . LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE

    LBRACE          shift and go to state 373


state 351

    (113) condition_tail -> condition_op arithmetic_expression . condition_tail
    (113) condition_tail -> . condition_op arithmetic_expression condition_tail
    (114) condition_tail -> . empty
    (115) condition_op -> . AND
    (116) condition_op -> . OR
    (117) condition_op -> . EQ_EQ
    (118) condition_op -> . NOT_EQ
    (119) condition_op -> . LT
    (120) condition_op -> . GT
    (121) condition_op -> . LT_EQ
    (122) condition_op -> . GT_EQ
    (235) empty -> .

    AND             shift and go to state 302
    OR              shift and go to state 303
    EQ_EQ           shift and go to state 304
    NOT_EQ          shift and go to state 305
    LT              shift and go to state 306
    GT              shift and go to state 307
    LT_EQ           shift and go to state 308
    GT_EQ           shift and go to state 309
    RPAREN          reduce using rule 235 (empty -> .)

    condition_op                   shift and go to state 300
    condition_tail                 shift and go to state 374
    empty                          shift and go to state 301

state 352

    (127) arith_tail -> arith_op arithmetic_expression .

    AND             reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    OR              reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    EQ_EQ           reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    NOT_EQ          reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    LT              reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    GT              reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    LT_EQ           reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    GT_EQ           reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)
    RPAREN          reduce using rule 127 (arith_tail -> arith_op arithmetic_expression .)


state 353

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    SHIFT           reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 375
    empty                          shift and go to state 16

state 354

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition . SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE

    SEMICOLON       shift and go to state 376


state 355

    (147) for_loop_condition -> for_loop_arithmetic_expression . for_loop_condition_tail
    (148) for_loop_condition_tail -> . for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail
    (149) for_loop_condition_tail -> . empty
    (150) for_loop_condition_op -> . AND
    (151) for_loop_condition_op -> . OR
    (152) for_loop_condition_op -> . EQ_EQ
    (153) for_loop_condition_op -> . NOT_EQ
    (154) for_loop_condition_op -> . LT
    (155) for_loop_condition_op -> . GT
    (156) for_loop_condition_op -> . LT_EQ
    (157) for_loop_condition_op -> . GT_EQ
    (235) empty -> .

    AND             shift and go to state 380
    OR              shift and go to state 381
    EQ_EQ           shift and go to state 382
    NOT_EQ          shift and go to state 383
    LT              shift and go to state 384
    GT              shift and go to state 385
    LT_EQ           shift and go to state 386
    GT_EQ           shift and go to state 387
    SEMICOLON       reduce using rule 235 (empty -> .)

    for_loop_condition_tail        shift and go to state 377
    for_loop_condition_op          shift and go to state 378
    empty                          shift and go to state 379

state 356

    (158) for_loop_arithmetic_expression -> for_loop_arith_term . for_loop_arith_tail
    (161) for_loop_arith_tail -> . empty
    (162) for_loop_arith_tail -> . for_loop_arith_op for_loop_arithmetic_expression
    (235) empty -> .
    (163) for_loop_arith_op -> . PLUS
    (164) for_loop_arith_op -> . MINUS
    (165) for_loop_arith_op -> . MULTIPLY
    (166) for_loop_arith_op -> . DIVISION
    (167) for_loop_arith_op -> . MODULO

    AND             reduce using rule 235 (empty -> .)
    OR              reduce using rule 235 (empty -> .)
    EQ_EQ           reduce using rule 235 (empty -> .)
    NOT_EQ          reduce using rule 235 (empty -> .)
    LT              reduce using rule 235 (empty -> .)
    GT              reduce using rule 235 (empty -> .)
    LT_EQ           reduce using rule 235 (empty -> .)
    GT_EQ           reduce using rule 235 (empty -> .)
    SEMICOLON       reduce using rule 235 (empty -> .)
    PLUS            shift and go to state 391
    MINUS           shift and go to state 392
    MULTIPLY        shift and go to state 393
    DIVISION        shift and go to state 394
    MODULO          shift and go to state 395

    for_loop_arith_tail            shift and go to state 388
    empty                          shift and go to state 389
    for_loop_arith_op              shift and go to state 390

state 357

    (159) for_loop_arith_term -> for_loop_literal .

    PLUS            reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    MINUS           reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    MULTIPLY        reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    DIVISION        reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    MODULO          reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    AND             reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    OR              reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    EQ_EQ           reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    NOT_EQ          reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    LT              reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    GT              reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    LT_EQ           reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    GT_EQ           reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)
    SEMICOLON       reduce using rule 159 (for_loop_arith_term -> for_loop_literal .)


state 358

    (160) for_loop_arith_term -> var_call .

    PLUS            reduce using rule 160 (for_loop_arith_term -> var_call .)
    MINUS           reduce using rule 160 (for_loop_arith_term -> var_call .)
    MULTIPLY        reduce using rule 160 (for_loop_arith_term -> var_call .)
    DIVISION        reduce using rule 160 (for_loop_arith_term -> var_call .)
    MODULO          reduce using rule 160 (for_loop_arith_term -> var_call .)
    AND             reduce using rule 160 (for_loop_arith_term -> var_call .)
    OR              reduce using rule 160 (for_loop_arith_term -> var_call .)
    EQ_EQ           reduce using rule 160 (for_loop_arith_term -> var_call .)
    NOT_EQ          reduce using rule 160 (for_loop_arith_term -> var_call .)
    LT              reduce using rule 160 (for_loop_arith_term -> var_call .)
    GT              reduce using rule 160 (for_loop_arith_term -> var_call .)
    LT_EQ           reduce using rule 160 (for_loop_arith_term -> var_call .)
    GT_EQ           reduce using rule 160 (for_loop_arith_term -> var_call .)
    SEMICOLON       reduce using rule 160 (for_loop_arith_term -> var_call .)


state 359

    (168) for_loop_literal -> INT_LIT .

    PLUS            reduce using rule 168 (for_loop_literal -> INT_LIT .)
    MINUS           reduce using rule 168 (for_loop_literal -> INT_LIT .)
    MULTIPLY        reduce using rule 168 (for_loop_literal -> INT_LIT .)
    DIVISION        reduce using rule 168 (for_loop_literal -> INT_LIT .)
    MODULO          reduce using rule 168 (for_loop_literal -> INT_LIT .)
    AND             reduce using rule 168 (for_loop_literal -> INT_LIT .)
    OR              reduce using rule 168 (for_loop_literal -> INT_LIT .)
    EQ_EQ           reduce using rule 168 (for_loop_literal -> INT_LIT .)
    NOT_EQ          reduce using rule 168 (for_loop_literal -> INT_LIT .)
    LT              reduce using rule 168 (for_loop_literal -> INT_LIT .)
    GT              reduce using rule 168 (for_loop_literal -> INT_LIT .)
    LT_EQ           reduce using rule 168 (for_loop_literal -> INT_LIT .)
    GT_EQ           reduce using rule 168 (for_loop_literal -> INT_LIT .)
    SEMICOLON       reduce using rule 168 (for_loop_literal -> INT_LIT .)


state 360

    (169) for_loop_literal -> FLT_LIT .

    PLUS            reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    MINUS           reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    MULTIPLY        reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    DIVISION        reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    MODULO          reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    AND             reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    OR              reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    EQ_EQ           reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    NOT_EQ          reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    LT              reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    GT              reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    LT_EQ           reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    GT_EQ           reduce using rule 169 (for_loop_literal -> FLT_LIT .)
    SEMICOLON       reduce using rule 169 (for_loop_literal -> FLT_LIT .)


state 361

    (170) for_loop_literal -> DAY .

    PLUS            reduce using rule 170 (for_loop_literal -> DAY .)
    MINUS           reduce using rule 170 (for_loop_literal -> DAY .)
    MULTIPLY        reduce using rule 170 (for_loop_literal -> DAY .)
    DIVISION        reduce using rule 170 (for_loop_literal -> DAY .)
    MODULO          reduce using rule 170 (for_loop_literal -> DAY .)
    AND             reduce using rule 170 (for_loop_literal -> DAY .)
    OR              reduce using rule 170 (for_loop_literal -> DAY .)
    EQ_EQ           reduce using rule 170 (for_loop_literal -> DAY .)
    NOT_EQ          reduce using rule 170 (for_loop_literal -> DAY .)
    LT              reduce using rule 170 (for_loop_literal -> DAY .)
    GT              reduce using rule 170 (for_loop_literal -> DAY .)
    LT_EQ           reduce using rule 170 (for_loop_literal -> DAY .)
    GT_EQ           reduce using rule 170 (for_loop_literal -> DAY .)
    SEMICOLON       reduce using rule 170 (for_loop_literal -> DAY .)


state 362

    (171) for_loop_literal -> NIGHT .

    PLUS            reduce using rule 171 (for_loop_literal -> NIGHT .)
    MINUS           reduce using rule 171 (for_loop_literal -> NIGHT .)
    MULTIPLY        reduce using rule 171 (for_loop_literal -> NIGHT .)
    DIVISION        reduce using rule 171 (for_loop_literal -> NIGHT .)
    MODULO          reduce using rule 171 (for_loop_literal -> NIGHT .)
    AND             reduce using rule 171 (for_loop_literal -> NIGHT .)
    OR              reduce using rule 171 (for_loop_literal -> NIGHT .)
    EQ_EQ           reduce using rule 171 (for_loop_literal -> NIGHT .)
    NOT_EQ          reduce using rule 171 (for_loop_literal -> NIGHT .)
    LT              reduce using rule 171 (for_loop_literal -> NIGHT .)
    GT              reduce using rule 171 (for_loop_literal -> NIGHT .)
    LT_EQ           reduce using rule 171 (for_loop_literal -> NIGHT .)
    GT_EQ           reduce using rule 171 (for_loop_literal -> NIGHT .)
    SEMICOLON       reduce using rule 171 (for_loop_literal -> NIGHT .)


state 363

    (172) for_loop_literal -> CHR_LIT .

    PLUS            reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    MINUS           reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    MULTIPLY        reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    DIVISION        reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    MODULO          reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    AND             reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    OR              reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    EQ_EQ           reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    NOT_EQ          reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    LT              reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    GT              reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    LT_EQ           reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    GT_EQ           reduce using rule 172 (for_loop_literal -> CHR_LIT .)
    SEMICOLON       reduce using rule 172 (for_loop_literal -> CHR_LIT .)


state 364

    (173) for_loop_literal -> STR_LIT .

    PLUS            reduce using rule 173 (for_loop_literal -> STR_LIT .)
    MINUS           reduce using rule 173 (for_loop_literal -> STR_LIT .)
    MULTIPLY        reduce using rule 173 (for_loop_literal -> STR_LIT .)
    DIVISION        reduce using rule 173 (for_loop_literal -> STR_LIT .)
    MODULO          reduce using rule 173 (for_loop_literal -> STR_LIT .)
    AND             reduce using rule 173 (for_loop_literal -> STR_LIT .)
    OR              reduce using rule 173 (for_loop_literal -> STR_LIT .)
    EQ_EQ           reduce using rule 173 (for_loop_literal -> STR_LIT .)
    NOT_EQ          reduce using rule 173 (for_loop_literal -> STR_LIT .)
    LT              reduce using rule 173 (for_loop_literal -> STR_LIT .)
    GT              reduce using rule 173 (for_loop_literal -> STR_LIT .)
    LT_EQ           reduce using rule 173 (for_loop_literal -> STR_LIT .)
    GT_EQ           reduce using rule 173 (for_loop_literal -> STR_LIT .)
    SEMICOLON       reduce using rule 173 (for_loop_literal -> STR_LIT .)


state 365

    (203) control_variable -> INT IDENT EQ . INT_LIT

    INT_LIT         shift and go to state 396


state 366

    (174) until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE . maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 397
    empty                          shift and go to state 16

state 367

    (177) until_loop_condition_tail -> until_loop_condition_op until_loop_arithmetic_expression . until_loop_condition_tail
    (177) until_loop_condition_tail -> . until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail
    (178) until_loop_condition_tail -> . empty
    (179) until_loop_condition_op -> . AND
    (180) until_loop_condition_op -> . OR
    (181) until_loop_condition_op -> . EQ_EQ
    (182) until_loop_condition_op -> . NOT_EQ
    (183) until_loop_condition_op -> . LT
    (184) until_loop_condition_op -> . GT
    (185) until_loop_condition_op -> . LT_EQ
    (186) until_loop_condition_op -> . GT_EQ
    (235) empty -> .

    AND             shift and go to state 325
    OR              shift and go to state 326
    EQ_EQ           shift and go to state 327
    NOT_EQ          shift and go to state 328
    LT              shift and go to state 329
    GT              shift and go to state 330
    LT_EQ           shift and go to state 331
    GT_EQ           shift and go to state 332
    RPAREN          reduce using rule 235 (empty -> .)

    until_loop_condition_op        shift and go to state 323
    until_loop_condition_tail      shift and go to state 398
    empty                          shift and go to state 324

state 368

    (191) until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .

    AND             reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    OR              reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    EQ_EQ           reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    NOT_EQ          reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    LT              reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    GT              reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    LT_EQ           reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    GT_EQ           reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)
    RPAREN          reduce using rule 191 (until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression .)


state 369

    (175) repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE . UNTIL LPAREN until_loop_condition RPAREN

    UNTIL           shift and go to state 399


state 370

    (24) var_tail2 -> COMMA IDENT var_tail .

    NEWLINE         reduce using rule 24 (var_tail2 -> COMMA IDENT var_tail .)


state 371

    (214) arg_tail -> COMMA arg_value arg_tail .

    RPAREN          reduce using rule 214 (arg_tail -> COMMA arg_value arg_tail .)


state 372

    (232) stringcon_tail -> PLUS string_val stringcon_tail .

    NEWLINE         reduce using rule 232 (stringcon_tail -> PLUS string_val stringcon_tail .)


state 373

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE . maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 400
    empty                          shift and go to state 16

state 374

    (113) condition_tail -> condition_op arithmetic_expression condition_tail .

    RPAREN          reduce using rule 113 (condition_tail -> condition_op arithmetic_expression condition_tail .)


state 375

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline . switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (140) switch_condition -> . SHIFT value COLON maybe_newline statements switchcond_tail

    SHIFT           shift and go to state 402

    switch_condition               shift and go to state 401

state 376

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON . update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE
    (204) update -> . var_call update_tail
    (73) var_call -> . IDENT var_call_tail

    IDENT           shift and go to state 54

    update                         shift and go to state 403
    var_call                       shift and go to state 404

state 377

    (147) for_loop_condition -> for_loop_arithmetic_expression for_loop_condition_tail .

    SEMICOLON       reduce using rule 147 (for_loop_condition -> for_loop_arithmetic_expression for_loop_condition_tail .)


state 378

    (148) for_loop_condition_tail -> for_loop_condition_op . for_loop_arithmetic_expression for_loop_condition_tail
    (158) for_loop_arithmetic_expression -> . for_loop_arith_term for_loop_arith_tail
    (159) for_loop_arith_term -> . for_loop_literal
    (160) for_loop_arith_term -> . var_call
    (168) for_loop_literal -> . INT_LIT
    (169) for_loop_literal -> . FLT_LIT
    (170) for_loop_literal -> . DAY
    (171) for_loop_literal -> . NIGHT
    (172) for_loop_literal -> . CHR_LIT
    (173) for_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 359
    FLT_LIT         shift and go to state 360
    DAY             shift and go to state 361
    NIGHT           shift and go to state 362
    CHR_LIT         shift and go to state 363
    STR_LIT         shift and go to state 364
    IDENT           shift and go to state 54

    for_loop_arithmetic_expression shift and go to state 405
    for_loop_arith_term            shift and go to state 356
    for_loop_literal               shift and go to state 357
    var_call                       shift and go to state 358

state 379

    (149) for_loop_condition_tail -> empty .

    SEMICOLON       reduce using rule 149 (for_loop_condition_tail -> empty .)


state 380

    (150) for_loop_condition_op -> AND .

    INT_LIT         reduce using rule 150 (for_loop_condition_op -> AND .)
    FLT_LIT         reduce using rule 150 (for_loop_condition_op -> AND .)
    DAY             reduce using rule 150 (for_loop_condition_op -> AND .)
    NIGHT           reduce using rule 150 (for_loop_condition_op -> AND .)
    CHR_LIT         reduce using rule 150 (for_loop_condition_op -> AND .)
    STR_LIT         reduce using rule 150 (for_loop_condition_op -> AND .)
    IDENT           reduce using rule 150 (for_loop_condition_op -> AND .)


state 381

    (151) for_loop_condition_op -> OR .

    INT_LIT         reduce using rule 151 (for_loop_condition_op -> OR .)
    FLT_LIT         reduce using rule 151 (for_loop_condition_op -> OR .)
    DAY             reduce using rule 151 (for_loop_condition_op -> OR .)
    NIGHT           reduce using rule 151 (for_loop_condition_op -> OR .)
    CHR_LIT         reduce using rule 151 (for_loop_condition_op -> OR .)
    STR_LIT         reduce using rule 151 (for_loop_condition_op -> OR .)
    IDENT           reduce using rule 151 (for_loop_condition_op -> OR .)


state 382

    (152) for_loop_condition_op -> EQ_EQ .

    INT_LIT         reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)
    FLT_LIT         reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)
    DAY             reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)
    NIGHT           reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)
    CHR_LIT         reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)
    STR_LIT         reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)
    IDENT           reduce using rule 152 (for_loop_condition_op -> EQ_EQ .)


state 383

    (153) for_loop_condition_op -> NOT_EQ .

    INT_LIT         reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)
    FLT_LIT         reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)
    DAY             reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)
    NIGHT           reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)
    CHR_LIT         reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)
    STR_LIT         reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)
    IDENT           reduce using rule 153 (for_loop_condition_op -> NOT_EQ .)


state 384

    (154) for_loop_condition_op -> LT .

    INT_LIT         reduce using rule 154 (for_loop_condition_op -> LT .)
    FLT_LIT         reduce using rule 154 (for_loop_condition_op -> LT .)
    DAY             reduce using rule 154 (for_loop_condition_op -> LT .)
    NIGHT           reduce using rule 154 (for_loop_condition_op -> LT .)
    CHR_LIT         reduce using rule 154 (for_loop_condition_op -> LT .)
    STR_LIT         reduce using rule 154 (for_loop_condition_op -> LT .)
    IDENT           reduce using rule 154 (for_loop_condition_op -> LT .)


state 385

    (155) for_loop_condition_op -> GT .

    INT_LIT         reduce using rule 155 (for_loop_condition_op -> GT .)
    FLT_LIT         reduce using rule 155 (for_loop_condition_op -> GT .)
    DAY             reduce using rule 155 (for_loop_condition_op -> GT .)
    NIGHT           reduce using rule 155 (for_loop_condition_op -> GT .)
    CHR_LIT         reduce using rule 155 (for_loop_condition_op -> GT .)
    STR_LIT         reduce using rule 155 (for_loop_condition_op -> GT .)
    IDENT           reduce using rule 155 (for_loop_condition_op -> GT .)


state 386

    (156) for_loop_condition_op -> LT_EQ .

    INT_LIT         reduce using rule 156 (for_loop_condition_op -> LT_EQ .)
    FLT_LIT         reduce using rule 156 (for_loop_condition_op -> LT_EQ .)
    DAY             reduce using rule 156 (for_loop_condition_op -> LT_EQ .)
    NIGHT           reduce using rule 156 (for_loop_condition_op -> LT_EQ .)
    CHR_LIT         reduce using rule 156 (for_loop_condition_op -> LT_EQ .)
    STR_LIT         reduce using rule 156 (for_loop_condition_op -> LT_EQ .)
    IDENT           reduce using rule 156 (for_loop_condition_op -> LT_EQ .)


state 387

    (157) for_loop_condition_op -> GT_EQ .

    INT_LIT         reduce using rule 157 (for_loop_condition_op -> GT_EQ .)
    FLT_LIT         reduce using rule 157 (for_loop_condition_op -> GT_EQ .)
    DAY             reduce using rule 157 (for_loop_condition_op -> GT_EQ .)
    NIGHT           reduce using rule 157 (for_loop_condition_op -> GT_EQ .)
    CHR_LIT         reduce using rule 157 (for_loop_condition_op -> GT_EQ .)
    STR_LIT         reduce using rule 157 (for_loop_condition_op -> GT_EQ .)
    IDENT           reduce using rule 157 (for_loop_condition_op -> GT_EQ .)


state 388

    (158) for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .

    AND             reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    OR              reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    EQ_EQ           reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    NOT_EQ          reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    LT              reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    GT              reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    LT_EQ           reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    GT_EQ           reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)
    SEMICOLON       reduce using rule 158 (for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail .)


state 389

    (161) for_loop_arith_tail -> empty .

    AND             reduce using rule 161 (for_loop_arith_tail -> empty .)
    OR              reduce using rule 161 (for_loop_arith_tail -> empty .)
    EQ_EQ           reduce using rule 161 (for_loop_arith_tail -> empty .)
    NOT_EQ          reduce using rule 161 (for_loop_arith_tail -> empty .)
    LT              reduce using rule 161 (for_loop_arith_tail -> empty .)
    GT              reduce using rule 161 (for_loop_arith_tail -> empty .)
    LT_EQ           reduce using rule 161 (for_loop_arith_tail -> empty .)
    GT_EQ           reduce using rule 161 (for_loop_arith_tail -> empty .)
    SEMICOLON       reduce using rule 161 (for_loop_arith_tail -> empty .)


state 390

    (162) for_loop_arith_tail -> for_loop_arith_op . for_loop_arithmetic_expression
    (158) for_loop_arithmetic_expression -> . for_loop_arith_term for_loop_arith_tail
    (159) for_loop_arith_term -> . for_loop_literal
    (160) for_loop_arith_term -> . var_call
    (168) for_loop_literal -> . INT_LIT
    (169) for_loop_literal -> . FLT_LIT
    (170) for_loop_literal -> . DAY
    (171) for_loop_literal -> . NIGHT
    (172) for_loop_literal -> . CHR_LIT
    (173) for_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 359
    FLT_LIT         shift and go to state 360
    DAY             shift and go to state 361
    NIGHT           shift and go to state 362
    CHR_LIT         shift and go to state 363
    STR_LIT         shift and go to state 364
    IDENT           shift and go to state 54

    for_loop_arithmetic_expression shift and go to state 406
    for_loop_arith_term            shift and go to state 356
    for_loop_literal               shift and go to state 357
    var_call                       shift and go to state 358

state 391

    (163) for_loop_arith_op -> PLUS .

    INT_LIT         reduce using rule 163 (for_loop_arith_op -> PLUS .)
    FLT_LIT         reduce using rule 163 (for_loop_arith_op -> PLUS .)
    DAY             reduce using rule 163 (for_loop_arith_op -> PLUS .)
    NIGHT           reduce using rule 163 (for_loop_arith_op -> PLUS .)
    CHR_LIT         reduce using rule 163 (for_loop_arith_op -> PLUS .)
    STR_LIT         reduce using rule 163 (for_loop_arith_op -> PLUS .)
    IDENT           reduce using rule 163 (for_loop_arith_op -> PLUS .)


state 392

    (164) for_loop_arith_op -> MINUS .

    INT_LIT         reduce using rule 164 (for_loop_arith_op -> MINUS .)
    FLT_LIT         reduce using rule 164 (for_loop_arith_op -> MINUS .)
    DAY             reduce using rule 164 (for_loop_arith_op -> MINUS .)
    NIGHT           reduce using rule 164 (for_loop_arith_op -> MINUS .)
    CHR_LIT         reduce using rule 164 (for_loop_arith_op -> MINUS .)
    STR_LIT         reduce using rule 164 (for_loop_arith_op -> MINUS .)
    IDENT           reduce using rule 164 (for_loop_arith_op -> MINUS .)


state 393

    (165) for_loop_arith_op -> MULTIPLY .

    INT_LIT         reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)
    FLT_LIT         reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)
    DAY             reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)
    NIGHT           reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)
    CHR_LIT         reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)
    STR_LIT         reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)
    IDENT           reduce using rule 165 (for_loop_arith_op -> MULTIPLY .)


state 394

    (166) for_loop_arith_op -> DIVISION .

    INT_LIT         reduce using rule 166 (for_loop_arith_op -> DIVISION .)
    FLT_LIT         reduce using rule 166 (for_loop_arith_op -> DIVISION .)
    DAY             reduce using rule 166 (for_loop_arith_op -> DIVISION .)
    NIGHT           reduce using rule 166 (for_loop_arith_op -> DIVISION .)
    CHR_LIT         reduce using rule 166 (for_loop_arith_op -> DIVISION .)
    STR_LIT         reduce using rule 166 (for_loop_arith_op -> DIVISION .)
    IDENT           reduce using rule 166 (for_loop_arith_op -> DIVISION .)


state 395

    (167) for_loop_arith_op -> MODULO .

    INT_LIT         reduce using rule 167 (for_loop_arith_op -> MODULO .)
    FLT_LIT         reduce using rule 167 (for_loop_arith_op -> MODULO .)
    DAY             reduce using rule 167 (for_loop_arith_op -> MODULO .)
    NIGHT           reduce using rule 167 (for_loop_arith_op -> MODULO .)
    CHR_LIT         reduce using rule 167 (for_loop_arith_op -> MODULO .)
    STR_LIT         reduce using rule 167 (for_loop_arith_op -> MODULO .)
    IDENT           reduce using rule 167 (for_loop_arith_op -> MODULO .)


state 396

    (203) control_variable -> INT IDENT EQ INT_LIT .

    SEMICOLON       reduce using rule 203 (control_variable -> INT IDENT EQ INT_LIT .)


state 397

    (174) until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline . statements RBRACE
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 407
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 398

    (177) until_loop_condition_tail -> until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail .

    RPAREN          reduce using rule 177 (until_loop_condition_tail -> until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail .)


state 399

    (175) repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL . LPAREN until_loop_condition RPAREN

    LPAREN          shift and go to state 408


state 400

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline . statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 409
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 401

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition . maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    OTHERWISE       reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 410
    empty                          shift and go to state 16

state 402

    (140) switch_condition -> SHIFT . value COLON maybe_newline statements switchcond_tail
    (37) value -> . type_cast
    (38) value -> . expression
    (39) value -> . function_call
    (40) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (43) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (53) expression -> . factor factor_tail
    (209) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (210) function_call -> . output_statement
    (54) factor -> . var_call
    (55) factor -> . literal
    (56) factor -> . TILDE literal
    (57) factor -> . LPAREN expression RPAREN
    (217) output_statement -> . DISPLAY value next_val
    (218) output_statement -> . DISPLAY LPAREN value next_val RPAREN
    (73) var_call -> . IDENT var_call_tail
    (47) literal -> . INT_LIT
    (48) literal -> . FLT_LIT
    (49) literal -> . DAY
    (50) literal -> . NIGHT
    (51) literal -> . CHR_LIT
    (52) literal -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 154
    CONVERT_TO_FLT  shift and go to state 155
    CONVERT_TO_BLN  shift and go to state 156
    CONVERT_TO_STR  shift and go to state 157
    FUNCTION_NAME   shift and go to state 158
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 53
    DISPLAY         shift and go to state 160
    IDENT           shift and go to state 54
    INT_LIT         shift and go to state 55
    FLT_LIT         shift and go to state 56
    DAY             shift and go to state 57
    NIGHT           shift and go to state 58
    CHR_LIT         shift and go to state 59
    STR_LIT         shift and go to state 60

    value                          shift and go to state 411
    type_cast                      shift and go to state 151
    expression                     shift and go to state 152
    function_call                  shift and go to state 153
    factor                         shift and go to state 49
    output_statement               shift and go to state 159
    var_call                       shift and go to state 50
    literal                        shift and go to state 51

state 403

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update . RPAREN maybe_newline LBRACE maybe_newline statements RBRACE

    RPAREN          shift and go to state 412


state 404

    (204) update -> var_call . update_tail
    (205) update_tail -> . postfix
    (206) update_tail -> . assign_op value
    (207) postfix -> . PLUS_PLUS
    (208) postfix -> . MINUS_MINUS
    (225) assign_op -> . PLUS_EQ
    (226) assign_op -> . MINUS_EQ
    (227) assign_op -> . MUL_EQ
    (228) assign_op -> . DIV_EQ
    (229) assign_op -> . MOD_EQ
    (230) assign_op -> . EQ

    PLUS_PLUS       shift and go to state 202
    MINUS_MINUS     shift and go to state 203
    PLUS_EQ         shift and go to state 204
    MINUS_EQ        shift and go to state 205
    MUL_EQ          shift and go to state 206
    DIV_EQ          shift and go to state 207
    MOD_EQ          shift and go to state 208
    EQ              shift and go to state 209

    update_tail                    shift and go to state 413
    postfix                        shift and go to state 200
    assign_op                      shift and go to state 201

state 405

    (148) for_loop_condition_tail -> for_loop_condition_op for_loop_arithmetic_expression . for_loop_condition_tail
    (148) for_loop_condition_tail -> . for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail
    (149) for_loop_condition_tail -> . empty
    (150) for_loop_condition_op -> . AND
    (151) for_loop_condition_op -> . OR
    (152) for_loop_condition_op -> . EQ_EQ
    (153) for_loop_condition_op -> . NOT_EQ
    (154) for_loop_condition_op -> . LT
    (155) for_loop_condition_op -> . GT
    (156) for_loop_condition_op -> . LT_EQ
    (157) for_loop_condition_op -> . GT_EQ
    (235) empty -> .

    AND             shift and go to state 380
    OR              shift and go to state 381
    EQ_EQ           shift and go to state 382
    NOT_EQ          shift and go to state 383
    LT              shift and go to state 384
    GT              shift and go to state 385
    LT_EQ           shift and go to state 386
    GT_EQ           shift and go to state 387
    SEMICOLON       reduce using rule 235 (empty -> .)

    for_loop_condition_op          shift and go to state 378
    for_loop_condition_tail        shift and go to state 414
    empty                          shift and go to state 379

state 406

    (162) for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .

    AND             reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    OR              reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    EQ_EQ           reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    NOT_EQ          reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    LT              reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    GT              reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    LT_EQ           reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    GT_EQ           reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)
    SEMICOLON       reduce using rule 162 (for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression .)


state 407

    (174) until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements . RBRACE

    RBRACE          shift and go to state 415


state 408

    (175) repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN . until_loop_condition RPAREN
    (176) until_loop_condition -> . until_loop_arithmetic_expression until_loop_condition_tail
    (187) until_loop_arithmetic_expression -> . until_loop_arith_term until_loop_arith_tail
    (188) until_loop_arith_term -> . until_loop_literal
    (189) until_loop_arith_term -> . var_call
    (197) until_loop_literal -> . INT_LIT
    (198) until_loop_literal -> . FLT_LIT
    (199) until_loop_literal -> . DAY
    (200) until_loop_literal -> . NIGHT
    (201) until_loop_literal -> . CHR_LIT
    (202) until_loop_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 268
    FLT_LIT         shift and go to state 269
    DAY             shift and go to state 270
    NIGHT           shift and go to state 271
    CHR_LIT         shift and go to state 272
    STR_LIT         shift and go to state 273
    IDENT           shift and go to state 54

    until_loop_condition           shift and go to state 416
    until_loop_arithmetic_expression shift and go to state 264
    until_loop_arith_term          shift and go to state 265
    until_loop_literal             shift and go to state 266
    var_call                       shift and go to state 267

state 409

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements . RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE

    RBRACE          shift and go to state 417


state 410

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline . OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    OTHERWISE       shift and go to state 418


state 411

    (140) switch_condition -> SHIFT value . COLON maybe_newline statements switchcond_tail

    COLON           shift and go to state 419


state 412

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN . maybe_newline LBRACE maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    LBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 420
    empty                          shift and go to state 16

state 413

    (204) update -> var_call update_tail .

    RPAREN          reduce using rule 204 (update -> var_call update_tail .)


state 414

    (148) for_loop_condition_tail -> for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail .

    SEMICOLON       reduce using rule 148 (for_loop_condition_tail -> for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail .)


state 415

    (174) until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE .

    NEWLINE         reduce using rule 174 (until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE .)


state 416

    (175) repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition . RPAREN

    RPAREN          shift and go to state 421


state 417

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE . maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    OTHERWISE_CHECK reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 422
    empty                          shift and go to state 16

state 418

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    LBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 423
    empty                          shift and go to state 16

state 419

    (140) switch_condition -> SHIFT value COLON . maybe_newline statements switchcond_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    SHIFT           reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 424
    empty                          shift and go to state 16

state 420

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline . LBRACE maybe_newline statements RBRACE

    LBRACE          shift and go to state 425


state 421

    (175) repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN .

    NEWLINE         reduce using rule 175 (repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN .)


state 422

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline . conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE
    (110) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail
    (111) conditional_tail -> . empty
    (235) empty -> .

    OTHERWISE_CHECK shift and go to state 427
    OTHERWISE       reduce using rule 235 (empty -> .)

    conditional_tail               shift and go to state 426
    empty                          shift and go to state 428

state 423

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    LBRACE          shift and go to state 429


state 424

    (140) switch_condition -> SHIFT value COLON maybe_newline . statements switchcond_tail
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SHIFT           reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 430
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 425

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE . maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 431
    empty                          shift and go to state 16

state 426

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail . OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE

    OTHERWISE       shift and go to state 432


state 427

    (110) conditional_tail -> OTHERWISE_CHECK . LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail

    LPAREN          shift and go to state 433


state 428

    (111) conditional_tail -> empty .

    OTHERWISE       reduce using rule 111 (conditional_tail -> empty .)


state 429

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 434
    empty                          shift and go to state 16

state 430

    (140) switch_condition -> SHIFT value COLON maybe_newline statements . switchcond_tail
    (141) switchcond_tail -> . empty
    (142) switchcond_tail -> . switch_condition
    (235) empty -> .
    (140) switch_condition -> . SHIFT value COLON maybe_newline statements switchcond_tail

    NEWLINE         reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)
    SHIFT           shift and go to state 402

    switchcond_tail                shift and go to state 435
    empty                          shift and go to state 436
    switch_condition               shift and go to state 437

state 431

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline . statements RBRACE
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 438
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 432

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE . maybe_newline LBRACE maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    LBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 439
    empty                          shift and go to state 16

state 433

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN . condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail
    (112) condition -> . arithmetic_expression condition_tail
    (123) arithmetic_expression -> . arith_term arith_tail
    (124) arith_term -> . cond_literal
    (125) arith_term -> . var_call
    (133) cond_literal -> . INT_LIT
    (134) cond_literal -> . FLT_LIT
    (135) cond_literal -> . DAY
    (136) cond_literal -> . NIGHT
    (137) cond_literal -> . CHR_LIT
    (138) cond_literal -> . STR_LIT
    (73) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 254
    FLT_LIT         shift and go to state 255
    DAY             shift and go to state 256
    NIGHT           shift and go to state 257
    CHR_LIT         shift and go to state 258
    STR_LIT         shift and go to state 259
    IDENT           shift and go to state 54

    condition                      shift and go to state 440
    arithmetic_expression          shift and go to state 250
    arith_term                     shift and go to state 251
    cond_literal                   shift and go to state 252
    var_call                       shift and go to state 253

state 434

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline RBRACE
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 441
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 435

    (140) switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail .

    NEWLINE         reduce using rule 140 (switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail .)
    OTHERWISE       reduce using rule 140 (switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail .)


state 436

    (141) switchcond_tail -> empty .

    NEWLINE         reduce using rule 141 (switchcond_tail -> empty .)
    OTHERWISE       reduce using rule 141 (switchcond_tail -> empty .)


state 437

    (142) switchcond_tail -> switch_condition .

    NEWLINE         reduce using rule 142 (switchcond_tail -> switch_condition .)
    OTHERWISE       reduce using rule 142 (switchcond_tail -> switch_condition .)


state 438

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements . RBRACE

    RBRACE          shift and go to state 442


state 439

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline . LBRACE maybe_newline statements RBRACE

    LBRACE          shift and go to state 443


state 440

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition . RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail

    RPAREN          shift and go to state 444


state 441

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    RBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 445
    empty                          shift and go to state 16

state 442

    (146) for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE .

    NEWLINE         reduce using rule 146 (for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE .)


state 443

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE . maybe_newline statements RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 446
    empty                          shift and go to state 16

state 444

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN . maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    LBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 447
    empty                          shift and go to state 16

state 445

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline RBRACE

    RBRACE          shift and go to state 448


state 446

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline . statements RBRACE
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 449
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 447

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline . LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail

    LBRACE          shift and go to state 450


state 448

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    RBRACE          reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 451
    empty                          shift and go to state 16

state 449

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements . RBRACE

    RBRACE          shift and go to state 452


state 450

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE . maybe_newline statements RBRACE maybe_newline conditional_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 17
    INT             reduce using rule 235 (empty -> .)
    FLT             reduce using rule 235 (empty -> .)
    BLN             reduce using rule 235 (empty -> .)
    CHR             reduce using rule 235 (empty -> .)
    STR             reduce using rule 235 (empty -> .)
    RBRACE          reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)

  ! NEWLINE         [ reduce using rule 235 (empty -> .) ]

    maybe_newline                  shift and go to state 453
    empty                          shift and go to state 16

state 451

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . RBRACE

    RBRACE          shift and go to state 454


state 452

    (109) conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE .

    NEWLINE         reduce using rule 109 (conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE .)


state 453

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline . statements RBRACE maybe_newline conditional_tail
    (98) statements -> . empty
    (99) statements -> . local_dec maybe_newline statements_tail
    (235) empty -> .
    (107) local_dec -> . empty
    (108) local_dec -> . var_statement
    (19) var_statement -> . data_type IDENT var_tail unli_newline
    (32) data_type -> . INT
    (33) data_type -> . FLT
    (34) data_type -> . BLN
    (35) data_type -> . CHR
    (36) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 235 (empty -> .)
    NEWLINE         reduce using rule 235 (empty -> .)
    CHECK           reduce using rule 235 (empty -> .)
    SWAP            reduce using rule 235 (empty -> .)
    FUNCTION_NAME   reduce using rule 235 (empty -> .)
    DISPLAY         reduce using rule 235 (empty -> .)
    IDENT           reduce using rule 235 (empty -> .)
    FOR             reduce using rule 235 (empty -> .)
    UNTIL           reduce using rule 235 (empty -> .)
    REPEAT          reduce using rule 235 (empty -> .)
    INT             shift and go to state 9
    FLT             shift and go to state 10
    BLN             shift and go to state 11
    CHR             shift and go to state 12
    STR             shift and go to state 13

  ! INT             [ reduce using rule 235 (empty -> .) ]
  ! FLT             [ reduce using rule 235 (empty -> .) ]
  ! BLN             [ reduce using rule 235 (empty -> .) ]
  ! CHR             [ reduce using rule 235 (empty -> .) ]
  ! STR             [ reduce using rule 235 (empty -> .) ]

    statements                     shift and go to state 455
    empty                          shift and go to state 136
    local_dec                      shift and go to state 137
    var_statement                  shift and go to state 138
    data_type                      shift and go to state 139

state 454

    (139) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE .

    NEWLINE         reduce using rule 139 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE .)


state 455

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements . RBRACE maybe_newline conditional_tail

    RBRACE          shift and go to state 456


state 456

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE . maybe_newline conditional_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (235) empty -> .

    NEWLINE         shift and go to state 17
    OTHERWISE_CHECK reduce using rule 235 (empty -> .)
    OTHERWISE       reduce using rule 235 (empty -> .)

    maybe_newline                  shift and go to state 457
    empty                          shift and go to state 16

state 457

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline . conditional_tail
    (110) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail
    (111) conditional_tail -> . empty
    (235) empty -> .

    OTHERWISE_CHECK shift and go to state 427
    OTHERWISE       reduce using rule 235 (empty -> .)

    conditional_tail               shift and go to state 458
    empty                          shift and go to state 428

state 458

    (110) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail .

    OTHERWISE       reduce using rule 110 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 17 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 127 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 131 resolved as shift
WARNING: shift/reduce conflict for INT in state 132 resolved as shift
WARNING: shift/reduce conflict for FLT in state 132 resolved as shift
WARNING: shift/reduce conflict for BLN in state 132 resolved as shift
WARNING: shift/reduce conflict for CHR in state 132 resolved as shift
WARNING: shift/reduce conflict for STR in state 132 resolved as shift
WARNING: shift/reduce conflict for INT in state 134 resolved as shift
WARNING: shift/reduce conflict for FLT in state 134 resolved as shift
WARNING: shift/reduce conflict for BLN in state 134 resolved as shift
WARNING: shift/reduce conflict for CHR in state 134 resolved as shift
WARNING: shift/reduce conflict for STR in state 134 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 137 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 145 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 145 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 145 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 145 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 145 resolved as shift
WARNING: shift/reduce conflict for FOR in state 145 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 145 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 145 resolved as shift
WARNING: shift/reduce conflict for INT in state 145 resolved as shift
WARNING: shift/reduce conflict for FLT in state 145 resolved as shift
WARNING: shift/reduce conflict for BLN in state 145 resolved as shift
WARNING: shift/reduce conflict for CHR in state 145 resolved as shift
WARNING: shift/reduce conflict for STR in state 145 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 168 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 189 resolved as shift
WARNING: shift/reduce conflict for INT in state 191 resolved as shift
WARNING: shift/reduce conflict for FLT in state 191 resolved as shift
WARNING: shift/reduce conflict for BLN in state 191 resolved as shift
WARNING: shift/reduce conflict for CHR in state 191 resolved as shift
WARNING: shift/reduce conflict for STR in state 191 resolved as shift
WARNING: shift/reduce conflict for INT in state 192 resolved as shift
WARNING: shift/reduce conflict for FLT in state 192 resolved as shift
WARNING: shift/reduce conflict for BLN in state 192 resolved as shift
WARNING: shift/reduce conflict for CHR in state 192 resolved as shift
WARNING: shift/reduce conflict for STR in state 192 resolved as shift
WARNING: shift/reduce conflict for INT in state 193 resolved as shift
WARNING: shift/reduce conflict for FLT in state 193 resolved as shift
WARNING: shift/reduce conflict for BLN in state 193 resolved as shift
WARNING: shift/reduce conflict for CHR in state 193 resolved as shift
WARNING: shift/reduce conflict for STR in state 193 resolved as shift
WARNING: shift/reduce conflict for INT in state 194 resolved as shift
WARNING: shift/reduce conflict for FLT in state 194 resolved as shift
WARNING: shift/reduce conflict for BLN in state 194 resolved as shift
WARNING: shift/reduce conflict for CHR in state 194 resolved as shift
WARNING: shift/reduce conflict for STR in state 194 resolved as shift
WARNING: shift/reduce conflict for INT in state 195 resolved as shift
WARNING: shift/reduce conflict for FLT in state 195 resolved as shift
WARNING: shift/reduce conflict for BLN in state 195 resolved as shift
WARNING: shift/reduce conflict for CHR in state 195 resolved as shift
WARNING: shift/reduce conflict for STR in state 195 resolved as shift
WARNING: shift/reduce conflict for INT in state 196 resolved as shift
WARNING: shift/reduce conflict for FLT in state 196 resolved as shift
WARNING: shift/reduce conflict for BLN in state 196 resolved as shift
WARNING: shift/reduce conflict for CHR in state 196 resolved as shift
WARNING: shift/reduce conflict for STR in state 196 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 214 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for INT in state 274 resolved as shift
WARNING: shift/reduce conflict for FLT in state 274 resolved as shift
WARNING: shift/reduce conflict for BLN in state 274 resolved as shift
WARNING: shift/reduce conflict for CHR in state 274 resolved as shift
WARNING: shift/reduce conflict for STR in state 274 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 293 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 366 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 373 resolved as shift
WARNING: shift/reduce conflict for INT in state 397 resolved as shift
WARNING: shift/reduce conflict for FLT in state 397 resolved as shift
WARNING: shift/reduce conflict for BLN in state 397 resolved as shift
WARNING: shift/reduce conflict for CHR in state 397 resolved as shift
WARNING: shift/reduce conflict for STR in state 397 resolved as shift
WARNING: shift/reduce conflict for INT in state 400 resolved as shift
WARNING: shift/reduce conflict for FLT in state 400 resolved as shift
WARNING: shift/reduce conflict for BLN in state 400 resolved as shift
WARNING: shift/reduce conflict for CHR in state 400 resolved as shift
WARNING: shift/reduce conflict for STR in state 400 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 419 resolved as shift
WARNING: shift/reduce conflict for INT in state 424 resolved as shift
WARNING: shift/reduce conflict for FLT in state 424 resolved as shift
WARNING: shift/reduce conflict for BLN in state 424 resolved as shift
WARNING: shift/reduce conflict for CHR in state 424 resolved as shift
WARNING: shift/reduce conflict for STR in state 424 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 425 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 429 resolved as shift
WARNING: shift/reduce conflict for INT in state 431 resolved as shift
WARNING: shift/reduce conflict for FLT in state 431 resolved as shift
WARNING: shift/reduce conflict for BLN in state 431 resolved as shift
WARNING: shift/reduce conflict for CHR in state 431 resolved as shift
WARNING: shift/reduce conflict for STR in state 431 resolved as shift
WARNING: shift/reduce conflict for INT in state 434 resolved as shift
WARNING: shift/reduce conflict for FLT in state 434 resolved as shift
WARNING: shift/reduce conflict for BLN in state 434 resolved as shift
WARNING: shift/reduce conflict for CHR in state 434 resolved as shift
WARNING: shift/reduce conflict for STR in state 434 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 443 resolved as shift
WARNING: shift/reduce conflict for INT in state 446 resolved as shift
WARNING: shift/reduce conflict for FLT in state 446 resolved as shift
WARNING: shift/reduce conflict for BLN in state 446 resolved as shift
WARNING: shift/reduce conflict for CHR in state 446 resolved as shift
WARNING: shift/reduce conflict for STR in state 446 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 450 resolved as shift
WARNING: shift/reduce conflict for INT in state 453 resolved as shift
WARNING: shift/reduce conflict for FLT in state 453 resolved as shift
WARNING: shift/reduce conflict for BLN in state 453 resolved as shift
WARNING: shift/reduce conflict for CHR in state 453 resolved as shift
WARNING: shift/reduce conflict for STR in state 453 resolved as shift
WARNING: reduce/reduce conflict in state 136 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 136
WARNING: reduce/reduce conflict in state 282 resolved using rule (function_statements -> empty)
WARNING: rejected rule (function_statements_tail -> empty) in state 282
WARNING: Rule (function_statements_tail -> empty) is never reduced
