Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLN_LIT
    COMMENT
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    GLOBAL
    ILLEGAL
    IN
    LIST_BLN
    LIST_BLN2D
    LIST_CHR
    LIST_CHR2D
    LIST_FLT
    LIST_FLT2D
    LIST_INT
    LIST_INT2D
    LIST_STR
    LIST_STR2D
    MEASURE
    NEWLINE
    NOT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH global_dec function_statements main_function GHOST
Rule 2     main_function -> FUNCTION_NAME LPAREN RPAREN LBRACE statements RBRACE
Rule 3     global_dec -> global_statement global_tail
Rule 4     global_dec -> empty
Rule 5     global_tail -> global_dec
Rule 6     global_tail -> empty
Rule 7     global_statement -> data_type IDENT global_statement_tail
Rule 8     global_statement_tail -> empty
Rule 9     global_statement_tail -> COMMA IDENT global_statement_tail
Rule 10    global_statement_tail -> EQ global_dec_value global_tail2
Rule 11    global_tail2 -> empty
Rule 12    global_tail2 -> COMMA IDENT global_statement_tail
Rule 13    global_dec_value -> global_value
Rule 14    global_dec_value -> LBRACKET list_element RBRACKET
Rule 15    global_value -> factor
Rule 16    global_value -> expression
Rule 17    var_statement -> data_type IDENT var_tail
Rule 18    var_tail -> empty
Rule 19    var_tail -> EQ tail_value var_tail2
Rule 20    var_tail -> COMMA IDENT var_tail
Rule 21    var_tail2 -> empty
Rule 22    var_tail2 -> COMMA IDENT var_tail
Rule 23    tail_value -> value
Rule 24    tail_value -> LBRACKET list_element RBRACKET
Rule 25    list_element -> literal element_tail
Rule 26    element_tail -> empty
Rule 27    element_tail -> COMMA list_element
Rule 28    index -> INT_LIT
Rule 29    index -> IDENT
Rule 30    data_type -> INT
Rule 31    data_type -> FLT
Rule 32    data_type -> BLN
Rule 33    data_type -> CHR
Rule 34    data_type -> STR
Rule 35    value -> factor
Rule 36    value -> type_cast
Rule 37    value -> expression
Rule 38    value -> function_call
Rule 39    type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 40    type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 41    type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 42    type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 43    typecast_value -> IDENT
Rule 44    typecast_value -> literal
Rule 45    typecast_value -> expression
Rule 46    typecast_value -> FUNCTION_NAME LPAREN RPAREN
Rule 47    typecast_value -> input_statement
Rule 48    literal -> INT_LIT
Rule 49    literal -> FLT_LIT
Rule 50    literal -> DAY
Rule 51    literal -> NIGHT
Rule 52    literal -> CHR_LIT
Rule 53    literal -> STR_LIT
Rule 54    expression -> expr_head expr_tail
Rule 55    expr_head -> term term_tail
Rule 56    term -> factor factor_tail
Rule 57    factor -> var_call
Rule 58    factor -> literal
Rule 59    factor -> TILDE literal
Rule 60    factor -> LPAREN expression RPAREN
Rule 61    factor_tail -> empty
Rule 62    factor_tail -> PLUS expression
Rule 63    factor_tail -> MINUS expression
Rule 64    factor_tail -> MULTIPLY expression
Rule 65    factor_tail -> DIVISION expression
Rule 66    factor_tail -> MODULO expression
Rule 67    factor_tail -> EXPONENT expression
Rule 68    term_tail -> empty
Rule 69    term_tail -> GT expression
Rule 70    term_tail -> LT expression
Rule 71    term_tail -> EQ_EQ expression
Rule 72    term_tail -> GT_EQ expression
Rule 73    term_tail -> LT_EQ expression
Rule 74    term_tail -> NOT_EQ expression
Rule 75    expr_tail -> empty
Rule 76    expr_tail -> AND expression
Rule 77    expr_tail -> OR expression
Rule 78    var_call -> IDENT var_call_tail
Rule 79    var_call_tail -> empty
Rule 80    var_call_tail -> LBRACKET index RBRACKET
Rule 81    function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE
Rule 82    function_statements -> empty
Rule 83    ret_type -> FUNCTION
Rule 84    ret_type -> function_dtype
Rule 85    function_dtype -> FUNCTION_INT
Rule 86    function_dtype -> FUNCTION_FLT
Rule 87    function_dtype -> FUNCTION_CHR
Rule 88    function_dtype -> FUNCTION_BLN
Rule 89    function_dtype -> FUNCTION_STR
Rule 90    function_dtype -> FUNCTION_LIST_INT
Rule 91    function_dtype -> FUNCTION_LIST_FLT
Rule 92    function_dtype -> FUNCTION_LIST_CHR
Rule 93    function_dtype -> FUNCTION_LIST_STR
Rule 94    function_dtype -> FUNCTION_LIST_BLN
Rule 95    parameters -> data_type IDENT parameters_tail
Rule 96    parameters -> empty
Rule 97    parameters_tail -> empty
Rule 98    parameters_tail -> COMMA data_type IDENT parameters_tail
Rule 99    revive -> REVIVE value
Rule 100   revive -> empty
Rule 101   statements -> empty
Rule 102   statements -> local_dec statements_tail
Rule 103   statements_tail -> empty
Rule 104   statements_tail -> statements
Rule 105   statements_tail -> conditional_statement statements_tail
Rule 106   statements_tail -> switch_statement statements_tail
Rule 107   statements_tail -> loop_statement statements_tail
Rule 108   statements_tail -> function_call statements_tail
Rule 109   statements_tail -> string_operation_statement statements_tail
Rule 110   statements_tail -> output_statement statements_tail
Rule 111   local_dec -> var_statement
Rule 112   local_dec -> empty
Rule 113   conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
Rule 114   conditional_tail -> empty
Rule 115   conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE
Rule 116   conditional_tail -> OTHERWISE LBRACE statements RBRACE
Rule 117   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
Rule 118   switch_condition -> SHIFT value COLON statements switchcond_tail
Rule 119   switchcond_tail -> empty
Rule 120   switchcond_tail -> switch_condition
Rule 121   loop_statement -> for_loop
Rule 122   loop_statement -> until_loop
Rule 123   loop_statement -> repeat_until
Rule 124   for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
Rule 125   until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
Rule 126   repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
Rule 127   control_variable -> INT IDENT EQ INT_LIT
Rule 128   update -> var_call update_tail
Rule 129   update_tail -> postfix
Rule 130   update_tail -> assign_op value
Rule 131   postfix -> PLUS_PLUS
Rule 132   postfix -> MINUS_MINUS
Rule 133   function_call -> FUNCTION_NAME LPAREN arguments RPAREN
Rule 134   function_call -> input_statement
Rule 135   arguments -> empty
Rule 136   arguments -> arg_value arg_tail
Rule 137   arg_tail -> empty
Rule 138   arg_tail -> COMMA arg_value arg_tail
Rule 139   arg_value -> literal
Rule 140   arg_value -> var_call
Rule 141   output_statement -> DISPLAY value next_val
Rule 142   next_val -> empty
Rule 143   next_val -> COMMA value next_val
Rule 144   input_statement -> INPUT LPAREN RPAREN
Rule 145   string_operation_statement -> var_call string_operation_tail
Rule 146   string_operation_tail -> assign_op value
Rule 147   string_operation_tail -> PLUS string_val stringcon_tail
Rule 148   assign_op -> PLUS_EQ
Rule 149   assign_op -> MINUS_EQ
Rule 150   assign_op -> MUL_EQ
Rule 151   assign_op -> DIV_EQ
Rule 152   assign_op -> MOD_EQ
Rule 153   assign_op -> EQ
Rule 154   stringcon_tail -> empty
Rule 155   stringcon_tail -> PLUS string_val stringcon_tail
Rule 156   string_val -> var_call
Rule 157   string_val -> STR_LIT
Rule 158   empty -> <empty>

Terminals, with rules where they appear

AND                  : 76
BIRTH                : 1
BLN                  : 32
BLN_LIT              : 
CHECK                : 113
CHR                  : 33
CHR_LIT              : 52
COLON                : 118
COMMA                : 9 12 20 22 27 98 138 143
COMMENT              : 
CONVERT_TO_BLN       : 41
CONVERT_TO_FLT       : 40
CONVERT_TO_INT       : 39
CONVERT_TO_STR       : 42
DAY                  : 50
DISPLAY              : 141
DIVISION             : 65
DIV_EQ               : 151
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 10 19 127 153
EQ_EQ                : 71
EXPONENT             : 67
FLT                  : 31
FLT_LIT              : 49
FOR                  : 124
FUNCTION             : 83
FUNCTION_BLN         : 88
FUNCTION_CHR         : 87
FUNCTION_FLT         : 86
FUNCTION_INT         : 85
FUNCTION_LIST_BLN    : 94
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 92
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 91
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 90
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 93
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 2 46 81 133
FUNCTION_STR         : 89
GHOST                : 1
GLOBAL               : 
GT                   : 69
GT_EQ                : 72
IDENT                : 7 9 12 17 20 22 29 43 78 95 98 117 127
ILLEGAL              : 
IN                   : 
INPUT                : 144
INT                  : 30 127
INT_LIT              : 28 48 127
LBRACE               : 2 81 113 115 116 117 124 125 126
LBRACKET             : 14 24 80
LIST_BLN             : 
LIST_BLN2D           : 
LIST_CHR             : 
LIST_CHR2D           : 
LIST_FLT             : 
LIST_FLT2D           : 
LIST_INT             : 
LIST_INT2D           : 
LIST_STR             : 
LIST_STR2D           : 
LPAREN               : 2 39 40 41 42 46 60 81 113 115 117 124 125 126 133 144
LT                   : 70
LT_EQ                : 73
MEASURE              : 
MINUS                : 63
MINUS_EQ             : 149
MINUS_MINUS          : 132
MODULO               : 66
MOD_EQ               : 152
MULTIPLY             : 64
MUL_EQ               : 150
NEWLINE              : 
NIGHT                : 51
NOT                  : 
NOT_EQ               : 74
OR                   : 77
OTHERWISE            : 116 117
OTHERWISE_CHECK      : 115
PLUS                 : 62 147 155
PLUS_EQ              : 148
PLUS_PLUS            : 131
POW                  : 
RBRACE               : 2 81 113 115 116 117 124 125 126
RBRACKET             : 14 24 80
REPEAT               : 126
REVIVE               : 99
RPAREN               : 2 39 40 41 42 46 60 81 113 115 117 124 125 126 133 144
SEMICOLON            : 124 124
SHIFT                : 118
SKIP                 : 
STOP                 : 
STR                  : 34
STR_LIT              : 53 157
SWAP                 : 117
TILDE                : 59
TYPE                 : 
UNTIL                : 125 126
error                : 

Nonterminals, with rules where they appear

arg_tail             : 136 138
arg_value            : 136 138
arguments            : 133
assign_op            : 130 146
conditional_statement : 105
conditional_tail     : 113
control_variable     : 124
data_type            : 7 17 95 98
element_tail         : 25
empty                : 4 6 8 11 18 21 26 61 68 75 79 82 96 97 100 101 103 112 114 119 135 137 142 154
expr_head            : 54
expr_tail            : 54
expression           : 16 37 45 60 62 63 64 65 66 67 69 70 71 72 73 74 76 77 113 115 124 125 126
factor               : 15 35 56
factor_tail          : 56
for_loop             : 121
function_call        : 38 108
function_dtype       : 84
function_statements  : 1
global_dec           : 1 5
global_dec_value     : 10
global_statement     : 3
global_statement_tail : 7 9 12
global_tail          : 3
global_tail2         : 10
global_value         : 13
index                : 80
input_statement      : 47 134
list_element         : 14 24 27
literal              : 25 44 58 59 139
local_dec            : 102
loop_statement       : 107
main_function        : 1
next_val             : 141 143
output_statement     : 110
parameters           : 81
parameters_tail      : 95 98
postfix              : 129
program              : 0
repeat_until         : 123
ret_type             : 81
revive               : 81
statements           : 2 81 104 113 115 116 117 118 124 125 126
statements_tail      : 102 105 106 107 108 109 110
string_operation_statement : 109
string_operation_tail : 145
string_val           : 147 155
stringcon_tail       : 147 155
switch_condition     : 117 120
switch_statement     : 106
switchcond_tail      : 118
tail_value           : 19
term                 : 55
term_tail            : 55
type_cast            : 36
typecast_value       : 39 40 41 42
until_loop           : 122
update               : 124
update_tail          : 128
value                : 23 99 118 130 141 143 146
var_call             : 57 128 140 145 156
var_call_tail        : 78
var_statement        : 111
var_tail             : 17 20 22
var_tail2            : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH global_dec function_statements main_function GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . global_dec function_statements main_function GHOST
    (3) global_dec -> . global_statement global_tail
    (4) global_dec -> . empty
    (7) global_statement -> . data_type IDENT global_statement_tail
    (158) empty -> .
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

    global_dec                     shift and go to state 3
    global_statement               shift and go to state 4
    empty                          shift and go to state 5
    data_type                      shift and go to state 6

state 3

    (1) program -> BIRTH global_dec . function_statements main_function GHOST
    (81) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (82) function_statements -> . empty
    (83) ret_type -> . FUNCTION
    (84) ret_type -> . function_dtype
    (158) empty -> .
    (85) function_dtype -> . FUNCTION_INT
    (86) function_dtype -> . FUNCTION_FLT
    (87) function_dtype -> . FUNCTION_CHR
    (88) function_dtype -> . FUNCTION_BLN
    (89) function_dtype -> . FUNCTION_STR
    (90) function_dtype -> . FUNCTION_LIST_INT
    (91) function_dtype -> . FUNCTION_LIST_FLT
    (92) function_dtype -> . FUNCTION_LIST_CHR
    (93) function_dtype -> . FUNCTION_LIST_STR
    (94) function_dtype -> . FUNCTION_LIST_BLN

    FUNCTION        shift and go to state 15
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    FUNCTION_INT    shift and go to state 17
    FUNCTION_FLT    shift and go to state 18
    FUNCTION_CHR    shift and go to state 19
    FUNCTION_BLN    shift and go to state 20
    FUNCTION_STR    shift and go to state 21
    FUNCTION_LIST_INT shift and go to state 22
    FUNCTION_LIST_FLT shift and go to state 23
    FUNCTION_LIST_CHR shift and go to state 24
    FUNCTION_LIST_STR shift and go to state 25
    FUNCTION_LIST_BLN shift and go to state 26

    function_statements            shift and go to state 12
    ret_type                       shift and go to state 13
    empty                          shift and go to state 14
    function_dtype                 shift and go to state 16

state 4

    (3) global_dec -> global_statement . global_tail
    (5) global_tail -> . global_dec
    (6) global_tail -> . empty
    (3) global_dec -> . global_statement global_tail
    (4) global_dec -> . empty
    (158) empty -> .
    (7) global_statement -> . data_type IDENT global_statement_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

    global_statement               shift and go to state 4
    global_tail                    shift and go to state 27
    global_dec                     shift and go to state 28
    empty                          shift and go to state 29
    data_type                      shift and go to state 6

state 5

    (4) global_dec -> empty .

    FUNCTION        reduce using rule 4 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 4 (global_dec -> empty .)
    FUNCTION_NAME   reduce using rule 4 (global_dec -> empty .)


state 6

    (7) global_statement -> data_type . IDENT global_statement_tail

    IDENT           shift and go to state 30


state 7

    (30) data_type -> INT .

    IDENT           reduce using rule 30 (data_type -> INT .)


state 8

    (31) data_type -> FLT .

    IDENT           reduce using rule 31 (data_type -> FLT .)


state 9

    (32) data_type -> BLN .

    IDENT           reduce using rule 32 (data_type -> BLN .)


state 10

    (33) data_type -> CHR .

    IDENT           reduce using rule 33 (data_type -> CHR .)


state 11

    (34) data_type -> STR .

    IDENT           reduce using rule 34 (data_type -> STR .)


state 12

    (1) program -> BIRTH global_dec function_statements . main_function GHOST
    (2) main_function -> . FUNCTION_NAME LPAREN RPAREN LBRACE statements RBRACE

    FUNCTION_NAME   shift and go to state 32

    main_function                  shift and go to state 31

state 13

    (81) function_statements -> ret_type . FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE

    FUNCTION_NAME   shift and go to state 33


state 14

    (82) function_statements -> empty .

    FUNCTION_NAME   reduce using rule 82 (function_statements -> empty .)


state 15

    (83) ret_type -> FUNCTION .

    FUNCTION_NAME   reduce using rule 83 (ret_type -> FUNCTION .)


state 16

    (84) ret_type -> function_dtype .

    FUNCTION_NAME   reduce using rule 84 (ret_type -> function_dtype .)


state 17

    (85) function_dtype -> FUNCTION_INT .

    FUNCTION_NAME   reduce using rule 85 (function_dtype -> FUNCTION_INT .)


state 18

    (86) function_dtype -> FUNCTION_FLT .

    FUNCTION_NAME   reduce using rule 86 (function_dtype -> FUNCTION_FLT .)


state 19

    (87) function_dtype -> FUNCTION_CHR .

    FUNCTION_NAME   reduce using rule 87 (function_dtype -> FUNCTION_CHR .)


state 20

    (88) function_dtype -> FUNCTION_BLN .

    FUNCTION_NAME   reduce using rule 88 (function_dtype -> FUNCTION_BLN .)


state 21

    (89) function_dtype -> FUNCTION_STR .

    FUNCTION_NAME   reduce using rule 89 (function_dtype -> FUNCTION_STR .)


state 22

    (90) function_dtype -> FUNCTION_LIST_INT .

    FUNCTION_NAME   reduce using rule 90 (function_dtype -> FUNCTION_LIST_INT .)


state 23

    (91) function_dtype -> FUNCTION_LIST_FLT .

    FUNCTION_NAME   reduce using rule 91 (function_dtype -> FUNCTION_LIST_FLT .)


state 24

    (92) function_dtype -> FUNCTION_LIST_CHR .

    FUNCTION_NAME   reduce using rule 92 (function_dtype -> FUNCTION_LIST_CHR .)


state 25

    (93) function_dtype -> FUNCTION_LIST_STR .

    FUNCTION_NAME   reduce using rule 93 (function_dtype -> FUNCTION_LIST_STR .)


state 26

    (94) function_dtype -> FUNCTION_LIST_BLN .

    FUNCTION_NAME   reduce using rule 94 (function_dtype -> FUNCTION_LIST_BLN .)


state 27

    (3) global_dec -> global_statement global_tail .

    FUNCTION        reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_INT    reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_FLT    reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_CHR    reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_BLN    reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_STR    reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_LIST_INT reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_LIST_FLT reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_LIST_CHR reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_LIST_STR reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_LIST_BLN reduce using rule 3 (global_dec -> global_statement global_tail .)
    FUNCTION_NAME   reduce using rule 3 (global_dec -> global_statement global_tail .)


state 28

    (5) global_tail -> global_dec .

    FUNCTION        reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_INT    reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_FLT    reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_CHR    reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_BLN    reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_STR    reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_LIST_INT reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_LIST_FLT reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_LIST_CHR reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_LIST_STR reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_LIST_BLN reduce using rule 5 (global_tail -> global_dec .)
    FUNCTION_NAME   reduce using rule 5 (global_tail -> global_dec .)


state 29

    (6) global_tail -> empty .
    (4) global_dec -> empty .

  ! reduce/reduce conflict for FUNCTION resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 4 (global_dec -> empty .)
  ! reduce/reduce conflict for FUNCTION_NAME resolved using rule 4 (global_dec -> empty .)
    FUNCTION        reduce using rule 4 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 4 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 4 (global_dec -> empty .)
    FUNCTION_NAME   reduce using rule 4 (global_dec -> empty .)

  ! FUNCTION        [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_INT    [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_FLT    [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_CHR    [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_BLN    [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_STR    [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 6 (global_tail -> empty .) ]
  ! FUNCTION_NAME   [ reduce using rule 6 (global_tail -> empty .) ]


state 30

    (7) global_statement -> data_type IDENT . global_statement_tail
    (8) global_statement_tail -> . empty
    (9) global_statement_tail -> . COMMA IDENT global_statement_tail
    (10) global_statement_tail -> . EQ global_dec_value global_tail2
    (158) empty -> .

    COMMA           shift and go to state 36
    EQ              shift and go to state 37
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)

    global_statement_tail          shift and go to state 34
    empty                          shift and go to state 35

state 31

    (1) program -> BIRTH global_dec function_statements main_function . GHOST

    GHOST           shift and go to state 38


state 32

    (2) main_function -> FUNCTION_NAME . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 39


state 33

    (81) function_statements -> ret_type FUNCTION_NAME . LPAREN parameters RPAREN LBRACE statements revive RBRACE

    LPAREN          shift and go to state 40


state 34

    (7) global_statement -> data_type IDENT global_statement_tail .

    INT             reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FLT             reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    BLN             reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    CHR             reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    STR             reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION        reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_INT    reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_FLT    reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_CHR    reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_BLN    reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_STR    reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_LIST_INT reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_LIST_FLT reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_LIST_CHR reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_LIST_STR reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_LIST_BLN reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)
    FUNCTION_NAME   reduce using rule 7 (global_statement -> data_type IDENT global_statement_tail .)


state 35

    (8) global_statement_tail -> empty .

    INT             reduce using rule 8 (global_statement_tail -> empty .)
    FLT             reduce using rule 8 (global_statement_tail -> empty .)
    BLN             reduce using rule 8 (global_statement_tail -> empty .)
    CHR             reduce using rule 8 (global_statement_tail -> empty .)
    STR             reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION        reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_INT    reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_FLT    reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_CHR    reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_BLN    reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_STR    reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 8 (global_statement_tail -> empty .)
    FUNCTION_NAME   reduce using rule 8 (global_statement_tail -> empty .)


state 36

    (9) global_statement_tail -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 41


state 37

    (10) global_statement_tail -> EQ . global_dec_value global_tail2
    (13) global_dec_value -> . global_value
    (14) global_dec_value -> . LBRACKET list_element RBRACKET
    (15) global_value -> . factor
    (16) global_value -> . expression
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (54) expression -> . expr_head expr_tail
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail

    LBRACKET        shift and go to state 44
    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    global_dec_value               shift and go to state 42
    global_value                   shift and go to state 43
    factor                         shift and go to state 45
    expression                     shift and go to state 46
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    term                           shift and go to state 59

state 38

    (1) program -> BIRTH global_dec function_statements main_function GHOST .

    $end            reduce using rule 1 (program -> BIRTH global_dec function_statements main_function GHOST .)


state 39

    (2) main_function -> FUNCTION_NAME LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 60


state 40

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN . parameters RPAREN LBRACE statements revive RBRACE
    (95) parameters -> . data_type IDENT parameters_tail
    (96) parameters -> . empty
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR
    (158) empty -> .

    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11
    RPAREN          reduce using rule 158 (empty -> .)

    parameters                     shift and go to state 61
    data_type                      shift and go to state 62
    empty                          shift and go to state 63

state 41

    (9) global_statement_tail -> COMMA IDENT . global_statement_tail
    (8) global_statement_tail -> . empty
    (9) global_statement_tail -> . COMMA IDENT global_statement_tail
    (10) global_statement_tail -> . EQ global_dec_value global_tail2
    (158) empty -> .

    COMMA           shift and go to state 36
    EQ              shift and go to state 37
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)

    global_statement_tail          shift and go to state 64
    empty                          shift and go to state 35

state 42

    (10) global_statement_tail -> EQ global_dec_value . global_tail2
    (11) global_tail2 -> . empty
    (12) global_tail2 -> . COMMA IDENT global_statement_tail
    (158) empty -> .

    COMMA           shift and go to state 67
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)

    global_tail2                   shift and go to state 65
    empty                          shift and go to state 66

state 43

    (13) global_dec_value -> global_value .

    COMMA           reduce using rule 13 (global_dec_value -> global_value .)
    INT             reduce using rule 13 (global_dec_value -> global_value .)
    FLT             reduce using rule 13 (global_dec_value -> global_value .)
    BLN             reduce using rule 13 (global_dec_value -> global_value .)
    CHR             reduce using rule 13 (global_dec_value -> global_value .)
    STR             reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION        reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_INT    reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_FLT    reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_CHR    reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_BLN    reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_STR    reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_LIST_INT reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_LIST_FLT reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_LIST_CHR reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_LIST_STR reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_LIST_BLN reduce using rule 13 (global_dec_value -> global_value .)
    FUNCTION_NAME   reduce using rule 13 (global_dec_value -> global_value .)


state 44

    (14) global_dec_value -> LBRACKET . list_element RBRACKET
    (25) list_element -> . literal element_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    list_element                   shift and go to state 68
    literal                        shift and go to state 69

state 45

    (15) global_value -> factor .
    (56) term -> factor . factor_tail
    (61) factor_tail -> . empty
    (62) factor_tail -> . PLUS expression
    (63) factor_tail -> . MINUS expression
    (64) factor_tail -> . MULTIPLY expression
    (65) factor_tail -> . DIVISION expression
    (66) factor_tail -> . MODULO expression
    (67) factor_tail -> . EXPONENT expression
    (158) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for INT resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FLT resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for BLN resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for CHR resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for STR resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 15 (global_value -> factor .)
  ! reduce/reduce conflict for FUNCTION_NAME resolved using rule 15 (global_value -> factor .)
    COMMA           reduce using rule 15 (global_value -> factor .)
    INT             reduce using rule 15 (global_value -> factor .)
    FLT             reduce using rule 15 (global_value -> factor .)
    BLN             reduce using rule 15 (global_value -> factor .)
    CHR             reduce using rule 15 (global_value -> factor .)
    STR             reduce using rule 15 (global_value -> factor .)
    FUNCTION        reduce using rule 15 (global_value -> factor .)
    FUNCTION_INT    reduce using rule 15 (global_value -> factor .)
    FUNCTION_FLT    reduce using rule 15 (global_value -> factor .)
    FUNCTION_CHR    reduce using rule 15 (global_value -> factor .)
    FUNCTION_BLN    reduce using rule 15 (global_value -> factor .)
    FUNCTION_STR    reduce using rule 15 (global_value -> factor .)
    FUNCTION_LIST_INT reduce using rule 15 (global_value -> factor .)
    FUNCTION_LIST_FLT reduce using rule 15 (global_value -> factor .)
    FUNCTION_LIST_CHR reduce using rule 15 (global_value -> factor .)
    FUNCTION_LIST_STR reduce using rule 15 (global_value -> factor .)
    FUNCTION_LIST_BLN reduce using rule 15 (global_value -> factor .)
    FUNCTION_NAME   reduce using rule 15 (global_value -> factor .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MULTIPLY        shift and go to state 74
    DIVISION        shift and go to state 75
    MODULO          shift and go to state 76
    EXPONENT        shift and go to state 77
    GT              reduce using rule 158 (empty -> .)
    LT              reduce using rule 158 (empty -> .)
    EQ_EQ           reduce using rule 158 (empty -> .)
    GT_EQ           reduce using rule 158 (empty -> .)
    LT_EQ           reduce using rule 158 (empty -> .)
    NOT_EQ          reduce using rule 158 (empty -> .)
    AND             reduce using rule 158 (empty -> .)
    OR              reduce using rule 158 (empty -> .)

  ! COMMA           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]

    factor_tail                    shift and go to state 70
    empty                          shift and go to state 71

state 46

    (16) global_value -> expression .

    COMMA           reduce using rule 16 (global_value -> expression .)
    INT             reduce using rule 16 (global_value -> expression .)
    FLT             reduce using rule 16 (global_value -> expression .)
    BLN             reduce using rule 16 (global_value -> expression .)
    CHR             reduce using rule 16 (global_value -> expression .)
    STR             reduce using rule 16 (global_value -> expression .)
    FUNCTION        reduce using rule 16 (global_value -> expression .)
    FUNCTION_INT    reduce using rule 16 (global_value -> expression .)
    FUNCTION_FLT    reduce using rule 16 (global_value -> expression .)
    FUNCTION_CHR    reduce using rule 16 (global_value -> expression .)
    FUNCTION_BLN    reduce using rule 16 (global_value -> expression .)
    FUNCTION_STR    reduce using rule 16 (global_value -> expression .)
    FUNCTION_LIST_INT reduce using rule 16 (global_value -> expression .)
    FUNCTION_LIST_FLT reduce using rule 16 (global_value -> expression .)
    FUNCTION_LIST_CHR reduce using rule 16 (global_value -> expression .)
    FUNCTION_LIST_STR reduce using rule 16 (global_value -> expression .)
    FUNCTION_LIST_BLN reduce using rule 16 (global_value -> expression .)
    FUNCTION_NAME   reduce using rule 16 (global_value -> expression .)


state 47

    (57) factor -> var_call .

    PLUS            reduce using rule 57 (factor -> var_call .)
    MINUS           reduce using rule 57 (factor -> var_call .)
    MULTIPLY        reduce using rule 57 (factor -> var_call .)
    DIVISION        reduce using rule 57 (factor -> var_call .)
    MODULO          reduce using rule 57 (factor -> var_call .)
    EXPONENT        reduce using rule 57 (factor -> var_call .)
    COMMA           reduce using rule 57 (factor -> var_call .)
    INT             reduce using rule 57 (factor -> var_call .)
    FLT             reduce using rule 57 (factor -> var_call .)
    BLN             reduce using rule 57 (factor -> var_call .)
    CHR             reduce using rule 57 (factor -> var_call .)
    STR             reduce using rule 57 (factor -> var_call .)
    FUNCTION        reduce using rule 57 (factor -> var_call .)
    FUNCTION_INT    reduce using rule 57 (factor -> var_call .)
    FUNCTION_FLT    reduce using rule 57 (factor -> var_call .)
    FUNCTION_CHR    reduce using rule 57 (factor -> var_call .)
    FUNCTION_BLN    reduce using rule 57 (factor -> var_call .)
    FUNCTION_STR    reduce using rule 57 (factor -> var_call .)
    FUNCTION_LIST_INT reduce using rule 57 (factor -> var_call .)
    FUNCTION_LIST_FLT reduce using rule 57 (factor -> var_call .)
    FUNCTION_LIST_CHR reduce using rule 57 (factor -> var_call .)
    FUNCTION_LIST_STR reduce using rule 57 (factor -> var_call .)
    FUNCTION_LIST_BLN reduce using rule 57 (factor -> var_call .)
    FUNCTION_NAME   reduce using rule 57 (factor -> var_call .)
    GT              reduce using rule 57 (factor -> var_call .)
    LT              reduce using rule 57 (factor -> var_call .)
    EQ_EQ           reduce using rule 57 (factor -> var_call .)
    GT_EQ           reduce using rule 57 (factor -> var_call .)
    LT_EQ           reduce using rule 57 (factor -> var_call .)
    NOT_EQ          reduce using rule 57 (factor -> var_call .)
    AND             reduce using rule 57 (factor -> var_call .)
    OR              reduce using rule 57 (factor -> var_call .)
    RPAREN          reduce using rule 57 (factor -> var_call .)
    CHECK           reduce using rule 57 (factor -> var_call .)
    SWAP            reduce using rule 57 (factor -> var_call .)
    DISPLAY         reduce using rule 57 (factor -> var_call .)
    FOR             reduce using rule 57 (factor -> var_call .)
    UNTIL           reduce using rule 57 (factor -> var_call .)
    REPEAT          reduce using rule 57 (factor -> var_call .)
    INPUT           reduce using rule 57 (factor -> var_call .)
    IDENT           reduce using rule 57 (factor -> var_call .)
    RBRACE          reduce using rule 57 (factor -> var_call .)
    REVIVE          reduce using rule 57 (factor -> var_call .)
    SHIFT           reduce using rule 57 (factor -> var_call .)
    OTHERWISE       reduce using rule 57 (factor -> var_call .)
    COLON           reduce using rule 57 (factor -> var_call .)
    SEMICOLON       reduce using rule 57 (factor -> var_call .)


state 48

    (58) factor -> literal .

    PLUS            reduce using rule 58 (factor -> literal .)
    MINUS           reduce using rule 58 (factor -> literal .)
    MULTIPLY        reduce using rule 58 (factor -> literal .)
    DIVISION        reduce using rule 58 (factor -> literal .)
    MODULO          reduce using rule 58 (factor -> literal .)
    EXPONENT        reduce using rule 58 (factor -> literal .)
    COMMA           reduce using rule 58 (factor -> literal .)
    INT             reduce using rule 58 (factor -> literal .)
    FLT             reduce using rule 58 (factor -> literal .)
    BLN             reduce using rule 58 (factor -> literal .)
    CHR             reduce using rule 58 (factor -> literal .)
    STR             reduce using rule 58 (factor -> literal .)
    FUNCTION        reduce using rule 58 (factor -> literal .)
    FUNCTION_INT    reduce using rule 58 (factor -> literal .)
    FUNCTION_FLT    reduce using rule 58 (factor -> literal .)
    FUNCTION_CHR    reduce using rule 58 (factor -> literal .)
    FUNCTION_BLN    reduce using rule 58 (factor -> literal .)
    FUNCTION_STR    reduce using rule 58 (factor -> literal .)
    FUNCTION_LIST_INT reduce using rule 58 (factor -> literal .)
    FUNCTION_LIST_FLT reduce using rule 58 (factor -> literal .)
    FUNCTION_LIST_CHR reduce using rule 58 (factor -> literal .)
    FUNCTION_LIST_STR reduce using rule 58 (factor -> literal .)
    FUNCTION_LIST_BLN reduce using rule 58 (factor -> literal .)
    FUNCTION_NAME   reduce using rule 58 (factor -> literal .)
    GT              reduce using rule 58 (factor -> literal .)
    LT              reduce using rule 58 (factor -> literal .)
    EQ_EQ           reduce using rule 58 (factor -> literal .)
    GT_EQ           reduce using rule 58 (factor -> literal .)
    LT_EQ           reduce using rule 58 (factor -> literal .)
    NOT_EQ          reduce using rule 58 (factor -> literal .)
    AND             reduce using rule 58 (factor -> literal .)
    OR              reduce using rule 58 (factor -> literal .)
    RPAREN          reduce using rule 58 (factor -> literal .)
    CHECK           reduce using rule 58 (factor -> literal .)
    SWAP            reduce using rule 58 (factor -> literal .)
    DISPLAY         reduce using rule 58 (factor -> literal .)
    FOR             reduce using rule 58 (factor -> literal .)
    UNTIL           reduce using rule 58 (factor -> literal .)
    REPEAT          reduce using rule 58 (factor -> literal .)
    INPUT           reduce using rule 58 (factor -> literal .)
    IDENT           reduce using rule 58 (factor -> literal .)
    RBRACE          reduce using rule 58 (factor -> literal .)
    REVIVE          reduce using rule 58 (factor -> literal .)
    SHIFT           reduce using rule 58 (factor -> literal .)
    OTHERWISE       reduce using rule 58 (factor -> literal .)
    COLON           reduce using rule 58 (factor -> literal .)
    SEMICOLON       reduce using rule 58 (factor -> literal .)


state 49

    (59) factor -> TILDE . literal
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    literal                        shift and go to state 78

state 50

    (60) factor -> LPAREN . expression RPAREN
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 79
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 51

    (54) expression -> expr_head . expr_tail
    (75) expr_tail -> . empty
    (76) expr_tail -> . AND expression
    (77) expr_tail -> . OR expression
    (158) empty -> .

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    AND             shift and go to state 83
    OR              shift and go to state 84
    GT              reduce using rule 158 (empty -> .)
    LT              reduce using rule 158 (empty -> .)
    EQ_EQ           reduce using rule 158 (empty -> .)
    GT_EQ           reduce using rule 158 (empty -> .)
    LT_EQ           reduce using rule 158 (empty -> .)
    NOT_EQ          reduce using rule 158 (empty -> .)
    COMMA           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    RPAREN          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    COLON           reduce using rule 158 (empty -> .)
    SEMICOLON       reduce using rule 158 (empty -> .)

  ! AND             [ reduce using rule 158 (empty -> .) ]
  ! OR              [ reduce using rule 158 (empty -> .) ]

    expr_tail                      shift and go to state 81
    empty                          shift and go to state 82

state 52

    (78) var_call -> IDENT . var_call_tail
    (79) var_call_tail -> . empty
    (80) var_call_tail -> . LBRACKET index RBRACKET
    (158) empty -> .

    LBRACKET        shift and go to state 87
    PLUS            reduce using rule 158 (empty -> .)
    MINUS           reduce using rule 158 (empty -> .)
    MULTIPLY        reduce using rule 158 (empty -> .)
    DIVISION        reduce using rule 158 (empty -> .)
    MODULO          reduce using rule 158 (empty -> .)
    EXPONENT        reduce using rule 158 (empty -> .)
    COMMA           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    GT              reduce using rule 158 (empty -> .)
    LT              reduce using rule 158 (empty -> .)
    EQ_EQ           reduce using rule 158 (empty -> .)
    GT_EQ           reduce using rule 158 (empty -> .)
    LT_EQ           reduce using rule 158 (empty -> .)
    NOT_EQ          reduce using rule 158 (empty -> .)
    AND             reduce using rule 158 (empty -> .)
    OR              reduce using rule 158 (empty -> .)
    RPAREN          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    COLON           reduce using rule 158 (empty -> .)
    SEMICOLON       reduce using rule 158 (empty -> .)
    PLUS_EQ         reduce using rule 158 (empty -> .)
    MINUS_EQ        reduce using rule 158 (empty -> .)
    MUL_EQ          reduce using rule 158 (empty -> .)
    DIV_EQ          reduce using rule 158 (empty -> .)
    MOD_EQ          reduce using rule 158 (empty -> .)
    EQ              reduce using rule 158 (empty -> .)
    PLUS_PLUS       reduce using rule 158 (empty -> .)
    MINUS_MINUS     reduce using rule 158 (empty -> .)

    var_call_tail                  shift and go to state 85
    empty                          shift and go to state 86

state 53

    (48) literal -> INT_LIT .

    PLUS            reduce using rule 48 (literal -> INT_LIT .)
    MINUS           reduce using rule 48 (literal -> INT_LIT .)
    MULTIPLY        reduce using rule 48 (literal -> INT_LIT .)
    DIVISION        reduce using rule 48 (literal -> INT_LIT .)
    MODULO          reduce using rule 48 (literal -> INT_LIT .)
    EXPONENT        reduce using rule 48 (literal -> INT_LIT .)
    COMMA           reduce using rule 48 (literal -> INT_LIT .)
    INT             reduce using rule 48 (literal -> INT_LIT .)
    FLT             reduce using rule 48 (literal -> INT_LIT .)
    BLN             reduce using rule 48 (literal -> INT_LIT .)
    CHR             reduce using rule 48 (literal -> INT_LIT .)
    STR             reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION        reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_INT    reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_FLT    reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_CHR    reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_BLN    reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_STR    reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_LIST_INT reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_LIST_STR reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 48 (literal -> INT_LIT .)
    FUNCTION_NAME   reduce using rule 48 (literal -> INT_LIT .)
    GT              reduce using rule 48 (literal -> INT_LIT .)
    LT              reduce using rule 48 (literal -> INT_LIT .)
    EQ_EQ           reduce using rule 48 (literal -> INT_LIT .)
    GT_EQ           reduce using rule 48 (literal -> INT_LIT .)
    LT_EQ           reduce using rule 48 (literal -> INT_LIT .)
    NOT_EQ          reduce using rule 48 (literal -> INT_LIT .)
    AND             reduce using rule 48 (literal -> INT_LIT .)
    OR              reduce using rule 48 (literal -> INT_LIT .)
    RBRACKET        reduce using rule 48 (literal -> INT_LIT .)
    RPAREN          reduce using rule 48 (literal -> INT_LIT .)
    CHECK           reduce using rule 48 (literal -> INT_LIT .)
    SWAP            reduce using rule 48 (literal -> INT_LIT .)
    DISPLAY         reduce using rule 48 (literal -> INT_LIT .)
    FOR             reduce using rule 48 (literal -> INT_LIT .)
    UNTIL           reduce using rule 48 (literal -> INT_LIT .)
    REPEAT          reduce using rule 48 (literal -> INT_LIT .)
    INPUT           reduce using rule 48 (literal -> INT_LIT .)
    IDENT           reduce using rule 48 (literal -> INT_LIT .)
    RBRACE          reduce using rule 48 (literal -> INT_LIT .)
    REVIVE          reduce using rule 48 (literal -> INT_LIT .)
    SHIFT           reduce using rule 48 (literal -> INT_LIT .)
    OTHERWISE       reduce using rule 48 (literal -> INT_LIT .)
    COLON           reduce using rule 48 (literal -> INT_LIT .)
    SEMICOLON       reduce using rule 48 (literal -> INT_LIT .)


state 54

    (49) literal -> FLT_LIT .

    PLUS            reduce using rule 49 (literal -> FLT_LIT .)
    MINUS           reduce using rule 49 (literal -> FLT_LIT .)
    MULTIPLY        reduce using rule 49 (literal -> FLT_LIT .)
    DIVISION        reduce using rule 49 (literal -> FLT_LIT .)
    MODULO          reduce using rule 49 (literal -> FLT_LIT .)
    EXPONENT        reduce using rule 49 (literal -> FLT_LIT .)
    COMMA           reduce using rule 49 (literal -> FLT_LIT .)
    INT             reduce using rule 49 (literal -> FLT_LIT .)
    FLT             reduce using rule 49 (literal -> FLT_LIT .)
    BLN             reduce using rule 49 (literal -> FLT_LIT .)
    CHR             reduce using rule 49 (literal -> FLT_LIT .)
    STR             reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION        reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_INT    reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_FLT    reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_CHR    reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_BLN    reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_STR    reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_LIST_INT reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_LIST_STR reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 49 (literal -> FLT_LIT .)
    FUNCTION_NAME   reduce using rule 49 (literal -> FLT_LIT .)
    GT              reduce using rule 49 (literal -> FLT_LIT .)
    LT              reduce using rule 49 (literal -> FLT_LIT .)
    EQ_EQ           reduce using rule 49 (literal -> FLT_LIT .)
    GT_EQ           reduce using rule 49 (literal -> FLT_LIT .)
    LT_EQ           reduce using rule 49 (literal -> FLT_LIT .)
    NOT_EQ          reduce using rule 49 (literal -> FLT_LIT .)
    AND             reduce using rule 49 (literal -> FLT_LIT .)
    OR              reduce using rule 49 (literal -> FLT_LIT .)
    RBRACKET        reduce using rule 49 (literal -> FLT_LIT .)
    RPAREN          reduce using rule 49 (literal -> FLT_LIT .)
    CHECK           reduce using rule 49 (literal -> FLT_LIT .)
    SWAP            reduce using rule 49 (literal -> FLT_LIT .)
    DISPLAY         reduce using rule 49 (literal -> FLT_LIT .)
    FOR             reduce using rule 49 (literal -> FLT_LIT .)
    UNTIL           reduce using rule 49 (literal -> FLT_LIT .)
    REPEAT          reduce using rule 49 (literal -> FLT_LIT .)
    INPUT           reduce using rule 49 (literal -> FLT_LIT .)
    IDENT           reduce using rule 49 (literal -> FLT_LIT .)
    RBRACE          reduce using rule 49 (literal -> FLT_LIT .)
    REVIVE          reduce using rule 49 (literal -> FLT_LIT .)
    SHIFT           reduce using rule 49 (literal -> FLT_LIT .)
    OTHERWISE       reduce using rule 49 (literal -> FLT_LIT .)
    COLON           reduce using rule 49 (literal -> FLT_LIT .)
    SEMICOLON       reduce using rule 49 (literal -> FLT_LIT .)


state 55

    (50) literal -> DAY .

    PLUS            reduce using rule 50 (literal -> DAY .)
    MINUS           reduce using rule 50 (literal -> DAY .)
    MULTIPLY        reduce using rule 50 (literal -> DAY .)
    DIVISION        reduce using rule 50 (literal -> DAY .)
    MODULO          reduce using rule 50 (literal -> DAY .)
    EXPONENT        reduce using rule 50 (literal -> DAY .)
    COMMA           reduce using rule 50 (literal -> DAY .)
    INT             reduce using rule 50 (literal -> DAY .)
    FLT             reduce using rule 50 (literal -> DAY .)
    BLN             reduce using rule 50 (literal -> DAY .)
    CHR             reduce using rule 50 (literal -> DAY .)
    STR             reduce using rule 50 (literal -> DAY .)
    FUNCTION        reduce using rule 50 (literal -> DAY .)
    FUNCTION_INT    reduce using rule 50 (literal -> DAY .)
    FUNCTION_FLT    reduce using rule 50 (literal -> DAY .)
    FUNCTION_CHR    reduce using rule 50 (literal -> DAY .)
    FUNCTION_BLN    reduce using rule 50 (literal -> DAY .)
    FUNCTION_STR    reduce using rule 50 (literal -> DAY .)
    FUNCTION_LIST_INT reduce using rule 50 (literal -> DAY .)
    FUNCTION_LIST_FLT reduce using rule 50 (literal -> DAY .)
    FUNCTION_LIST_CHR reduce using rule 50 (literal -> DAY .)
    FUNCTION_LIST_STR reduce using rule 50 (literal -> DAY .)
    FUNCTION_LIST_BLN reduce using rule 50 (literal -> DAY .)
    FUNCTION_NAME   reduce using rule 50 (literal -> DAY .)
    GT              reduce using rule 50 (literal -> DAY .)
    LT              reduce using rule 50 (literal -> DAY .)
    EQ_EQ           reduce using rule 50 (literal -> DAY .)
    GT_EQ           reduce using rule 50 (literal -> DAY .)
    LT_EQ           reduce using rule 50 (literal -> DAY .)
    NOT_EQ          reduce using rule 50 (literal -> DAY .)
    AND             reduce using rule 50 (literal -> DAY .)
    OR              reduce using rule 50 (literal -> DAY .)
    RBRACKET        reduce using rule 50 (literal -> DAY .)
    RPAREN          reduce using rule 50 (literal -> DAY .)
    CHECK           reduce using rule 50 (literal -> DAY .)
    SWAP            reduce using rule 50 (literal -> DAY .)
    DISPLAY         reduce using rule 50 (literal -> DAY .)
    FOR             reduce using rule 50 (literal -> DAY .)
    UNTIL           reduce using rule 50 (literal -> DAY .)
    REPEAT          reduce using rule 50 (literal -> DAY .)
    INPUT           reduce using rule 50 (literal -> DAY .)
    IDENT           reduce using rule 50 (literal -> DAY .)
    RBRACE          reduce using rule 50 (literal -> DAY .)
    REVIVE          reduce using rule 50 (literal -> DAY .)
    SHIFT           reduce using rule 50 (literal -> DAY .)
    OTHERWISE       reduce using rule 50 (literal -> DAY .)
    COLON           reduce using rule 50 (literal -> DAY .)
    SEMICOLON       reduce using rule 50 (literal -> DAY .)


state 56

    (51) literal -> NIGHT .

    PLUS            reduce using rule 51 (literal -> NIGHT .)
    MINUS           reduce using rule 51 (literal -> NIGHT .)
    MULTIPLY        reduce using rule 51 (literal -> NIGHT .)
    DIVISION        reduce using rule 51 (literal -> NIGHT .)
    MODULO          reduce using rule 51 (literal -> NIGHT .)
    EXPONENT        reduce using rule 51 (literal -> NIGHT .)
    COMMA           reduce using rule 51 (literal -> NIGHT .)
    INT             reduce using rule 51 (literal -> NIGHT .)
    FLT             reduce using rule 51 (literal -> NIGHT .)
    BLN             reduce using rule 51 (literal -> NIGHT .)
    CHR             reduce using rule 51 (literal -> NIGHT .)
    STR             reduce using rule 51 (literal -> NIGHT .)
    FUNCTION        reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_INT    reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_FLT    reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_CHR    reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_BLN    reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_STR    reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_LIST_INT reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_LIST_FLT reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_LIST_CHR reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_LIST_STR reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_LIST_BLN reduce using rule 51 (literal -> NIGHT .)
    FUNCTION_NAME   reduce using rule 51 (literal -> NIGHT .)
    GT              reduce using rule 51 (literal -> NIGHT .)
    LT              reduce using rule 51 (literal -> NIGHT .)
    EQ_EQ           reduce using rule 51 (literal -> NIGHT .)
    GT_EQ           reduce using rule 51 (literal -> NIGHT .)
    LT_EQ           reduce using rule 51 (literal -> NIGHT .)
    NOT_EQ          reduce using rule 51 (literal -> NIGHT .)
    AND             reduce using rule 51 (literal -> NIGHT .)
    OR              reduce using rule 51 (literal -> NIGHT .)
    RBRACKET        reduce using rule 51 (literal -> NIGHT .)
    RPAREN          reduce using rule 51 (literal -> NIGHT .)
    CHECK           reduce using rule 51 (literal -> NIGHT .)
    SWAP            reduce using rule 51 (literal -> NIGHT .)
    DISPLAY         reduce using rule 51 (literal -> NIGHT .)
    FOR             reduce using rule 51 (literal -> NIGHT .)
    UNTIL           reduce using rule 51 (literal -> NIGHT .)
    REPEAT          reduce using rule 51 (literal -> NIGHT .)
    INPUT           reduce using rule 51 (literal -> NIGHT .)
    IDENT           reduce using rule 51 (literal -> NIGHT .)
    RBRACE          reduce using rule 51 (literal -> NIGHT .)
    REVIVE          reduce using rule 51 (literal -> NIGHT .)
    SHIFT           reduce using rule 51 (literal -> NIGHT .)
    OTHERWISE       reduce using rule 51 (literal -> NIGHT .)
    COLON           reduce using rule 51 (literal -> NIGHT .)
    SEMICOLON       reduce using rule 51 (literal -> NIGHT .)


state 57

    (52) literal -> CHR_LIT .

    PLUS            reduce using rule 52 (literal -> CHR_LIT .)
    MINUS           reduce using rule 52 (literal -> CHR_LIT .)
    MULTIPLY        reduce using rule 52 (literal -> CHR_LIT .)
    DIVISION        reduce using rule 52 (literal -> CHR_LIT .)
    MODULO          reduce using rule 52 (literal -> CHR_LIT .)
    EXPONENT        reduce using rule 52 (literal -> CHR_LIT .)
    COMMA           reduce using rule 52 (literal -> CHR_LIT .)
    INT             reduce using rule 52 (literal -> CHR_LIT .)
    FLT             reduce using rule 52 (literal -> CHR_LIT .)
    BLN             reduce using rule 52 (literal -> CHR_LIT .)
    CHR             reduce using rule 52 (literal -> CHR_LIT .)
    STR             reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION        reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_INT    reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_FLT    reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_CHR    reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_BLN    reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_STR    reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_LIST_INT reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_LIST_FLT reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_LIST_CHR reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_LIST_STR reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_LIST_BLN reduce using rule 52 (literal -> CHR_LIT .)
    FUNCTION_NAME   reduce using rule 52 (literal -> CHR_LIT .)
    GT              reduce using rule 52 (literal -> CHR_LIT .)
    LT              reduce using rule 52 (literal -> CHR_LIT .)
    EQ_EQ           reduce using rule 52 (literal -> CHR_LIT .)
    GT_EQ           reduce using rule 52 (literal -> CHR_LIT .)
    LT_EQ           reduce using rule 52 (literal -> CHR_LIT .)
    NOT_EQ          reduce using rule 52 (literal -> CHR_LIT .)
    AND             reduce using rule 52 (literal -> CHR_LIT .)
    OR              reduce using rule 52 (literal -> CHR_LIT .)
    RBRACKET        reduce using rule 52 (literal -> CHR_LIT .)
    RPAREN          reduce using rule 52 (literal -> CHR_LIT .)
    CHECK           reduce using rule 52 (literal -> CHR_LIT .)
    SWAP            reduce using rule 52 (literal -> CHR_LIT .)
    DISPLAY         reduce using rule 52 (literal -> CHR_LIT .)
    FOR             reduce using rule 52 (literal -> CHR_LIT .)
    UNTIL           reduce using rule 52 (literal -> CHR_LIT .)
    REPEAT          reduce using rule 52 (literal -> CHR_LIT .)
    INPUT           reduce using rule 52 (literal -> CHR_LIT .)
    IDENT           reduce using rule 52 (literal -> CHR_LIT .)
    RBRACE          reduce using rule 52 (literal -> CHR_LIT .)
    REVIVE          reduce using rule 52 (literal -> CHR_LIT .)
    SHIFT           reduce using rule 52 (literal -> CHR_LIT .)
    OTHERWISE       reduce using rule 52 (literal -> CHR_LIT .)
    COLON           reduce using rule 52 (literal -> CHR_LIT .)
    SEMICOLON       reduce using rule 52 (literal -> CHR_LIT .)


state 58

    (53) literal -> STR_LIT .

    PLUS            reduce using rule 53 (literal -> STR_LIT .)
    MINUS           reduce using rule 53 (literal -> STR_LIT .)
    MULTIPLY        reduce using rule 53 (literal -> STR_LIT .)
    DIVISION        reduce using rule 53 (literal -> STR_LIT .)
    MODULO          reduce using rule 53 (literal -> STR_LIT .)
    EXPONENT        reduce using rule 53 (literal -> STR_LIT .)
    COMMA           reduce using rule 53 (literal -> STR_LIT .)
    INT             reduce using rule 53 (literal -> STR_LIT .)
    FLT             reduce using rule 53 (literal -> STR_LIT .)
    BLN             reduce using rule 53 (literal -> STR_LIT .)
    CHR             reduce using rule 53 (literal -> STR_LIT .)
    STR             reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION        reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_INT    reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_FLT    reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_CHR    reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_BLN    reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_STR    reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_LIST_INT reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_LIST_FLT reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_LIST_CHR reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_LIST_STR reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_LIST_BLN reduce using rule 53 (literal -> STR_LIT .)
    FUNCTION_NAME   reduce using rule 53 (literal -> STR_LIT .)
    GT              reduce using rule 53 (literal -> STR_LIT .)
    LT              reduce using rule 53 (literal -> STR_LIT .)
    EQ_EQ           reduce using rule 53 (literal -> STR_LIT .)
    GT_EQ           reduce using rule 53 (literal -> STR_LIT .)
    LT_EQ           reduce using rule 53 (literal -> STR_LIT .)
    NOT_EQ          reduce using rule 53 (literal -> STR_LIT .)
    AND             reduce using rule 53 (literal -> STR_LIT .)
    OR              reduce using rule 53 (literal -> STR_LIT .)
    RBRACKET        reduce using rule 53 (literal -> STR_LIT .)
    RPAREN          reduce using rule 53 (literal -> STR_LIT .)
    CHECK           reduce using rule 53 (literal -> STR_LIT .)
    SWAP            reduce using rule 53 (literal -> STR_LIT .)
    DISPLAY         reduce using rule 53 (literal -> STR_LIT .)
    FOR             reduce using rule 53 (literal -> STR_LIT .)
    UNTIL           reduce using rule 53 (literal -> STR_LIT .)
    REPEAT          reduce using rule 53 (literal -> STR_LIT .)
    INPUT           reduce using rule 53 (literal -> STR_LIT .)
    IDENT           reduce using rule 53 (literal -> STR_LIT .)
    RBRACE          reduce using rule 53 (literal -> STR_LIT .)
    REVIVE          reduce using rule 53 (literal -> STR_LIT .)
    SHIFT           reduce using rule 53 (literal -> STR_LIT .)
    OTHERWISE       reduce using rule 53 (literal -> STR_LIT .)
    COLON           reduce using rule 53 (literal -> STR_LIT .)
    SEMICOLON       reduce using rule 53 (literal -> STR_LIT .)


state 59

    (55) expr_head -> term . term_tail
    (68) term_tail -> . empty
    (69) term_tail -> . GT expression
    (70) term_tail -> . LT expression
    (71) term_tail -> . EQ_EQ expression
    (72) term_tail -> . GT_EQ expression
    (73) term_tail -> . LT_EQ expression
    (74) term_tail -> . NOT_EQ expression
    (158) empty -> .

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    GT              shift and go to state 90
    LT              shift and go to state 91
    EQ_EQ           shift and go to state 92
    GT_EQ           shift and go to state 93
    LT_EQ           shift and go to state 94
    NOT_EQ          shift and go to state 95
    AND             reduce using rule 158 (empty -> .)
    OR              reduce using rule 158 (empty -> .)
    COMMA           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    RPAREN          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    COLON           reduce using rule 158 (empty -> .)
    SEMICOLON       reduce using rule 158 (empty -> .)

  ! GT              [ reduce using rule 158 (empty -> .) ]
  ! LT              [ reduce using rule 158 (empty -> .) ]
  ! EQ_EQ           [ reduce using rule 158 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 158 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 158 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 158 (empty -> .) ]

    term_tail                      shift and go to state 88
    empty                          shift and go to state 89

state 60

    (2) main_function -> FUNCTION_NAME LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 96


state 61

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN parameters . RPAREN LBRACE statements revive RBRACE

    RPAREN          shift and go to state 97


state 62

    (95) parameters -> data_type . IDENT parameters_tail

    IDENT           shift and go to state 98


state 63

    (96) parameters -> empty .

    RPAREN          reduce using rule 96 (parameters -> empty .)


state 64

    (9) global_statement_tail -> COMMA IDENT global_statement_tail .

    INT             reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FLT             reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    BLN             reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    CHR             reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    STR             reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION        reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_INT    reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_FLT    reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_CHR    reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_BLN    reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_STR    reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_INT reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_FLT reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_CHR reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_STR reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_BLN reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)
    FUNCTION_NAME   reduce using rule 9 (global_statement_tail -> COMMA IDENT global_statement_tail .)


state 65

    (10) global_statement_tail -> EQ global_dec_value global_tail2 .

    INT             reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FLT             reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    BLN             reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    CHR             reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    STR             reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION        reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_INT    reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_FLT    reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_CHR    reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_BLN    reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_STR    reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_LIST_INT reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_LIST_STR reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)
    FUNCTION_NAME   reduce using rule 10 (global_statement_tail -> EQ global_dec_value global_tail2 .)


state 66

    (11) global_tail2 -> empty .

    INT             reduce using rule 11 (global_tail2 -> empty .)
    FLT             reduce using rule 11 (global_tail2 -> empty .)
    BLN             reduce using rule 11 (global_tail2 -> empty .)
    CHR             reduce using rule 11 (global_tail2 -> empty .)
    STR             reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION        reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_INT    reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_FLT    reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_CHR    reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_BLN    reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_STR    reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_LIST_INT reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_LIST_FLT reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_LIST_CHR reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_LIST_STR reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_LIST_BLN reduce using rule 11 (global_tail2 -> empty .)
    FUNCTION_NAME   reduce using rule 11 (global_tail2 -> empty .)


state 67

    (12) global_tail2 -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 99


state 68

    (14) global_dec_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 100


state 69

    (25) list_element -> literal . element_tail
    (26) element_tail -> . empty
    (27) element_tail -> . COMMA list_element
    (158) empty -> .

    COMMA           shift and go to state 103
    RBRACKET        reduce using rule 158 (empty -> .)

    element_tail                   shift and go to state 101
    empty                          shift and go to state 102

state 70

    (56) term -> factor factor_tail .

    GT              reduce using rule 56 (term -> factor factor_tail .)
    LT              reduce using rule 56 (term -> factor factor_tail .)
    EQ_EQ           reduce using rule 56 (term -> factor factor_tail .)
    GT_EQ           reduce using rule 56 (term -> factor factor_tail .)
    LT_EQ           reduce using rule 56 (term -> factor factor_tail .)
    NOT_EQ          reduce using rule 56 (term -> factor factor_tail .)
    AND             reduce using rule 56 (term -> factor factor_tail .)
    OR              reduce using rule 56 (term -> factor factor_tail .)
    COMMA           reduce using rule 56 (term -> factor factor_tail .)
    INT             reduce using rule 56 (term -> factor factor_tail .)
    FLT             reduce using rule 56 (term -> factor factor_tail .)
    BLN             reduce using rule 56 (term -> factor factor_tail .)
    CHR             reduce using rule 56 (term -> factor factor_tail .)
    STR             reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION        reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_INT    reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_FLT    reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_CHR    reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_BLN    reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_STR    reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_LIST_INT reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_LIST_FLT reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_LIST_CHR reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_LIST_STR reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_LIST_BLN reduce using rule 56 (term -> factor factor_tail .)
    FUNCTION_NAME   reduce using rule 56 (term -> factor factor_tail .)
    RPAREN          reduce using rule 56 (term -> factor factor_tail .)
    CHECK           reduce using rule 56 (term -> factor factor_tail .)
    SWAP            reduce using rule 56 (term -> factor factor_tail .)
    DISPLAY         reduce using rule 56 (term -> factor factor_tail .)
    FOR             reduce using rule 56 (term -> factor factor_tail .)
    UNTIL           reduce using rule 56 (term -> factor factor_tail .)
    REPEAT          reduce using rule 56 (term -> factor factor_tail .)
    INPUT           reduce using rule 56 (term -> factor factor_tail .)
    IDENT           reduce using rule 56 (term -> factor factor_tail .)
    RBRACE          reduce using rule 56 (term -> factor factor_tail .)
    REVIVE          reduce using rule 56 (term -> factor factor_tail .)
    SHIFT           reduce using rule 56 (term -> factor factor_tail .)
    OTHERWISE       reduce using rule 56 (term -> factor factor_tail .)
    COLON           reduce using rule 56 (term -> factor factor_tail .)
    SEMICOLON       reduce using rule 56 (term -> factor factor_tail .)


state 71

    (61) factor_tail -> empty .

    GT              reduce using rule 61 (factor_tail -> empty .)
    LT              reduce using rule 61 (factor_tail -> empty .)
    EQ_EQ           reduce using rule 61 (factor_tail -> empty .)
    GT_EQ           reduce using rule 61 (factor_tail -> empty .)
    LT_EQ           reduce using rule 61 (factor_tail -> empty .)
    NOT_EQ          reduce using rule 61 (factor_tail -> empty .)
    AND             reduce using rule 61 (factor_tail -> empty .)
    OR              reduce using rule 61 (factor_tail -> empty .)
    COMMA           reduce using rule 61 (factor_tail -> empty .)
    INT             reduce using rule 61 (factor_tail -> empty .)
    FLT             reduce using rule 61 (factor_tail -> empty .)
    BLN             reduce using rule 61 (factor_tail -> empty .)
    CHR             reduce using rule 61 (factor_tail -> empty .)
    STR             reduce using rule 61 (factor_tail -> empty .)
    FUNCTION        reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_INT    reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_FLT    reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_CHR    reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_BLN    reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_STR    reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 61 (factor_tail -> empty .)
    FUNCTION_NAME   reduce using rule 61 (factor_tail -> empty .)
    RPAREN          reduce using rule 61 (factor_tail -> empty .)
    CHECK           reduce using rule 61 (factor_tail -> empty .)
    SWAP            reduce using rule 61 (factor_tail -> empty .)
    DISPLAY         reduce using rule 61 (factor_tail -> empty .)
    FOR             reduce using rule 61 (factor_tail -> empty .)
    UNTIL           reduce using rule 61 (factor_tail -> empty .)
    REPEAT          reduce using rule 61 (factor_tail -> empty .)
    INPUT           reduce using rule 61 (factor_tail -> empty .)
    IDENT           reduce using rule 61 (factor_tail -> empty .)
    RBRACE          reduce using rule 61 (factor_tail -> empty .)
    REVIVE          reduce using rule 61 (factor_tail -> empty .)
    SHIFT           reduce using rule 61 (factor_tail -> empty .)
    OTHERWISE       reduce using rule 61 (factor_tail -> empty .)
    COLON           reduce using rule 61 (factor_tail -> empty .)
    SEMICOLON       reduce using rule 61 (factor_tail -> empty .)


state 72

    (62) factor_tail -> PLUS . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 104
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 73

    (63) factor_tail -> MINUS . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 105
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 74

    (64) factor_tail -> MULTIPLY . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 106
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 75

    (65) factor_tail -> DIVISION . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 107
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 76

    (66) factor_tail -> MODULO . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 108
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 77

    (67) factor_tail -> EXPONENT . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 109
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 78

    (59) factor -> TILDE literal .

    PLUS            reduce using rule 59 (factor -> TILDE literal .)
    MINUS           reduce using rule 59 (factor -> TILDE literal .)
    MULTIPLY        reduce using rule 59 (factor -> TILDE literal .)
    DIVISION        reduce using rule 59 (factor -> TILDE literal .)
    MODULO          reduce using rule 59 (factor -> TILDE literal .)
    EXPONENT        reduce using rule 59 (factor -> TILDE literal .)
    COMMA           reduce using rule 59 (factor -> TILDE literal .)
    INT             reduce using rule 59 (factor -> TILDE literal .)
    FLT             reduce using rule 59 (factor -> TILDE literal .)
    BLN             reduce using rule 59 (factor -> TILDE literal .)
    CHR             reduce using rule 59 (factor -> TILDE literal .)
    STR             reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION        reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_INT    reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_FLT    reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_CHR    reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_BLN    reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_STR    reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_LIST_INT reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_LIST_FLT reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_LIST_CHR reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_LIST_STR reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_LIST_BLN reduce using rule 59 (factor -> TILDE literal .)
    FUNCTION_NAME   reduce using rule 59 (factor -> TILDE literal .)
    GT              reduce using rule 59 (factor -> TILDE literal .)
    LT              reduce using rule 59 (factor -> TILDE literal .)
    EQ_EQ           reduce using rule 59 (factor -> TILDE literal .)
    GT_EQ           reduce using rule 59 (factor -> TILDE literal .)
    LT_EQ           reduce using rule 59 (factor -> TILDE literal .)
    NOT_EQ          reduce using rule 59 (factor -> TILDE literal .)
    AND             reduce using rule 59 (factor -> TILDE literal .)
    OR              reduce using rule 59 (factor -> TILDE literal .)
    RPAREN          reduce using rule 59 (factor -> TILDE literal .)
    CHECK           reduce using rule 59 (factor -> TILDE literal .)
    SWAP            reduce using rule 59 (factor -> TILDE literal .)
    DISPLAY         reduce using rule 59 (factor -> TILDE literal .)
    FOR             reduce using rule 59 (factor -> TILDE literal .)
    UNTIL           reduce using rule 59 (factor -> TILDE literal .)
    REPEAT          reduce using rule 59 (factor -> TILDE literal .)
    INPUT           reduce using rule 59 (factor -> TILDE literal .)
    IDENT           reduce using rule 59 (factor -> TILDE literal .)
    RBRACE          reduce using rule 59 (factor -> TILDE literal .)
    REVIVE          reduce using rule 59 (factor -> TILDE literal .)
    SHIFT           reduce using rule 59 (factor -> TILDE literal .)
    OTHERWISE       reduce using rule 59 (factor -> TILDE literal .)
    COLON           reduce using rule 59 (factor -> TILDE literal .)
    SEMICOLON       reduce using rule 59 (factor -> TILDE literal .)


state 79

    (60) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 110


state 80

    (56) term -> factor . factor_tail
    (61) factor_tail -> . empty
    (62) factor_tail -> . PLUS expression
    (63) factor_tail -> . MINUS expression
    (64) factor_tail -> . MULTIPLY expression
    (65) factor_tail -> . DIVISION expression
    (66) factor_tail -> . MODULO expression
    (67) factor_tail -> . EXPONENT expression
    (158) empty -> .

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MULTIPLY        shift and go to state 74
    DIVISION        shift and go to state 75
    MODULO          shift and go to state 76
    EXPONENT        shift and go to state 77
    GT              reduce using rule 158 (empty -> .)
    LT              reduce using rule 158 (empty -> .)
    EQ_EQ           reduce using rule 158 (empty -> .)
    GT_EQ           reduce using rule 158 (empty -> .)
    LT_EQ           reduce using rule 158 (empty -> .)
    NOT_EQ          reduce using rule 158 (empty -> .)
    AND             reduce using rule 158 (empty -> .)
    OR              reduce using rule 158 (empty -> .)
    COMMA           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    RPAREN          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    COLON           reduce using rule 158 (empty -> .)
    SEMICOLON       reduce using rule 158 (empty -> .)

    factor_tail                    shift and go to state 70
    empty                          shift and go to state 71

state 81

    (54) expression -> expr_head expr_tail .

    COMMA           reduce using rule 54 (expression -> expr_head expr_tail .)
    INT             reduce using rule 54 (expression -> expr_head expr_tail .)
    FLT             reduce using rule 54 (expression -> expr_head expr_tail .)
    BLN             reduce using rule 54 (expression -> expr_head expr_tail .)
    CHR             reduce using rule 54 (expression -> expr_head expr_tail .)
    STR             reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION        reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_INT    reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_FLT    reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_CHR    reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_BLN    reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_STR    reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_LIST_INT reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_LIST_FLT reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_LIST_CHR reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_LIST_STR reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_LIST_BLN reduce using rule 54 (expression -> expr_head expr_tail .)
    FUNCTION_NAME   reduce using rule 54 (expression -> expr_head expr_tail .)
    RPAREN          reduce using rule 54 (expression -> expr_head expr_tail .)
    GT              reduce using rule 54 (expression -> expr_head expr_tail .)
    LT              reduce using rule 54 (expression -> expr_head expr_tail .)
    EQ_EQ           reduce using rule 54 (expression -> expr_head expr_tail .)
    GT_EQ           reduce using rule 54 (expression -> expr_head expr_tail .)
    LT_EQ           reduce using rule 54 (expression -> expr_head expr_tail .)
    NOT_EQ          reduce using rule 54 (expression -> expr_head expr_tail .)
    AND             reduce using rule 54 (expression -> expr_head expr_tail .)
    OR              reduce using rule 54 (expression -> expr_head expr_tail .)
    CHECK           reduce using rule 54 (expression -> expr_head expr_tail .)
    SWAP            reduce using rule 54 (expression -> expr_head expr_tail .)
    DISPLAY         reduce using rule 54 (expression -> expr_head expr_tail .)
    FOR             reduce using rule 54 (expression -> expr_head expr_tail .)
    UNTIL           reduce using rule 54 (expression -> expr_head expr_tail .)
    REPEAT          reduce using rule 54 (expression -> expr_head expr_tail .)
    INPUT           reduce using rule 54 (expression -> expr_head expr_tail .)
    IDENT           reduce using rule 54 (expression -> expr_head expr_tail .)
    RBRACE          reduce using rule 54 (expression -> expr_head expr_tail .)
    REVIVE          reduce using rule 54 (expression -> expr_head expr_tail .)
    SHIFT           reduce using rule 54 (expression -> expr_head expr_tail .)
    OTHERWISE       reduce using rule 54 (expression -> expr_head expr_tail .)
    COLON           reduce using rule 54 (expression -> expr_head expr_tail .)
    SEMICOLON       reduce using rule 54 (expression -> expr_head expr_tail .)


state 82

    (75) expr_tail -> empty .

    GT              reduce using rule 75 (expr_tail -> empty .)
    LT              reduce using rule 75 (expr_tail -> empty .)
    EQ_EQ           reduce using rule 75 (expr_tail -> empty .)
    GT_EQ           reduce using rule 75 (expr_tail -> empty .)
    LT_EQ           reduce using rule 75 (expr_tail -> empty .)
    NOT_EQ          reduce using rule 75 (expr_tail -> empty .)
    AND             reduce using rule 75 (expr_tail -> empty .)
    OR              reduce using rule 75 (expr_tail -> empty .)
    COMMA           reduce using rule 75 (expr_tail -> empty .)
    INT             reduce using rule 75 (expr_tail -> empty .)
    FLT             reduce using rule 75 (expr_tail -> empty .)
    BLN             reduce using rule 75 (expr_tail -> empty .)
    CHR             reduce using rule 75 (expr_tail -> empty .)
    STR             reduce using rule 75 (expr_tail -> empty .)
    FUNCTION        reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_INT    reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_FLT    reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_CHR    reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_BLN    reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_STR    reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 75 (expr_tail -> empty .)
    FUNCTION_NAME   reduce using rule 75 (expr_tail -> empty .)
    RPAREN          reduce using rule 75 (expr_tail -> empty .)
    CHECK           reduce using rule 75 (expr_tail -> empty .)
    SWAP            reduce using rule 75 (expr_tail -> empty .)
    DISPLAY         reduce using rule 75 (expr_tail -> empty .)
    FOR             reduce using rule 75 (expr_tail -> empty .)
    UNTIL           reduce using rule 75 (expr_tail -> empty .)
    REPEAT          reduce using rule 75 (expr_tail -> empty .)
    INPUT           reduce using rule 75 (expr_tail -> empty .)
    IDENT           reduce using rule 75 (expr_tail -> empty .)
    RBRACE          reduce using rule 75 (expr_tail -> empty .)
    REVIVE          reduce using rule 75 (expr_tail -> empty .)
    SHIFT           reduce using rule 75 (expr_tail -> empty .)
    OTHERWISE       reduce using rule 75 (expr_tail -> empty .)
    COLON           reduce using rule 75 (expr_tail -> empty .)
    SEMICOLON       reduce using rule 75 (expr_tail -> empty .)


state 83

    (76) expr_tail -> AND . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 111
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 84

    (77) expr_tail -> OR . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 112
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 85

    (78) var_call -> IDENT var_call_tail .

    PLUS            reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MINUS           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MULTIPLY        reduce using rule 78 (var_call -> IDENT var_call_tail .)
    DIVISION        reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MODULO          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    EXPONENT        reduce using rule 78 (var_call -> IDENT var_call_tail .)
    COMMA           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    INT             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FLT             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    BLN             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    CHR             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    STR             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION        reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_INT    reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_FLT    reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_CHR    reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_BLN    reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_STR    reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_LIST_INT reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_LIST_FLT reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_LIST_CHR reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_LIST_STR reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_LIST_BLN reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FUNCTION_NAME   reduce using rule 78 (var_call -> IDENT var_call_tail .)
    GT              reduce using rule 78 (var_call -> IDENT var_call_tail .)
    LT              reduce using rule 78 (var_call -> IDENT var_call_tail .)
    EQ_EQ           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    GT_EQ           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    LT_EQ           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    NOT_EQ          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    AND             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    OR              reduce using rule 78 (var_call -> IDENT var_call_tail .)
    RPAREN          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    CHECK           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    SWAP            reduce using rule 78 (var_call -> IDENT var_call_tail .)
    DISPLAY         reduce using rule 78 (var_call -> IDENT var_call_tail .)
    FOR             reduce using rule 78 (var_call -> IDENT var_call_tail .)
    UNTIL           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    REPEAT          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    INPUT           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    IDENT           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    RBRACE          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    REVIVE          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    SHIFT           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    OTHERWISE       reduce using rule 78 (var_call -> IDENT var_call_tail .)
    COLON           reduce using rule 78 (var_call -> IDENT var_call_tail .)
    SEMICOLON       reduce using rule 78 (var_call -> IDENT var_call_tail .)
    PLUS_EQ         reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MINUS_EQ        reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MUL_EQ          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    DIV_EQ          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MOD_EQ          reduce using rule 78 (var_call -> IDENT var_call_tail .)
    EQ              reduce using rule 78 (var_call -> IDENT var_call_tail .)
    PLUS_PLUS       reduce using rule 78 (var_call -> IDENT var_call_tail .)
    MINUS_MINUS     reduce using rule 78 (var_call -> IDENT var_call_tail .)


state 86

    (79) var_call_tail -> empty .

    PLUS            reduce using rule 79 (var_call_tail -> empty .)
    MINUS           reduce using rule 79 (var_call_tail -> empty .)
    MULTIPLY        reduce using rule 79 (var_call_tail -> empty .)
    DIVISION        reduce using rule 79 (var_call_tail -> empty .)
    MODULO          reduce using rule 79 (var_call_tail -> empty .)
    EXPONENT        reduce using rule 79 (var_call_tail -> empty .)
    COMMA           reduce using rule 79 (var_call_tail -> empty .)
    INT             reduce using rule 79 (var_call_tail -> empty .)
    FLT             reduce using rule 79 (var_call_tail -> empty .)
    BLN             reduce using rule 79 (var_call_tail -> empty .)
    CHR             reduce using rule 79 (var_call_tail -> empty .)
    STR             reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION        reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_INT    reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_FLT    reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_CHR    reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_BLN    reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_STR    reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 79 (var_call_tail -> empty .)
    FUNCTION_NAME   reduce using rule 79 (var_call_tail -> empty .)
    GT              reduce using rule 79 (var_call_tail -> empty .)
    LT              reduce using rule 79 (var_call_tail -> empty .)
    EQ_EQ           reduce using rule 79 (var_call_tail -> empty .)
    GT_EQ           reduce using rule 79 (var_call_tail -> empty .)
    LT_EQ           reduce using rule 79 (var_call_tail -> empty .)
    NOT_EQ          reduce using rule 79 (var_call_tail -> empty .)
    AND             reduce using rule 79 (var_call_tail -> empty .)
    OR              reduce using rule 79 (var_call_tail -> empty .)
    RPAREN          reduce using rule 79 (var_call_tail -> empty .)
    CHECK           reduce using rule 79 (var_call_tail -> empty .)
    SWAP            reduce using rule 79 (var_call_tail -> empty .)
    DISPLAY         reduce using rule 79 (var_call_tail -> empty .)
    FOR             reduce using rule 79 (var_call_tail -> empty .)
    UNTIL           reduce using rule 79 (var_call_tail -> empty .)
    REPEAT          reduce using rule 79 (var_call_tail -> empty .)
    INPUT           reduce using rule 79 (var_call_tail -> empty .)
    IDENT           reduce using rule 79 (var_call_tail -> empty .)
    RBRACE          reduce using rule 79 (var_call_tail -> empty .)
    REVIVE          reduce using rule 79 (var_call_tail -> empty .)
    SHIFT           reduce using rule 79 (var_call_tail -> empty .)
    OTHERWISE       reduce using rule 79 (var_call_tail -> empty .)
    COLON           reduce using rule 79 (var_call_tail -> empty .)
    SEMICOLON       reduce using rule 79 (var_call_tail -> empty .)
    PLUS_EQ         reduce using rule 79 (var_call_tail -> empty .)
    MINUS_EQ        reduce using rule 79 (var_call_tail -> empty .)
    MUL_EQ          reduce using rule 79 (var_call_tail -> empty .)
    DIV_EQ          reduce using rule 79 (var_call_tail -> empty .)
    MOD_EQ          reduce using rule 79 (var_call_tail -> empty .)
    EQ              reduce using rule 79 (var_call_tail -> empty .)
    PLUS_PLUS       reduce using rule 79 (var_call_tail -> empty .)
    MINUS_MINUS     reduce using rule 79 (var_call_tail -> empty .)


state 87

    (80) var_call_tail -> LBRACKET . index RBRACKET
    (28) index -> . INT_LIT
    (29) index -> . IDENT

    INT_LIT         shift and go to state 114
    IDENT           shift and go to state 115

    index                          shift and go to state 113

state 88

    (55) expr_head -> term term_tail .

    AND             reduce using rule 55 (expr_head -> term term_tail .)
    OR              reduce using rule 55 (expr_head -> term term_tail .)
    COMMA           reduce using rule 55 (expr_head -> term term_tail .)
    INT             reduce using rule 55 (expr_head -> term term_tail .)
    FLT             reduce using rule 55 (expr_head -> term term_tail .)
    BLN             reduce using rule 55 (expr_head -> term term_tail .)
    CHR             reduce using rule 55 (expr_head -> term term_tail .)
    STR             reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION        reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_INT    reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_FLT    reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_CHR    reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_BLN    reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_STR    reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_LIST_INT reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_LIST_FLT reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_LIST_CHR reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_LIST_STR reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_LIST_BLN reduce using rule 55 (expr_head -> term term_tail .)
    FUNCTION_NAME   reduce using rule 55 (expr_head -> term term_tail .)
    RPAREN          reduce using rule 55 (expr_head -> term term_tail .)
    GT              reduce using rule 55 (expr_head -> term term_tail .)
    LT              reduce using rule 55 (expr_head -> term term_tail .)
    EQ_EQ           reduce using rule 55 (expr_head -> term term_tail .)
    GT_EQ           reduce using rule 55 (expr_head -> term term_tail .)
    LT_EQ           reduce using rule 55 (expr_head -> term term_tail .)
    NOT_EQ          reduce using rule 55 (expr_head -> term term_tail .)
    CHECK           reduce using rule 55 (expr_head -> term term_tail .)
    SWAP            reduce using rule 55 (expr_head -> term term_tail .)
    DISPLAY         reduce using rule 55 (expr_head -> term term_tail .)
    FOR             reduce using rule 55 (expr_head -> term term_tail .)
    UNTIL           reduce using rule 55 (expr_head -> term term_tail .)
    REPEAT          reduce using rule 55 (expr_head -> term term_tail .)
    INPUT           reduce using rule 55 (expr_head -> term term_tail .)
    IDENT           reduce using rule 55 (expr_head -> term term_tail .)
    RBRACE          reduce using rule 55 (expr_head -> term term_tail .)
    REVIVE          reduce using rule 55 (expr_head -> term term_tail .)
    SHIFT           reduce using rule 55 (expr_head -> term term_tail .)
    OTHERWISE       reduce using rule 55 (expr_head -> term term_tail .)
    COLON           reduce using rule 55 (expr_head -> term term_tail .)
    SEMICOLON       reduce using rule 55 (expr_head -> term term_tail .)


state 89

    (68) term_tail -> empty .

    GT              reduce using rule 68 (term_tail -> empty .)
    LT              reduce using rule 68 (term_tail -> empty .)
    EQ_EQ           reduce using rule 68 (term_tail -> empty .)
    GT_EQ           reduce using rule 68 (term_tail -> empty .)
    LT_EQ           reduce using rule 68 (term_tail -> empty .)
    NOT_EQ          reduce using rule 68 (term_tail -> empty .)
    AND             reduce using rule 68 (term_tail -> empty .)
    OR              reduce using rule 68 (term_tail -> empty .)
    COMMA           reduce using rule 68 (term_tail -> empty .)
    INT             reduce using rule 68 (term_tail -> empty .)
    FLT             reduce using rule 68 (term_tail -> empty .)
    BLN             reduce using rule 68 (term_tail -> empty .)
    CHR             reduce using rule 68 (term_tail -> empty .)
    STR             reduce using rule 68 (term_tail -> empty .)
    FUNCTION        reduce using rule 68 (term_tail -> empty .)
    FUNCTION_INT    reduce using rule 68 (term_tail -> empty .)
    FUNCTION_FLT    reduce using rule 68 (term_tail -> empty .)
    FUNCTION_CHR    reduce using rule 68 (term_tail -> empty .)
    FUNCTION_BLN    reduce using rule 68 (term_tail -> empty .)
    FUNCTION_STR    reduce using rule 68 (term_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 68 (term_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 68 (term_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 68 (term_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 68 (term_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 68 (term_tail -> empty .)
    FUNCTION_NAME   reduce using rule 68 (term_tail -> empty .)
    RPAREN          reduce using rule 68 (term_tail -> empty .)
    CHECK           reduce using rule 68 (term_tail -> empty .)
    SWAP            reduce using rule 68 (term_tail -> empty .)
    DISPLAY         reduce using rule 68 (term_tail -> empty .)
    FOR             reduce using rule 68 (term_tail -> empty .)
    UNTIL           reduce using rule 68 (term_tail -> empty .)
    REPEAT          reduce using rule 68 (term_tail -> empty .)
    INPUT           reduce using rule 68 (term_tail -> empty .)
    IDENT           reduce using rule 68 (term_tail -> empty .)
    RBRACE          reduce using rule 68 (term_tail -> empty .)
    REVIVE          reduce using rule 68 (term_tail -> empty .)
    SHIFT           reduce using rule 68 (term_tail -> empty .)
    OTHERWISE       reduce using rule 68 (term_tail -> empty .)
    COLON           reduce using rule 68 (term_tail -> empty .)
    SEMICOLON       reduce using rule 68 (term_tail -> empty .)


state 90

    (69) term_tail -> GT . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 116
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 91

    (70) term_tail -> LT . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 117
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 92

    (71) term_tail -> EQ_EQ . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 118
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 93

    (72) term_tail -> GT_EQ . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 119
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 94

    (73) term_tail -> LT_EQ . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 120
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 95

    (74) term_tail -> NOT_EQ . expression
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 121
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 96

    (2) main_function -> FUNCTION_NAME LPAREN RPAREN LBRACE . statements RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 122
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 97

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN . LBRACE statements revive RBRACE

    LBRACE          shift and go to state 127


state 98

    (95) parameters -> data_type IDENT . parameters_tail
    (97) parameters_tail -> . empty
    (98) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (158) empty -> .

    COMMA           shift and go to state 130
    RPAREN          reduce using rule 158 (empty -> .)

    parameters_tail                shift and go to state 128
    empty                          shift and go to state 129

state 99

    (12) global_tail2 -> COMMA IDENT . global_statement_tail
    (8) global_statement_tail -> . empty
    (9) global_statement_tail -> . COMMA IDENT global_statement_tail
    (10) global_statement_tail -> . EQ global_dec_value global_tail2
    (158) empty -> .

    COMMA           shift and go to state 36
    EQ              shift and go to state 37
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    FUNCTION        reduce using rule 158 (empty -> .)
    FUNCTION_INT    reduce using rule 158 (empty -> .)
    FUNCTION_FLT    reduce using rule 158 (empty -> .)
    FUNCTION_CHR    reduce using rule 158 (empty -> .)
    FUNCTION_BLN    reduce using rule 158 (empty -> .)
    FUNCTION_STR    reduce using rule 158 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 158 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 158 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)

    global_statement_tail          shift and go to state 131
    empty                          shift and go to state 35

state 100

    (14) global_dec_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    INT             reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FLT             reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    BLN             reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    CHR             reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    STR             reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION        reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_INT    reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_FLT    reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_CHR    reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_BLN    reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_STR    reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_LIST_INT reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_LIST_FLT reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_LIST_CHR reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_LIST_STR reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_LIST_BLN reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_NAME   reduce using rule 14 (global_dec_value -> LBRACKET list_element RBRACKET .)


state 101

    (25) list_element -> literal element_tail .

    RBRACKET        reduce using rule 25 (list_element -> literal element_tail .)


state 102

    (26) element_tail -> empty .

    RBRACKET        reduce using rule 26 (element_tail -> empty .)


state 103

    (27) element_tail -> COMMA . list_element
    (25) list_element -> . literal element_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    list_element                   shift and go to state 132
    literal                        shift and go to state 69

state 104

    (62) factor_tail -> PLUS expression .

    GT              reduce using rule 62 (factor_tail -> PLUS expression .)
    LT              reduce using rule 62 (factor_tail -> PLUS expression .)
    EQ_EQ           reduce using rule 62 (factor_tail -> PLUS expression .)
    GT_EQ           reduce using rule 62 (factor_tail -> PLUS expression .)
    LT_EQ           reduce using rule 62 (factor_tail -> PLUS expression .)
    NOT_EQ          reduce using rule 62 (factor_tail -> PLUS expression .)
    AND             reduce using rule 62 (factor_tail -> PLUS expression .)
    OR              reduce using rule 62 (factor_tail -> PLUS expression .)
    COMMA           reduce using rule 62 (factor_tail -> PLUS expression .)
    INT             reduce using rule 62 (factor_tail -> PLUS expression .)
    FLT             reduce using rule 62 (factor_tail -> PLUS expression .)
    BLN             reduce using rule 62 (factor_tail -> PLUS expression .)
    CHR             reduce using rule 62 (factor_tail -> PLUS expression .)
    STR             reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION        reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_INT    reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_FLT    reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_CHR    reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_BLN    reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_STR    reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_LIST_INT reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_LIST_FLT reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_LIST_CHR reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_LIST_STR reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_LIST_BLN reduce using rule 62 (factor_tail -> PLUS expression .)
    FUNCTION_NAME   reduce using rule 62 (factor_tail -> PLUS expression .)
    RPAREN          reduce using rule 62 (factor_tail -> PLUS expression .)
    CHECK           reduce using rule 62 (factor_tail -> PLUS expression .)
    SWAP            reduce using rule 62 (factor_tail -> PLUS expression .)
    DISPLAY         reduce using rule 62 (factor_tail -> PLUS expression .)
    FOR             reduce using rule 62 (factor_tail -> PLUS expression .)
    UNTIL           reduce using rule 62 (factor_tail -> PLUS expression .)
    REPEAT          reduce using rule 62 (factor_tail -> PLUS expression .)
    INPUT           reduce using rule 62 (factor_tail -> PLUS expression .)
    IDENT           reduce using rule 62 (factor_tail -> PLUS expression .)
    RBRACE          reduce using rule 62 (factor_tail -> PLUS expression .)
    REVIVE          reduce using rule 62 (factor_tail -> PLUS expression .)
    SHIFT           reduce using rule 62 (factor_tail -> PLUS expression .)
    OTHERWISE       reduce using rule 62 (factor_tail -> PLUS expression .)
    COLON           reduce using rule 62 (factor_tail -> PLUS expression .)
    SEMICOLON       reduce using rule 62 (factor_tail -> PLUS expression .)


state 105

    (63) factor_tail -> MINUS expression .

    GT              reduce using rule 63 (factor_tail -> MINUS expression .)
    LT              reduce using rule 63 (factor_tail -> MINUS expression .)
    EQ_EQ           reduce using rule 63 (factor_tail -> MINUS expression .)
    GT_EQ           reduce using rule 63 (factor_tail -> MINUS expression .)
    LT_EQ           reduce using rule 63 (factor_tail -> MINUS expression .)
    NOT_EQ          reduce using rule 63 (factor_tail -> MINUS expression .)
    AND             reduce using rule 63 (factor_tail -> MINUS expression .)
    OR              reduce using rule 63 (factor_tail -> MINUS expression .)
    COMMA           reduce using rule 63 (factor_tail -> MINUS expression .)
    INT             reduce using rule 63 (factor_tail -> MINUS expression .)
    FLT             reduce using rule 63 (factor_tail -> MINUS expression .)
    BLN             reduce using rule 63 (factor_tail -> MINUS expression .)
    CHR             reduce using rule 63 (factor_tail -> MINUS expression .)
    STR             reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION        reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_INT    reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_FLT    reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_CHR    reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_BLN    reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_STR    reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_LIST_INT reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_LIST_FLT reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_LIST_CHR reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_LIST_STR reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_LIST_BLN reduce using rule 63 (factor_tail -> MINUS expression .)
    FUNCTION_NAME   reduce using rule 63 (factor_tail -> MINUS expression .)
    RPAREN          reduce using rule 63 (factor_tail -> MINUS expression .)
    CHECK           reduce using rule 63 (factor_tail -> MINUS expression .)
    SWAP            reduce using rule 63 (factor_tail -> MINUS expression .)
    DISPLAY         reduce using rule 63 (factor_tail -> MINUS expression .)
    FOR             reduce using rule 63 (factor_tail -> MINUS expression .)
    UNTIL           reduce using rule 63 (factor_tail -> MINUS expression .)
    REPEAT          reduce using rule 63 (factor_tail -> MINUS expression .)
    INPUT           reduce using rule 63 (factor_tail -> MINUS expression .)
    IDENT           reduce using rule 63 (factor_tail -> MINUS expression .)
    RBRACE          reduce using rule 63 (factor_tail -> MINUS expression .)
    REVIVE          reduce using rule 63 (factor_tail -> MINUS expression .)
    SHIFT           reduce using rule 63 (factor_tail -> MINUS expression .)
    OTHERWISE       reduce using rule 63 (factor_tail -> MINUS expression .)
    COLON           reduce using rule 63 (factor_tail -> MINUS expression .)
    SEMICOLON       reduce using rule 63 (factor_tail -> MINUS expression .)


state 106

    (64) factor_tail -> MULTIPLY expression .

    GT              reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    LT              reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    EQ_EQ           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    GT_EQ           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    LT_EQ           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    NOT_EQ          reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    AND             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    OR              reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    COMMA           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    INT             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FLT             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    BLN             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    CHR             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    STR             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION        reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_INT    reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_FLT    reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_CHR    reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_BLN    reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_STR    reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_LIST_INT reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_LIST_FLT reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_LIST_CHR reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_LIST_STR reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_LIST_BLN reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FUNCTION_NAME   reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    RPAREN          reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    CHECK           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    SWAP            reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    DISPLAY         reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    FOR             reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    UNTIL           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    REPEAT          reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    INPUT           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    IDENT           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    RBRACE          reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    REVIVE          reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    SHIFT           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    OTHERWISE       reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    COLON           reduce using rule 64 (factor_tail -> MULTIPLY expression .)
    SEMICOLON       reduce using rule 64 (factor_tail -> MULTIPLY expression .)


state 107

    (65) factor_tail -> DIVISION expression .

    GT              reduce using rule 65 (factor_tail -> DIVISION expression .)
    LT              reduce using rule 65 (factor_tail -> DIVISION expression .)
    EQ_EQ           reduce using rule 65 (factor_tail -> DIVISION expression .)
    GT_EQ           reduce using rule 65 (factor_tail -> DIVISION expression .)
    LT_EQ           reduce using rule 65 (factor_tail -> DIVISION expression .)
    NOT_EQ          reduce using rule 65 (factor_tail -> DIVISION expression .)
    AND             reduce using rule 65 (factor_tail -> DIVISION expression .)
    OR              reduce using rule 65 (factor_tail -> DIVISION expression .)
    COMMA           reduce using rule 65 (factor_tail -> DIVISION expression .)
    INT             reduce using rule 65 (factor_tail -> DIVISION expression .)
    FLT             reduce using rule 65 (factor_tail -> DIVISION expression .)
    BLN             reduce using rule 65 (factor_tail -> DIVISION expression .)
    CHR             reduce using rule 65 (factor_tail -> DIVISION expression .)
    STR             reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION        reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_INT    reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_FLT    reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_CHR    reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_BLN    reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_STR    reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_LIST_INT reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_LIST_FLT reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_LIST_CHR reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_LIST_STR reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_LIST_BLN reduce using rule 65 (factor_tail -> DIVISION expression .)
    FUNCTION_NAME   reduce using rule 65 (factor_tail -> DIVISION expression .)
    RPAREN          reduce using rule 65 (factor_tail -> DIVISION expression .)
    CHECK           reduce using rule 65 (factor_tail -> DIVISION expression .)
    SWAP            reduce using rule 65 (factor_tail -> DIVISION expression .)
    DISPLAY         reduce using rule 65 (factor_tail -> DIVISION expression .)
    FOR             reduce using rule 65 (factor_tail -> DIVISION expression .)
    UNTIL           reduce using rule 65 (factor_tail -> DIVISION expression .)
    REPEAT          reduce using rule 65 (factor_tail -> DIVISION expression .)
    INPUT           reduce using rule 65 (factor_tail -> DIVISION expression .)
    IDENT           reduce using rule 65 (factor_tail -> DIVISION expression .)
    RBRACE          reduce using rule 65 (factor_tail -> DIVISION expression .)
    REVIVE          reduce using rule 65 (factor_tail -> DIVISION expression .)
    SHIFT           reduce using rule 65 (factor_tail -> DIVISION expression .)
    OTHERWISE       reduce using rule 65 (factor_tail -> DIVISION expression .)
    COLON           reduce using rule 65 (factor_tail -> DIVISION expression .)
    SEMICOLON       reduce using rule 65 (factor_tail -> DIVISION expression .)


state 108

    (66) factor_tail -> MODULO expression .

    GT              reduce using rule 66 (factor_tail -> MODULO expression .)
    LT              reduce using rule 66 (factor_tail -> MODULO expression .)
    EQ_EQ           reduce using rule 66 (factor_tail -> MODULO expression .)
    GT_EQ           reduce using rule 66 (factor_tail -> MODULO expression .)
    LT_EQ           reduce using rule 66 (factor_tail -> MODULO expression .)
    NOT_EQ          reduce using rule 66 (factor_tail -> MODULO expression .)
    AND             reduce using rule 66 (factor_tail -> MODULO expression .)
    OR              reduce using rule 66 (factor_tail -> MODULO expression .)
    COMMA           reduce using rule 66 (factor_tail -> MODULO expression .)
    INT             reduce using rule 66 (factor_tail -> MODULO expression .)
    FLT             reduce using rule 66 (factor_tail -> MODULO expression .)
    BLN             reduce using rule 66 (factor_tail -> MODULO expression .)
    CHR             reduce using rule 66 (factor_tail -> MODULO expression .)
    STR             reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION        reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_INT    reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_FLT    reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_CHR    reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_BLN    reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_STR    reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_LIST_INT reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_LIST_FLT reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_LIST_CHR reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_LIST_STR reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_LIST_BLN reduce using rule 66 (factor_tail -> MODULO expression .)
    FUNCTION_NAME   reduce using rule 66 (factor_tail -> MODULO expression .)
    RPAREN          reduce using rule 66 (factor_tail -> MODULO expression .)
    CHECK           reduce using rule 66 (factor_tail -> MODULO expression .)
    SWAP            reduce using rule 66 (factor_tail -> MODULO expression .)
    DISPLAY         reduce using rule 66 (factor_tail -> MODULO expression .)
    FOR             reduce using rule 66 (factor_tail -> MODULO expression .)
    UNTIL           reduce using rule 66 (factor_tail -> MODULO expression .)
    REPEAT          reduce using rule 66 (factor_tail -> MODULO expression .)
    INPUT           reduce using rule 66 (factor_tail -> MODULO expression .)
    IDENT           reduce using rule 66 (factor_tail -> MODULO expression .)
    RBRACE          reduce using rule 66 (factor_tail -> MODULO expression .)
    REVIVE          reduce using rule 66 (factor_tail -> MODULO expression .)
    SHIFT           reduce using rule 66 (factor_tail -> MODULO expression .)
    OTHERWISE       reduce using rule 66 (factor_tail -> MODULO expression .)
    COLON           reduce using rule 66 (factor_tail -> MODULO expression .)
    SEMICOLON       reduce using rule 66 (factor_tail -> MODULO expression .)


state 109

    (67) factor_tail -> EXPONENT expression .

    GT              reduce using rule 67 (factor_tail -> EXPONENT expression .)
    LT              reduce using rule 67 (factor_tail -> EXPONENT expression .)
    EQ_EQ           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    GT_EQ           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    LT_EQ           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    NOT_EQ          reduce using rule 67 (factor_tail -> EXPONENT expression .)
    AND             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    OR              reduce using rule 67 (factor_tail -> EXPONENT expression .)
    COMMA           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    INT             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FLT             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    BLN             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    CHR             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    STR             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION        reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_INT    reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_FLT    reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_CHR    reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_BLN    reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_STR    reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_LIST_INT reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_LIST_FLT reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_LIST_CHR reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_LIST_STR reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_LIST_BLN reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FUNCTION_NAME   reduce using rule 67 (factor_tail -> EXPONENT expression .)
    RPAREN          reduce using rule 67 (factor_tail -> EXPONENT expression .)
    CHECK           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    SWAP            reduce using rule 67 (factor_tail -> EXPONENT expression .)
    DISPLAY         reduce using rule 67 (factor_tail -> EXPONENT expression .)
    FOR             reduce using rule 67 (factor_tail -> EXPONENT expression .)
    UNTIL           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    REPEAT          reduce using rule 67 (factor_tail -> EXPONENT expression .)
    INPUT           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    IDENT           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    RBRACE          reduce using rule 67 (factor_tail -> EXPONENT expression .)
    REVIVE          reduce using rule 67 (factor_tail -> EXPONENT expression .)
    SHIFT           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    OTHERWISE       reduce using rule 67 (factor_tail -> EXPONENT expression .)
    COLON           reduce using rule 67 (factor_tail -> EXPONENT expression .)
    SEMICOLON       reduce using rule 67 (factor_tail -> EXPONENT expression .)


state 110

    (60) factor -> LPAREN expression RPAREN .

    PLUS            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DIVISION        reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    INT             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FLT             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    BLN             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    CHR             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    STR             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_INT    reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_FLT    reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_CHR    reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_BLN    reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_STR    reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_LIST_INT reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_LIST_STR reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FUNCTION_NAME   reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    EQ_EQ           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    GT_EQ           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    LT_EQ           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    CHECK           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    SWAP            reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    DISPLAY         reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    INPUT           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    IDENT           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    REVIVE          reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    SHIFT           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    OTHERWISE       reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 60 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 60 (factor -> LPAREN expression RPAREN .)


state 111

    (76) expr_tail -> AND expression .

    GT              reduce using rule 76 (expr_tail -> AND expression .)
    LT              reduce using rule 76 (expr_tail -> AND expression .)
    EQ_EQ           reduce using rule 76 (expr_tail -> AND expression .)
    GT_EQ           reduce using rule 76 (expr_tail -> AND expression .)
    LT_EQ           reduce using rule 76 (expr_tail -> AND expression .)
    NOT_EQ          reduce using rule 76 (expr_tail -> AND expression .)
    AND             reduce using rule 76 (expr_tail -> AND expression .)
    OR              reduce using rule 76 (expr_tail -> AND expression .)
    COMMA           reduce using rule 76 (expr_tail -> AND expression .)
    INT             reduce using rule 76 (expr_tail -> AND expression .)
    FLT             reduce using rule 76 (expr_tail -> AND expression .)
    BLN             reduce using rule 76 (expr_tail -> AND expression .)
    CHR             reduce using rule 76 (expr_tail -> AND expression .)
    STR             reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION        reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_INT    reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_FLT    reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_CHR    reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_BLN    reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_STR    reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_LIST_INT reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_LIST_FLT reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_LIST_CHR reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_LIST_STR reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_LIST_BLN reduce using rule 76 (expr_tail -> AND expression .)
    FUNCTION_NAME   reduce using rule 76 (expr_tail -> AND expression .)
    RPAREN          reduce using rule 76 (expr_tail -> AND expression .)
    CHECK           reduce using rule 76 (expr_tail -> AND expression .)
    SWAP            reduce using rule 76 (expr_tail -> AND expression .)
    DISPLAY         reduce using rule 76 (expr_tail -> AND expression .)
    FOR             reduce using rule 76 (expr_tail -> AND expression .)
    UNTIL           reduce using rule 76 (expr_tail -> AND expression .)
    REPEAT          reduce using rule 76 (expr_tail -> AND expression .)
    INPUT           reduce using rule 76 (expr_tail -> AND expression .)
    IDENT           reduce using rule 76 (expr_tail -> AND expression .)
    RBRACE          reduce using rule 76 (expr_tail -> AND expression .)
    REVIVE          reduce using rule 76 (expr_tail -> AND expression .)
    SHIFT           reduce using rule 76 (expr_tail -> AND expression .)
    OTHERWISE       reduce using rule 76 (expr_tail -> AND expression .)
    COLON           reduce using rule 76 (expr_tail -> AND expression .)
    SEMICOLON       reduce using rule 76 (expr_tail -> AND expression .)


state 112

    (77) expr_tail -> OR expression .

    GT              reduce using rule 77 (expr_tail -> OR expression .)
    LT              reduce using rule 77 (expr_tail -> OR expression .)
    EQ_EQ           reduce using rule 77 (expr_tail -> OR expression .)
    GT_EQ           reduce using rule 77 (expr_tail -> OR expression .)
    LT_EQ           reduce using rule 77 (expr_tail -> OR expression .)
    NOT_EQ          reduce using rule 77 (expr_tail -> OR expression .)
    AND             reduce using rule 77 (expr_tail -> OR expression .)
    OR              reduce using rule 77 (expr_tail -> OR expression .)
    COMMA           reduce using rule 77 (expr_tail -> OR expression .)
    INT             reduce using rule 77 (expr_tail -> OR expression .)
    FLT             reduce using rule 77 (expr_tail -> OR expression .)
    BLN             reduce using rule 77 (expr_tail -> OR expression .)
    CHR             reduce using rule 77 (expr_tail -> OR expression .)
    STR             reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION        reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_INT    reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_FLT    reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_CHR    reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_BLN    reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_STR    reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_LIST_INT reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_LIST_FLT reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_LIST_CHR reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_LIST_STR reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_LIST_BLN reduce using rule 77 (expr_tail -> OR expression .)
    FUNCTION_NAME   reduce using rule 77 (expr_tail -> OR expression .)
    RPAREN          reduce using rule 77 (expr_tail -> OR expression .)
    CHECK           reduce using rule 77 (expr_tail -> OR expression .)
    SWAP            reduce using rule 77 (expr_tail -> OR expression .)
    DISPLAY         reduce using rule 77 (expr_tail -> OR expression .)
    FOR             reduce using rule 77 (expr_tail -> OR expression .)
    UNTIL           reduce using rule 77 (expr_tail -> OR expression .)
    REPEAT          reduce using rule 77 (expr_tail -> OR expression .)
    INPUT           reduce using rule 77 (expr_tail -> OR expression .)
    IDENT           reduce using rule 77 (expr_tail -> OR expression .)
    RBRACE          reduce using rule 77 (expr_tail -> OR expression .)
    REVIVE          reduce using rule 77 (expr_tail -> OR expression .)
    SHIFT           reduce using rule 77 (expr_tail -> OR expression .)
    OTHERWISE       reduce using rule 77 (expr_tail -> OR expression .)
    COLON           reduce using rule 77 (expr_tail -> OR expression .)
    SEMICOLON       reduce using rule 77 (expr_tail -> OR expression .)


state 113

    (80) var_call_tail -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 133


state 114

    (28) index -> INT_LIT .

    RBRACKET        reduce using rule 28 (index -> INT_LIT .)


state 115

    (29) index -> IDENT .

    RBRACKET        reduce using rule 29 (index -> IDENT .)


state 116

    (69) term_tail -> GT expression .

    GT              reduce using rule 69 (term_tail -> GT expression .)
    LT              reduce using rule 69 (term_tail -> GT expression .)
    EQ_EQ           reduce using rule 69 (term_tail -> GT expression .)
    GT_EQ           reduce using rule 69 (term_tail -> GT expression .)
    LT_EQ           reduce using rule 69 (term_tail -> GT expression .)
    NOT_EQ          reduce using rule 69 (term_tail -> GT expression .)
    AND             reduce using rule 69 (term_tail -> GT expression .)
    OR              reduce using rule 69 (term_tail -> GT expression .)
    COMMA           reduce using rule 69 (term_tail -> GT expression .)
    INT             reduce using rule 69 (term_tail -> GT expression .)
    FLT             reduce using rule 69 (term_tail -> GT expression .)
    BLN             reduce using rule 69 (term_tail -> GT expression .)
    CHR             reduce using rule 69 (term_tail -> GT expression .)
    STR             reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION        reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_INT    reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_FLT    reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_CHR    reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_BLN    reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_STR    reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_LIST_INT reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_LIST_FLT reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_LIST_CHR reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_LIST_STR reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_LIST_BLN reduce using rule 69 (term_tail -> GT expression .)
    FUNCTION_NAME   reduce using rule 69 (term_tail -> GT expression .)
    RPAREN          reduce using rule 69 (term_tail -> GT expression .)
    CHECK           reduce using rule 69 (term_tail -> GT expression .)
    SWAP            reduce using rule 69 (term_tail -> GT expression .)
    DISPLAY         reduce using rule 69 (term_tail -> GT expression .)
    FOR             reduce using rule 69 (term_tail -> GT expression .)
    UNTIL           reduce using rule 69 (term_tail -> GT expression .)
    REPEAT          reduce using rule 69 (term_tail -> GT expression .)
    INPUT           reduce using rule 69 (term_tail -> GT expression .)
    IDENT           reduce using rule 69 (term_tail -> GT expression .)
    RBRACE          reduce using rule 69 (term_tail -> GT expression .)
    REVIVE          reduce using rule 69 (term_tail -> GT expression .)
    SHIFT           reduce using rule 69 (term_tail -> GT expression .)
    OTHERWISE       reduce using rule 69 (term_tail -> GT expression .)
    COLON           reduce using rule 69 (term_tail -> GT expression .)
    SEMICOLON       reduce using rule 69 (term_tail -> GT expression .)


state 117

    (70) term_tail -> LT expression .

    GT              reduce using rule 70 (term_tail -> LT expression .)
    LT              reduce using rule 70 (term_tail -> LT expression .)
    EQ_EQ           reduce using rule 70 (term_tail -> LT expression .)
    GT_EQ           reduce using rule 70 (term_tail -> LT expression .)
    LT_EQ           reduce using rule 70 (term_tail -> LT expression .)
    NOT_EQ          reduce using rule 70 (term_tail -> LT expression .)
    AND             reduce using rule 70 (term_tail -> LT expression .)
    OR              reduce using rule 70 (term_tail -> LT expression .)
    COMMA           reduce using rule 70 (term_tail -> LT expression .)
    INT             reduce using rule 70 (term_tail -> LT expression .)
    FLT             reduce using rule 70 (term_tail -> LT expression .)
    BLN             reduce using rule 70 (term_tail -> LT expression .)
    CHR             reduce using rule 70 (term_tail -> LT expression .)
    STR             reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION        reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_INT    reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_FLT    reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_CHR    reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_BLN    reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_STR    reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_LIST_INT reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_LIST_FLT reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_LIST_CHR reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_LIST_STR reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_LIST_BLN reduce using rule 70 (term_tail -> LT expression .)
    FUNCTION_NAME   reduce using rule 70 (term_tail -> LT expression .)
    RPAREN          reduce using rule 70 (term_tail -> LT expression .)
    CHECK           reduce using rule 70 (term_tail -> LT expression .)
    SWAP            reduce using rule 70 (term_tail -> LT expression .)
    DISPLAY         reduce using rule 70 (term_tail -> LT expression .)
    FOR             reduce using rule 70 (term_tail -> LT expression .)
    UNTIL           reduce using rule 70 (term_tail -> LT expression .)
    REPEAT          reduce using rule 70 (term_tail -> LT expression .)
    INPUT           reduce using rule 70 (term_tail -> LT expression .)
    IDENT           reduce using rule 70 (term_tail -> LT expression .)
    RBRACE          reduce using rule 70 (term_tail -> LT expression .)
    REVIVE          reduce using rule 70 (term_tail -> LT expression .)
    SHIFT           reduce using rule 70 (term_tail -> LT expression .)
    OTHERWISE       reduce using rule 70 (term_tail -> LT expression .)
    COLON           reduce using rule 70 (term_tail -> LT expression .)
    SEMICOLON       reduce using rule 70 (term_tail -> LT expression .)


state 118

    (71) term_tail -> EQ_EQ expression .

    GT              reduce using rule 71 (term_tail -> EQ_EQ expression .)
    LT              reduce using rule 71 (term_tail -> EQ_EQ expression .)
    EQ_EQ           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    GT_EQ           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    LT_EQ           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    NOT_EQ          reduce using rule 71 (term_tail -> EQ_EQ expression .)
    AND             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    OR              reduce using rule 71 (term_tail -> EQ_EQ expression .)
    COMMA           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    INT             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FLT             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    BLN             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    CHR             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    STR             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION        reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_INT    reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_FLT    reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_CHR    reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_BLN    reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_STR    reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_LIST_INT reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_LIST_FLT reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_LIST_CHR reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_LIST_STR reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_LIST_BLN reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FUNCTION_NAME   reduce using rule 71 (term_tail -> EQ_EQ expression .)
    RPAREN          reduce using rule 71 (term_tail -> EQ_EQ expression .)
    CHECK           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    SWAP            reduce using rule 71 (term_tail -> EQ_EQ expression .)
    DISPLAY         reduce using rule 71 (term_tail -> EQ_EQ expression .)
    FOR             reduce using rule 71 (term_tail -> EQ_EQ expression .)
    UNTIL           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    REPEAT          reduce using rule 71 (term_tail -> EQ_EQ expression .)
    INPUT           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    IDENT           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    RBRACE          reduce using rule 71 (term_tail -> EQ_EQ expression .)
    REVIVE          reduce using rule 71 (term_tail -> EQ_EQ expression .)
    SHIFT           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    OTHERWISE       reduce using rule 71 (term_tail -> EQ_EQ expression .)
    COLON           reduce using rule 71 (term_tail -> EQ_EQ expression .)
    SEMICOLON       reduce using rule 71 (term_tail -> EQ_EQ expression .)


state 119

    (72) term_tail -> GT_EQ expression .

    GT              reduce using rule 72 (term_tail -> GT_EQ expression .)
    LT              reduce using rule 72 (term_tail -> GT_EQ expression .)
    EQ_EQ           reduce using rule 72 (term_tail -> GT_EQ expression .)
    GT_EQ           reduce using rule 72 (term_tail -> GT_EQ expression .)
    LT_EQ           reduce using rule 72 (term_tail -> GT_EQ expression .)
    NOT_EQ          reduce using rule 72 (term_tail -> GT_EQ expression .)
    AND             reduce using rule 72 (term_tail -> GT_EQ expression .)
    OR              reduce using rule 72 (term_tail -> GT_EQ expression .)
    COMMA           reduce using rule 72 (term_tail -> GT_EQ expression .)
    INT             reduce using rule 72 (term_tail -> GT_EQ expression .)
    FLT             reduce using rule 72 (term_tail -> GT_EQ expression .)
    BLN             reduce using rule 72 (term_tail -> GT_EQ expression .)
    CHR             reduce using rule 72 (term_tail -> GT_EQ expression .)
    STR             reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION        reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_INT    reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_FLT    reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_CHR    reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_BLN    reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_STR    reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_LIST_INT reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_LIST_FLT reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_LIST_CHR reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_LIST_STR reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_LIST_BLN reduce using rule 72 (term_tail -> GT_EQ expression .)
    FUNCTION_NAME   reduce using rule 72 (term_tail -> GT_EQ expression .)
    RPAREN          reduce using rule 72 (term_tail -> GT_EQ expression .)
    CHECK           reduce using rule 72 (term_tail -> GT_EQ expression .)
    SWAP            reduce using rule 72 (term_tail -> GT_EQ expression .)
    DISPLAY         reduce using rule 72 (term_tail -> GT_EQ expression .)
    FOR             reduce using rule 72 (term_tail -> GT_EQ expression .)
    UNTIL           reduce using rule 72 (term_tail -> GT_EQ expression .)
    REPEAT          reduce using rule 72 (term_tail -> GT_EQ expression .)
    INPUT           reduce using rule 72 (term_tail -> GT_EQ expression .)
    IDENT           reduce using rule 72 (term_tail -> GT_EQ expression .)
    RBRACE          reduce using rule 72 (term_tail -> GT_EQ expression .)
    REVIVE          reduce using rule 72 (term_tail -> GT_EQ expression .)
    SHIFT           reduce using rule 72 (term_tail -> GT_EQ expression .)
    OTHERWISE       reduce using rule 72 (term_tail -> GT_EQ expression .)
    COLON           reduce using rule 72 (term_tail -> GT_EQ expression .)
    SEMICOLON       reduce using rule 72 (term_tail -> GT_EQ expression .)


state 120

    (73) term_tail -> LT_EQ expression .

    GT              reduce using rule 73 (term_tail -> LT_EQ expression .)
    LT              reduce using rule 73 (term_tail -> LT_EQ expression .)
    EQ_EQ           reduce using rule 73 (term_tail -> LT_EQ expression .)
    GT_EQ           reduce using rule 73 (term_tail -> LT_EQ expression .)
    LT_EQ           reduce using rule 73 (term_tail -> LT_EQ expression .)
    NOT_EQ          reduce using rule 73 (term_tail -> LT_EQ expression .)
    AND             reduce using rule 73 (term_tail -> LT_EQ expression .)
    OR              reduce using rule 73 (term_tail -> LT_EQ expression .)
    COMMA           reduce using rule 73 (term_tail -> LT_EQ expression .)
    INT             reduce using rule 73 (term_tail -> LT_EQ expression .)
    FLT             reduce using rule 73 (term_tail -> LT_EQ expression .)
    BLN             reduce using rule 73 (term_tail -> LT_EQ expression .)
    CHR             reduce using rule 73 (term_tail -> LT_EQ expression .)
    STR             reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION        reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_INT    reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_FLT    reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_CHR    reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_BLN    reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_STR    reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_LIST_INT reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_LIST_FLT reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_LIST_CHR reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_LIST_STR reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_LIST_BLN reduce using rule 73 (term_tail -> LT_EQ expression .)
    FUNCTION_NAME   reduce using rule 73 (term_tail -> LT_EQ expression .)
    RPAREN          reduce using rule 73 (term_tail -> LT_EQ expression .)
    CHECK           reduce using rule 73 (term_tail -> LT_EQ expression .)
    SWAP            reduce using rule 73 (term_tail -> LT_EQ expression .)
    DISPLAY         reduce using rule 73 (term_tail -> LT_EQ expression .)
    FOR             reduce using rule 73 (term_tail -> LT_EQ expression .)
    UNTIL           reduce using rule 73 (term_tail -> LT_EQ expression .)
    REPEAT          reduce using rule 73 (term_tail -> LT_EQ expression .)
    INPUT           reduce using rule 73 (term_tail -> LT_EQ expression .)
    IDENT           reduce using rule 73 (term_tail -> LT_EQ expression .)
    RBRACE          reduce using rule 73 (term_tail -> LT_EQ expression .)
    REVIVE          reduce using rule 73 (term_tail -> LT_EQ expression .)
    SHIFT           reduce using rule 73 (term_tail -> LT_EQ expression .)
    OTHERWISE       reduce using rule 73 (term_tail -> LT_EQ expression .)
    COLON           reduce using rule 73 (term_tail -> LT_EQ expression .)
    SEMICOLON       reduce using rule 73 (term_tail -> LT_EQ expression .)


state 121

    (74) term_tail -> NOT_EQ expression .

    GT              reduce using rule 74 (term_tail -> NOT_EQ expression .)
    LT              reduce using rule 74 (term_tail -> NOT_EQ expression .)
    EQ_EQ           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    GT_EQ           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    LT_EQ           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    NOT_EQ          reduce using rule 74 (term_tail -> NOT_EQ expression .)
    AND             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    OR              reduce using rule 74 (term_tail -> NOT_EQ expression .)
    COMMA           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    INT             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FLT             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    BLN             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    CHR             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    STR             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION        reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_INT    reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_FLT    reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_CHR    reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_BLN    reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_STR    reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_LIST_INT reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_LIST_FLT reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_LIST_CHR reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_LIST_STR reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_LIST_BLN reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FUNCTION_NAME   reduce using rule 74 (term_tail -> NOT_EQ expression .)
    RPAREN          reduce using rule 74 (term_tail -> NOT_EQ expression .)
    CHECK           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    SWAP            reduce using rule 74 (term_tail -> NOT_EQ expression .)
    DISPLAY         reduce using rule 74 (term_tail -> NOT_EQ expression .)
    FOR             reduce using rule 74 (term_tail -> NOT_EQ expression .)
    UNTIL           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    REPEAT          reduce using rule 74 (term_tail -> NOT_EQ expression .)
    INPUT           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    IDENT           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    RBRACE          reduce using rule 74 (term_tail -> NOT_EQ expression .)
    REVIVE          reduce using rule 74 (term_tail -> NOT_EQ expression .)
    SHIFT           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    OTHERWISE       reduce using rule 74 (term_tail -> NOT_EQ expression .)
    COLON           reduce using rule 74 (term_tail -> NOT_EQ expression .)
    SEMICOLON       reduce using rule 74 (term_tail -> NOT_EQ expression .)


state 122

    (2) main_function -> FUNCTION_NAME LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 134


state 123

    (101) statements -> empty .
    (112) local_dec -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 101 (statements -> empty .)
    RBRACE          reduce using rule 101 (statements -> empty .)
    REVIVE          reduce using rule 101 (statements -> empty .)
    SHIFT           reduce using rule 101 (statements -> empty .)
    OTHERWISE       reduce using rule 101 (statements -> empty .)
    CHECK           reduce using rule 112 (local_dec -> empty .)
    SWAP            reduce using rule 112 (local_dec -> empty .)
    FUNCTION_NAME   reduce using rule 112 (local_dec -> empty .)
    DISPLAY         reduce using rule 112 (local_dec -> empty .)
    FOR             reduce using rule 112 (local_dec -> empty .)
    UNTIL           reduce using rule 112 (local_dec -> empty .)
    REPEAT          reduce using rule 112 (local_dec -> empty .)
    INPUT           reduce using rule 112 (local_dec -> empty .)
    IDENT           reduce using rule 112 (local_dec -> empty .)
    INT             reduce using rule 112 (local_dec -> empty .)
    FLT             reduce using rule 112 (local_dec -> empty .)
    BLN             reduce using rule 112 (local_dec -> empty .)
    CHR             reduce using rule 112 (local_dec -> empty .)
    STR             reduce using rule 112 (local_dec -> empty .)

  ! RBRACE          [ reduce using rule 112 (local_dec -> empty .) ]
  ! REVIVE          [ reduce using rule 112 (local_dec -> empty .) ]
  ! SHIFT           [ reduce using rule 112 (local_dec -> empty .) ]
  ! OTHERWISE       [ reduce using rule 112 (local_dec -> empty .) ]


state 124

    (102) statements -> local_dec . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    local_dec                      shift and go to state 124
    statements_tail                shift and go to state 135
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    conditional_statement          shift and go to state 138
    switch_statement               shift and go to state 139
    loop_statement                 shift and go to state 140
    function_call                  shift and go to state 141
    string_operation_statement     shift and go to state 142
    output_statement               shift and go to state 143
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 125

    (111) local_dec -> var_statement .

    CHECK           reduce using rule 111 (local_dec -> var_statement .)
    SWAP            reduce using rule 111 (local_dec -> var_statement .)
    FUNCTION_NAME   reduce using rule 111 (local_dec -> var_statement .)
    DISPLAY         reduce using rule 111 (local_dec -> var_statement .)
    FOR             reduce using rule 111 (local_dec -> var_statement .)
    UNTIL           reduce using rule 111 (local_dec -> var_statement .)
    REPEAT          reduce using rule 111 (local_dec -> var_statement .)
    INPUT           reduce using rule 111 (local_dec -> var_statement .)
    IDENT           reduce using rule 111 (local_dec -> var_statement .)
    INT             reduce using rule 111 (local_dec -> var_statement .)
    FLT             reduce using rule 111 (local_dec -> var_statement .)
    BLN             reduce using rule 111 (local_dec -> var_statement .)
    CHR             reduce using rule 111 (local_dec -> var_statement .)
    STR             reduce using rule 111 (local_dec -> var_statement .)
    RBRACE          reduce using rule 111 (local_dec -> var_statement .)
    REVIVE          reduce using rule 111 (local_dec -> var_statement .)
    SHIFT           reduce using rule 111 (local_dec -> var_statement .)
    OTHERWISE       reduce using rule 111 (local_dec -> var_statement .)


state 126

    (17) var_statement -> data_type . IDENT var_tail

    IDENT           shift and go to state 157


state 127

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE . statements revive RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    REVIVE          reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 158
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 128

    (95) parameters -> data_type IDENT parameters_tail .

    RPAREN          reduce using rule 95 (parameters -> data_type IDENT parameters_tail .)


state 129

    (97) parameters_tail -> empty .

    RPAREN          reduce using rule 97 (parameters_tail -> empty .)


state 130

    (98) parameters_tail -> COMMA . data_type IDENT parameters_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

    data_type                      shift and go to state 159

state 131

    (12) global_tail2 -> COMMA IDENT global_statement_tail .

    INT             reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FLT             reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    BLN             reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    CHR             reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    STR             reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION        reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_INT    reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_FLT    reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_CHR    reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_BLN    reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_STR    reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_INT reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_FLT reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_CHR reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_STR reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_LIST_BLN reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)
    FUNCTION_NAME   reduce using rule 12 (global_tail2 -> COMMA IDENT global_statement_tail .)


state 132

    (27) element_tail -> COMMA list_element .

    RBRACKET        reduce using rule 27 (element_tail -> COMMA list_element .)


state 133

    (80) var_call_tail -> LBRACKET index RBRACKET .

    PLUS            reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MODULO          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    INT             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FLT             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    BLN             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    CHR             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    STR             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION        reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_INT    reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_FLT    reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_CHR    reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_BLN    reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_STR    reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_LIST_INT reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_LIST_FLT reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_LIST_CHR reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_LIST_STR reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_LIST_BLN reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FUNCTION_NAME   reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    GT              reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    LT              reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    EQ_EQ           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    AND             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    OR              reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    CHECK           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    SWAP            reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    DISPLAY         reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    FOR             reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    UNTIL           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    REPEAT          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    INPUT           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    IDENT           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    RBRACE          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    REVIVE          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    SHIFT           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    OTHERWISE       reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    COLON           reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    PLUS_EQ         reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    EQ              reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    PLUS_PLUS       reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 80 (var_call_tail -> LBRACKET index RBRACKET .)


state 134

    (2) main_function -> FUNCTION_NAME LPAREN RPAREN LBRACE statements RBRACE .

    GHOST           reduce using rule 2 (main_function -> FUNCTION_NAME LPAREN RPAREN LBRACE statements RBRACE .)


state 135

    (102) statements -> local_dec statements_tail .

    RBRACE          reduce using rule 102 (statements -> local_dec statements_tail .)
    REVIVE          reduce using rule 102 (statements -> local_dec statements_tail .)
    SHIFT           reduce using rule 102 (statements -> local_dec statements_tail .)
    OTHERWISE       reduce using rule 102 (statements -> local_dec statements_tail .)


state 136

    (103) statements_tail -> empty .
    (101) statements -> empty .
    (112) local_dec -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 101 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 101 (statements -> empty .)
    RBRACE          reduce using rule 101 (statements -> empty .)
    REVIVE          reduce using rule 101 (statements -> empty .)
    SHIFT           reduce using rule 101 (statements -> empty .)
    OTHERWISE       reduce using rule 101 (statements -> empty .)
    CHECK           reduce using rule 112 (local_dec -> empty .)
    SWAP            reduce using rule 112 (local_dec -> empty .)
    FUNCTION_NAME   reduce using rule 112 (local_dec -> empty .)
    DISPLAY         reduce using rule 112 (local_dec -> empty .)
    FOR             reduce using rule 112 (local_dec -> empty .)
    UNTIL           reduce using rule 112 (local_dec -> empty .)
    REPEAT          reduce using rule 112 (local_dec -> empty .)
    INPUT           reduce using rule 112 (local_dec -> empty .)
    IDENT           reduce using rule 112 (local_dec -> empty .)
    INT             reduce using rule 112 (local_dec -> empty .)
    FLT             reduce using rule 112 (local_dec -> empty .)
    BLN             reduce using rule 112 (local_dec -> empty .)
    CHR             reduce using rule 112 (local_dec -> empty .)
    STR             reduce using rule 112 (local_dec -> empty .)

  ! RBRACE          [ reduce using rule 103 (statements_tail -> empty .) ]
  ! REVIVE          [ reduce using rule 103 (statements_tail -> empty .) ]
  ! SHIFT           [ reduce using rule 103 (statements_tail -> empty .) ]
  ! OTHERWISE       [ reduce using rule 103 (statements_tail -> empty .) ]
  ! RBRACE          [ reduce using rule 112 (local_dec -> empty .) ]
  ! REVIVE          [ reduce using rule 112 (local_dec -> empty .) ]
  ! SHIFT           [ reduce using rule 112 (local_dec -> empty .) ]
  ! OTHERWISE       [ reduce using rule 112 (local_dec -> empty .) ]


state 137

    (104) statements_tail -> statements .

    RBRACE          reduce using rule 104 (statements_tail -> statements .)
    REVIVE          reduce using rule 104 (statements_tail -> statements .)
    SHIFT           reduce using rule 104 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 104 (statements_tail -> statements .)


state 138

    (105) statements_tail -> conditional_statement . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    conditional_statement          shift and go to state 138
    statements_tail                shift and go to state 160
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    switch_statement               shift and go to state 139
    loop_statement                 shift and go to state 140
    function_call                  shift and go to state 141
    string_operation_statement     shift and go to state 142
    output_statement               shift and go to state 143
    local_dec                      shift and go to state 124
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 139

    (106) statements_tail -> switch_statement . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    switch_statement               shift and go to state 139
    statements_tail                shift and go to state 161
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    conditional_statement          shift and go to state 138
    loop_statement                 shift and go to state 140
    function_call                  shift and go to state 141
    string_operation_statement     shift and go to state 142
    output_statement               shift and go to state 143
    local_dec                      shift and go to state 124
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 140

    (107) statements_tail -> loop_statement . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    loop_statement                 shift and go to state 140
    statements_tail                shift and go to state 162
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    conditional_statement          shift and go to state 138
    switch_statement               shift and go to state 139
    function_call                  shift and go to state 141
    string_operation_statement     shift and go to state 142
    output_statement               shift and go to state 143
    local_dec                      shift and go to state 124
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 141

    (108) statements_tail -> function_call . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    function_call                  shift and go to state 141
    statements_tail                shift and go to state 163
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    conditional_statement          shift and go to state 138
    switch_statement               shift and go to state 139
    loop_statement                 shift and go to state 140
    string_operation_statement     shift and go to state 142
    output_statement               shift and go to state 143
    local_dec                      shift and go to state 124
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 142

    (109) statements_tail -> string_operation_statement . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    string_operation_statement     shift and go to state 142
    statements_tail                shift and go to state 164
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    conditional_statement          shift and go to state 138
    switch_statement               shift and go to state 139
    loop_statement                 shift and go to state 140
    function_call                  shift and go to state 141
    output_statement               shift and go to state 143
    local_dec                      shift and go to state 124
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 143

    (110) statements_tail -> output_statement . statements_tail
    (103) statements_tail -> . empty
    (104) statements_tail -> . statements
    (105) statements_tail -> . conditional_statement statements_tail
    (106) statements_tail -> . switch_statement statements_tail
    (107) statements_tail -> . loop_statement statements_tail
    (108) statements_tail -> . function_call statements_tail
    (109) statements_tail -> . string_operation_statement statements_tail
    (110) statements_tail -> . output_statement statements_tail
    (158) empty -> .
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (113) conditional_statement -> . CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail
    (117) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (121) loop_statement -> . for_loop
    (122) loop_statement -> . until_loop
    (123) loop_statement -> . repeat_until
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (145) string_operation_statement -> . var_call string_operation_tail
    (141) output_statement -> . DISPLAY value next_val
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (124) for_loop -> . FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (125) until_loop -> . UNTIL LPAREN expression RPAREN LBRACE statements RBRACE
    (126) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN
    (144) input_statement -> . INPUT LPAREN RPAREN
    (78) var_call -> . IDENT var_call_tail
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           shift and go to state 144
    SWAP            shift and go to state 145
    FUNCTION_NAME   shift and go to state 149
    DISPLAY         shift and go to state 152
    FOR             shift and go to state 153
    UNTIL           shift and go to state 154
    REPEAT          shift and go to state 155
    INPUT           shift and go to state 156
    IDENT           shift and go to state 52
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    output_statement               shift and go to state 143
    statements_tail                shift and go to state 165
    empty                          shift and go to state 136
    statements                     shift and go to state 137
    conditional_statement          shift and go to state 138
    switch_statement               shift and go to state 139
    loop_statement                 shift and go to state 140
    function_call                  shift and go to state 141
    string_operation_statement     shift and go to state 142
    local_dec                      shift and go to state 124
    for_loop                       shift and go to state 146
    until_loop                     shift and go to state 147
    repeat_until                   shift and go to state 148
    input_statement                shift and go to state 150
    var_call                       shift and go to state 151
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 144

    (113) conditional_statement -> CHECK . LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail

    LPAREN          shift and go to state 166


state 145

    (117) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE

    LPAREN          shift and go to state 167


state 146

    (121) loop_statement -> for_loop .

    CHECK           reduce using rule 121 (loop_statement -> for_loop .)
    SWAP            reduce using rule 121 (loop_statement -> for_loop .)
    FUNCTION_NAME   reduce using rule 121 (loop_statement -> for_loop .)
    DISPLAY         reduce using rule 121 (loop_statement -> for_loop .)
    FOR             reduce using rule 121 (loop_statement -> for_loop .)
    UNTIL           reduce using rule 121 (loop_statement -> for_loop .)
    REPEAT          reduce using rule 121 (loop_statement -> for_loop .)
    INPUT           reduce using rule 121 (loop_statement -> for_loop .)
    IDENT           reduce using rule 121 (loop_statement -> for_loop .)
    INT             reduce using rule 121 (loop_statement -> for_loop .)
    FLT             reduce using rule 121 (loop_statement -> for_loop .)
    BLN             reduce using rule 121 (loop_statement -> for_loop .)
    CHR             reduce using rule 121 (loop_statement -> for_loop .)
    STR             reduce using rule 121 (loop_statement -> for_loop .)
    RBRACE          reduce using rule 121 (loop_statement -> for_loop .)
    REVIVE          reduce using rule 121 (loop_statement -> for_loop .)
    SHIFT           reduce using rule 121 (loop_statement -> for_loop .)
    OTHERWISE       reduce using rule 121 (loop_statement -> for_loop .)


state 147

    (122) loop_statement -> until_loop .

    CHECK           reduce using rule 122 (loop_statement -> until_loop .)
    SWAP            reduce using rule 122 (loop_statement -> until_loop .)
    FUNCTION_NAME   reduce using rule 122 (loop_statement -> until_loop .)
    DISPLAY         reduce using rule 122 (loop_statement -> until_loop .)
    FOR             reduce using rule 122 (loop_statement -> until_loop .)
    UNTIL           reduce using rule 122 (loop_statement -> until_loop .)
    REPEAT          reduce using rule 122 (loop_statement -> until_loop .)
    INPUT           reduce using rule 122 (loop_statement -> until_loop .)
    IDENT           reduce using rule 122 (loop_statement -> until_loop .)
    INT             reduce using rule 122 (loop_statement -> until_loop .)
    FLT             reduce using rule 122 (loop_statement -> until_loop .)
    BLN             reduce using rule 122 (loop_statement -> until_loop .)
    CHR             reduce using rule 122 (loop_statement -> until_loop .)
    STR             reduce using rule 122 (loop_statement -> until_loop .)
    RBRACE          reduce using rule 122 (loop_statement -> until_loop .)
    REVIVE          reduce using rule 122 (loop_statement -> until_loop .)
    SHIFT           reduce using rule 122 (loop_statement -> until_loop .)
    OTHERWISE       reduce using rule 122 (loop_statement -> until_loop .)


state 148

    (123) loop_statement -> repeat_until .

    CHECK           reduce using rule 123 (loop_statement -> repeat_until .)
    SWAP            reduce using rule 123 (loop_statement -> repeat_until .)
    FUNCTION_NAME   reduce using rule 123 (loop_statement -> repeat_until .)
    DISPLAY         reduce using rule 123 (loop_statement -> repeat_until .)
    FOR             reduce using rule 123 (loop_statement -> repeat_until .)
    UNTIL           reduce using rule 123 (loop_statement -> repeat_until .)
    REPEAT          reduce using rule 123 (loop_statement -> repeat_until .)
    INPUT           reduce using rule 123 (loop_statement -> repeat_until .)
    IDENT           reduce using rule 123 (loop_statement -> repeat_until .)
    INT             reduce using rule 123 (loop_statement -> repeat_until .)
    FLT             reduce using rule 123 (loop_statement -> repeat_until .)
    BLN             reduce using rule 123 (loop_statement -> repeat_until .)
    CHR             reduce using rule 123 (loop_statement -> repeat_until .)
    STR             reduce using rule 123 (loop_statement -> repeat_until .)
    RBRACE          reduce using rule 123 (loop_statement -> repeat_until .)
    REVIVE          reduce using rule 123 (loop_statement -> repeat_until .)
    SHIFT           reduce using rule 123 (loop_statement -> repeat_until .)
    OTHERWISE       reduce using rule 123 (loop_statement -> repeat_until .)


state 149

    (133) function_call -> FUNCTION_NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 168


state 150

    (134) function_call -> input_statement .

    CHECK           reduce using rule 134 (function_call -> input_statement .)
    SWAP            reduce using rule 134 (function_call -> input_statement .)
    FUNCTION_NAME   reduce using rule 134 (function_call -> input_statement .)
    DISPLAY         reduce using rule 134 (function_call -> input_statement .)
    FOR             reduce using rule 134 (function_call -> input_statement .)
    UNTIL           reduce using rule 134 (function_call -> input_statement .)
    REPEAT          reduce using rule 134 (function_call -> input_statement .)
    INPUT           reduce using rule 134 (function_call -> input_statement .)
    IDENT           reduce using rule 134 (function_call -> input_statement .)
    INT             reduce using rule 134 (function_call -> input_statement .)
    FLT             reduce using rule 134 (function_call -> input_statement .)
    BLN             reduce using rule 134 (function_call -> input_statement .)
    CHR             reduce using rule 134 (function_call -> input_statement .)
    STR             reduce using rule 134 (function_call -> input_statement .)
    RBRACE          reduce using rule 134 (function_call -> input_statement .)
    REVIVE          reduce using rule 134 (function_call -> input_statement .)
    SHIFT           reduce using rule 134 (function_call -> input_statement .)
    OTHERWISE       reduce using rule 134 (function_call -> input_statement .)
    COMMA           reduce using rule 134 (function_call -> input_statement .)
    COLON           reduce using rule 134 (function_call -> input_statement .)
    RPAREN          reduce using rule 134 (function_call -> input_statement .)


state 151

    (145) string_operation_statement -> var_call . string_operation_tail
    (146) string_operation_tail -> . assign_op value
    (147) string_operation_tail -> . PLUS string_val stringcon_tail
    (148) assign_op -> . PLUS_EQ
    (149) assign_op -> . MINUS_EQ
    (150) assign_op -> . MUL_EQ
    (151) assign_op -> . DIV_EQ
    (152) assign_op -> . MOD_EQ
    (153) assign_op -> . EQ

    PLUS            shift and go to state 171
    PLUS_EQ         shift and go to state 172
    MINUS_EQ        shift and go to state 173
    MUL_EQ          shift and go to state 174
    DIV_EQ          shift and go to state 175
    MOD_EQ          shift and go to state 176
    EQ              shift and go to state 177

    string_operation_tail          shift and go to state 169
    assign_op                      shift and go to state 170

state 152

    (141) output_statement -> DISPLAY . value next_val
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    value                          shift and go to state 178
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 153

    (124) for_loop -> FOR . LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 187


state 154

    (125) until_loop -> UNTIL . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 188


state 155

    (126) repeat_until -> REPEAT . LBRACE statements RBRACE UNTIL LPAREN expression RPAREN

    LBRACE          shift and go to state 189


state 156

    (144) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 190


state 157

    (17) var_statement -> data_type IDENT . var_tail
    (18) var_tail -> . empty
    (19) var_tail -> . EQ tail_value var_tail2
    (20) var_tail -> . COMMA IDENT var_tail
    (158) empty -> .

    EQ              shift and go to state 193
    COMMA           shift and go to state 194
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    var_tail                       shift and go to state 191
    empty                          shift and go to state 192

state 158

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements . revive RBRACE
    (99) revive -> . REVIVE value
    (100) revive -> . empty
    (158) empty -> .

    REVIVE          shift and go to state 196
    RBRACE          reduce using rule 158 (empty -> .)

    revive                         shift and go to state 195
    empty                          shift and go to state 197

state 159

    (98) parameters_tail -> COMMA data_type . IDENT parameters_tail

    IDENT           shift and go to state 198


state 160

    (105) statements_tail -> conditional_statement statements_tail .

    RBRACE          reduce using rule 105 (statements_tail -> conditional_statement statements_tail .)
    REVIVE          reduce using rule 105 (statements_tail -> conditional_statement statements_tail .)
    SHIFT           reduce using rule 105 (statements_tail -> conditional_statement statements_tail .)
    OTHERWISE       reduce using rule 105 (statements_tail -> conditional_statement statements_tail .)


state 161

    (106) statements_tail -> switch_statement statements_tail .

    RBRACE          reduce using rule 106 (statements_tail -> switch_statement statements_tail .)
    REVIVE          reduce using rule 106 (statements_tail -> switch_statement statements_tail .)
    SHIFT           reduce using rule 106 (statements_tail -> switch_statement statements_tail .)
    OTHERWISE       reduce using rule 106 (statements_tail -> switch_statement statements_tail .)


state 162

    (107) statements_tail -> loop_statement statements_tail .

    RBRACE          reduce using rule 107 (statements_tail -> loop_statement statements_tail .)
    REVIVE          reduce using rule 107 (statements_tail -> loop_statement statements_tail .)
    SHIFT           reduce using rule 107 (statements_tail -> loop_statement statements_tail .)
    OTHERWISE       reduce using rule 107 (statements_tail -> loop_statement statements_tail .)


state 163

    (108) statements_tail -> function_call statements_tail .

    RBRACE          reduce using rule 108 (statements_tail -> function_call statements_tail .)
    REVIVE          reduce using rule 108 (statements_tail -> function_call statements_tail .)
    SHIFT           reduce using rule 108 (statements_tail -> function_call statements_tail .)
    OTHERWISE       reduce using rule 108 (statements_tail -> function_call statements_tail .)


state 164

    (109) statements_tail -> string_operation_statement statements_tail .

    RBRACE          reduce using rule 109 (statements_tail -> string_operation_statement statements_tail .)
    REVIVE          reduce using rule 109 (statements_tail -> string_operation_statement statements_tail .)
    SHIFT           reduce using rule 109 (statements_tail -> string_operation_statement statements_tail .)
    OTHERWISE       reduce using rule 109 (statements_tail -> string_operation_statement statements_tail .)


state 165

    (110) statements_tail -> output_statement statements_tail .

    RBRACE          reduce using rule 110 (statements_tail -> output_statement statements_tail .)
    REVIVE          reduce using rule 110 (statements_tail -> output_statement statements_tail .)
    SHIFT           reduce using rule 110 (statements_tail -> output_statement statements_tail .)
    OTHERWISE       reduce using rule 110 (statements_tail -> output_statement statements_tail .)


state 166

    (113) conditional_statement -> CHECK LPAREN . expression RPAREN LBRACE statements RBRACE conditional_tail
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 199
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 167

    (117) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE

    IDENT           shift and go to state 200


state 168

    (133) function_call -> FUNCTION_NAME LPAREN . arguments RPAREN
    (135) arguments -> . empty
    (136) arguments -> . arg_value arg_tail
    (158) empty -> .
    (139) arg_value -> . literal
    (140) arg_value -> . var_call
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (78) var_call -> . IDENT var_call_tail

    RPAREN          reduce using rule 158 (empty -> .)
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    IDENT           shift and go to state 52

    arguments                      shift and go to state 201
    empty                          shift and go to state 202
    arg_value                      shift and go to state 203
    literal                        shift and go to state 204
    var_call                       shift and go to state 205

state 169

    (145) string_operation_statement -> var_call string_operation_tail .

    CHECK           reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    SWAP            reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    FUNCTION_NAME   reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    DISPLAY         reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    FOR             reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    UNTIL           reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    REPEAT          reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    INPUT           reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    IDENT           reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    INT             reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    FLT             reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    BLN             reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    CHR             reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    STR             reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    RBRACE          reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    REVIVE          reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    SHIFT           reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)
    OTHERWISE       reduce using rule 145 (string_operation_statement -> var_call string_operation_tail .)


state 170

    (146) string_operation_tail -> assign_op . value
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    value                          shift and go to state 206
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 171

    (147) string_operation_tail -> PLUS . string_val stringcon_tail
    (156) string_val -> . var_call
    (157) string_val -> . STR_LIT
    (78) var_call -> . IDENT var_call_tail

    STR_LIT         shift and go to state 209
    IDENT           shift and go to state 52

    string_val                     shift and go to state 207
    var_call                       shift and go to state 208

state 172

    (148) assign_op -> PLUS_EQ .

    TILDE           reduce using rule 148 (assign_op -> PLUS_EQ .)
    LPAREN          reduce using rule 148 (assign_op -> PLUS_EQ .)
    CONVERT_TO_INT  reduce using rule 148 (assign_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 148 (assign_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 148 (assign_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 148 (assign_op -> PLUS_EQ .)
    FUNCTION_NAME   reduce using rule 148 (assign_op -> PLUS_EQ .)
    IDENT           reduce using rule 148 (assign_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 148 (assign_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 148 (assign_op -> PLUS_EQ .)
    DAY             reduce using rule 148 (assign_op -> PLUS_EQ .)
    NIGHT           reduce using rule 148 (assign_op -> PLUS_EQ .)
    CHR_LIT         reduce using rule 148 (assign_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 148 (assign_op -> PLUS_EQ .)
    INPUT           reduce using rule 148 (assign_op -> PLUS_EQ .)


state 173

    (149) assign_op -> MINUS_EQ .

    TILDE           reduce using rule 149 (assign_op -> MINUS_EQ .)
    LPAREN          reduce using rule 149 (assign_op -> MINUS_EQ .)
    CONVERT_TO_INT  reduce using rule 149 (assign_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 149 (assign_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 149 (assign_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 149 (assign_op -> MINUS_EQ .)
    FUNCTION_NAME   reduce using rule 149 (assign_op -> MINUS_EQ .)
    IDENT           reduce using rule 149 (assign_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 149 (assign_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 149 (assign_op -> MINUS_EQ .)
    DAY             reduce using rule 149 (assign_op -> MINUS_EQ .)
    NIGHT           reduce using rule 149 (assign_op -> MINUS_EQ .)
    CHR_LIT         reduce using rule 149 (assign_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 149 (assign_op -> MINUS_EQ .)
    INPUT           reduce using rule 149 (assign_op -> MINUS_EQ .)


state 174

    (150) assign_op -> MUL_EQ .

    TILDE           reduce using rule 150 (assign_op -> MUL_EQ .)
    LPAREN          reduce using rule 150 (assign_op -> MUL_EQ .)
    CONVERT_TO_INT  reduce using rule 150 (assign_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 150 (assign_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 150 (assign_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 150 (assign_op -> MUL_EQ .)
    FUNCTION_NAME   reduce using rule 150 (assign_op -> MUL_EQ .)
    IDENT           reduce using rule 150 (assign_op -> MUL_EQ .)
    INT_LIT         reduce using rule 150 (assign_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 150 (assign_op -> MUL_EQ .)
    DAY             reduce using rule 150 (assign_op -> MUL_EQ .)
    NIGHT           reduce using rule 150 (assign_op -> MUL_EQ .)
    CHR_LIT         reduce using rule 150 (assign_op -> MUL_EQ .)
    STR_LIT         reduce using rule 150 (assign_op -> MUL_EQ .)
    INPUT           reduce using rule 150 (assign_op -> MUL_EQ .)


state 175

    (151) assign_op -> DIV_EQ .

    TILDE           reduce using rule 151 (assign_op -> DIV_EQ .)
    LPAREN          reduce using rule 151 (assign_op -> DIV_EQ .)
    CONVERT_TO_INT  reduce using rule 151 (assign_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 151 (assign_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 151 (assign_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 151 (assign_op -> DIV_EQ .)
    FUNCTION_NAME   reduce using rule 151 (assign_op -> DIV_EQ .)
    IDENT           reduce using rule 151 (assign_op -> DIV_EQ .)
    INT_LIT         reduce using rule 151 (assign_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 151 (assign_op -> DIV_EQ .)
    DAY             reduce using rule 151 (assign_op -> DIV_EQ .)
    NIGHT           reduce using rule 151 (assign_op -> DIV_EQ .)
    CHR_LIT         reduce using rule 151 (assign_op -> DIV_EQ .)
    STR_LIT         reduce using rule 151 (assign_op -> DIV_EQ .)
    INPUT           reduce using rule 151 (assign_op -> DIV_EQ .)


state 176

    (152) assign_op -> MOD_EQ .

    TILDE           reduce using rule 152 (assign_op -> MOD_EQ .)
    LPAREN          reduce using rule 152 (assign_op -> MOD_EQ .)
    CONVERT_TO_INT  reduce using rule 152 (assign_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 152 (assign_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 152 (assign_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 152 (assign_op -> MOD_EQ .)
    FUNCTION_NAME   reduce using rule 152 (assign_op -> MOD_EQ .)
    IDENT           reduce using rule 152 (assign_op -> MOD_EQ .)
    INT_LIT         reduce using rule 152 (assign_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 152 (assign_op -> MOD_EQ .)
    DAY             reduce using rule 152 (assign_op -> MOD_EQ .)
    NIGHT           reduce using rule 152 (assign_op -> MOD_EQ .)
    CHR_LIT         reduce using rule 152 (assign_op -> MOD_EQ .)
    STR_LIT         reduce using rule 152 (assign_op -> MOD_EQ .)
    INPUT           reduce using rule 152 (assign_op -> MOD_EQ .)


state 177

    (153) assign_op -> EQ .

    TILDE           reduce using rule 153 (assign_op -> EQ .)
    LPAREN          reduce using rule 153 (assign_op -> EQ .)
    CONVERT_TO_INT  reduce using rule 153 (assign_op -> EQ .)
    CONVERT_TO_FLT  reduce using rule 153 (assign_op -> EQ .)
    CONVERT_TO_BLN  reduce using rule 153 (assign_op -> EQ .)
    CONVERT_TO_STR  reduce using rule 153 (assign_op -> EQ .)
    FUNCTION_NAME   reduce using rule 153 (assign_op -> EQ .)
    IDENT           reduce using rule 153 (assign_op -> EQ .)
    INT_LIT         reduce using rule 153 (assign_op -> EQ .)
    FLT_LIT         reduce using rule 153 (assign_op -> EQ .)
    DAY             reduce using rule 153 (assign_op -> EQ .)
    NIGHT           reduce using rule 153 (assign_op -> EQ .)
    CHR_LIT         reduce using rule 153 (assign_op -> EQ .)
    STR_LIT         reduce using rule 153 (assign_op -> EQ .)
    INPUT           reduce using rule 153 (assign_op -> EQ .)


state 178

    (141) output_statement -> DISPLAY value . next_val
    (142) next_val -> . empty
    (143) next_val -> . COMMA value next_val
    (158) empty -> .

    COMMA           shift and go to state 212
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    next_val                       shift and go to state 210
    empty                          shift and go to state 211

state 179

    (35) value -> factor .
    (56) term -> factor . factor_tail
    (61) factor_tail -> . empty
    (62) factor_tail -> . PLUS expression
    (63) factor_tail -> . MINUS expression
    (64) factor_tail -> . MULTIPLY expression
    (65) factor_tail -> . DIVISION expression
    (66) factor_tail -> . MODULO expression
    (67) factor_tail -> . EXPONENT expression
    (158) empty -> .

  ! reduce/reduce conflict for COMMA resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for CHECK resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for SWAP resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for FUNCTION_NAME resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for UNTIL resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for REPEAT resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for INPUT resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for IDENT resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for INT resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for FLT resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for BLN resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for CHR resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for STR resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for RBRACE resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for REVIVE resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for SHIFT resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (value -> factor .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (value -> factor .)
    COMMA           reduce using rule 35 (value -> factor .)
    CHECK           reduce using rule 35 (value -> factor .)
    SWAP            reduce using rule 35 (value -> factor .)
    FUNCTION_NAME   reduce using rule 35 (value -> factor .)
    DISPLAY         reduce using rule 35 (value -> factor .)
    FOR             reduce using rule 35 (value -> factor .)
    UNTIL           reduce using rule 35 (value -> factor .)
    REPEAT          reduce using rule 35 (value -> factor .)
    INPUT           reduce using rule 35 (value -> factor .)
    IDENT           reduce using rule 35 (value -> factor .)
    INT             reduce using rule 35 (value -> factor .)
    FLT             reduce using rule 35 (value -> factor .)
    BLN             reduce using rule 35 (value -> factor .)
    CHR             reduce using rule 35 (value -> factor .)
    STR             reduce using rule 35 (value -> factor .)
    RBRACE          reduce using rule 35 (value -> factor .)
    REVIVE          reduce using rule 35 (value -> factor .)
    SHIFT           reduce using rule 35 (value -> factor .)
    OTHERWISE       reduce using rule 35 (value -> factor .)
    COLON           reduce using rule 35 (value -> factor .)
    RPAREN          reduce using rule 35 (value -> factor .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MULTIPLY        shift and go to state 74
    DIVISION        shift and go to state 75
    MODULO          shift and go to state 76
    EXPONENT        shift and go to state 77
    GT              reduce using rule 158 (empty -> .)
    LT              reduce using rule 158 (empty -> .)
    EQ_EQ           reduce using rule 158 (empty -> .)
    GT_EQ           reduce using rule 158 (empty -> .)
    LT_EQ           reduce using rule 158 (empty -> .)
    NOT_EQ          reduce using rule 158 (empty -> .)
    AND             reduce using rule 158 (empty -> .)
    OR              reduce using rule 158 (empty -> .)

  ! COMMA           [ reduce using rule 158 (empty -> .) ]
  ! CHECK           [ reduce using rule 158 (empty -> .) ]
  ! SWAP            [ reduce using rule 158 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 158 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 158 (empty -> .) ]
  ! FOR             [ reduce using rule 158 (empty -> .) ]
  ! UNTIL           [ reduce using rule 158 (empty -> .) ]
  ! REPEAT          [ reduce using rule 158 (empty -> .) ]
  ! INPUT           [ reduce using rule 158 (empty -> .) ]
  ! IDENT           [ reduce using rule 158 (empty -> .) ]
  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]
  ! RBRACE          [ reduce using rule 158 (empty -> .) ]
  ! REVIVE          [ reduce using rule 158 (empty -> .) ]
  ! SHIFT           [ reduce using rule 158 (empty -> .) ]
  ! OTHERWISE       [ reduce using rule 158 (empty -> .) ]
  ! COLON           [ reduce using rule 158 (empty -> .) ]
  ! RPAREN          [ reduce using rule 158 (empty -> .) ]

    factor_tail                    shift and go to state 70
    empty                          shift and go to state 71

state 180

    (36) value -> type_cast .

    COMMA           reduce using rule 36 (value -> type_cast .)
    CHECK           reduce using rule 36 (value -> type_cast .)
    SWAP            reduce using rule 36 (value -> type_cast .)
    FUNCTION_NAME   reduce using rule 36 (value -> type_cast .)
    DISPLAY         reduce using rule 36 (value -> type_cast .)
    FOR             reduce using rule 36 (value -> type_cast .)
    UNTIL           reduce using rule 36 (value -> type_cast .)
    REPEAT          reduce using rule 36 (value -> type_cast .)
    INPUT           reduce using rule 36 (value -> type_cast .)
    IDENT           reduce using rule 36 (value -> type_cast .)
    INT             reduce using rule 36 (value -> type_cast .)
    FLT             reduce using rule 36 (value -> type_cast .)
    BLN             reduce using rule 36 (value -> type_cast .)
    CHR             reduce using rule 36 (value -> type_cast .)
    STR             reduce using rule 36 (value -> type_cast .)
    RBRACE          reduce using rule 36 (value -> type_cast .)
    REVIVE          reduce using rule 36 (value -> type_cast .)
    SHIFT           reduce using rule 36 (value -> type_cast .)
    OTHERWISE       reduce using rule 36 (value -> type_cast .)
    COLON           reduce using rule 36 (value -> type_cast .)
    RPAREN          reduce using rule 36 (value -> type_cast .)


state 181

    (37) value -> expression .

    COMMA           reduce using rule 37 (value -> expression .)
    CHECK           reduce using rule 37 (value -> expression .)
    SWAP            reduce using rule 37 (value -> expression .)
    FUNCTION_NAME   reduce using rule 37 (value -> expression .)
    DISPLAY         reduce using rule 37 (value -> expression .)
    FOR             reduce using rule 37 (value -> expression .)
    UNTIL           reduce using rule 37 (value -> expression .)
    REPEAT          reduce using rule 37 (value -> expression .)
    INPUT           reduce using rule 37 (value -> expression .)
    IDENT           reduce using rule 37 (value -> expression .)
    INT             reduce using rule 37 (value -> expression .)
    FLT             reduce using rule 37 (value -> expression .)
    BLN             reduce using rule 37 (value -> expression .)
    CHR             reduce using rule 37 (value -> expression .)
    STR             reduce using rule 37 (value -> expression .)
    RBRACE          reduce using rule 37 (value -> expression .)
    REVIVE          reduce using rule 37 (value -> expression .)
    SHIFT           reduce using rule 37 (value -> expression .)
    OTHERWISE       reduce using rule 37 (value -> expression .)
    COLON           reduce using rule 37 (value -> expression .)
    RPAREN          reduce using rule 37 (value -> expression .)


state 182

    (38) value -> function_call .

    COMMA           reduce using rule 38 (value -> function_call .)
    CHECK           reduce using rule 38 (value -> function_call .)
    SWAP            reduce using rule 38 (value -> function_call .)
    FUNCTION_NAME   reduce using rule 38 (value -> function_call .)
    DISPLAY         reduce using rule 38 (value -> function_call .)
    FOR             reduce using rule 38 (value -> function_call .)
    UNTIL           reduce using rule 38 (value -> function_call .)
    REPEAT          reduce using rule 38 (value -> function_call .)
    INPUT           reduce using rule 38 (value -> function_call .)
    IDENT           reduce using rule 38 (value -> function_call .)
    INT             reduce using rule 38 (value -> function_call .)
    FLT             reduce using rule 38 (value -> function_call .)
    BLN             reduce using rule 38 (value -> function_call .)
    CHR             reduce using rule 38 (value -> function_call .)
    STR             reduce using rule 38 (value -> function_call .)
    RBRACE          reduce using rule 38 (value -> function_call .)
    REVIVE          reduce using rule 38 (value -> function_call .)
    SHIFT           reduce using rule 38 (value -> function_call .)
    OTHERWISE       reduce using rule 38 (value -> function_call .)
    COLON           reduce using rule 38 (value -> function_call .)
    RPAREN          reduce using rule 38 (value -> function_call .)


state 183

    (39) type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 213


state 184

    (40) type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 214


state 185

    (41) type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 215


state 186

    (42) type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 216


state 187

    (124) for_loop -> FOR LPAREN . control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (127) control_variable -> . INT IDENT EQ INT_LIT

    INT             shift and go to state 218

    control_variable               shift and go to state 217

state 188

    (125) until_loop -> UNTIL LPAREN . expression RPAREN LBRACE statements RBRACE
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 219
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 189

    (126) repeat_until -> REPEAT LBRACE . statements RBRACE UNTIL LPAREN expression RPAREN
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 220
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 190

    (144) input_statement -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 221


state 191

    (17) var_statement -> data_type IDENT var_tail .

    CHECK           reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    SWAP            reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    FUNCTION_NAME   reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    DISPLAY         reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    FOR             reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    UNTIL           reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    REPEAT          reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    INPUT           reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    IDENT           reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    INT             reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    FLT             reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    BLN             reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    CHR             reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    STR             reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    RBRACE          reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    REVIVE          reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    SHIFT           reduce using rule 17 (var_statement -> data_type IDENT var_tail .)
    OTHERWISE       reduce using rule 17 (var_statement -> data_type IDENT var_tail .)


state 192

    (18) var_tail -> empty .

    CHECK           reduce using rule 18 (var_tail -> empty .)
    SWAP            reduce using rule 18 (var_tail -> empty .)
    FUNCTION_NAME   reduce using rule 18 (var_tail -> empty .)
    DISPLAY         reduce using rule 18 (var_tail -> empty .)
    FOR             reduce using rule 18 (var_tail -> empty .)
    UNTIL           reduce using rule 18 (var_tail -> empty .)
    REPEAT          reduce using rule 18 (var_tail -> empty .)
    INPUT           reduce using rule 18 (var_tail -> empty .)
    IDENT           reduce using rule 18 (var_tail -> empty .)
    INT             reduce using rule 18 (var_tail -> empty .)
    FLT             reduce using rule 18 (var_tail -> empty .)
    BLN             reduce using rule 18 (var_tail -> empty .)
    CHR             reduce using rule 18 (var_tail -> empty .)
    STR             reduce using rule 18 (var_tail -> empty .)
    RBRACE          reduce using rule 18 (var_tail -> empty .)
    REVIVE          reduce using rule 18 (var_tail -> empty .)
    SHIFT           reduce using rule 18 (var_tail -> empty .)
    OTHERWISE       reduce using rule 18 (var_tail -> empty .)


state 193

    (19) var_tail -> EQ . tail_value var_tail2
    (23) tail_value -> . value
    (24) tail_value -> . LBRACKET list_element RBRACKET
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    LBRACKET        shift and go to state 224
    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    tail_value                     shift and go to state 222
    value                          shift and go to state 223
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 194

    (20) var_tail -> COMMA . IDENT var_tail

    IDENT           shift and go to state 225


state 195

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive . RBRACE

    RBRACE          shift and go to state 226


state 196

    (99) revive -> REVIVE . value
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    value                          shift and go to state 227
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 197

    (100) revive -> empty .

    RBRACE          reduce using rule 100 (revive -> empty .)


state 198

    (98) parameters_tail -> COMMA data_type IDENT . parameters_tail
    (97) parameters_tail -> . empty
    (98) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (158) empty -> .

    COMMA           shift and go to state 130
    RPAREN          reduce using rule 158 (empty -> .)

    parameters_tail                shift and go to state 228
    empty                          shift and go to state 129

state 199

    (113) conditional_statement -> CHECK LPAREN expression . RPAREN LBRACE statements RBRACE conditional_tail

    RPAREN          shift and go to state 229


state 200

    (117) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE switch_condition OTHERWISE statements RBRACE

    RPAREN          shift and go to state 230


state 201

    (133) function_call -> FUNCTION_NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 231


state 202

    (135) arguments -> empty .

    RPAREN          reduce using rule 135 (arguments -> empty .)


state 203

    (136) arguments -> arg_value . arg_tail
    (137) arg_tail -> . empty
    (138) arg_tail -> . COMMA arg_value arg_tail
    (158) empty -> .

    COMMA           shift and go to state 234
    RPAREN          reduce using rule 158 (empty -> .)

    arg_tail                       shift and go to state 232
    empty                          shift and go to state 233

state 204

    (139) arg_value -> literal .

    COMMA           reduce using rule 139 (arg_value -> literal .)
    RPAREN          reduce using rule 139 (arg_value -> literal .)


state 205

    (140) arg_value -> var_call .

    COMMA           reduce using rule 140 (arg_value -> var_call .)
    RPAREN          reduce using rule 140 (arg_value -> var_call .)


state 206

    (146) string_operation_tail -> assign_op value .

    CHECK           reduce using rule 146 (string_operation_tail -> assign_op value .)
    SWAP            reduce using rule 146 (string_operation_tail -> assign_op value .)
    FUNCTION_NAME   reduce using rule 146 (string_operation_tail -> assign_op value .)
    DISPLAY         reduce using rule 146 (string_operation_tail -> assign_op value .)
    FOR             reduce using rule 146 (string_operation_tail -> assign_op value .)
    UNTIL           reduce using rule 146 (string_operation_tail -> assign_op value .)
    REPEAT          reduce using rule 146 (string_operation_tail -> assign_op value .)
    INPUT           reduce using rule 146 (string_operation_tail -> assign_op value .)
    IDENT           reduce using rule 146 (string_operation_tail -> assign_op value .)
    INT             reduce using rule 146 (string_operation_tail -> assign_op value .)
    FLT             reduce using rule 146 (string_operation_tail -> assign_op value .)
    BLN             reduce using rule 146 (string_operation_tail -> assign_op value .)
    CHR             reduce using rule 146 (string_operation_tail -> assign_op value .)
    STR             reduce using rule 146 (string_operation_tail -> assign_op value .)
    RBRACE          reduce using rule 146 (string_operation_tail -> assign_op value .)
    REVIVE          reduce using rule 146 (string_operation_tail -> assign_op value .)
    SHIFT           reduce using rule 146 (string_operation_tail -> assign_op value .)
    OTHERWISE       reduce using rule 146 (string_operation_tail -> assign_op value .)


state 207

    (147) string_operation_tail -> PLUS string_val . stringcon_tail
    (154) stringcon_tail -> . empty
    (155) stringcon_tail -> . PLUS string_val stringcon_tail
    (158) empty -> .

    PLUS            shift and go to state 235
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    stringcon_tail                 shift and go to state 236
    empty                          shift and go to state 237

state 208

    (156) string_val -> var_call .

    PLUS            reduce using rule 156 (string_val -> var_call .)
    CHECK           reduce using rule 156 (string_val -> var_call .)
    SWAP            reduce using rule 156 (string_val -> var_call .)
    FUNCTION_NAME   reduce using rule 156 (string_val -> var_call .)
    DISPLAY         reduce using rule 156 (string_val -> var_call .)
    FOR             reduce using rule 156 (string_val -> var_call .)
    UNTIL           reduce using rule 156 (string_val -> var_call .)
    REPEAT          reduce using rule 156 (string_val -> var_call .)
    INPUT           reduce using rule 156 (string_val -> var_call .)
    IDENT           reduce using rule 156 (string_val -> var_call .)
    INT             reduce using rule 156 (string_val -> var_call .)
    FLT             reduce using rule 156 (string_val -> var_call .)
    BLN             reduce using rule 156 (string_val -> var_call .)
    CHR             reduce using rule 156 (string_val -> var_call .)
    STR             reduce using rule 156 (string_val -> var_call .)
    RBRACE          reduce using rule 156 (string_val -> var_call .)
    REVIVE          reduce using rule 156 (string_val -> var_call .)
    SHIFT           reduce using rule 156 (string_val -> var_call .)
    OTHERWISE       reduce using rule 156 (string_val -> var_call .)


state 209

    (157) string_val -> STR_LIT .

    PLUS            reduce using rule 157 (string_val -> STR_LIT .)
    CHECK           reduce using rule 157 (string_val -> STR_LIT .)
    SWAP            reduce using rule 157 (string_val -> STR_LIT .)
    FUNCTION_NAME   reduce using rule 157 (string_val -> STR_LIT .)
    DISPLAY         reduce using rule 157 (string_val -> STR_LIT .)
    FOR             reduce using rule 157 (string_val -> STR_LIT .)
    UNTIL           reduce using rule 157 (string_val -> STR_LIT .)
    REPEAT          reduce using rule 157 (string_val -> STR_LIT .)
    INPUT           reduce using rule 157 (string_val -> STR_LIT .)
    IDENT           reduce using rule 157 (string_val -> STR_LIT .)
    INT             reduce using rule 157 (string_val -> STR_LIT .)
    FLT             reduce using rule 157 (string_val -> STR_LIT .)
    BLN             reduce using rule 157 (string_val -> STR_LIT .)
    CHR             reduce using rule 157 (string_val -> STR_LIT .)
    STR             reduce using rule 157 (string_val -> STR_LIT .)
    RBRACE          reduce using rule 157 (string_val -> STR_LIT .)
    REVIVE          reduce using rule 157 (string_val -> STR_LIT .)
    SHIFT           reduce using rule 157 (string_val -> STR_LIT .)
    OTHERWISE       reduce using rule 157 (string_val -> STR_LIT .)


state 210

    (141) output_statement -> DISPLAY value next_val .

    CHECK           reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    SWAP            reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    FUNCTION_NAME   reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    DISPLAY         reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    FOR             reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    UNTIL           reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    REPEAT          reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    INPUT           reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    IDENT           reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    INT             reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    FLT             reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    BLN             reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    CHR             reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    STR             reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    RBRACE          reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    REVIVE          reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    SHIFT           reduce using rule 141 (output_statement -> DISPLAY value next_val .)
    OTHERWISE       reduce using rule 141 (output_statement -> DISPLAY value next_val .)


state 211

    (142) next_val -> empty .

    CHECK           reduce using rule 142 (next_val -> empty .)
    SWAP            reduce using rule 142 (next_val -> empty .)
    FUNCTION_NAME   reduce using rule 142 (next_val -> empty .)
    DISPLAY         reduce using rule 142 (next_val -> empty .)
    FOR             reduce using rule 142 (next_val -> empty .)
    UNTIL           reduce using rule 142 (next_val -> empty .)
    REPEAT          reduce using rule 142 (next_val -> empty .)
    INPUT           reduce using rule 142 (next_val -> empty .)
    IDENT           reduce using rule 142 (next_val -> empty .)
    INT             reduce using rule 142 (next_val -> empty .)
    FLT             reduce using rule 142 (next_val -> empty .)
    BLN             reduce using rule 142 (next_val -> empty .)
    CHR             reduce using rule 142 (next_val -> empty .)
    STR             reduce using rule 142 (next_val -> empty .)
    RBRACE          reduce using rule 142 (next_val -> empty .)
    REVIVE          reduce using rule 142 (next_val -> empty .)
    SHIFT           reduce using rule 142 (next_val -> empty .)
    OTHERWISE       reduce using rule 142 (next_val -> empty .)


state 212

    (143) next_val -> COMMA . value next_val
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    value                          shift and go to state 238
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 213

    (39) type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (43) typecast_value -> . IDENT
    (44) typecast_value -> . literal
    (45) typecast_value -> . expression
    (46) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (47) typecast_value -> . input_statement
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (54) expression -> . expr_head expr_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail

    IDENT           shift and go to state 240
    FUNCTION_NAME   shift and go to state 243
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156
    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50

    typecast_value                 shift and go to state 239
    literal                        shift and go to state 241
    expression                     shift and go to state 242
    input_statement                shift and go to state 244
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47

state 214

    (40) type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (43) typecast_value -> . IDENT
    (44) typecast_value -> . literal
    (45) typecast_value -> . expression
    (46) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (47) typecast_value -> . input_statement
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (54) expression -> . expr_head expr_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail

    IDENT           shift and go to state 240
    FUNCTION_NAME   shift and go to state 243
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156
    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50

    typecast_value                 shift and go to state 245
    literal                        shift and go to state 241
    expression                     shift and go to state 242
    input_statement                shift and go to state 244
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47

state 215

    (41) type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (43) typecast_value -> . IDENT
    (44) typecast_value -> . literal
    (45) typecast_value -> . expression
    (46) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (47) typecast_value -> . input_statement
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (54) expression -> . expr_head expr_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail

    IDENT           shift and go to state 240
    FUNCTION_NAME   shift and go to state 243
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156
    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50

    typecast_value                 shift and go to state 246
    literal                        shift and go to state 241
    expression                     shift and go to state 242
    input_statement                shift and go to state 244
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47

state 216

    (42) type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (43) typecast_value -> . IDENT
    (44) typecast_value -> . literal
    (45) typecast_value -> . expression
    (46) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (47) typecast_value -> . input_statement
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (54) expression -> . expr_head expr_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail

    IDENT           shift and go to state 240
    FUNCTION_NAME   shift and go to state 243
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156
    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50

    typecast_value                 shift and go to state 247
    literal                        shift and go to state 241
    expression                     shift and go to state 242
    input_statement                shift and go to state 244
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47

state 217

    (124) for_loop -> FOR LPAREN control_variable . SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE

    SEMICOLON       shift and go to state 248


state 218

    (127) control_variable -> INT . IDENT EQ INT_LIT

    IDENT           shift and go to state 249


state 219

    (125) until_loop -> UNTIL LPAREN expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 250


state 220

    (126) repeat_until -> REPEAT LBRACE statements . RBRACE UNTIL LPAREN expression RPAREN

    RBRACE          shift and go to state 251


state 221

    (144) input_statement -> INPUT LPAREN RPAREN .

    CHECK           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    SWAP            reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    FUNCTION_NAME   reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    DISPLAY         reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    UNTIL           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    REPEAT          reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    IDENT           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    INT             reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    FLT             reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    BLN             reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    CHR             reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    STR             reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    REVIVE          reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    SHIFT           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    OTHERWISE       reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    COMMA           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)
    COLON           reduce using rule 144 (input_statement -> INPUT LPAREN RPAREN .)


state 222

    (19) var_tail -> EQ tail_value . var_tail2
    (21) var_tail2 -> . empty
    (22) var_tail2 -> . COMMA IDENT var_tail
    (158) empty -> .

    COMMA           shift and go to state 254
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    var_tail2                      shift and go to state 252
    empty                          shift and go to state 253

state 223

    (23) tail_value -> value .

    COMMA           reduce using rule 23 (tail_value -> value .)
    CHECK           reduce using rule 23 (tail_value -> value .)
    SWAP            reduce using rule 23 (tail_value -> value .)
    FUNCTION_NAME   reduce using rule 23 (tail_value -> value .)
    DISPLAY         reduce using rule 23 (tail_value -> value .)
    FOR             reduce using rule 23 (tail_value -> value .)
    UNTIL           reduce using rule 23 (tail_value -> value .)
    REPEAT          reduce using rule 23 (tail_value -> value .)
    INPUT           reduce using rule 23 (tail_value -> value .)
    IDENT           reduce using rule 23 (tail_value -> value .)
    INT             reduce using rule 23 (tail_value -> value .)
    FLT             reduce using rule 23 (tail_value -> value .)
    BLN             reduce using rule 23 (tail_value -> value .)
    CHR             reduce using rule 23 (tail_value -> value .)
    STR             reduce using rule 23 (tail_value -> value .)
    RBRACE          reduce using rule 23 (tail_value -> value .)
    REVIVE          reduce using rule 23 (tail_value -> value .)
    SHIFT           reduce using rule 23 (tail_value -> value .)
    OTHERWISE       reduce using rule 23 (tail_value -> value .)


state 224

    (24) tail_value -> LBRACKET . list_element RBRACKET
    (25) list_element -> . literal element_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    list_element                   shift and go to state 255
    literal                        shift and go to state 69

state 225

    (20) var_tail -> COMMA IDENT . var_tail
    (18) var_tail -> . empty
    (19) var_tail -> . EQ tail_value var_tail2
    (20) var_tail -> . COMMA IDENT var_tail
    (158) empty -> .

    EQ              shift and go to state 193
    COMMA           shift and go to state 194
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    var_tail                       shift and go to state 256
    empty                          shift and go to state 192

state 226

    (81) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE .

    FUNCTION_NAME   reduce using rule 81 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE .)


state 227

    (99) revive -> REVIVE value .

    RBRACE          reduce using rule 99 (revive -> REVIVE value .)


state 228

    (98) parameters_tail -> COMMA data_type IDENT parameters_tail .

    RPAREN          reduce using rule 98 (parameters_tail -> COMMA data_type IDENT parameters_tail .)


state 229

    (113) conditional_statement -> CHECK LPAREN expression RPAREN . LBRACE statements RBRACE conditional_tail

    LBRACE          shift and go to state 257


state 230

    (117) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE switch_condition OTHERWISE statements RBRACE

    LBRACE          shift and go to state 258


state 231

    (133) function_call -> FUNCTION_NAME LPAREN arguments RPAREN .

    CHECK           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    SWAP            reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FUNCTION_NAME   reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    DISPLAY         reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FOR             reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    UNTIL           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    REPEAT          reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    INPUT           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    IDENT           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    INT             reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FLT             reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    BLN             reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    CHR             reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    STR             reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    REVIVE          reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    SHIFT           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    OTHERWISE       reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COMMA           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COLON           reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 133 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)


state 232

    (136) arguments -> arg_value arg_tail .

    RPAREN          reduce using rule 136 (arguments -> arg_value arg_tail .)


state 233

    (137) arg_tail -> empty .

    RPAREN          reduce using rule 137 (arg_tail -> empty .)


state 234

    (138) arg_tail -> COMMA . arg_value arg_tail
    (139) arg_value -> . literal
    (140) arg_value -> . var_call
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (78) var_call -> . IDENT var_call_tail

    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    IDENT           shift and go to state 52

    arg_value                      shift and go to state 259
    literal                        shift and go to state 204
    var_call                       shift and go to state 205

state 235

    (155) stringcon_tail -> PLUS . string_val stringcon_tail
    (156) string_val -> . var_call
    (157) string_val -> . STR_LIT
    (78) var_call -> . IDENT var_call_tail

    STR_LIT         shift and go to state 209
    IDENT           shift and go to state 52

    string_val                     shift and go to state 260
    var_call                       shift and go to state 208

state 236

    (147) string_operation_tail -> PLUS string_val stringcon_tail .

    CHECK           reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    SWAP            reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    FUNCTION_NAME   reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    DISPLAY         reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    FOR             reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    UNTIL           reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    REPEAT          reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    INPUT           reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    IDENT           reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    INT             reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    FLT             reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    BLN             reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    CHR             reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    STR             reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    RBRACE          reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    REVIVE          reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    SHIFT           reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)
    OTHERWISE       reduce using rule 147 (string_operation_tail -> PLUS string_val stringcon_tail .)


state 237

    (154) stringcon_tail -> empty .

    CHECK           reduce using rule 154 (stringcon_tail -> empty .)
    SWAP            reduce using rule 154 (stringcon_tail -> empty .)
    FUNCTION_NAME   reduce using rule 154 (stringcon_tail -> empty .)
    DISPLAY         reduce using rule 154 (stringcon_tail -> empty .)
    FOR             reduce using rule 154 (stringcon_tail -> empty .)
    UNTIL           reduce using rule 154 (stringcon_tail -> empty .)
    REPEAT          reduce using rule 154 (stringcon_tail -> empty .)
    INPUT           reduce using rule 154 (stringcon_tail -> empty .)
    IDENT           reduce using rule 154 (stringcon_tail -> empty .)
    INT             reduce using rule 154 (stringcon_tail -> empty .)
    FLT             reduce using rule 154 (stringcon_tail -> empty .)
    BLN             reduce using rule 154 (stringcon_tail -> empty .)
    CHR             reduce using rule 154 (stringcon_tail -> empty .)
    STR             reduce using rule 154 (stringcon_tail -> empty .)
    RBRACE          reduce using rule 154 (stringcon_tail -> empty .)
    REVIVE          reduce using rule 154 (stringcon_tail -> empty .)
    SHIFT           reduce using rule 154 (stringcon_tail -> empty .)
    OTHERWISE       reduce using rule 154 (stringcon_tail -> empty .)


state 238

    (143) next_val -> COMMA value . next_val
    (142) next_val -> . empty
    (143) next_val -> . COMMA value next_val
    (158) empty -> .

    COMMA           shift and go to state 212
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    next_val                       shift and go to state 261
    empty                          shift and go to state 211

state 239

    (39) type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 262


state 240

    (43) typecast_value -> IDENT .
    (78) var_call -> IDENT . var_call_tail
    (79) var_call_tail -> . empty
    (80) var_call_tail -> . LBRACKET index RBRACKET
    (158) empty -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 43 (typecast_value -> IDENT .)
    RPAREN          reduce using rule 43 (typecast_value -> IDENT .)
    LBRACKET        shift and go to state 87
    PLUS            reduce using rule 158 (empty -> .)
    MINUS           reduce using rule 158 (empty -> .)
    MULTIPLY        reduce using rule 158 (empty -> .)
    DIVISION        reduce using rule 158 (empty -> .)
    MODULO          reduce using rule 158 (empty -> .)
    EXPONENT        reduce using rule 158 (empty -> .)
    GT              reduce using rule 158 (empty -> .)
    LT              reduce using rule 158 (empty -> .)
    EQ_EQ           reduce using rule 158 (empty -> .)
    GT_EQ           reduce using rule 158 (empty -> .)
    LT_EQ           reduce using rule 158 (empty -> .)
    NOT_EQ          reduce using rule 158 (empty -> .)
    AND             reduce using rule 158 (empty -> .)
    OR              reduce using rule 158 (empty -> .)

  ! RPAREN          [ reduce using rule 158 (empty -> .) ]

    var_call_tail                  shift and go to state 85
    empty                          shift and go to state 86

state 241

    (44) typecast_value -> literal .
    (58) factor -> literal .

  ! reduce/reduce conflict for RPAREN resolved using rule 44 (typecast_value -> literal .)
    RPAREN          reduce using rule 44 (typecast_value -> literal .)
    PLUS            reduce using rule 58 (factor -> literal .)
    MINUS           reduce using rule 58 (factor -> literal .)
    MULTIPLY        reduce using rule 58 (factor -> literal .)
    DIVISION        reduce using rule 58 (factor -> literal .)
    MODULO          reduce using rule 58 (factor -> literal .)
    EXPONENT        reduce using rule 58 (factor -> literal .)
    GT              reduce using rule 58 (factor -> literal .)
    LT              reduce using rule 58 (factor -> literal .)
    EQ_EQ           reduce using rule 58 (factor -> literal .)
    GT_EQ           reduce using rule 58 (factor -> literal .)
    LT_EQ           reduce using rule 58 (factor -> literal .)
    NOT_EQ          reduce using rule 58 (factor -> literal .)
    AND             reduce using rule 58 (factor -> literal .)
    OR              reduce using rule 58 (factor -> literal .)

  ! RPAREN          [ reduce using rule 58 (factor -> literal .) ]


state 242

    (45) typecast_value -> expression .

    RPAREN          reduce using rule 45 (typecast_value -> expression .)


state 243

    (46) typecast_value -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 263


state 244

    (47) typecast_value -> input_statement .

    RPAREN          reduce using rule 47 (typecast_value -> input_statement .)


state 245

    (40) type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 264


state 246

    (41) type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 265


state 247

    (42) type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 266


state 248

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON . expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 267
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 249

    (127) control_variable -> INT IDENT . EQ INT_LIT

    EQ              shift and go to state 268


state 250

    (125) until_loop -> UNTIL LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 269


state 251

    (126) repeat_until -> REPEAT LBRACE statements RBRACE . UNTIL LPAREN expression RPAREN

    UNTIL           shift and go to state 270


state 252

    (19) var_tail -> EQ tail_value var_tail2 .

    CHECK           reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    SWAP            reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    FUNCTION_NAME   reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    DISPLAY         reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    FOR             reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    UNTIL           reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    REPEAT          reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    INPUT           reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    IDENT           reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    INT             reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    FLT             reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    BLN             reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    CHR             reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    STR             reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    RBRACE          reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    REVIVE          reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    SHIFT           reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)
    OTHERWISE       reduce using rule 19 (var_tail -> EQ tail_value var_tail2 .)


state 253

    (21) var_tail2 -> empty .

    CHECK           reduce using rule 21 (var_tail2 -> empty .)
    SWAP            reduce using rule 21 (var_tail2 -> empty .)
    FUNCTION_NAME   reduce using rule 21 (var_tail2 -> empty .)
    DISPLAY         reduce using rule 21 (var_tail2 -> empty .)
    FOR             reduce using rule 21 (var_tail2 -> empty .)
    UNTIL           reduce using rule 21 (var_tail2 -> empty .)
    REPEAT          reduce using rule 21 (var_tail2 -> empty .)
    INPUT           reduce using rule 21 (var_tail2 -> empty .)
    IDENT           reduce using rule 21 (var_tail2 -> empty .)
    INT             reduce using rule 21 (var_tail2 -> empty .)
    FLT             reduce using rule 21 (var_tail2 -> empty .)
    BLN             reduce using rule 21 (var_tail2 -> empty .)
    CHR             reduce using rule 21 (var_tail2 -> empty .)
    STR             reduce using rule 21 (var_tail2 -> empty .)
    RBRACE          reduce using rule 21 (var_tail2 -> empty .)
    REVIVE          reduce using rule 21 (var_tail2 -> empty .)
    SHIFT           reduce using rule 21 (var_tail2 -> empty .)
    OTHERWISE       reduce using rule 21 (var_tail2 -> empty .)


state 254

    (22) var_tail2 -> COMMA . IDENT var_tail

    IDENT           shift and go to state 271


state 255

    (24) tail_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 272


state 256

    (20) var_tail -> COMMA IDENT var_tail .

    CHECK           reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    SWAP            reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    FUNCTION_NAME   reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    DISPLAY         reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    FOR             reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    UNTIL           reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    REPEAT          reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    INPUT           reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    IDENT           reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    INT             reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    FLT             reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    BLN             reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    CHR             reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    STR             reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    RBRACE          reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    REVIVE          reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    SHIFT           reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)
    OTHERWISE       reduce using rule 20 (var_tail -> COMMA IDENT var_tail .)


state 257

    (113) conditional_statement -> CHECK LPAREN expression RPAREN LBRACE . statements RBRACE conditional_tail
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 273
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 258

    (117) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . switch_condition OTHERWISE statements RBRACE
    (118) switch_condition -> . SHIFT value COLON statements switchcond_tail

    SHIFT           shift and go to state 275

    switch_condition               shift and go to state 274

state 259

    (138) arg_tail -> COMMA arg_value . arg_tail
    (137) arg_tail -> . empty
    (138) arg_tail -> . COMMA arg_value arg_tail
    (158) empty -> .

    COMMA           shift and go to state 234
    RPAREN          reduce using rule 158 (empty -> .)

    arg_tail                       shift and go to state 276
    empty                          shift and go to state 233

state 260

    (155) stringcon_tail -> PLUS string_val . stringcon_tail
    (154) stringcon_tail -> . empty
    (155) stringcon_tail -> . PLUS string_val stringcon_tail
    (158) empty -> .

    PLUS            shift and go to state 235
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    stringcon_tail                 shift and go to state 277
    empty                          shift and go to state 237

state 261

    (143) next_val -> COMMA value next_val .

    CHECK           reduce using rule 143 (next_val -> COMMA value next_val .)
    SWAP            reduce using rule 143 (next_val -> COMMA value next_val .)
    FUNCTION_NAME   reduce using rule 143 (next_val -> COMMA value next_val .)
    DISPLAY         reduce using rule 143 (next_val -> COMMA value next_val .)
    FOR             reduce using rule 143 (next_val -> COMMA value next_val .)
    UNTIL           reduce using rule 143 (next_val -> COMMA value next_val .)
    REPEAT          reduce using rule 143 (next_val -> COMMA value next_val .)
    INPUT           reduce using rule 143 (next_val -> COMMA value next_val .)
    IDENT           reduce using rule 143 (next_val -> COMMA value next_val .)
    INT             reduce using rule 143 (next_val -> COMMA value next_val .)
    FLT             reduce using rule 143 (next_val -> COMMA value next_val .)
    BLN             reduce using rule 143 (next_val -> COMMA value next_val .)
    CHR             reduce using rule 143 (next_val -> COMMA value next_val .)
    STR             reduce using rule 143 (next_val -> COMMA value next_val .)
    RBRACE          reduce using rule 143 (next_val -> COMMA value next_val .)
    REVIVE          reduce using rule 143 (next_val -> COMMA value next_val .)
    SHIFT           reduce using rule 143 (next_val -> COMMA value next_val .)
    OTHERWISE       reduce using rule 143 (next_val -> COMMA value next_val .)


state 262

    (39) type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    INT             reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    STR             reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 39 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 263

    (46) typecast_value -> FUNCTION_NAME LPAREN . RPAREN

    RPAREN          shift and go to state 278


state 264

    (40) type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    INT             reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    STR             reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 40 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 265

    (41) type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    INT             reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    STR             reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 41 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 266

    (42) type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    INT             reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    STR             reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    COLON           reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 42 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 267

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression . SEMICOLON update RPAREN LBRACE statements RBRACE

    SEMICOLON       shift and go to state 279


state 268

    (127) control_variable -> INT IDENT EQ . INT_LIT

    INT_LIT         shift and go to state 280


state 269

    (125) until_loop -> UNTIL LPAREN expression RPAREN LBRACE . statements RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 281
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 270

    (126) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL . LPAREN expression RPAREN

    LPAREN          shift and go to state 282


state 271

    (22) var_tail2 -> COMMA IDENT . var_tail
    (18) var_tail -> . empty
    (19) var_tail -> . EQ tail_value var_tail2
    (20) var_tail -> . COMMA IDENT var_tail
    (158) empty -> .

    EQ              shift and go to state 193
    COMMA           shift and go to state 194
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)

    var_tail                       shift and go to state 283
    empty                          shift and go to state 192

state 272

    (24) tail_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    CHECK           reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    SWAP            reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_NAME   reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    DISPLAY         reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    FOR             reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    UNTIL           reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    REPEAT          reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    INPUT           reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    IDENT           reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    INT             reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    FLT             reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    BLN             reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    CHR             reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    STR             reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    RBRACE          reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    REVIVE          reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    SHIFT           reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)
    OTHERWISE       reduce using rule 24 (tail_value -> LBRACKET list_element RBRACKET .)


state 273

    (113) conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements . RBRACE conditional_tail

    RBRACE          shift and go to state 284


state 274

    (117) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition . OTHERWISE statements RBRACE

    OTHERWISE       shift and go to state 285


state 275

    (118) switch_condition -> SHIFT . value COLON statements switchcond_tail
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    value                          shift and go to state 286
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 276

    (138) arg_tail -> COMMA arg_value arg_tail .

    RPAREN          reduce using rule 138 (arg_tail -> COMMA arg_value arg_tail .)


state 277

    (155) stringcon_tail -> PLUS string_val stringcon_tail .

    CHECK           reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    SWAP            reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    FUNCTION_NAME   reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    DISPLAY         reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    FOR             reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    UNTIL           reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    REPEAT          reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    INPUT           reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    IDENT           reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    INT             reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    FLT             reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    BLN             reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    CHR             reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    STR             reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    RBRACE          reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    REVIVE          reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    SHIFT           reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)
    OTHERWISE       reduce using rule 155 (stringcon_tail -> PLUS string_val stringcon_tail .)


state 278

    (46) typecast_value -> FUNCTION_NAME LPAREN RPAREN .

    RPAREN          reduce using rule 46 (typecast_value -> FUNCTION_NAME LPAREN RPAREN .)


state 279

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON . update RPAREN LBRACE statements RBRACE
    (128) update -> . var_call update_tail
    (78) var_call -> . IDENT var_call_tail

    IDENT           shift and go to state 52

    update                         shift and go to state 287
    var_call                       shift and go to state 288

state 280

    (127) control_variable -> INT IDENT EQ INT_LIT .

    SEMICOLON       reduce using rule 127 (control_variable -> INT IDENT EQ INT_LIT .)


state 281

    (125) until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 289


state 282

    (126) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN . expression RPAREN
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 290
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 283

    (22) var_tail2 -> COMMA IDENT var_tail .

    CHECK           reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    SWAP            reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    FUNCTION_NAME   reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    DISPLAY         reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    FOR             reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    UNTIL           reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    REPEAT          reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    INPUT           reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    IDENT           reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    INT             reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    FLT             reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    BLN             reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    CHR             reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    STR             reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    RBRACE          reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    REVIVE          reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    SHIFT           reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)
    OTHERWISE       reduce using rule 22 (var_tail2 -> COMMA IDENT var_tail .)


state 284

    (113) conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE . conditional_tail
    (114) conditional_tail -> . empty
    (115) conditional_tail -> . OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE
    (116) conditional_tail -> . OTHERWISE LBRACE statements RBRACE
    (158) empty -> .

  ! shift/reduce conflict for OTHERWISE resolved as shift
    OTHERWISE_CHECK shift and go to state 293
    OTHERWISE       shift and go to state 294
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             reduce using rule 158 (empty -> .)
    FLT             reduce using rule 158 (empty -> .)
    BLN             reduce using rule 158 (empty -> .)
    CHR             reduce using rule 158 (empty -> .)
    STR             reduce using rule 158 (empty -> .)
    RBRACE          reduce using rule 158 (empty -> .)
    REVIVE          reduce using rule 158 (empty -> .)
    SHIFT           reduce using rule 158 (empty -> .)

  ! OTHERWISE       [ reduce using rule 158 (empty -> .) ]

    conditional_tail               shift and go to state 291
    empty                          shift and go to state 292

state 285

    (117) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE . statements RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 295
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 286

    (118) switch_condition -> SHIFT value . COLON statements switchcond_tail

    COLON           shift and go to state 296


state 287

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 297


state 288

    (128) update -> var_call . update_tail
    (129) update_tail -> . postfix
    (130) update_tail -> . assign_op value
    (131) postfix -> . PLUS_PLUS
    (132) postfix -> . MINUS_MINUS
    (148) assign_op -> . PLUS_EQ
    (149) assign_op -> . MINUS_EQ
    (150) assign_op -> . MUL_EQ
    (151) assign_op -> . DIV_EQ
    (152) assign_op -> . MOD_EQ
    (153) assign_op -> . EQ

    PLUS_PLUS       shift and go to state 301
    MINUS_MINUS     shift and go to state 302
    PLUS_EQ         shift and go to state 172
    MINUS_EQ        shift and go to state 173
    MUL_EQ          shift and go to state 174
    DIV_EQ          shift and go to state 175
    MOD_EQ          shift and go to state 176
    EQ              shift and go to state 177

    update_tail                    shift and go to state 298
    postfix                        shift and go to state 299
    assign_op                      shift and go to state 300

state 289

    (125) until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .

    CHECK           reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    SWAP            reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_NAME   reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    UNTIL           reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    REPEAT          reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENT           reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLT             reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    BLN             reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    CHR             reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    REVIVE          reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    SHIFT           reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 125 (until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE .)


state 290

    (126) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression . RPAREN

    RPAREN          shift and go to state 303


state 291

    (113) conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .

    CHECK           reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    SWAP            reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_NAME   reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    DISPLAY         reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    FOR             reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    UNTIL           reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    REPEAT          reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    INPUT           reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    IDENT           reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    INT             reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    FLT             reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    BLN             reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    CHR             reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    STR             reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    RBRACE          reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    REVIVE          reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    SHIFT           reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)
    OTHERWISE       reduce using rule 113 (conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail .)


state 292

    (114) conditional_tail -> empty .

    CHECK           reduce using rule 114 (conditional_tail -> empty .)
    SWAP            reduce using rule 114 (conditional_tail -> empty .)
    FUNCTION_NAME   reduce using rule 114 (conditional_tail -> empty .)
    DISPLAY         reduce using rule 114 (conditional_tail -> empty .)
    FOR             reduce using rule 114 (conditional_tail -> empty .)
    UNTIL           reduce using rule 114 (conditional_tail -> empty .)
    REPEAT          reduce using rule 114 (conditional_tail -> empty .)
    INPUT           reduce using rule 114 (conditional_tail -> empty .)
    IDENT           reduce using rule 114 (conditional_tail -> empty .)
    INT             reduce using rule 114 (conditional_tail -> empty .)
    FLT             reduce using rule 114 (conditional_tail -> empty .)
    BLN             reduce using rule 114 (conditional_tail -> empty .)
    CHR             reduce using rule 114 (conditional_tail -> empty .)
    STR             reduce using rule 114 (conditional_tail -> empty .)
    RBRACE          reduce using rule 114 (conditional_tail -> empty .)
    REVIVE          reduce using rule 114 (conditional_tail -> empty .)
    SHIFT           reduce using rule 114 (conditional_tail -> empty .)
    OTHERWISE       reduce using rule 114 (conditional_tail -> empty .)


state 293

    (115) conditional_tail -> OTHERWISE_CHECK . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 304


state 294

    (116) conditional_tail -> OTHERWISE . LBRACE statements RBRACE

    LBRACE          shift and go to state 305


state 295

    (117) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements . RBRACE

    RBRACE          shift and go to state 306


state 296

    (118) switch_condition -> SHIFT value COLON . statements switchcond_tail
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SHIFT           reduce using rule 158 (empty -> .)
    OTHERWISE       reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 307
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 297

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 308


state 298

    (128) update -> var_call update_tail .

    RPAREN          reduce using rule 128 (update -> var_call update_tail .)


state 299

    (129) update_tail -> postfix .

    RPAREN          reduce using rule 129 (update_tail -> postfix .)


state 300

    (130) update_tail -> assign_op . value
    (35) value -> . factor
    (36) value -> . type_cast
    (37) value -> . expression
    (38) value -> . function_call
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (39) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (40) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (41) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (42) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (54) expression -> . expr_head expr_tail
    (133) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (134) function_call -> . input_statement
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT
    (55) expr_head -> . term term_tail
    (144) input_statement -> . INPUT LPAREN RPAREN
    (56) term -> . factor factor_tail

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    CONVERT_TO_INT  shift and go to state 183
    CONVERT_TO_FLT  shift and go to state 184
    CONVERT_TO_BLN  shift and go to state 185
    CONVERT_TO_STR  shift and go to state 186
    FUNCTION_NAME   shift and go to state 149
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58
    INPUT           shift and go to state 156

    value                          shift and go to state 309
    factor                         shift and go to state 179
    type_cast                      shift and go to state 180
    expression                     shift and go to state 181
    function_call                  shift and go to state 182
    var_call                       shift and go to state 47
    literal                        shift and go to state 48
    expr_head                      shift and go to state 51
    input_statement                shift and go to state 150
    term                           shift and go to state 59

state 301

    (131) postfix -> PLUS_PLUS .

    RPAREN          reduce using rule 131 (postfix -> PLUS_PLUS .)


state 302

    (132) postfix -> MINUS_MINUS .

    RPAREN          reduce using rule 132 (postfix -> MINUS_MINUS .)


state 303

    (126) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .

    CHECK           reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    SWAP            reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    FUNCTION_NAME   reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    DISPLAY         reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    FOR             reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    UNTIL           reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    REPEAT          reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    INPUT           reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    IDENT           reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    INT             reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    FLT             reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    BLN             reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    CHR             reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    STR             reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    RBRACE          reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    REVIVE          reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    SHIFT           reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)
    OTHERWISE       reduce using rule 126 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN .)


state 304

    (115) conditional_tail -> OTHERWISE_CHECK LPAREN . expression RPAREN LBRACE statements RBRACE
    (54) expression -> . expr_head expr_tail
    (55) expr_head -> . term term_tail
    (56) term -> . factor factor_tail
    (57) factor -> . var_call
    (58) factor -> . literal
    (59) factor -> . TILDE literal
    (60) factor -> . LPAREN expression RPAREN
    (78) var_call -> . IDENT var_call_tail
    (48) literal -> . INT_LIT
    (49) literal -> . FLT_LIT
    (50) literal -> . DAY
    (51) literal -> . NIGHT
    (52) literal -> . CHR_LIT
    (53) literal -> . STR_LIT

    TILDE           shift and go to state 49
    LPAREN          shift and go to state 50
    IDENT           shift and go to state 52
    INT_LIT         shift and go to state 53
    FLT_LIT         shift and go to state 54
    DAY             shift and go to state 55
    NIGHT           shift and go to state 56
    CHR_LIT         shift and go to state 57
    STR_LIT         shift and go to state 58

    expression                     shift and go to state 310
    expr_head                      shift and go to state 51
    term                           shift and go to state 59
    factor                         shift and go to state 80
    var_call                       shift and go to state 47
    literal                        shift and go to state 48

state 305

    (116) conditional_tail -> OTHERWISE LBRACE . statements RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 311
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 306

    (117) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .

    CHECK           reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    SWAP            reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_NAME   reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    DISPLAY         reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FOR             reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    UNTIL           reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    REPEAT          reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    INPUT           reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    IDENT           reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    INT             reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FLT             reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    BLN             reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    CHR             reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    STR             reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    RBRACE          reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    REVIVE          reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    SHIFT           reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    OTHERWISE       reduce using rule 117 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)


state 307

    (118) switch_condition -> SHIFT value COLON statements . switchcond_tail
    (119) switchcond_tail -> . empty
    (120) switchcond_tail -> . switch_condition
    (158) empty -> .
    (118) switch_condition -> . SHIFT value COLON statements switchcond_tail

    OTHERWISE       reduce using rule 158 (empty -> .)
    SHIFT           shift and go to state 275

    switchcond_tail                shift and go to state 312
    empty                          shift and go to state 313
    switch_condition               shift and go to state 314

state 308

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE . statements RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 315
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 309

    (130) update_tail -> assign_op value .

    RPAREN          reduce using rule 130 (update_tail -> assign_op value .)


state 310

    (115) conditional_tail -> OTHERWISE_CHECK LPAREN expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 316


state 311

    (116) conditional_tail -> OTHERWISE LBRACE statements . RBRACE

    RBRACE          shift and go to state 317


state 312

    (118) switch_condition -> SHIFT value COLON statements switchcond_tail .

    OTHERWISE       reduce using rule 118 (switch_condition -> SHIFT value COLON statements switchcond_tail .)


state 313

    (119) switchcond_tail -> empty .

    OTHERWISE       reduce using rule 119 (switchcond_tail -> empty .)


state 314

    (120) switchcond_tail -> switch_condition .

    OTHERWISE       reduce using rule 120 (switchcond_tail -> switch_condition .)


state 315

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 318


state 316

    (115) conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 319


state 317

    (116) conditional_tail -> OTHERWISE LBRACE statements RBRACE .

    CHECK           reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    SWAP            reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_NAME   reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FOR             reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    UNTIL           reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    REPEAT          reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    INPUT           reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    IDENT           reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    INT             reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FLT             reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    BLN             reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    CHR             reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    STR             reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    REVIVE          reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    SHIFT           reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 116 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)


state 318

    (124) for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .

    CHECK           reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    SWAP            reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_NAME   reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    UNTIL           reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    REPEAT          reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    IDENT           reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FLT             reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    BLN             reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    CHR             reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    REVIVE          reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    SHIFT           reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 124 (for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE .)


state 319

    (115) conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE . statements RBRACE
    (101) statements -> . empty
    (102) statements -> . local_dec statements_tail
    (158) empty -> .
    (111) local_dec -> . var_statement
    (112) local_dec -> . empty
    (17) var_statement -> . data_type IDENT var_tail
    (30) data_type -> . INT
    (31) data_type -> . FLT
    (32) data_type -> . BLN
    (33) data_type -> . CHR
    (34) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 158 (empty -> .)
    CHECK           reduce using rule 158 (empty -> .)
    SWAP            reduce using rule 158 (empty -> .)
    FUNCTION_NAME   reduce using rule 158 (empty -> .)
    DISPLAY         reduce using rule 158 (empty -> .)
    FOR             reduce using rule 158 (empty -> .)
    UNTIL           reduce using rule 158 (empty -> .)
    REPEAT          reduce using rule 158 (empty -> .)
    INPUT           reduce using rule 158 (empty -> .)
    IDENT           reduce using rule 158 (empty -> .)
    INT             shift and go to state 7
    FLT             shift and go to state 8
    BLN             shift and go to state 9
    CHR             shift and go to state 10
    STR             shift and go to state 11

  ! INT             [ reduce using rule 158 (empty -> .) ]
  ! FLT             [ reduce using rule 158 (empty -> .) ]
  ! BLN             [ reduce using rule 158 (empty -> .) ]
  ! CHR             [ reduce using rule 158 (empty -> .) ]
  ! STR             [ reduce using rule 158 (empty -> .) ]

    statements                     shift and go to state 320
    empty                          shift and go to state 123
    local_dec                      shift and go to state 124
    var_statement                  shift and go to state 125
    data_type                      shift and go to state 126

state 320

    (115) conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 321


state 321

    (115) conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .

    CHECK           reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    SWAP            reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_NAME   reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    UNTIL           reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    REPEAT          reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENT           reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLT             reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    BLN             reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    CHR             reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    REVIVE          reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    SHIFT           reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 115 (conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 59 resolved as shift
WARNING: shift/reduce conflict for LT in state 59 resolved as shift
WARNING: shift/reduce conflict for EQ_EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for INT in state 96 resolved as shift
WARNING: shift/reduce conflict for FLT in state 96 resolved as shift
WARNING: shift/reduce conflict for BLN in state 96 resolved as shift
WARNING: shift/reduce conflict for CHR in state 96 resolved as shift
WARNING: shift/reduce conflict for STR in state 96 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 124 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 124 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 124 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 124 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 124 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 124 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 124 resolved as shift
WARNING: shift/reduce conflict for INT in state 124 resolved as shift
WARNING: shift/reduce conflict for FLT in state 124 resolved as shift
WARNING: shift/reduce conflict for BLN in state 124 resolved as shift
WARNING: shift/reduce conflict for CHR in state 124 resolved as shift
WARNING: shift/reduce conflict for STR in state 124 resolved as shift
WARNING: shift/reduce conflict for INT in state 127 resolved as shift
WARNING: shift/reduce conflict for FLT in state 127 resolved as shift
WARNING: shift/reduce conflict for BLN in state 127 resolved as shift
WARNING: shift/reduce conflict for CHR in state 127 resolved as shift
WARNING: shift/reduce conflict for STR in state 127 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 138 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 138 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 138 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 138 resolved as shift
WARNING: shift/reduce conflict for FOR in state 138 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 138 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 138 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 138 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 138 resolved as shift
WARNING: shift/reduce conflict for INT in state 138 resolved as shift
WARNING: shift/reduce conflict for FLT in state 138 resolved as shift
WARNING: shift/reduce conflict for BLN in state 138 resolved as shift
WARNING: shift/reduce conflict for CHR in state 138 resolved as shift
WARNING: shift/reduce conflict for STR in state 138 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 139 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 139 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 139 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 139 resolved as shift
WARNING: shift/reduce conflict for FOR in state 139 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 139 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 139 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 139 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 139 resolved as shift
WARNING: shift/reduce conflict for INT in state 139 resolved as shift
WARNING: shift/reduce conflict for FLT in state 139 resolved as shift
WARNING: shift/reduce conflict for BLN in state 139 resolved as shift
WARNING: shift/reduce conflict for CHR in state 139 resolved as shift
WARNING: shift/reduce conflict for STR in state 139 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 140 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 140 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 140 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 140 resolved as shift
WARNING: shift/reduce conflict for FOR in state 140 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 140 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 140 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 140 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 140 resolved as shift
WARNING: shift/reduce conflict for INT in state 140 resolved as shift
WARNING: shift/reduce conflict for FLT in state 140 resolved as shift
WARNING: shift/reduce conflict for BLN in state 140 resolved as shift
WARNING: shift/reduce conflict for CHR in state 140 resolved as shift
WARNING: shift/reduce conflict for STR in state 140 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 141 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 141 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 141 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 141 resolved as shift
WARNING: shift/reduce conflict for FOR in state 141 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 141 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 141 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 141 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 141 resolved as shift
WARNING: shift/reduce conflict for INT in state 141 resolved as shift
WARNING: shift/reduce conflict for FLT in state 141 resolved as shift
WARNING: shift/reduce conflict for BLN in state 141 resolved as shift
WARNING: shift/reduce conflict for CHR in state 141 resolved as shift
WARNING: shift/reduce conflict for STR in state 141 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 142 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 142 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 142 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 142 resolved as shift
WARNING: shift/reduce conflict for FOR in state 142 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 142 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 142 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 142 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 142 resolved as shift
WARNING: shift/reduce conflict for INT in state 142 resolved as shift
WARNING: shift/reduce conflict for FLT in state 142 resolved as shift
WARNING: shift/reduce conflict for BLN in state 142 resolved as shift
WARNING: shift/reduce conflict for CHR in state 142 resolved as shift
WARNING: shift/reduce conflict for STR in state 142 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 143 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 143 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 143 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 143 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 143 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 143 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 143 resolved as shift
WARNING: shift/reduce conflict for INT in state 143 resolved as shift
WARNING: shift/reduce conflict for FLT in state 143 resolved as shift
WARNING: shift/reduce conflict for BLN in state 143 resolved as shift
WARNING: shift/reduce conflict for CHR in state 143 resolved as shift
WARNING: shift/reduce conflict for STR in state 143 resolved as shift
WARNING: shift/reduce conflict for INT in state 189 resolved as shift
WARNING: shift/reduce conflict for FLT in state 189 resolved as shift
WARNING: shift/reduce conflict for BLN in state 189 resolved as shift
WARNING: shift/reduce conflict for CHR in state 189 resolved as shift
WARNING: shift/reduce conflict for STR in state 189 resolved as shift
WARNING: shift/reduce conflict for INT in state 257 resolved as shift
WARNING: shift/reduce conflict for FLT in state 257 resolved as shift
WARNING: shift/reduce conflict for BLN in state 257 resolved as shift
WARNING: shift/reduce conflict for CHR in state 257 resolved as shift
WARNING: shift/reduce conflict for STR in state 257 resolved as shift
WARNING: shift/reduce conflict for INT in state 269 resolved as shift
WARNING: shift/reduce conflict for FLT in state 269 resolved as shift
WARNING: shift/reduce conflict for BLN in state 269 resolved as shift
WARNING: shift/reduce conflict for CHR in state 269 resolved as shift
WARNING: shift/reduce conflict for STR in state 269 resolved as shift
WARNING: shift/reduce conflict for OTHERWISE in state 284 resolved as shift
WARNING: shift/reduce conflict for INT in state 285 resolved as shift
WARNING: shift/reduce conflict for FLT in state 285 resolved as shift
WARNING: shift/reduce conflict for BLN in state 285 resolved as shift
WARNING: shift/reduce conflict for CHR in state 285 resolved as shift
WARNING: shift/reduce conflict for STR in state 285 resolved as shift
WARNING: shift/reduce conflict for INT in state 296 resolved as shift
WARNING: shift/reduce conflict for FLT in state 296 resolved as shift
WARNING: shift/reduce conflict for BLN in state 296 resolved as shift
WARNING: shift/reduce conflict for CHR in state 296 resolved as shift
WARNING: shift/reduce conflict for STR in state 296 resolved as shift
WARNING: shift/reduce conflict for INT in state 305 resolved as shift
WARNING: shift/reduce conflict for FLT in state 305 resolved as shift
WARNING: shift/reduce conflict for BLN in state 305 resolved as shift
WARNING: shift/reduce conflict for CHR in state 305 resolved as shift
WARNING: shift/reduce conflict for STR in state 305 resolved as shift
WARNING: shift/reduce conflict for INT in state 308 resolved as shift
WARNING: shift/reduce conflict for FLT in state 308 resolved as shift
WARNING: shift/reduce conflict for BLN in state 308 resolved as shift
WARNING: shift/reduce conflict for CHR in state 308 resolved as shift
WARNING: shift/reduce conflict for STR in state 308 resolved as shift
WARNING: shift/reduce conflict for INT in state 319 resolved as shift
WARNING: shift/reduce conflict for FLT in state 319 resolved as shift
WARNING: shift/reduce conflict for BLN in state 319 resolved as shift
WARNING: shift/reduce conflict for CHR in state 319 resolved as shift
WARNING: shift/reduce conflict for STR in state 319 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (global_dec -> empty)
WARNING: rejected rule (global_tail -> empty) in state 29
WARNING: reduce/reduce conflict in state 45 resolved using rule (global_value -> factor)
WARNING: rejected rule (empty -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 123 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 123
WARNING: reduce/reduce conflict in state 136 resolved using rule (statements -> empty)
WARNING: rejected rule (statements_tail -> empty) in state 136
WARNING: reduce/reduce conflict in state 136 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 136
WARNING: reduce/reduce conflict in state 179 resolved using rule (value -> factor)
WARNING: rejected rule (empty -> <empty>) in state 179
WARNING: reduce/reduce conflict in state 240 resolved using rule (typecast_value -> IDENT)
WARNING: rejected rule (empty -> <empty>) in state 240
WARNING: reduce/reduce conflict in state 241 resolved using rule (typecast_value -> literal)
WARNING: rejected rule (factor -> literal) in state 241
WARNING: Rule (global_tail -> empty) is never reduced
WARNING: Rule (statements_tail -> empty) is never reduced
