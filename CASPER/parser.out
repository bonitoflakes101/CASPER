Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DAY
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    EQ_EQ
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    FUNCTION_NAME
    ILLEGAL
    IN
    LIST_BLN2D
    LIST_CHR2D
    LIST_FLT2D
    LIST_INT2D
    LIST_STR2D
    MEASURE
    NEWLINE
    NIGHT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH global_declarations statements GHOST
Rule 2     statements -> conditional_statement statements_tail
Rule 3     statements -> loop_statement statements_tail
Rule 4     statements -> function_statement statements_tail
Rule 5     statements -> switch_statement statements_tail
Rule 6     statements -> output_statement statements_tail
Rule 7     statements -> assignment_statement statements_tail
Rule 8     statements -> expression statements_tail
Rule 9     statements -> declarations statements_tail
Rule 10    statements -> empty
Rule 11    statements_tail -> statements_tail
Rule 12    statements_tail -> statements
Rule 13    statements_tail -> empty
Rule 14    global_declarations -> declarations
Rule 15    declarations -> GLOBAL var_call
Rule 16    declarations -> var_dec
Rule 17    declarations -> var_initialization
Rule 18    declarations -> list_dec
Rule 19    declarations -> list_init
Rule 20    declarations -> empty
Rule 21    var_dec -> data_type IDENT vardec_tail
Rule 22    vardec_tail -> COMMA IDENT vardec_tail
Rule 23    vardec_tail -> empty
Rule 24    var_initialization -> data_type IDENT EQ value varinit_tail
Rule 25    varinit_tail -> COMMA IDENT EQ value varinit_tail
Rule 26    varinit_tail -> empty
Rule 27    data_type -> INT
Rule 28    data_type -> FLT
Rule 29    data_type -> BLN
Rule 30    data_type -> CHR
Rule 31    data_type -> STR
Rule 32    value -> literal
Rule 33    value -> expression
Rule 34    value -> var_call
Rule 35    value -> function_call
Rule 36    value -> type_cast
Rule 37    value -> not_op
Rule 38    value -> negative_val
Rule 39    negative_val -> TILDE INT_LIT
Rule 40    negative_val -> TILDE FLT_LIT
Rule 41    literal -> INT_LIT
Rule 42    literal -> FLT_LIT
Rule 43    literal -> BLN_LIT
Rule 44    literal -> CHR_LIT
Rule 45    literal -> STR_LIT
Rule 46    expression -> arithmetic_expression
Rule 47    expression -> relational_expression
Rule 48    expression -> logical_expression
Rule 49    expression -> string_concat
Rule 50    arithmetic_expression -> ae_term
Rule 51    ae_term -> ae_factor ae_tail2
Rule 52    ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2
Rule 53    ae_factor -> INT_LIT
Rule 54    ae_factor -> FLT_LIT
Rule 55    ae_factor -> var_call
Rule 56    ae_tail -> PLUS ae_term ae_tail
Rule 57    ae_tail -> MINUS ae_term ae_tail
Rule 58    ae_tail -> DIVISION ae_term ae_tail
Rule 59    ae_tail -> MULTIPLY ae_term ae_tail
Rule 60    ae_tail -> MODULO ae_term ae_tail
Rule 61    ae_tail -> EXPONENT ae_term ae_tail
Rule 62    ae_tail -> empty
Rule 63    ae_tail2 -> ae_term
Rule 64    ae_tail2 -> ae_tail
Rule 65    ae_tail2 -> empty
Rule 66    relational_expression -> re_term
Rule 67    re_term -> re_factor re_tail2
Rule 68    re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2
Rule 69    re_factor -> arithmetic_expression
Rule 70    re_factor -> INT_LIT
Rule 71    re_factor -> FLT_LIT
Rule 72    re_factor -> BLN_LIT
Rule 73    re_factor -> var_call
Rule 74    re_tail -> GT re_term re_tail2
Rule 75    re_tail -> LT re_term re_tail2
Rule 76    re_tail -> EQ re_term re_tail2
Rule 77    re_tail -> NOT_EQ re_term re_tail2
Rule 78    re_tail -> GT_EQ re_term re_tail2
Rule 79    re_tail -> LT_EQ re_term re_tail2
Rule 80    re_tail2 -> empty
Rule 81    re_tail2 -> re_tail
Rule 82    re_tail2 -> re_term
Rule 83    logical_expression -> le_term
Rule 84    le_term -> le_factor le_tail2
Rule 85    le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2
Rule 86    le_factor -> BLN_LIT
Rule 87    le_factor -> relational_expression
Rule 88    le_factor -> var_call
Rule 89    le_tail -> AND le_term
Rule 90    le_tail -> OR le_term
Rule 91    le_tail -> NOT le_term
Rule 92    le_tail2 -> empty
Rule 93    le_tail2 -> le_tail
Rule 94    le_tail2 -> le_term
Rule 95    var_call -> IDENT
Rule 96    var_call -> IDENT LBRACKET index RBRACKET
Rule 97    list_dec -> list_dtype IDENT listdec_tail
Rule 98    listdec_tail -> COMMA IDENT listdec_tail
Rule 99    listdec_tail -> empty
Rule 100   list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
Rule 101   listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
Rule 102   listinit_tail -> empty
Rule 103   list_dtype -> LIST_INT
Rule 104   list_dtype -> LIST_FLT
Rule 105   list_dtype -> LIST_BLN
Rule 106   list_dtype -> LIST_STR
Rule 107   list_dtype -> LIST_CHR
Rule 108   list_element -> value
Rule 109   list_element -> value COMMA list_element
Rule 110   index -> INT_LIT
Rule 111   index -> IDENT
Rule 112   conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
Rule 113   conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE
Rule 114   conditional_tail -> OTHERWISE LBRACE statements RBRACE
Rule 115   conditional_tail -> empty
Rule 116   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
Rule 117   switch_condition -> SHIFT value COLON statements switch_cond_tail
Rule 118   switch_cond_tail -> switch_condition
Rule 119   switch_cond_tail -> empty
Rule 120   condition -> relational_expression
Rule 121   condition -> logical_expression
Rule 122   loop_statement -> for_loop
Rule 123   loop_statement -> until_loop
Rule 124   loop_statement -> repeat_until
Rule 125   for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
Rule 126   until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
Rule 127   repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
Rule 128   control_variable -> IDENT EQ INT_LIT
Rule 129   control_variable -> var_call
Rule 130   update -> unary
Rule 131   update -> assignment_statement
Rule 132   unary -> value unary_op
Rule 133   unary_op -> PLUS_PLUS
Rule 134   unary_op -> MINUS_MINUS
Rule 135   assignment_statement -> var_call assign_op value
Rule 136   assign_op -> PLUS_EQ
Rule 137   assign_op -> MINUS_EQ
Rule 138   assign_op -> MUL_EQ
Rule 139   assign_op -> DIV_EQ
Rule 140   assign_op -> MOD_EQ
Rule 141   function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
Rule 142   function_statement -> function_call
Rule 143   function_call -> IDENT LPAREN arguments RPAREN
Rule 144   function_call -> output_statement
Rule 145   function_call -> input_statement
Rule 146   arguments -> var_call
Rule 147   arguments -> literal
Rule 148   ret_type -> FUNCTION
Rule 149   ret_type -> function_dtype
Rule 150   function_dtype -> FUNCTION_INT
Rule 151   function_dtype -> FUNCTION_FLT
Rule 152   function_dtype -> FUNCTION_CHR
Rule 153   function_dtype -> FUNCTION_STR
Rule 154   function_dtype -> FUNCTION_BLN
Rule 155   function_dtype -> FUNCTION_LIST_INT
Rule 156   function_dtype -> FUNCTION_LIST_FLT
Rule 157   function_dtype -> FUNCTION_LIST_CHR
Rule 158   function_dtype -> FUNCTION_LIST_STR
Rule 159   function_dtype -> FUNCTION_LIST_BLN
Rule 160   parameters -> var_dec next_parameters
Rule 161   parameters -> empty
Rule 162   next_parameters -> COMMA parameters
Rule 163   revive -> REVIVE value
Rule 164   revive -> empty
Rule 165   output_statement -> DISPLAY value
Rule 166   output_statement -> DISPLAY LPAREN value RPAREN
Rule 167   input_statement -> INPUT LPAREN statements RPAREN
Rule 168   type_cast -> CONVERT_TO_INT LPAREN value RPAREN
Rule 169   type_cast -> CONVERT_TO_FLT LPAREN value RPAREN
Rule 170   type_cast -> CONVERT_TO_BLN LPAREN value RPAREN
Rule 171   type_cast -> CONVERT_TO_STR LPAREN value RPAREN
Rule 172   string_concat -> string_lit stringcon_tail
Rule 173   stringcon_tail -> PLUS string_lit stringcon_tail2
Rule 174   stringcon_tail2 -> stringcon_tail
Rule 175   stringcon_tail2 -> empty
Rule 176   string_lit -> STR_LIT
Rule 177   not_op -> NOT value
Rule 178   arithmetic_op -> PLUS
Rule 179   arithmetic_op -> MINUS
Rule 180   arithmetic_op -> DIVISION
Rule 181   arithmetic_op -> MULTIPLY
Rule 182   arithmetic_op -> MODULO
Rule 183   empty -> <empty>

Terminals, with rules where they appear

AND                  : 89
BIRTH                : 1
BLN                  : 29
BLN_LIT              : 43 72 86
CHECK                : 112
CHR                  : 30
CHR_LIT              : 44
COLON                : 117
COMMA                : 22 25 98 101 109 162
COMMENT              : 
CONVERT_TO_BLN       : 170
CONVERT_TO_FLT       : 169
CONVERT_TO_INT       : 168
CONVERT_TO_STR       : 171
DAY                  : 
DISPLAY              : 165 166
DIVISION             : 58 180
DIV_EQ               : 139
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 24 25 76 100 101 128
EQ_EQ                : 
EXPONENT             : 61
FLT                  : 28
FLT_LIT              : 40 42 54 71
FOR                  : 125
FUNCTION             : 148
FUNCTION_BLN         : 154
FUNCTION_CHR         : 152
FUNCTION_FLT         : 151
FUNCTION_INT         : 150
FUNCTION_LIST_BLN    : 159
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 157
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 156
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 155
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 158
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 
FUNCTION_STR         : 153
GHOST                : 1
GLOBAL               : 15
GT                   : 74
GT_EQ                : 78
IDENT                : 21 22 24 25 95 96 97 98 100 101 111 116 128 141 143
ILLEGAL              : 
IN                   : 
INPUT                : 167
INT                  : 27
INT_LIT              : 39 41 53 70 110 128
LBRACE               : 112 113 114 116 125 126 127 141
LBRACKET             : 96 100 100 101 101
LIST_BLN             : 105
LIST_BLN2D           : 
LIST_CHR             : 107
LIST_CHR2D           : 
LIST_FLT             : 104
LIST_FLT2D           : 
LIST_INT             : 103
LIST_INT2D           : 
LIST_STR             : 106
LIST_STR2D           : 
LPAREN               : 52 68 85 112 113 116 125 126 127 141 143 166 167 168 169 170 171
LT                   : 75
LT_EQ                : 79
MEASURE              : 
MINUS                : 57 179
MINUS_EQ             : 137
MINUS_MINUS          : 134
MODULO               : 60 182
MOD_EQ               : 140
MULTIPLY             : 59 181
MUL_EQ               : 138
NEWLINE              : 
NIGHT                : 
NOT                  : 91 177
NOT_EQ               : 77
OR                   : 90
OTHERWISE            : 114 116
OTHERWISE_CHECK      : 113
PLUS                 : 56 173 178
PLUS_EQ              : 136
PLUS_PLUS            : 133
POW                  : 
RBRACE               : 112 113 114 116 125 126 127 141
RBRACKET             : 96 100 100 101 101
REPEAT               : 127
REVIVE               : 163
RPAREN               : 52 68 85 112 113 116 125 126 127 141 143 166 167 168 169 170 171
SEMICOLON            : 125 125
SHIFT                : 117
SKIP                 : 
STOP                 : 
STR                  : 31
STR_LIT              : 45 176
SWAP                 : 116
TILDE                : 39 40
TYPE                 : 
UNTIL                : 126 127
error                : 

Nonterminals, with rules where they appear

ae_factor            : 51 52
ae_tail              : 56 57 58 59 60 61 64
ae_tail2             : 51 52 52
ae_term              : 50 56 57 58 59 60 61 63
arguments            : 143
arithmetic_expression : 46 69
arithmetic_op        : 
assign_op            : 135
assignment_statement : 7 131
condition            : 112 113
conditional_statement : 2
conditional_tail     : 112
control_variable     : 125
data_type            : 21 24
declarations         : 9 14
empty                : 10 13 20 23 26 62 65 80 92 99 102 115 119 161 164 175
expression           : 8 33
for_loop             : 122
function_call        : 35 142
function_dtype       : 149
function_statement   : 4
global_declarations  : 1
index                : 96 100 101
input_statement      : 145
le_factor            : 84 85
le_tail              : 93
le_tail2             : 84 85 85
le_term              : 83 89 90 91 94
list_dec             : 18
list_dtype           : 97 100
list_element         : 100 101 109
list_init            : 19
listdec_tail         : 97 98
listinit_tail        : 100 101
literal              : 32 147
logical_expression   : 48 121
loop_statement       : 3
negative_val         : 38
next_parameters      : 160
not_op               : 37
output_statement     : 6 144
parameters           : 141 162
program              : 0
re_factor            : 67 68
re_tail              : 81
re_tail2             : 67 68 68 74 75 76 77 78 79
re_term              : 66 74 75 76 77 78 79 82
relational_expression : 47 87 120 125 126 127
repeat_until         : 124
ret_type             : 141
revive               : 141
statements           : 1 12 112 113 114 116 117 125 126 127 141 167
statements_tail      : 2 3 4 5 6 7 8 9 11
string_concat        : 49
string_lit           : 172 173
stringcon_tail       : 172 174
stringcon_tail2      : 173
switch_cond_tail     : 117
switch_condition     : 116 118
switch_statement     : 5
type_cast            : 36
unary                : 130
unary_op             : 132
until_loop           : 123
update               : 125
value                : 24 25 108 109 117 132 135 163 165 166 168 169 170 171 177
var_call             : 15 34 55 73 88 129 135 146
var_dec              : 16 160
var_initialization   : 17
vardec_tail          : 21 22
varinit_tail         : 24 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH global_declarations statements GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . global_declarations statements GHOST
    (14) global_declarations -> . declarations
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (183) empty -> .
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR

  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
    GLOBAL          shift and go to state 5
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22

  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]

    global_declarations            shift and go to state 3
    declarations                   shift and go to state 4
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    empty                          shift and go to state 10
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12

state 3

    (1) program -> BIRTH global_declarations . statements GHOST
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    GHOST           reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 23
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 4

    (14) global_declarations -> declarations .

    CHECK           reduce using rule 14 (global_declarations -> declarations .)
    SWAP            reduce using rule 14 (global_declarations -> declarations .)
    DISPLAY         reduce using rule 14 (global_declarations -> declarations .)
    GLOBAL          reduce using rule 14 (global_declarations -> declarations .)
    FOR             reduce using rule 14 (global_declarations -> declarations .)
    UNTIL           reduce using rule 14 (global_declarations -> declarations .)
    REPEAT          reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION        reduce using rule 14 (global_declarations -> declarations .)
    IDENT           reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_INT    reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_FLT    reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_CHR    reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_STR    reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_BLN    reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_LIST_INT reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_LIST_FLT reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_LIST_CHR reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_LIST_STR reduce using rule 14 (global_declarations -> declarations .)
    FUNCTION_LIST_BLN reduce using rule 14 (global_declarations -> declarations .)
    INPUT           reduce using rule 14 (global_declarations -> declarations .)
    LPAREN          reduce using rule 14 (global_declarations -> declarations .)
    STR_LIT         reduce using rule 14 (global_declarations -> declarations .)
    INT             reduce using rule 14 (global_declarations -> declarations .)
    FLT             reduce using rule 14 (global_declarations -> declarations .)
    BLN             reduce using rule 14 (global_declarations -> declarations .)
    CHR             reduce using rule 14 (global_declarations -> declarations .)
    STR             reduce using rule 14 (global_declarations -> declarations .)
    LIST_INT        reduce using rule 14 (global_declarations -> declarations .)
    LIST_FLT        reduce using rule 14 (global_declarations -> declarations .)
    LIST_BLN        reduce using rule 14 (global_declarations -> declarations .)
    LIST_STR        reduce using rule 14 (global_declarations -> declarations .)
    LIST_CHR        reduce using rule 14 (global_declarations -> declarations .)
    INT_LIT         reduce using rule 14 (global_declarations -> declarations .)
    FLT_LIT         reduce using rule 14 (global_declarations -> declarations .)
    BLN_LIT         reduce using rule 14 (global_declarations -> declarations .)
    GHOST           reduce using rule 14 (global_declarations -> declarations .)


state 5

    (15) declarations -> GLOBAL . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    IDENT           shift and go to state 77

    var_call                       shift and go to state 76

state 6

    (16) declarations -> var_dec .

    CHECK           reduce using rule 16 (declarations -> var_dec .)
    SWAP            reduce using rule 16 (declarations -> var_dec .)
    DISPLAY         reduce using rule 16 (declarations -> var_dec .)
    GLOBAL          reduce using rule 16 (declarations -> var_dec .)
    FOR             reduce using rule 16 (declarations -> var_dec .)
    UNTIL           reduce using rule 16 (declarations -> var_dec .)
    REPEAT          reduce using rule 16 (declarations -> var_dec .)
    FUNCTION        reduce using rule 16 (declarations -> var_dec .)
    IDENT           reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_INT    reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_FLT    reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_CHR    reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_STR    reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_BLN    reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_LIST_INT reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_LIST_FLT reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_LIST_CHR reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_LIST_STR reduce using rule 16 (declarations -> var_dec .)
    FUNCTION_LIST_BLN reduce using rule 16 (declarations -> var_dec .)
    INPUT           reduce using rule 16 (declarations -> var_dec .)
    LPAREN          reduce using rule 16 (declarations -> var_dec .)
    STR_LIT         reduce using rule 16 (declarations -> var_dec .)
    INT             reduce using rule 16 (declarations -> var_dec .)
    FLT             reduce using rule 16 (declarations -> var_dec .)
    BLN             reduce using rule 16 (declarations -> var_dec .)
    CHR             reduce using rule 16 (declarations -> var_dec .)
    STR             reduce using rule 16 (declarations -> var_dec .)
    LIST_INT        reduce using rule 16 (declarations -> var_dec .)
    LIST_FLT        reduce using rule 16 (declarations -> var_dec .)
    LIST_BLN        reduce using rule 16 (declarations -> var_dec .)
    LIST_STR        reduce using rule 16 (declarations -> var_dec .)
    LIST_CHR        reduce using rule 16 (declarations -> var_dec .)
    INT_LIT         reduce using rule 16 (declarations -> var_dec .)
    FLT_LIT         reduce using rule 16 (declarations -> var_dec .)
    BLN_LIT         reduce using rule 16 (declarations -> var_dec .)
    GHOST           reduce using rule 16 (declarations -> var_dec .)
    RBRACE          reduce using rule 16 (declarations -> var_dec .)
    RPAREN          reduce using rule 16 (declarations -> var_dec .)
    REVIVE          reduce using rule 16 (declarations -> var_dec .)
    SHIFT           reduce using rule 16 (declarations -> var_dec .)
    OTHERWISE       reduce using rule 16 (declarations -> var_dec .)


state 7

    (17) declarations -> var_initialization .

    CHECK           reduce using rule 17 (declarations -> var_initialization .)
    SWAP            reduce using rule 17 (declarations -> var_initialization .)
    DISPLAY         reduce using rule 17 (declarations -> var_initialization .)
    GLOBAL          reduce using rule 17 (declarations -> var_initialization .)
    FOR             reduce using rule 17 (declarations -> var_initialization .)
    UNTIL           reduce using rule 17 (declarations -> var_initialization .)
    REPEAT          reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION        reduce using rule 17 (declarations -> var_initialization .)
    IDENT           reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_INT    reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_FLT    reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_CHR    reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_STR    reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_BLN    reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_LIST_INT reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_LIST_FLT reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_LIST_CHR reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_LIST_STR reduce using rule 17 (declarations -> var_initialization .)
    FUNCTION_LIST_BLN reduce using rule 17 (declarations -> var_initialization .)
    INPUT           reduce using rule 17 (declarations -> var_initialization .)
    LPAREN          reduce using rule 17 (declarations -> var_initialization .)
    STR_LIT         reduce using rule 17 (declarations -> var_initialization .)
    INT             reduce using rule 17 (declarations -> var_initialization .)
    FLT             reduce using rule 17 (declarations -> var_initialization .)
    BLN             reduce using rule 17 (declarations -> var_initialization .)
    CHR             reduce using rule 17 (declarations -> var_initialization .)
    STR             reduce using rule 17 (declarations -> var_initialization .)
    LIST_INT        reduce using rule 17 (declarations -> var_initialization .)
    LIST_FLT        reduce using rule 17 (declarations -> var_initialization .)
    LIST_BLN        reduce using rule 17 (declarations -> var_initialization .)
    LIST_STR        reduce using rule 17 (declarations -> var_initialization .)
    LIST_CHR        reduce using rule 17 (declarations -> var_initialization .)
    INT_LIT         reduce using rule 17 (declarations -> var_initialization .)
    FLT_LIT         reduce using rule 17 (declarations -> var_initialization .)
    BLN_LIT         reduce using rule 17 (declarations -> var_initialization .)
    GHOST           reduce using rule 17 (declarations -> var_initialization .)
    RBRACE          reduce using rule 17 (declarations -> var_initialization .)
    RPAREN          reduce using rule 17 (declarations -> var_initialization .)
    REVIVE          reduce using rule 17 (declarations -> var_initialization .)
    SHIFT           reduce using rule 17 (declarations -> var_initialization .)
    OTHERWISE       reduce using rule 17 (declarations -> var_initialization .)


state 8

    (18) declarations -> list_dec .

    CHECK           reduce using rule 18 (declarations -> list_dec .)
    SWAP            reduce using rule 18 (declarations -> list_dec .)
    DISPLAY         reduce using rule 18 (declarations -> list_dec .)
    GLOBAL          reduce using rule 18 (declarations -> list_dec .)
    FOR             reduce using rule 18 (declarations -> list_dec .)
    UNTIL           reduce using rule 18 (declarations -> list_dec .)
    REPEAT          reduce using rule 18 (declarations -> list_dec .)
    FUNCTION        reduce using rule 18 (declarations -> list_dec .)
    IDENT           reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_INT    reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_FLT    reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_CHR    reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_STR    reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_BLN    reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_LIST_INT reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_LIST_FLT reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_LIST_CHR reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_LIST_STR reduce using rule 18 (declarations -> list_dec .)
    FUNCTION_LIST_BLN reduce using rule 18 (declarations -> list_dec .)
    INPUT           reduce using rule 18 (declarations -> list_dec .)
    LPAREN          reduce using rule 18 (declarations -> list_dec .)
    STR_LIT         reduce using rule 18 (declarations -> list_dec .)
    INT             reduce using rule 18 (declarations -> list_dec .)
    FLT             reduce using rule 18 (declarations -> list_dec .)
    BLN             reduce using rule 18 (declarations -> list_dec .)
    CHR             reduce using rule 18 (declarations -> list_dec .)
    STR             reduce using rule 18 (declarations -> list_dec .)
    LIST_INT        reduce using rule 18 (declarations -> list_dec .)
    LIST_FLT        reduce using rule 18 (declarations -> list_dec .)
    LIST_BLN        reduce using rule 18 (declarations -> list_dec .)
    LIST_STR        reduce using rule 18 (declarations -> list_dec .)
    LIST_CHR        reduce using rule 18 (declarations -> list_dec .)
    INT_LIT         reduce using rule 18 (declarations -> list_dec .)
    FLT_LIT         reduce using rule 18 (declarations -> list_dec .)
    BLN_LIT         reduce using rule 18 (declarations -> list_dec .)
    GHOST           reduce using rule 18 (declarations -> list_dec .)
    RBRACE          reduce using rule 18 (declarations -> list_dec .)
    RPAREN          reduce using rule 18 (declarations -> list_dec .)
    REVIVE          reduce using rule 18 (declarations -> list_dec .)
    SHIFT           reduce using rule 18 (declarations -> list_dec .)
    OTHERWISE       reduce using rule 18 (declarations -> list_dec .)


state 9

    (19) declarations -> list_init .

    CHECK           reduce using rule 19 (declarations -> list_init .)
    SWAP            reduce using rule 19 (declarations -> list_init .)
    DISPLAY         reduce using rule 19 (declarations -> list_init .)
    GLOBAL          reduce using rule 19 (declarations -> list_init .)
    FOR             reduce using rule 19 (declarations -> list_init .)
    UNTIL           reduce using rule 19 (declarations -> list_init .)
    REPEAT          reduce using rule 19 (declarations -> list_init .)
    FUNCTION        reduce using rule 19 (declarations -> list_init .)
    IDENT           reduce using rule 19 (declarations -> list_init .)
    FUNCTION_INT    reduce using rule 19 (declarations -> list_init .)
    FUNCTION_FLT    reduce using rule 19 (declarations -> list_init .)
    FUNCTION_CHR    reduce using rule 19 (declarations -> list_init .)
    FUNCTION_STR    reduce using rule 19 (declarations -> list_init .)
    FUNCTION_BLN    reduce using rule 19 (declarations -> list_init .)
    FUNCTION_LIST_INT reduce using rule 19 (declarations -> list_init .)
    FUNCTION_LIST_FLT reduce using rule 19 (declarations -> list_init .)
    FUNCTION_LIST_CHR reduce using rule 19 (declarations -> list_init .)
    FUNCTION_LIST_STR reduce using rule 19 (declarations -> list_init .)
    FUNCTION_LIST_BLN reduce using rule 19 (declarations -> list_init .)
    INPUT           reduce using rule 19 (declarations -> list_init .)
    LPAREN          reduce using rule 19 (declarations -> list_init .)
    STR_LIT         reduce using rule 19 (declarations -> list_init .)
    INT             reduce using rule 19 (declarations -> list_init .)
    FLT             reduce using rule 19 (declarations -> list_init .)
    BLN             reduce using rule 19 (declarations -> list_init .)
    CHR             reduce using rule 19 (declarations -> list_init .)
    STR             reduce using rule 19 (declarations -> list_init .)
    LIST_INT        reduce using rule 19 (declarations -> list_init .)
    LIST_FLT        reduce using rule 19 (declarations -> list_init .)
    LIST_BLN        reduce using rule 19 (declarations -> list_init .)
    LIST_STR        reduce using rule 19 (declarations -> list_init .)
    LIST_CHR        reduce using rule 19 (declarations -> list_init .)
    INT_LIT         reduce using rule 19 (declarations -> list_init .)
    FLT_LIT         reduce using rule 19 (declarations -> list_init .)
    BLN_LIT         reduce using rule 19 (declarations -> list_init .)
    GHOST           reduce using rule 19 (declarations -> list_init .)
    RBRACE          reduce using rule 19 (declarations -> list_init .)
    RPAREN          reduce using rule 19 (declarations -> list_init .)
    REVIVE          reduce using rule 19 (declarations -> list_init .)
    SHIFT           reduce using rule 19 (declarations -> list_init .)
    OTHERWISE       reduce using rule 19 (declarations -> list_init .)


state 10

    (20) declarations -> empty .

    CHECK           reduce using rule 20 (declarations -> empty .)
    SWAP            reduce using rule 20 (declarations -> empty .)
    DISPLAY         reduce using rule 20 (declarations -> empty .)
    GLOBAL          reduce using rule 20 (declarations -> empty .)
    FOR             reduce using rule 20 (declarations -> empty .)
    UNTIL           reduce using rule 20 (declarations -> empty .)
    REPEAT          reduce using rule 20 (declarations -> empty .)
    FUNCTION        reduce using rule 20 (declarations -> empty .)
    IDENT           reduce using rule 20 (declarations -> empty .)
    FUNCTION_INT    reduce using rule 20 (declarations -> empty .)
    FUNCTION_FLT    reduce using rule 20 (declarations -> empty .)
    FUNCTION_CHR    reduce using rule 20 (declarations -> empty .)
    FUNCTION_STR    reduce using rule 20 (declarations -> empty .)
    FUNCTION_BLN    reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_INT reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_FLT reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_CHR reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_STR reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_BLN reduce using rule 20 (declarations -> empty .)
    INPUT           reduce using rule 20 (declarations -> empty .)
    LPAREN          reduce using rule 20 (declarations -> empty .)
    STR_LIT         reduce using rule 20 (declarations -> empty .)
    INT             reduce using rule 20 (declarations -> empty .)
    FLT             reduce using rule 20 (declarations -> empty .)
    BLN             reduce using rule 20 (declarations -> empty .)
    CHR             reduce using rule 20 (declarations -> empty .)
    STR             reduce using rule 20 (declarations -> empty .)
    LIST_INT        reduce using rule 20 (declarations -> empty .)
    LIST_FLT        reduce using rule 20 (declarations -> empty .)
    LIST_BLN        reduce using rule 20 (declarations -> empty .)
    LIST_STR        reduce using rule 20 (declarations -> empty .)
    LIST_CHR        reduce using rule 20 (declarations -> empty .)
    INT_LIT         reduce using rule 20 (declarations -> empty .)
    FLT_LIT         reduce using rule 20 (declarations -> empty .)
    BLN_LIT         reduce using rule 20 (declarations -> empty .)
    GHOST           reduce using rule 20 (declarations -> empty .)


state 11

    (21) var_dec -> data_type . IDENT vardec_tail
    (24) var_initialization -> data_type . IDENT EQ value varinit_tail

    IDENT           shift and go to state 78


state 12

    (97) list_dec -> list_dtype . IDENT listdec_tail
    (100) list_init -> list_dtype . IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail

    IDENT           shift and go to state 79


state 13

    (27) data_type -> INT .

    IDENT           reduce using rule 27 (data_type -> INT .)


state 14

    (28) data_type -> FLT .

    IDENT           reduce using rule 28 (data_type -> FLT .)


state 15

    (29) data_type -> BLN .

    IDENT           reduce using rule 29 (data_type -> BLN .)


state 16

    (30) data_type -> CHR .

    IDENT           reduce using rule 30 (data_type -> CHR .)


state 17

    (31) data_type -> STR .

    IDENT           reduce using rule 31 (data_type -> STR .)


state 18

    (103) list_dtype -> LIST_INT .

    IDENT           reduce using rule 103 (list_dtype -> LIST_INT .)


state 19

    (104) list_dtype -> LIST_FLT .

    IDENT           reduce using rule 104 (list_dtype -> LIST_FLT .)


state 20

    (105) list_dtype -> LIST_BLN .

    IDENT           reduce using rule 105 (list_dtype -> LIST_BLN .)


state 21

    (106) list_dtype -> LIST_STR .

    IDENT           reduce using rule 106 (list_dtype -> LIST_STR .)


state 22

    (107) list_dtype -> LIST_CHR .

    IDENT           reduce using rule 107 (list_dtype -> LIST_CHR .)


state 23

    (1) program -> BIRTH global_declarations statements . GHOST

    GHOST           shift and go to state 80


state 24

    (2) statements -> conditional_statement . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    conditional_statement          shift and go to state 24
    statements_tail                shift and go to state 81
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 25

    (3) statements -> loop_statement . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    loop_statement                 shift and go to state 25
    statements_tail                shift and go to state 84
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 26

    (4) statements -> function_statement . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    function_statement             shift and go to state 26
    statements_tail                shift and go to state 85
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 27

    (5) statements -> switch_statement . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    switch_statement               shift and go to state 27
    statements_tail                shift and go to state 86
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 28

    (6) statements -> output_statement . statements_tail
    (144) function_call -> output_statement .
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! reduce/reduce conflict for GHOST resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for REVIVE resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for SHIFT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for CHECK resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for SWAP resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FOR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for IDENT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for INT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FLT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for BLN resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for CHR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for STR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 144 (function_call -> output_statement .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 144 (function_call -> output_statement .)
  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 144 (function_call -> output_statement .)
    RBRACE          reduce using rule 144 (function_call -> output_statement .)
    RPAREN          reduce using rule 144 (function_call -> output_statement .)
    REVIVE          reduce using rule 144 (function_call -> output_statement .)
    SHIFT           reduce using rule 144 (function_call -> output_statement .)
    OTHERWISE       reduce using rule 144 (function_call -> output_statement .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 144 (function_call -> output_statement .) ]
  ! SWAP            [ reduce using rule 144 (function_call -> output_statement .) ]
  ! DISPLAY         [ reduce using rule 144 (function_call -> output_statement .) ]
  ! GLOBAL          [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FOR             [ reduce using rule 144 (function_call -> output_statement .) ]
  ! UNTIL           [ reduce using rule 144 (function_call -> output_statement .) ]
  ! REPEAT          [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION        [ reduce using rule 144 (function_call -> output_statement .) ]
  ! IDENT           [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_INT    [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_FLT    [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_CHR    [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_STR    [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_BLN    [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 144 (function_call -> output_statement .) ]
  ! INPUT           [ reduce using rule 144 (function_call -> output_statement .) ]
  ! LPAREN          [ reduce using rule 144 (function_call -> output_statement .) ]
  ! STR_LIT         [ reduce using rule 144 (function_call -> output_statement .) ]
  ! INT             [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FLT             [ reduce using rule 144 (function_call -> output_statement .) ]
  ! BLN             [ reduce using rule 144 (function_call -> output_statement .) ]
  ! CHR             [ reduce using rule 144 (function_call -> output_statement .) ]
  ! STR             [ reduce using rule 144 (function_call -> output_statement .) ]
  ! LIST_INT        [ reduce using rule 144 (function_call -> output_statement .) ]
  ! LIST_FLT        [ reduce using rule 144 (function_call -> output_statement .) ]
  ! LIST_BLN        [ reduce using rule 144 (function_call -> output_statement .) ]
  ! LIST_STR        [ reduce using rule 144 (function_call -> output_statement .) ]
  ! LIST_CHR        [ reduce using rule 144 (function_call -> output_statement .) ]
  ! INT_LIT         [ reduce using rule 144 (function_call -> output_statement .) ]
  ! FLT_LIT         [ reduce using rule 144 (function_call -> output_statement .) ]
  ! BLN_LIT         [ reduce using rule 144 (function_call -> output_statement .) ]
  ! GHOST           [ reduce using rule 183 (empty -> .) ]
  ! RBRACE          [ reduce using rule 183 (empty -> .) ]
  ! RPAREN          [ reduce using rule 183 (empty -> .) ]
  ! REVIVE          [ reduce using rule 183 (empty -> .) ]
  ! SHIFT           [ reduce using rule 183 (empty -> .) ]
  ! OTHERWISE       [ reduce using rule 183 (empty -> .) ]
  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    output_statement               shift and go to state 28
    statements_tail                shift and go to state 87
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 29

    (7) statements -> assignment_statement . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    assignment_statement           shift and go to state 29
    statements_tail                shift and go to state 88
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 30

    (8) statements -> expression . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    expression                     shift and go to state 30
    statements_tail                shift and go to state 89
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    declarations                   shift and go to state 31
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 31

    (9) statements -> declarations . statements_tail
    (11) statements_tail -> . statements_tail
    (12) statements_tail -> . statements
    (13) statements_tail -> . empty
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (183) empty -> .
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    declarations                   shift and go to state 31
    statements_tail                shift and go to state 90
    statements                     shift and go to state 82
    empty                          shift and go to state 83
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 32

    (10) statements -> empty .
    (20) declarations -> empty .

  ! reduce/reduce conflict for GHOST resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 10 (statements -> empty .)
    GHOST           reduce using rule 10 (statements -> empty .)
    RBRACE          reduce using rule 10 (statements -> empty .)
    RPAREN          reduce using rule 10 (statements -> empty .)
    REVIVE          reduce using rule 10 (statements -> empty .)
    SHIFT           reduce using rule 10 (statements -> empty .)
    OTHERWISE       reduce using rule 10 (statements -> empty .)
    CHECK           reduce using rule 20 (declarations -> empty .)
    SWAP            reduce using rule 20 (declarations -> empty .)
    DISPLAY         reduce using rule 20 (declarations -> empty .)
    GLOBAL          reduce using rule 20 (declarations -> empty .)
    FOR             reduce using rule 20 (declarations -> empty .)
    UNTIL           reduce using rule 20 (declarations -> empty .)
    REPEAT          reduce using rule 20 (declarations -> empty .)
    FUNCTION        reduce using rule 20 (declarations -> empty .)
    IDENT           reduce using rule 20 (declarations -> empty .)
    FUNCTION_INT    reduce using rule 20 (declarations -> empty .)
    FUNCTION_FLT    reduce using rule 20 (declarations -> empty .)
    FUNCTION_CHR    reduce using rule 20 (declarations -> empty .)
    FUNCTION_STR    reduce using rule 20 (declarations -> empty .)
    FUNCTION_BLN    reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_INT reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_FLT reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_CHR reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_STR reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_BLN reduce using rule 20 (declarations -> empty .)
    INPUT           reduce using rule 20 (declarations -> empty .)
    LPAREN          reduce using rule 20 (declarations -> empty .)
    STR_LIT         reduce using rule 20 (declarations -> empty .)
    INT             reduce using rule 20 (declarations -> empty .)
    FLT             reduce using rule 20 (declarations -> empty .)
    BLN             reduce using rule 20 (declarations -> empty .)
    CHR             reduce using rule 20 (declarations -> empty .)
    STR             reduce using rule 20 (declarations -> empty .)
    LIST_INT        reduce using rule 20 (declarations -> empty .)
    LIST_FLT        reduce using rule 20 (declarations -> empty .)
    LIST_BLN        reduce using rule 20 (declarations -> empty .)
    LIST_STR        reduce using rule 20 (declarations -> empty .)
    LIST_CHR        reduce using rule 20 (declarations -> empty .)
    INT_LIT         reduce using rule 20 (declarations -> empty .)
    FLT_LIT         reduce using rule 20 (declarations -> empty .)
    BLN_LIT         reduce using rule 20 (declarations -> empty .)

  ! GHOST           [ reduce using rule 20 (declarations -> empty .) ]
  ! RBRACE          [ reduce using rule 20 (declarations -> empty .) ]
  ! RPAREN          [ reduce using rule 20 (declarations -> empty .) ]
  ! REVIVE          [ reduce using rule 20 (declarations -> empty .) ]
  ! SHIFT           [ reduce using rule 20 (declarations -> empty .) ]
  ! OTHERWISE       [ reduce using rule 20 (declarations -> empty .) ]


state 33

    (112) conditional_statement -> CHECK . LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail

    LPAREN          shift and go to state 91


state 34

    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (68) re_term -> LPAREN . re_factor re_tail2 RPAREN re_tail2
    (85) le_term -> LPAREN . le_factor le_tail2 RPAREN le_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2

    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75
    IDENT           shift and go to state 77
    LPAREN          shift and go to state 92

    ae_factor                      shift and go to state 93
    re_factor                      shift and go to state 94
    le_factor                      shift and go to state 95
    var_call                       shift and go to state 96
    arithmetic_expression          shift and go to state 97
    relational_expression          shift and go to state 98
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55

state 35

    (122) loop_statement -> for_loop .

    CHECK           reduce using rule 122 (loop_statement -> for_loop .)
    SWAP            reduce using rule 122 (loop_statement -> for_loop .)
    DISPLAY         reduce using rule 122 (loop_statement -> for_loop .)
    GLOBAL          reduce using rule 122 (loop_statement -> for_loop .)
    FOR             reduce using rule 122 (loop_statement -> for_loop .)
    UNTIL           reduce using rule 122 (loop_statement -> for_loop .)
    REPEAT          reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION        reduce using rule 122 (loop_statement -> for_loop .)
    IDENT           reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_INT    reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_FLT    reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_CHR    reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_STR    reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_BLN    reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_LIST_INT reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_LIST_FLT reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_LIST_CHR reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_LIST_STR reduce using rule 122 (loop_statement -> for_loop .)
    FUNCTION_LIST_BLN reduce using rule 122 (loop_statement -> for_loop .)
    INPUT           reduce using rule 122 (loop_statement -> for_loop .)
    LPAREN          reduce using rule 122 (loop_statement -> for_loop .)
    STR_LIT         reduce using rule 122 (loop_statement -> for_loop .)
    INT             reduce using rule 122 (loop_statement -> for_loop .)
    FLT             reduce using rule 122 (loop_statement -> for_loop .)
    BLN             reduce using rule 122 (loop_statement -> for_loop .)
    CHR             reduce using rule 122 (loop_statement -> for_loop .)
    STR             reduce using rule 122 (loop_statement -> for_loop .)
    LIST_INT        reduce using rule 122 (loop_statement -> for_loop .)
    LIST_FLT        reduce using rule 122 (loop_statement -> for_loop .)
    LIST_BLN        reduce using rule 122 (loop_statement -> for_loop .)
    LIST_STR        reduce using rule 122 (loop_statement -> for_loop .)
    LIST_CHR        reduce using rule 122 (loop_statement -> for_loop .)
    INT_LIT         reduce using rule 122 (loop_statement -> for_loop .)
    FLT_LIT         reduce using rule 122 (loop_statement -> for_loop .)
    BLN_LIT         reduce using rule 122 (loop_statement -> for_loop .)
    GHOST           reduce using rule 122 (loop_statement -> for_loop .)
    RBRACE          reduce using rule 122 (loop_statement -> for_loop .)
    RPAREN          reduce using rule 122 (loop_statement -> for_loop .)
    REVIVE          reduce using rule 122 (loop_statement -> for_loop .)
    SHIFT           reduce using rule 122 (loop_statement -> for_loop .)
    OTHERWISE       reduce using rule 122 (loop_statement -> for_loop .)


state 36

    (123) loop_statement -> until_loop .

    CHECK           reduce using rule 123 (loop_statement -> until_loop .)
    SWAP            reduce using rule 123 (loop_statement -> until_loop .)
    DISPLAY         reduce using rule 123 (loop_statement -> until_loop .)
    GLOBAL          reduce using rule 123 (loop_statement -> until_loop .)
    FOR             reduce using rule 123 (loop_statement -> until_loop .)
    UNTIL           reduce using rule 123 (loop_statement -> until_loop .)
    REPEAT          reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION        reduce using rule 123 (loop_statement -> until_loop .)
    IDENT           reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_INT    reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_FLT    reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_CHR    reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_STR    reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_BLN    reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_LIST_INT reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_LIST_FLT reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_LIST_CHR reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_LIST_STR reduce using rule 123 (loop_statement -> until_loop .)
    FUNCTION_LIST_BLN reduce using rule 123 (loop_statement -> until_loop .)
    INPUT           reduce using rule 123 (loop_statement -> until_loop .)
    LPAREN          reduce using rule 123 (loop_statement -> until_loop .)
    STR_LIT         reduce using rule 123 (loop_statement -> until_loop .)
    INT             reduce using rule 123 (loop_statement -> until_loop .)
    FLT             reduce using rule 123 (loop_statement -> until_loop .)
    BLN             reduce using rule 123 (loop_statement -> until_loop .)
    CHR             reduce using rule 123 (loop_statement -> until_loop .)
    STR             reduce using rule 123 (loop_statement -> until_loop .)
    LIST_INT        reduce using rule 123 (loop_statement -> until_loop .)
    LIST_FLT        reduce using rule 123 (loop_statement -> until_loop .)
    LIST_BLN        reduce using rule 123 (loop_statement -> until_loop .)
    LIST_STR        reduce using rule 123 (loop_statement -> until_loop .)
    LIST_CHR        reduce using rule 123 (loop_statement -> until_loop .)
    INT_LIT         reduce using rule 123 (loop_statement -> until_loop .)
    FLT_LIT         reduce using rule 123 (loop_statement -> until_loop .)
    BLN_LIT         reduce using rule 123 (loop_statement -> until_loop .)
    GHOST           reduce using rule 123 (loop_statement -> until_loop .)
    RBRACE          reduce using rule 123 (loop_statement -> until_loop .)
    RPAREN          reduce using rule 123 (loop_statement -> until_loop .)
    REVIVE          reduce using rule 123 (loop_statement -> until_loop .)
    SHIFT           reduce using rule 123 (loop_statement -> until_loop .)
    OTHERWISE       reduce using rule 123 (loop_statement -> until_loop .)


state 37

    (124) loop_statement -> repeat_until .

    CHECK           reduce using rule 124 (loop_statement -> repeat_until .)
    SWAP            reduce using rule 124 (loop_statement -> repeat_until .)
    DISPLAY         reduce using rule 124 (loop_statement -> repeat_until .)
    GLOBAL          reduce using rule 124 (loop_statement -> repeat_until .)
    FOR             reduce using rule 124 (loop_statement -> repeat_until .)
    UNTIL           reduce using rule 124 (loop_statement -> repeat_until .)
    REPEAT          reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION        reduce using rule 124 (loop_statement -> repeat_until .)
    IDENT           reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_INT    reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_FLT    reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_CHR    reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_STR    reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_BLN    reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_LIST_INT reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_LIST_FLT reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_LIST_CHR reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_LIST_STR reduce using rule 124 (loop_statement -> repeat_until .)
    FUNCTION_LIST_BLN reduce using rule 124 (loop_statement -> repeat_until .)
    INPUT           reduce using rule 124 (loop_statement -> repeat_until .)
    LPAREN          reduce using rule 124 (loop_statement -> repeat_until .)
    STR_LIT         reduce using rule 124 (loop_statement -> repeat_until .)
    INT             reduce using rule 124 (loop_statement -> repeat_until .)
    FLT             reduce using rule 124 (loop_statement -> repeat_until .)
    BLN             reduce using rule 124 (loop_statement -> repeat_until .)
    CHR             reduce using rule 124 (loop_statement -> repeat_until .)
    STR             reduce using rule 124 (loop_statement -> repeat_until .)
    LIST_INT        reduce using rule 124 (loop_statement -> repeat_until .)
    LIST_FLT        reduce using rule 124 (loop_statement -> repeat_until .)
    LIST_BLN        reduce using rule 124 (loop_statement -> repeat_until .)
    LIST_STR        reduce using rule 124 (loop_statement -> repeat_until .)
    LIST_CHR        reduce using rule 124 (loop_statement -> repeat_until .)
    INT_LIT         reduce using rule 124 (loop_statement -> repeat_until .)
    FLT_LIT         reduce using rule 124 (loop_statement -> repeat_until .)
    BLN_LIT         reduce using rule 124 (loop_statement -> repeat_until .)
    GHOST           reduce using rule 124 (loop_statement -> repeat_until .)
    RBRACE          reduce using rule 124 (loop_statement -> repeat_until .)
    RPAREN          reduce using rule 124 (loop_statement -> repeat_until .)
    REVIVE          reduce using rule 124 (loop_statement -> repeat_until .)
    SHIFT           reduce using rule 124 (loop_statement -> repeat_until .)
    OTHERWISE       reduce using rule 124 (loop_statement -> repeat_until .)


state 38

    (141) function_statement -> ret_type . IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE

    IDENT           shift and go to state 99


state 39

    (143) function_call -> IDENT . LPAREN arguments RPAREN
    (95) var_call -> IDENT .
    (96) var_call -> IDENT . LBRACKET index RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 100
    PLUS_EQ         reduce using rule 95 (var_call -> IDENT .)
    MINUS_EQ        reduce using rule 95 (var_call -> IDENT .)
    MUL_EQ          reduce using rule 95 (var_call -> IDENT .)
    DIV_EQ          reduce using rule 95 (var_call -> IDENT .)
    MOD_EQ          reduce using rule 95 (var_call -> IDENT .)
    PLUS            reduce using rule 95 (var_call -> IDENT .)
    MINUS           reduce using rule 95 (var_call -> IDENT .)
    DIVISION        reduce using rule 95 (var_call -> IDENT .)
    MULTIPLY        reduce using rule 95 (var_call -> IDENT .)
    MODULO          reduce using rule 95 (var_call -> IDENT .)
    EXPONENT        reduce using rule 95 (var_call -> IDENT .)
    INT_LIT         reduce using rule 95 (var_call -> IDENT .)
    FLT_LIT         reduce using rule 95 (var_call -> IDENT .)
    IDENT           reduce using rule 95 (var_call -> IDENT .)
    CHECK           reduce using rule 95 (var_call -> IDENT .)
    SWAP            reduce using rule 95 (var_call -> IDENT .)
    DISPLAY         reduce using rule 95 (var_call -> IDENT .)
    GLOBAL          reduce using rule 95 (var_call -> IDENT .)
    FOR             reduce using rule 95 (var_call -> IDENT .)
    UNTIL           reduce using rule 95 (var_call -> IDENT .)
    REPEAT          reduce using rule 95 (var_call -> IDENT .)
    FUNCTION        reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_INT    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_FLT    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_CHR    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_STR    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_BLN    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_INT reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_FLT reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_CHR reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_STR reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_BLN reduce using rule 95 (var_call -> IDENT .)
    INPUT           reduce using rule 95 (var_call -> IDENT .)
    STR_LIT         reduce using rule 95 (var_call -> IDENT .)
    INT             reduce using rule 95 (var_call -> IDENT .)
    FLT             reduce using rule 95 (var_call -> IDENT .)
    BLN             reduce using rule 95 (var_call -> IDENT .)
    CHR             reduce using rule 95 (var_call -> IDENT .)
    STR             reduce using rule 95 (var_call -> IDENT .)
    LIST_INT        reduce using rule 95 (var_call -> IDENT .)
    LIST_FLT        reduce using rule 95 (var_call -> IDENT .)
    LIST_BLN        reduce using rule 95 (var_call -> IDENT .)
    LIST_STR        reduce using rule 95 (var_call -> IDENT .)
    LIST_CHR        reduce using rule 95 (var_call -> IDENT .)
    BLN_LIT         reduce using rule 95 (var_call -> IDENT .)
    GHOST           reduce using rule 95 (var_call -> IDENT .)
    GT              reduce using rule 95 (var_call -> IDENT .)
    LT              reduce using rule 95 (var_call -> IDENT .)
    EQ              reduce using rule 95 (var_call -> IDENT .)
    NOT_EQ          reduce using rule 95 (var_call -> IDENT .)
    GT_EQ           reduce using rule 95 (var_call -> IDENT .)
    LT_EQ           reduce using rule 95 (var_call -> IDENT .)
    AND             reduce using rule 95 (var_call -> IDENT .)
    OR              reduce using rule 95 (var_call -> IDENT .)
    NOT             reduce using rule 95 (var_call -> IDENT .)
    RBRACE          reduce using rule 95 (var_call -> IDENT .)
    RPAREN          reduce using rule 95 (var_call -> IDENT .)
    REVIVE          reduce using rule 95 (var_call -> IDENT .)
    SHIFT           reduce using rule 95 (var_call -> IDENT .)
    OTHERWISE       reduce using rule 95 (var_call -> IDENT .)
    LBRACKET        shift and go to state 101

  ! LPAREN          [ reduce using rule 95 (var_call -> IDENT .) ]


state 40

    (142) function_statement -> function_call .

    CHECK           reduce using rule 142 (function_statement -> function_call .)
    SWAP            reduce using rule 142 (function_statement -> function_call .)
    DISPLAY         reduce using rule 142 (function_statement -> function_call .)
    GLOBAL          reduce using rule 142 (function_statement -> function_call .)
    FOR             reduce using rule 142 (function_statement -> function_call .)
    UNTIL           reduce using rule 142 (function_statement -> function_call .)
    REPEAT          reduce using rule 142 (function_statement -> function_call .)
    FUNCTION        reduce using rule 142 (function_statement -> function_call .)
    IDENT           reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_INT    reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_FLT    reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_CHR    reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_STR    reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_BLN    reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_LIST_INT reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_LIST_FLT reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_LIST_CHR reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_LIST_STR reduce using rule 142 (function_statement -> function_call .)
    FUNCTION_LIST_BLN reduce using rule 142 (function_statement -> function_call .)
    INPUT           reduce using rule 142 (function_statement -> function_call .)
    LPAREN          reduce using rule 142 (function_statement -> function_call .)
    STR_LIT         reduce using rule 142 (function_statement -> function_call .)
    INT             reduce using rule 142 (function_statement -> function_call .)
    FLT             reduce using rule 142 (function_statement -> function_call .)
    BLN             reduce using rule 142 (function_statement -> function_call .)
    CHR             reduce using rule 142 (function_statement -> function_call .)
    STR             reduce using rule 142 (function_statement -> function_call .)
    LIST_INT        reduce using rule 142 (function_statement -> function_call .)
    LIST_FLT        reduce using rule 142 (function_statement -> function_call .)
    LIST_BLN        reduce using rule 142 (function_statement -> function_call .)
    LIST_STR        reduce using rule 142 (function_statement -> function_call .)
    LIST_CHR        reduce using rule 142 (function_statement -> function_call .)
    INT_LIT         reduce using rule 142 (function_statement -> function_call .)
    FLT_LIT         reduce using rule 142 (function_statement -> function_call .)
    BLN_LIT         reduce using rule 142 (function_statement -> function_call .)
    GHOST           reduce using rule 142 (function_statement -> function_call .)
    RBRACE          reduce using rule 142 (function_statement -> function_call .)
    RPAREN          reduce using rule 142 (function_statement -> function_call .)
    REVIVE          reduce using rule 142 (function_statement -> function_call .)
    SHIFT           reduce using rule 142 (function_statement -> function_call .)
    OTHERWISE       reduce using rule 142 (function_statement -> function_call .)


state 41

    (116) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE

    LPAREN          shift and go to state 102


state 42

    (165) output_statement -> DISPLAY . value
    (166) output_statement -> DISPLAY . LPAREN value RPAREN
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    LPAREN          shift and go to state 104
    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68

    value                          shift and go to state 103
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 43

    (135) assignment_statement -> var_call . assign_op value
    (55) ae_factor -> var_call .
    (73) re_factor -> var_call .
    (88) le_factor -> var_call .
    (136) assign_op -> . PLUS_EQ
    (137) assign_op -> . MINUS_EQ
    (138) assign_op -> . MUL_EQ
    (139) assign_op -> . DIV_EQ
    (140) assign_op -> . MOD_EQ

  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 55 (ae_factor -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    CHECK           reduce using rule 55 (ae_factor -> var_call .)
    SWAP            reduce using rule 55 (ae_factor -> var_call .)
    DISPLAY         reduce using rule 55 (ae_factor -> var_call .)
    GLOBAL          reduce using rule 55 (ae_factor -> var_call .)
    FOR             reduce using rule 55 (ae_factor -> var_call .)
    UNTIL           reduce using rule 55 (ae_factor -> var_call .)
    REPEAT          reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION        reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_INT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_FLT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_CHR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_STR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_BLN    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_INT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_FLT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_CHR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_STR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_BLN reduce using rule 55 (ae_factor -> var_call .)
    INPUT           reduce using rule 55 (ae_factor -> var_call .)
    STR_LIT         reduce using rule 55 (ae_factor -> var_call .)
    INT             reduce using rule 55 (ae_factor -> var_call .)
    FLT             reduce using rule 55 (ae_factor -> var_call .)
    BLN             reduce using rule 55 (ae_factor -> var_call .)
    CHR             reduce using rule 55 (ae_factor -> var_call .)
    STR             reduce using rule 55 (ae_factor -> var_call .)
    LIST_INT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_FLT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_BLN        reduce using rule 55 (ae_factor -> var_call .)
    LIST_STR        reduce using rule 55 (ae_factor -> var_call .)
    LIST_CHR        reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    GHOST           reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)
    RBRACE          reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    REVIVE          reduce using rule 55 (ae_factor -> var_call .)
    SHIFT           reduce using rule 55 (ae_factor -> var_call .)
    OTHERWISE       reduce using rule 55 (ae_factor -> var_call .)
    PLUS_EQ         shift and go to state 126
    MINUS_EQ        shift and go to state 127
    MUL_EQ          shift and go to state 128
    DIV_EQ          shift and go to state 129
    MOD_EQ          shift and go to state 130

  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 73 (re_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FOR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OR              [ reduce using rule 88 (le_factor -> var_call .) ]
  ! NOT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 88 (le_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FOR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! CHR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! STR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 88 (le_factor -> var_call .) ]

    assign_op                      shift and go to state 125

state 44

    (46) expression -> arithmetic_expression .
    (69) re_factor -> arithmetic_expression .

  ! reduce/reduce conflict for LPAREN resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for IDENT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for CHECK resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for SWAP resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for UNTIL resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for REPEAT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for INPUT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for INT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for FLT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for BLN resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for CHR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for STR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for GHOST resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for REVIVE resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for SHIFT resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 46 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 46 (expression -> arithmetic_expression .)
    CHECK           reduce using rule 46 (expression -> arithmetic_expression .)
    SWAP            reduce using rule 46 (expression -> arithmetic_expression .)
    DISPLAY         reduce using rule 46 (expression -> arithmetic_expression .)
    GLOBAL          reduce using rule 46 (expression -> arithmetic_expression .)
    FOR             reduce using rule 46 (expression -> arithmetic_expression .)
    UNTIL           reduce using rule 46 (expression -> arithmetic_expression .)
    REPEAT          reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION        reduce using rule 46 (expression -> arithmetic_expression .)
    IDENT           reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_INT    reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_FLT    reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_CHR    reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_STR    reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_BLN    reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_LIST_INT reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_LIST_FLT reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_LIST_CHR reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_LIST_STR reduce using rule 46 (expression -> arithmetic_expression .)
    FUNCTION_LIST_BLN reduce using rule 46 (expression -> arithmetic_expression .)
    INPUT           reduce using rule 46 (expression -> arithmetic_expression .)
    LPAREN          reduce using rule 46 (expression -> arithmetic_expression .)
    STR_LIT         reduce using rule 46 (expression -> arithmetic_expression .)
    INT             reduce using rule 46 (expression -> arithmetic_expression .)
    FLT             reduce using rule 46 (expression -> arithmetic_expression .)
    BLN             reduce using rule 46 (expression -> arithmetic_expression .)
    CHR             reduce using rule 46 (expression -> arithmetic_expression .)
    STR             reduce using rule 46 (expression -> arithmetic_expression .)
    LIST_INT        reduce using rule 46 (expression -> arithmetic_expression .)
    LIST_FLT        reduce using rule 46 (expression -> arithmetic_expression .)
    LIST_BLN        reduce using rule 46 (expression -> arithmetic_expression .)
    LIST_STR        reduce using rule 46 (expression -> arithmetic_expression .)
    LIST_CHR        reduce using rule 46 (expression -> arithmetic_expression .)
    INT_LIT         reduce using rule 46 (expression -> arithmetic_expression .)
    FLT_LIT         reduce using rule 46 (expression -> arithmetic_expression .)
    BLN_LIT         reduce using rule 46 (expression -> arithmetic_expression .)
    GHOST           reduce using rule 46 (expression -> arithmetic_expression .)
    RBRACE          reduce using rule 46 (expression -> arithmetic_expression .)
    RPAREN          reduce using rule 46 (expression -> arithmetic_expression .)
    REVIVE          reduce using rule 46 (expression -> arithmetic_expression .)
    SHIFT           reduce using rule 46 (expression -> arithmetic_expression .)
    OTHERWISE       reduce using rule 46 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 46 (expression -> arithmetic_expression .)
    COLON           reduce using rule 46 (expression -> arithmetic_expression .)
    PLUS_PLUS       reduce using rule 46 (expression -> arithmetic_expression .)
    MINUS_MINUS     reduce using rule 46 (expression -> arithmetic_expression .)
    RBRACKET        reduce using rule 46 (expression -> arithmetic_expression .)
    GT              reduce using rule 69 (re_factor -> arithmetic_expression .)
    LT              reduce using rule 69 (re_factor -> arithmetic_expression .)
    EQ              reduce using rule 69 (re_factor -> arithmetic_expression .)
    NOT_EQ          reduce using rule 69 (re_factor -> arithmetic_expression .)
    GT_EQ           reduce using rule 69 (re_factor -> arithmetic_expression .)
    LT_EQ           reduce using rule 69 (re_factor -> arithmetic_expression .)
    AND             reduce using rule 69 (re_factor -> arithmetic_expression .)
    OR              reduce using rule 69 (re_factor -> arithmetic_expression .)
    NOT             reduce using rule 69 (re_factor -> arithmetic_expression .)

  ! LPAREN          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! INT_LIT         [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FLT_LIT         [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! BLN_LIT         [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! IDENT           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! CHECK           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! SWAP            [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! DISPLAY         [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! GLOBAL          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FOR             [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! UNTIL           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! REPEAT          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_INT    [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_FLT    [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_CHR    [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_STR    [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_BLN    [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! INPUT           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! STR_LIT         [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! INT             [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! FLT             [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! BLN             [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! CHR             [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! STR             [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! LIST_INT        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! LIST_FLT        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! LIST_BLN        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! LIST_STR        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! LIST_CHR        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! GHOST           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! RBRACE          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! RPAREN          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! REVIVE          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! SHIFT           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! OTHERWISE       [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! COMMA           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! COLON           [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]
  ! RBRACKET        [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]


state 45

    (47) expression -> relational_expression .
    (87) le_factor -> relational_expression .

  ! reduce/reduce conflict for LPAREN resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for IDENT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for CHECK resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for SWAP resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FOR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for UNTIL resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for REPEAT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for INPUT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for INT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for FLT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for BLN resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for CHR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for STR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for GHOST resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for REVIVE resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for SHIFT resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 47 (expression -> relational_expression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 47 (expression -> relational_expression .)
    CHECK           reduce using rule 47 (expression -> relational_expression .)
    SWAP            reduce using rule 47 (expression -> relational_expression .)
    DISPLAY         reduce using rule 47 (expression -> relational_expression .)
    GLOBAL          reduce using rule 47 (expression -> relational_expression .)
    FOR             reduce using rule 47 (expression -> relational_expression .)
    UNTIL           reduce using rule 47 (expression -> relational_expression .)
    REPEAT          reduce using rule 47 (expression -> relational_expression .)
    FUNCTION        reduce using rule 47 (expression -> relational_expression .)
    IDENT           reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_INT    reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_FLT    reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_CHR    reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_STR    reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_BLN    reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_LIST_INT reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_LIST_FLT reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_LIST_CHR reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_LIST_STR reduce using rule 47 (expression -> relational_expression .)
    FUNCTION_LIST_BLN reduce using rule 47 (expression -> relational_expression .)
    INPUT           reduce using rule 47 (expression -> relational_expression .)
    LPAREN          reduce using rule 47 (expression -> relational_expression .)
    STR_LIT         reduce using rule 47 (expression -> relational_expression .)
    INT             reduce using rule 47 (expression -> relational_expression .)
    FLT             reduce using rule 47 (expression -> relational_expression .)
    BLN             reduce using rule 47 (expression -> relational_expression .)
    CHR             reduce using rule 47 (expression -> relational_expression .)
    STR             reduce using rule 47 (expression -> relational_expression .)
    LIST_INT        reduce using rule 47 (expression -> relational_expression .)
    LIST_FLT        reduce using rule 47 (expression -> relational_expression .)
    LIST_BLN        reduce using rule 47 (expression -> relational_expression .)
    LIST_STR        reduce using rule 47 (expression -> relational_expression .)
    LIST_CHR        reduce using rule 47 (expression -> relational_expression .)
    INT_LIT         reduce using rule 47 (expression -> relational_expression .)
    FLT_LIT         reduce using rule 47 (expression -> relational_expression .)
    BLN_LIT         reduce using rule 47 (expression -> relational_expression .)
    GHOST           reduce using rule 47 (expression -> relational_expression .)
    RBRACE          reduce using rule 47 (expression -> relational_expression .)
    RPAREN          reduce using rule 47 (expression -> relational_expression .)
    REVIVE          reduce using rule 47 (expression -> relational_expression .)
    SHIFT           reduce using rule 47 (expression -> relational_expression .)
    OTHERWISE       reduce using rule 47 (expression -> relational_expression .)
    COMMA           reduce using rule 47 (expression -> relational_expression .)
    COLON           reduce using rule 47 (expression -> relational_expression .)
    PLUS_PLUS       reduce using rule 47 (expression -> relational_expression .)
    MINUS_MINUS     reduce using rule 47 (expression -> relational_expression .)
    RBRACKET        reduce using rule 47 (expression -> relational_expression .)
    AND             reduce using rule 87 (le_factor -> relational_expression .)
    OR              reduce using rule 87 (le_factor -> relational_expression .)
    NOT             reduce using rule 87 (le_factor -> relational_expression .)

  ! LPAREN          [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! BLN_LIT         [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! IDENT           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! INT_LIT         [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FLT_LIT         [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! CHECK           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! SWAP            [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! DISPLAY         [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! GLOBAL          [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FOR             [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! UNTIL           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! REPEAT          [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION        [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_INT    [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_FLT    [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_CHR    [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_STR    [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_BLN    [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! INPUT           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! STR_LIT         [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! INT             [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! FLT             [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! BLN             [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! CHR             [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! STR             [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! LIST_INT        [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! LIST_FLT        [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! LIST_BLN        [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! LIST_STR        [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! LIST_CHR        [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! GHOST           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! RBRACE          [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! RPAREN          [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! REVIVE          [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! SHIFT           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! OTHERWISE       [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! COMMA           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! COLON           [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! PLUS_PLUS       [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 87 (le_factor -> relational_expression .) ]
  ! RBRACKET        [ reduce using rule 87 (le_factor -> relational_expression .) ]


state 46

    (48) expression -> logical_expression .

    CHECK           reduce using rule 48 (expression -> logical_expression .)
    SWAP            reduce using rule 48 (expression -> logical_expression .)
    DISPLAY         reduce using rule 48 (expression -> logical_expression .)
    GLOBAL          reduce using rule 48 (expression -> logical_expression .)
    FOR             reduce using rule 48 (expression -> logical_expression .)
    UNTIL           reduce using rule 48 (expression -> logical_expression .)
    REPEAT          reduce using rule 48 (expression -> logical_expression .)
    FUNCTION        reduce using rule 48 (expression -> logical_expression .)
    IDENT           reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_INT    reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_FLT    reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_CHR    reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_STR    reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_BLN    reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_LIST_INT reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_LIST_FLT reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_LIST_CHR reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_LIST_STR reduce using rule 48 (expression -> logical_expression .)
    FUNCTION_LIST_BLN reduce using rule 48 (expression -> logical_expression .)
    INPUT           reduce using rule 48 (expression -> logical_expression .)
    LPAREN          reduce using rule 48 (expression -> logical_expression .)
    STR_LIT         reduce using rule 48 (expression -> logical_expression .)
    INT             reduce using rule 48 (expression -> logical_expression .)
    FLT             reduce using rule 48 (expression -> logical_expression .)
    BLN             reduce using rule 48 (expression -> logical_expression .)
    CHR             reduce using rule 48 (expression -> logical_expression .)
    STR             reduce using rule 48 (expression -> logical_expression .)
    LIST_INT        reduce using rule 48 (expression -> logical_expression .)
    LIST_FLT        reduce using rule 48 (expression -> logical_expression .)
    LIST_BLN        reduce using rule 48 (expression -> logical_expression .)
    LIST_STR        reduce using rule 48 (expression -> logical_expression .)
    LIST_CHR        reduce using rule 48 (expression -> logical_expression .)
    INT_LIT         reduce using rule 48 (expression -> logical_expression .)
    FLT_LIT         reduce using rule 48 (expression -> logical_expression .)
    BLN_LIT         reduce using rule 48 (expression -> logical_expression .)
    GHOST           reduce using rule 48 (expression -> logical_expression .)
    RBRACE          reduce using rule 48 (expression -> logical_expression .)
    RPAREN          reduce using rule 48 (expression -> logical_expression .)
    REVIVE          reduce using rule 48 (expression -> logical_expression .)
    SHIFT           reduce using rule 48 (expression -> logical_expression .)
    OTHERWISE       reduce using rule 48 (expression -> logical_expression .)
    COMMA           reduce using rule 48 (expression -> logical_expression .)
    COLON           reduce using rule 48 (expression -> logical_expression .)
    PLUS_PLUS       reduce using rule 48 (expression -> logical_expression .)
    MINUS_MINUS     reduce using rule 48 (expression -> logical_expression .)
    RBRACKET        reduce using rule 48 (expression -> logical_expression .)


state 47

    (49) expression -> string_concat .

    CHECK           reduce using rule 49 (expression -> string_concat .)
    SWAP            reduce using rule 49 (expression -> string_concat .)
    DISPLAY         reduce using rule 49 (expression -> string_concat .)
    GLOBAL          reduce using rule 49 (expression -> string_concat .)
    FOR             reduce using rule 49 (expression -> string_concat .)
    UNTIL           reduce using rule 49 (expression -> string_concat .)
    REPEAT          reduce using rule 49 (expression -> string_concat .)
    FUNCTION        reduce using rule 49 (expression -> string_concat .)
    IDENT           reduce using rule 49 (expression -> string_concat .)
    FUNCTION_INT    reduce using rule 49 (expression -> string_concat .)
    FUNCTION_FLT    reduce using rule 49 (expression -> string_concat .)
    FUNCTION_CHR    reduce using rule 49 (expression -> string_concat .)
    FUNCTION_STR    reduce using rule 49 (expression -> string_concat .)
    FUNCTION_BLN    reduce using rule 49 (expression -> string_concat .)
    FUNCTION_LIST_INT reduce using rule 49 (expression -> string_concat .)
    FUNCTION_LIST_FLT reduce using rule 49 (expression -> string_concat .)
    FUNCTION_LIST_CHR reduce using rule 49 (expression -> string_concat .)
    FUNCTION_LIST_STR reduce using rule 49 (expression -> string_concat .)
    FUNCTION_LIST_BLN reduce using rule 49 (expression -> string_concat .)
    INPUT           reduce using rule 49 (expression -> string_concat .)
    LPAREN          reduce using rule 49 (expression -> string_concat .)
    STR_LIT         reduce using rule 49 (expression -> string_concat .)
    INT             reduce using rule 49 (expression -> string_concat .)
    FLT             reduce using rule 49 (expression -> string_concat .)
    BLN             reduce using rule 49 (expression -> string_concat .)
    CHR             reduce using rule 49 (expression -> string_concat .)
    STR             reduce using rule 49 (expression -> string_concat .)
    LIST_INT        reduce using rule 49 (expression -> string_concat .)
    LIST_FLT        reduce using rule 49 (expression -> string_concat .)
    LIST_BLN        reduce using rule 49 (expression -> string_concat .)
    LIST_STR        reduce using rule 49 (expression -> string_concat .)
    LIST_CHR        reduce using rule 49 (expression -> string_concat .)
    INT_LIT         reduce using rule 49 (expression -> string_concat .)
    FLT_LIT         reduce using rule 49 (expression -> string_concat .)
    BLN_LIT         reduce using rule 49 (expression -> string_concat .)
    GHOST           reduce using rule 49 (expression -> string_concat .)
    RBRACE          reduce using rule 49 (expression -> string_concat .)
    RPAREN          reduce using rule 49 (expression -> string_concat .)
    REVIVE          reduce using rule 49 (expression -> string_concat .)
    SHIFT           reduce using rule 49 (expression -> string_concat .)
    OTHERWISE       reduce using rule 49 (expression -> string_concat .)
    COMMA           reduce using rule 49 (expression -> string_concat .)
    COLON           reduce using rule 49 (expression -> string_concat .)
    PLUS_PLUS       reduce using rule 49 (expression -> string_concat .)
    MINUS_MINUS     reduce using rule 49 (expression -> string_concat .)
    RBRACKET        reduce using rule 49 (expression -> string_concat .)


state 48

    (125) for_loop -> FOR . LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 131


state 49

    (126) until_loop -> UNTIL . LPAREN relational_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 132


state 50

    (127) repeat_until -> REPEAT . LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN

    LBRACE          shift and go to state 133


state 51

    (148) ret_type -> FUNCTION .

    IDENT           reduce using rule 148 (ret_type -> FUNCTION .)


state 52

    (149) ret_type -> function_dtype .

    IDENT           reduce using rule 149 (ret_type -> function_dtype .)


state 53

    (145) function_call -> input_statement .

    CHECK           reduce using rule 145 (function_call -> input_statement .)
    SWAP            reduce using rule 145 (function_call -> input_statement .)
    DISPLAY         reduce using rule 145 (function_call -> input_statement .)
    GLOBAL          reduce using rule 145 (function_call -> input_statement .)
    FOR             reduce using rule 145 (function_call -> input_statement .)
    UNTIL           reduce using rule 145 (function_call -> input_statement .)
    REPEAT          reduce using rule 145 (function_call -> input_statement .)
    FUNCTION        reduce using rule 145 (function_call -> input_statement .)
    IDENT           reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_INT    reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_FLT    reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_CHR    reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_STR    reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_BLN    reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_LIST_INT reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_LIST_FLT reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_LIST_CHR reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_LIST_STR reduce using rule 145 (function_call -> input_statement .)
    FUNCTION_LIST_BLN reduce using rule 145 (function_call -> input_statement .)
    INPUT           reduce using rule 145 (function_call -> input_statement .)
    LPAREN          reduce using rule 145 (function_call -> input_statement .)
    STR_LIT         reduce using rule 145 (function_call -> input_statement .)
    INT             reduce using rule 145 (function_call -> input_statement .)
    FLT             reduce using rule 145 (function_call -> input_statement .)
    BLN             reduce using rule 145 (function_call -> input_statement .)
    CHR             reduce using rule 145 (function_call -> input_statement .)
    STR             reduce using rule 145 (function_call -> input_statement .)
    LIST_INT        reduce using rule 145 (function_call -> input_statement .)
    LIST_FLT        reduce using rule 145 (function_call -> input_statement .)
    LIST_BLN        reduce using rule 145 (function_call -> input_statement .)
    LIST_STR        reduce using rule 145 (function_call -> input_statement .)
    LIST_CHR        reduce using rule 145 (function_call -> input_statement .)
    INT_LIT         reduce using rule 145 (function_call -> input_statement .)
    FLT_LIT         reduce using rule 145 (function_call -> input_statement .)
    BLN_LIT         reduce using rule 145 (function_call -> input_statement .)
    GHOST           reduce using rule 145 (function_call -> input_statement .)
    RBRACE          reduce using rule 145 (function_call -> input_statement .)
    RPAREN          reduce using rule 145 (function_call -> input_statement .)
    REVIVE          reduce using rule 145 (function_call -> input_statement .)
    SHIFT           reduce using rule 145 (function_call -> input_statement .)
    OTHERWISE       reduce using rule 145 (function_call -> input_statement .)
    COMMA           reduce using rule 145 (function_call -> input_statement .)
    COLON           reduce using rule 145 (function_call -> input_statement .)
    PLUS_PLUS       reduce using rule 145 (function_call -> input_statement .)
    MINUS_MINUS     reduce using rule 145 (function_call -> input_statement .)
    RBRACKET        reduce using rule 145 (function_call -> input_statement .)


state 54

    (50) arithmetic_expression -> ae_term .

    CHECK           reduce using rule 50 (arithmetic_expression -> ae_term .)
    SWAP            reduce using rule 50 (arithmetic_expression -> ae_term .)
    DISPLAY         reduce using rule 50 (arithmetic_expression -> ae_term .)
    GLOBAL          reduce using rule 50 (arithmetic_expression -> ae_term .)
    FOR             reduce using rule 50 (arithmetic_expression -> ae_term .)
    UNTIL           reduce using rule 50 (arithmetic_expression -> ae_term .)
    REPEAT          reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION        reduce using rule 50 (arithmetic_expression -> ae_term .)
    IDENT           reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_INT    reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_FLT    reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_CHR    reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_STR    reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_BLN    reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_LIST_INT reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_LIST_FLT reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_LIST_CHR reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_LIST_STR reduce using rule 50 (arithmetic_expression -> ae_term .)
    FUNCTION_LIST_BLN reduce using rule 50 (arithmetic_expression -> ae_term .)
    INPUT           reduce using rule 50 (arithmetic_expression -> ae_term .)
    LPAREN          reduce using rule 50 (arithmetic_expression -> ae_term .)
    STR_LIT         reduce using rule 50 (arithmetic_expression -> ae_term .)
    INT             reduce using rule 50 (arithmetic_expression -> ae_term .)
    FLT             reduce using rule 50 (arithmetic_expression -> ae_term .)
    BLN             reduce using rule 50 (arithmetic_expression -> ae_term .)
    CHR             reduce using rule 50 (arithmetic_expression -> ae_term .)
    STR             reduce using rule 50 (arithmetic_expression -> ae_term .)
    LIST_INT        reduce using rule 50 (arithmetic_expression -> ae_term .)
    LIST_FLT        reduce using rule 50 (arithmetic_expression -> ae_term .)
    LIST_BLN        reduce using rule 50 (arithmetic_expression -> ae_term .)
    LIST_STR        reduce using rule 50 (arithmetic_expression -> ae_term .)
    LIST_CHR        reduce using rule 50 (arithmetic_expression -> ae_term .)
    INT_LIT         reduce using rule 50 (arithmetic_expression -> ae_term .)
    FLT_LIT         reduce using rule 50 (arithmetic_expression -> ae_term .)
    BLN_LIT         reduce using rule 50 (arithmetic_expression -> ae_term .)
    GHOST           reduce using rule 50 (arithmetic_expression -> ae_term .)
    GT              reduce using rule 50 (arithmetic_expression -> ae_term .)
    LT              reduce using rule 50 (arithmetic_expression -> ae_term .)
    EQ              reduce using rule 50 (arithmetic_expression -> ae_term .)
    NOT_EQ          reduce using rule 50 (arithmetic_expression -> ae_term .)
    GT_EQ           reduce using rule 50 (arithmetic_expression -> ae_term .)
    LT_EQ           reduce using rule 50 (arithmetic_expression -> ae_term .)
    AND             reduce using rule 50 (arithmetic_expression -> ae_term .)
    OR              reduce using rule 50 (arithmetic_expression -> ae_term .)
    NOT             reduce using rule 50 (arithmetic_expression -> ae_term .)
    RBRACE          reduce using rule 50 (arithmetic_expression -> ae_term .)
    RPAREN          reduce using rule 50 (arithmetic_expression -> ae_term .)
    REVIVE          reduce using rule 50 (arithmetic_expression -> ae_term .)
    SHIFT           reduce using rule 50 (arithmetic_expression -> ae_term .)
    OTHERWISE       reduce using rule 50 (arithmetic_expression -> ae_term .)
    COMMA           reduce using rule 50 (arithmetic_expression -> ae_term .)
    COLON           reduce using rule 50 (arithmetic_expression -> ae_term .)
    PLUS_PLUS       reduce using rule 50 (arithmetic_expression -> ae_term .)
    MINUS_MINUS     reduce using rule 50 (arithmetic_expression -> ae_term .)
    RBRACKET        reduce using rule 50 (arithmetic_expression -> ae_term .)
    SEMICOLON       reduce using rule 50 (arithmetic_expression -> ae_term .)


state 55

    (66) relational_expression -> re_term .

    CHECK           reduce using rule 66 (relational_expression -> re_term .)
    SWAP            reduce using rule 66 (relational_expression -> re_term .)
    DISPLAY         reduce using rule 66 (relational_expression -> re_term .)
    GLOBAL          reduce using rule 66 (relational_expression -> re_term .)
    FOR             reduce using rule 66 (relational_expression -> re_term .)
    UNTIL           reduce using rule 66 (relational_expression -> re_term .)
    REPEAT          reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION        reduce using rule 66 (relational_expression -> re_term .)
    IDENT           reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_INT    reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_FLT    reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_CHR    reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_STR    reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_BLN    reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_LIST_INT reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_LIST_FLT reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_LIST_CHR reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_LIST_STR reduce using rule 66 (relational_expression -> re_term .)
    FUNCTION_LIST_BLN reduce using rule 66 (relational_expression -> re_term .)
    INPUT           reduce using rule 66 (relational_expression -> re_term .)
    LPAREN          reduce using rule 66 (relational_expression -> re_term .)
    STR_LIT         reduce using rule 66 (relational_expression -> re_term .)
    INT             reduce using rule 66 (relational_expression -> re_term .)
    FLT             reduce using rule 66 (relational_expression -> re_term .)
    BLN             reduce using rule 66 (relational_expression -> re_term .)
    CHR             reduce using rule 66 (relational_expression -> re_term .)
    STR             reduce using rule 66 (relational_expression -> re_term .)
    LIST_INT        reduce using rule 66 (relational_expression -> re_term .)
    LIST_FLT        reduce using rule 66 (relational_expression -> re_term .)
    LIST_BLN        reduce using rule 66 (relational_expression -> re_term .)
    LIST_STR        reduce using rule 66 (relational_expression -> re_term .)
    LIST_CHR        reduce using rule 66 (relational_expression -> re_term .)
    INT_LIT         reduce using rule 66 (relational_expression -> re_term .)
    FLT_LIT         reduce using rule 66 (relational_expression -> re_term .)
    BLN_LIT         reduce using rule 66 (relational_expression -> re_term .)
    GHOST           reduce using rule 66 (relational_expression -> re_term .)
    AND             reduce using rule 66 (relational_expression -> re_term .)
    OR              reduce using rule 66 (relational_expression -> re_term .)
    NOT             reduce using rule 66 (relational_expression -> re_term .)
    RBRACE          reduce using rule 66 (relational_expression -> re_term .)
    RPAREN          reduce using rule 66 (relational_expression -> re_term .)
    REVIVE          reduce using rule 66 (relational_expression -> re_term .)
    SHIFT           reduce using rule 66 (relational_expression -> re_term .)
    OTHERWISE       reduce using rule 66 (relational_expression -> re_term .)
    COMMA           reduce using rule 66 (relational_expression -> re_term .)
    COLON           reduce using rule 66 (relational_expression -> re_term .)
    PLUS_PLUS       reduce using rule 66 (relational_expression -> re_term .)
    MINUS_MINUS     reduce using rule 66 (relational_expression -> re_term .)
    RBRACKET        reduce using rule 66 (relational_expression -> re_term .)
    SEMICOLON       reduce using rule 66 (relational_expression -> re_term .)


state 56

    (83) logical_expression -> le_term .

    CHECK           reduce using rule 83 (logical_expression -> le_term .)
    SWAP            reduce using rule 83 (logical_expression -> le_term .)
    DISPLAY         reduce using rule 83 (logical_expression -> le_term .)
    GLOBAL          reduce using rule 83 (logical_expression -> le_term .)
    FOR             reduce using rule 83 (logical_expression -> le_term .)
    UNTIL           reduce using rule 83 (logical_expression -> le_term .)
    REPEAT          reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION        reduce using rule 83 (logical_expression -> le_term .)
    IDENT           reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_INT    reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_FLT    reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_CHR    reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_STR    reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_BLN    reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_LIST_INT reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_LIST_FLT reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_LIST_CHR reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_LIST_STR reduce using rule 83 (logical_expression -> le_term .)
    FUNCTION_LIST_BLN reduce using rule 83 (logical_expression -> le_term .)
    INPUT           reduce using rule 83 (logical_expression -> le_term .)
    LPAREN          reduce using rule 83 (logical_expression -> le_term .)
    STR_LIT         reduce using rule 83 (logical_expression -> le_term .)
    INT             reduce using rule 83 (logical_expression -> le_term .)
    FLT             reduce using rule 83 (logical_expression -> le_term .)
    BLN             reduce using rule 83 (logical_expression -> le_term .)
    CHR             reduce using rule 83 (logical_expression -> le_term .)
    STR             reduce using rule 83 (logical_expression -> le_term .)
    LIST_INT        reduce using rule 83 (logical_expression -> le_term .)
    LIST_FLT        reduce using rule 83 (logical_expression -> le_term .)
    LIST_BLN        reduce using rule 83 (logical_expression -> le_term .)
    LIST_STR        reduce using rule 83 (logical_expression -> le_term .)
    LIST_CHR        reduce using rule 83 (logical_expression -> le_term .)
    INT_LIT         reduce using rule 83 (logical_expression -> le_term .)
    FLT_LIT         reduce using rule 83 (logical_expression -> le_term .)
    BLN_LIT         reduce using rule 83 (logical_expression -> le_term .)
    GHOST           reduce using rule 83 (logical_expression -> le_term .)
    RBRACE          reduce using rule 83 (logical_expression -> le_term .)
    RPAREN          reduce using rule 83 (logical_expression -> le_term .)
    REVIVE          reduce using rule 83 (logical_expression -> le_term .)
    SHIFT           reduce using rule 83 (logical_expression -> le_term .)
    OTHERWISE       reduce using rule 83 (logical_expression -> le_term .)
    COMMA           reduce using rule 83 (logical_expression -> le_term .)
    COLON           reduce using rule 83 (logical_expression -> le_term .)
    PLUS_PLUS       reduce using rule 83 (logical_expression -> le_term .)
    MINUS_MINUS     reduce using rule 83 (logical_expression -> le_term .)
    RBRACKET        reduce using rule 83 (logical_expression -> le_term .)


state 57

    (172) string_concat -> string_lit . stringcon_tail
    (173) stringcon_tail -> . PLUS string_lit stringcon_tail2

    PLUS            shift and go to state 135

    stringcon_tail                 shift and go to state 134

state 58

    (150) function_dtype -> FUNCTION_INT .

    IDENT           reduce using rule 150 (function_dtype -> FUNCTION_INT .)


state 59

    (151) function_dtype -> FUNCTION_FLT .

    IDENT           reduce using rule 151 (function_dtype -> FUNCTION_FLT .)


state 60

    (152) function_dtype -> FUNCTION_CHR .

    IDENT           reduce using rule 152 (function_dtype -> FUNCTION_CHR .)


state 61

    (153) function_dtype -> FUNCTION_STR .

    IDENT           reduce using rule 153 (function_dtype -> FUNCTION_STR .)


state 62

    (154) function_dtype -> FUNCTION_BLN .

    IDENT           reduce using rule 154 (function_dtype -> FUNCTION_BLN .)


state 63

    (155) function_dtype -> FUNCTION_LIST_INT .

    IDENT           reduce using rule 155 (function_dtype -> FUNCTION_LIST_INT .)


state 64

    (156) function_dtype -> FUNCTION_LIST_FLT .

    IDENT           reduce using rule 156 (function_dtype -> FUNCTION_LIST_FLT .)


state 65

    (157) function_dtype -> FUNCTION_LIST_CHR .

    IDENT           reduce using rule 157 (function_dtype -> FUNCTION_LIST_CHR .)


state 66

    (158) function_dtype -> FUNCTION_LIST_STR .

    IDENT           reduce using rule 158 (function_dtype -> FUNCTION_LIST_STR .)


state 67

    (159) function_dtype -> FUNCTION_LIST_BLN .

    IDENT           reduce using rule 159 (function_dtype -> FUNCTION_LIST_BLN .)


state 68

    (167) input_statement -> INPUT . LPAREN statements RPAREN

    LPAREN          shift and go to state 136


state 69

    (51) ae_term -> ae_factor . ae_tail2
    (63) ae_tail2 -> . ae_term
    (64) ae_tail2 -> . ae_tail
    (65) ae_tail2 -> . empty
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    LPAREN          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_factor                      shift and go to state 69
    ae_tail2                       shift and go to state 137
    ae_term                        shift and go to state 138
    ae_tail                        shift and go to state 139
    empty                          shift and go to state 140
    var_call                       shift and go to state 150

state 70

    (67) re_term -> re_factor . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_factor                      shift and go to state 70
    re_tail2                       shift and go to state 151
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_term                        shift and go to state 154
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 71

    (84) le_term -> le_factor . le_tail2
    (92) le_tail2 -> . empty
    (93) le_tail2 -> . le_tail
    (94) le_tail2 -> . le_term
    (183) empty -> .
    (89) le_tail -> . AND le_term
    (90) le_tail -> . OR le_term
    (91) le_tail -> . NOT le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    AND             shift and go to state 170
    OR              shift and go to state 171
    NOT             shift and go to state 172
    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    le_factor                      shift and go to state 71
    le_tail2                       shift and go to state 166
    empty                          shift and go to state 167
    le_tail                        shift and go to state 168
    le_term                        shift and go to state 169
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 72

    (176) string_lit -> STR_LIT .

    PLUS            reduce using rule 176 (string_lit -> STR_LIT .)
    CHECK           reduce using rule 176 (string_lit -> STR_LIT .)
    SWAP            reduce using rule 176 (string_lit -> STR_LIT .)
    DISPLAY         reduce using rule 176 (string_lit -> STR_LIT .)
    GLOBAL          reduce using rule 176 (string_lit -> STR_LIT .)
    FOR             reduce using rule 176 (string_lit -> STR_LIT .)
    UNTIL           reduce using rule 176 (string_lit -> STR_LIT .)
    REPEAT          reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION        reduce using rule 176 (string_lit -> STR_LIT .)
    IDENT           reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_INT    reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_FLT    reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_CHR    reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_STR    reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_BLN    reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_LIST_INT reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_LIST_FLT reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_LIST_CHR reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_LIST_STR reduce using rule 176 (string_lit -> STR_LIT .)
    FUNCTION_LIST_BLN reduce using rule 176 (string_lit -> STR_LIT .)
    INPUT           reduce using rule 176 (string_lit -> STR_LIT .)
    LPAREN          reduce using rule 176 (string_lit -> STR_LIT .)
    STR_LIT         reduce using rule 176 (string_lit -> STR_LIT .)
    INT             reduce using rule 176 (string_lit -> STR_LIT .)
    FLT             reduce using rule 176 (string_lit -> STR_LIT .)
    BLN             reduce using rule 176 (string_lit -> STR_LIT .)
    CHR             reduce using rule 176 (string_lit -> STR_LIT .)
    STR             reduce using rule 176 (string_lit -> STR_LIT .)
    LIST_INT        reduce using rule 176 (string_lit -> STR_LIT .)
    LIST_FLT        reduce using rule 176 (string_lit -> STR_LIT .)
    LIST_BLN        reduce using rule 176 (string_lit -> STR_LIT .)
    LIST_STR        reduce using rule 176 (string_lit -> STR_LIT .)
    LIST_CHR        reduce using rule 176 (string_lit -> STR_LIT .)
    INT_LIT         reduce using rule 176 (string_lit -> STR_LIT .)
    FLT_LIT         reduce using rule 176 (string_lit -> STR_LIT .)
    BLN_LIT         reduce using rule 176 (string_lit -> STR_LIT .)
    GHOST           reduce using rule 176 (string_lit -> STR_LIT .)
    RBRACE          reduce using rule 176 (string_lit -> STR_LIT .)
    RPAREN          reduce using rule 176 (string_lit -> STR_LIT .)
    REVIVE          reduce using rule 176 (string_lit -> STR_LIT .)
    SHIFT           reduce using rule 176 (string_lit -> STR_LIT .)
    OTHERWISE       reduce using rule 176 (string_lit -> STR_LIT .)
    COMMA           reduce using rule 176 (string_lit -> STR_LIT .)
    COLON           reduce using rule 176 (string_lit -> STR_LIT .)
    PLUS_PLUS       reduce using rule 176 (string_lit -> STR_LIT .)
    MINUS_MINUS     reduce using rule 176 (string_lit -> STR_LIT .)
    RBRACKET        reduce using rule 176 (string_lit -> STR_LIT .)


state 73

    (53) ae_factor -> INT_LIT .
    (70) re_factor -> INT_LIT .

  ! reduce/reduce conflict for GT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 53 (ae_factor -> INT_LIT .)
    LPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    PLUS            reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS           reduce using rule 53 (ae_factor -> INT_LIT .)
    DIVISION        reduce using rule 53 (ae_factor -> INT_LIT .)
    MULTIPLY        reduce using rule 53 (ae_factor -> INT_LIT .)
    MODULO          reduce using rule 53 (ae_factor -> INT_LIT .)
    EXPONENT        reduce using rule 53 (ae_factor -> INT_LIT .)
    INT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    IDENT           reduce using rule 53 (ae_factor -> INT_LIT .)
    CHECK           reduce using rule 53 (ae_factor -> INT_LIT .)
    SWAP            reduce using rule 53 (ae_factor -> INT_LIT .)
    DISPLAY         reduce using rule 53 (ae_factor -> INT_LIT .)
    GLOBAL          reduce using rule 53 (ae_factor -> INT_LIT .)
    FOR             reduce using rule 53 (ae_factor -> INT_LIT .)
    UNTIL           reduce using rule 53 (ae_factor -> INT_LIT .)
    REPEAT          reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION        reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_INT    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_FLT    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_CHR    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_STR    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_BLN    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_INT reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_STR reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 53 (ae_factor -> INT_LIT .)
    INPUT           reduce using rule 53 (ae_factor -> INT_LIT .)
    STR_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    INT             reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT             reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN             reduce using rule 53 (ae_factor -> INT_LIT .)
    CHR             reduce using rule 53 (ae_factor -> INT_LIT .)
    STR             reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_INT        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_FLT        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_BLN        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_STR        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_CHR        reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    GHOST           reduce using rule 53 (ae_factor -> INT_LIT .)
    GT              reduce using rule 53 (ae_factor -> INT_LIT .)
    LT              reduce using rule 53 (ae_factor -> INT_LIT .)
    EQ              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT_EQ          reduce using rule 53 (ae_factor -> INT_LIT .)
    GT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    LT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    AND             reduce using rule 53 (ae_factor -> INT_LIT .)
    OR              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT             reduce using rule 53 (ae_factor -> INT_LIT .)
    RBRACE          reduce using rule 53 (ae_factor -> INT_LIT .)
    RPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    REVIVE          reduce using rule 53 (ae_factor -> INT_LIT .)
    SHIFT           reduce using rule 53 (ae_factor -> INT_LIT .)
    OTHERWISE       reduce using rule 53 (ae_factor -> INT_LIT .)

  ! GT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! EQ              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! IDENT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! CHECK           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SWAP            [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! DISPLAY         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GLOBAL          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FOR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! UNTIL           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! REPEAT          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INPUT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! STR_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! CHR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! STR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_INT        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_STR        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GHOST           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! AND             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OR              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RBRACE          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! REVIVE          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SHIFT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 70 (re_factor -> INT_LIT .) ]


state 74

    (54) ae_factor -> FLT_LIT .
    (71) re_factor -> FLT_LIT .

  ! reduce/reduce conflict for GT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 54 (ae_factor -> FLT_LIT .)
    LPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    PLUS            reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS           reduce using rule 54 (ae_factor -> FLT_LIT .)
    DIVISION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MULTIPLY        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MODULO          reduce using rule 54 (ae_factor -> FLT_LIT .)
    EXPONENT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    IDENT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    CHECK           reduce using rule 54 (ae_factor -> FLT_LIT .)
    SWAP            reduce using rule 54 (ae_factor -> FLT_LIT .)
    DISPLAY         reduce using rule 54 (ae_factor -> FLT_LIT .)
    GLOBAL          reduce using rule 54 (ae_factor -> FLT_LIT .)
    FOR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    UNTIL           reduce using rule 54 (ae_factor -> FLT_LIT .)
    REPEAT          reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_INT    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_FLT    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_CHR    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_STR    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_BLN    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_INT reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_STR reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 54 (ae_factor -> FLT_LIT .)
    INPUT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    STR_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN             reduce using rule 54 (ae_factor -> FLT_LIT .)
    CHR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    STR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_INT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_FLT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_BLN        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_STR        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_CHR        reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    GHOST           reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    EQ              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT_EQ          reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    AND             reduce using rule 54 (ae_factor -> FLT_LIT .)
    OR              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    RBRACE          reduce using rule 54 (ae_factor -> FLT_LIT .)
    RPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    REVIVE          reduce using rule 54 (ae_factor -> FLT_LIT .)
    SHIFT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    OTHERWISE       reduce using rule 54 (ae_factor -> FLT_LIT .)

  ! GT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! EQ              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! IDENT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! CHECK           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SWAP            [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! DISPLAY         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GLOBAL          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FOR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! UNTIL           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! REPEAT          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INPUT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! STR_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! CHR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! STR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_INT        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_STR        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GHOST           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! AND             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OR              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RBRACE          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! REVIVE          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SHIFT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 71 (re_factor -> FLT_LIT .) ]


state 75

    (72) re_factor -> BLN_LIT .
    (86) le_factor -> BLN_LIT .

  ! reduce/reduce conflict for AND resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 72 (re_factor -> BLN_LIT .)
    GT              reduce using rule 72 (re_factor -> BLN_LIT .)
    LT              reduce using rule 72 (re_factor -> BLN_LIT .)
    EQ              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT_EQ          reduce using rule 72 (re_factor -> BLN_LIT .)
    GT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    INT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    IDENT           reduce using rule 72 (re_factor -> BLN_LIT .)
    CHECK           reduce using rule 72 (re_factor -> BLN_LIT .)
    SWAP            reduce using rule 72 (re_factor -> BLN_LIT .)
    DISPLAY         reduce using rule 72 (re_factor -> BLN_LIT .)
    GLOBAL          reduce using rule 72 (re_factor -> BLN_LIT .)
    FOR             reduce using rule 72 (re_factor -> BLN_LIT .)
    UNTIL           reduce using rule 72 (re_factor -> BLN_LIT .)
    REPEAT          reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION        reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_INT    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_FLT    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_CHR    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_STR    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_BLN    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_INT reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_FLT reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_CHR reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_STR reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_BLN reduce using rule 72 (re_factor -> BLN_LIT .)
    INPUT           reduce using rule 72 (re_factor -> BLN_LIT .)
    STR_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    INT             reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT             reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN             reduce using rule 72 (re_factor -> BLN_LIT .)
    CHR             reduce using rule 72 (re_factor -> BLN_LIT .)
    STR             reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_INT        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_FLT        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_BLN        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_STR        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_CHR        reduce using rule 72 (re_factor -> BLN_LIT .)
    GHOST           reduce using rule 72 (re_factor -> BLN_LIT .)
    AND             reduce using rule 72 (re_factor -> BLN_LIT .)
    OR              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT             reduce using rule 72 (re_factor -> BLN_LIT .)
    RBRACE          reduce using rule 72 (re_factor -> BLN_LIT .)
    RPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    REVIVE          reduce using rule 72 (re_factor -> BLN_LIT .)
    SHIFT           reduce using rule 72 (re_factor -> BLN_LIT .)
    OTHERWISE       reduce using rule 72 (re_factor -> BLN_LIT .)

  ! AND             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OR              [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! NOT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! IDENT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! CHECK           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! SWAP            [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! DISPLAY         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! GLOBAL          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FOR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! UNTIL           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! REPEAT          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INPUT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! STR_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! CHR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! STR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_INT        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_FLT        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_BLN        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_STR        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_CHR        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! GHOST           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RBRACE          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! REVIVE          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! SHIFT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OTHERWISE       [ reduce using rule 86 (le_factor -> BLN_LIT .) ]


state 76

    (15) declarations -> GLOBAL var_call .

    CHECK           reduce using rule 15 (declarations -> GLOBAL var_call .)
    SWAP            reduce using rule 15 (declarations -> GLOBAL var_call .)
    DISPLAY         reduce using rule 15 (declarations -> GLOBAL var_call .)
    GLOBAL          reduce using rule 15 (declarations -> GLOBAL var_call .)
    FOR             reduce using rule 15 (declarations -> GLOBAL var_call .)
    UNTIL           reduce using rule 15 (declarations -> GLOBAL var_call .)
    REPEAT          reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION        reduce using rule 15 (declarations -> GLOBAL var_call .)
    IDENT           reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_INT    reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_FLT    reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_CHR    reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_STR    reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_BLN    reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_LIST_INT reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_LIST_FLT reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_LIST_CHR reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_LIST_STR reduce using rule 15 (declarations -> GLOBAL var_call .)
    FUNCTION_LIST_BLN reduce using rule 15 (declarations -> GLOBAL var_call .)
    INPUT           reduce using rule 15 (declarations -> GLOBAL var_call .)
    LPAREN          reduce using rule 15 (declarations -> GLOBAL var_call .)
    STR_LIT         reduce using rule 15 (declarations -> GLOBAL var_call .)
    INT             reduce using rule 15 (declarations -> GLOBAL var_call .)
    FLT             reduce using rule 15 (declarations -> GLOBAL var_call .)
    BLN             reduce using rule 15 (declarations -> GLOBAL var_call .)
    CHR             reduce using rule 15 (declarations -> GLOBAL var_call .)
    STR             reduce using rule 15 (declarations -> GLOBAL var_call .)
    LIST_INT        reduce using rule 15 (declarations -> GLOBAL var_call .)
    LIST_FLT        reduce using rule 15 (declarations -> GLOBAL var_call .)
    LIST_BLN        reduce using rule 15 (declarations -> GLOBAL var_call .)
    LIST_STR        reduce using rule 15 (declarations -> GLOBAL var_call .)
    LIST_CHR        reduce using rule 15 (declarations -> GLOBAL var_call .)
    INT_LIT         reduce using rule 15 (declarations -> GLOBAL var_call .)
    FLT_LIT         reduce using rule 15 (declarations -> GLOBAL var_call .)
    BLN_LIT         reduce using rule 15 (declarations -> GLOBAL var_call .)
    GHOST           reduce using rule 15 (declarations -> GLOBAL var_call .)
    RBRACE          reduce using rule 15 (declarations -> GLOBAL var_call .)
    RPAREN          reduce using rule 15 (declarations -> GLOBAL var_call .)
    REVIVE          reduce using rule 15 (declarations -> GLOBAL var_call .)
    SHIFT           reduce using rule 15 (declarations -> GLOBAL var_call .)
    OTHERWISE       reduce using rule 15 (declarations -> GLOBAL var_call .)


state 77

    (95) var_call -> IDENT .
    (96) var_call -> IDENT . LBRACKET index RBRACKET

    CHECK           reduce using rule 95 (var_call -> IDENT .)
    SWAP            reduce using rule 95 (var_call -> IDENT .)
    DISPLAY         reduce using rule 95 (var_call -> IDENT .)
    GLOBAL          reduce using rule 95 (var_call -> IDENT .)
    FOR             reduce using rule 95 (var_call -> IDENT .)
    UNTIL           reduce using rule 95 (var_call -> IDENT .)
    REPEAT          reduce using rule 95 (var_call -> IDENT .)
    FUNCTION        reduce using rule 95 (var_call -> IDENT .)
    IDENT           reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_INT    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_FLT    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_CHR    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_STR    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_BLN    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_INT reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_FLT reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_CHR reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_STR reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_BLN reduce using rule 95 (var_call -> IDENT .)
    INPUT           reduce using rule 95 (var_call -> IDENT .)
    LPAREN          reduce using rule 95 (var_call -> IDENT .)
    STR_LIT         reduce using rule 95 (var_call -> IDENT .)
    INT             reduce using rule 95 (var_call -> IDENT .)
    FLT             reduce using rule 95 (var_call -> IDENT .)
    BLN             reduce using rule 95 (var_call -> IDENT .)
    CHR             reduce using rule 95 (var_call -> IDENT .)
    STR             reduce using rule 95 (var_call -> IDENT .)
    LIST_INT        reduce using rule 95 (var_call -> IDENT .)
    LIST_FLT        reduce using rule 95 (var_call -> IDENT .)
    LIST_BLN        reduce using rule 95 (var_call -> IDENT .)
    LIST_STR        reduce using rule 95 (var_call -> IDENT .)
    LIST_CHR        reduce using rule 95 (var_call -> IDENT .)
    INT_LIT         reduce using rule 95 (var_call -> IDENT .)
    FLT_LIT         reduce using rule 95 (var_call -> IDENT .)
    BLN_LIT         reduce using rule 95 (var_call -> IDENT .)
    GHOST           reduce using rule 95 (var_call -> IDENT .)
    RBRACE          reduce using rule 95 (var_call -> IDENT .)
    RPAREN          reduce using rule 95 (var_call -> IDENT .)
    REVIVE          reduce using rule 95 (var_call -> IDENT .)
    SHIFT           reduce using rule 95 (var_call -> IDENT .)
    OTHERWISE       reduce using rule 95 (var_call -> IDENT .)
    PLUS            reduce using rule 95 (var_call -> IDENT .)
    MINUS           reduce using rule 95 (var_call -> IDENT .)
    DIVISION        reduce using rule 95 (var_call -> IDENT .)
    MULTIPLY        reduce using rule 95 (var_call -> IDENT .)
    MODULO          reduce using rule 95 (var_call -> IDENT .)
    EXPONENT        reduce using rule 95 (var_call -> IDENT .)
    GT              reduce using rule 95 (var_call -> IDENT .)
    LT              reduce using rule 95 (var_call -> IDENT .)
    EQ              reduce using rule 95 (var_call -> IDENT .)
    NOT_EQ          reduce using rule 95 (var_call -> IDENT .)
    GT_EQ           reduce using rule 95 (var_call -> IDENT .)
    LT_EQ           reduce using rule 95 (var_call -> IDENT .)
    AND             reduce using rule 95 (var_call -> IDENT .)
    OR              reduce using rule 95 (var_call -> IDENT .)
    NOT             reduce using rule 95 (var_call -> IDENT .)
    COMMA           reduce using rule 95 (var_call -> IDENT .)
    COLON           reduce using rule 95 (var_call -> IDENT .)
    PLUS_PLUS       reduce using rule 95 (var_call -> IDENT .)
    MINUS_MINUS     reduce using rule 95 (var_call -> IDENT .)
    RBRACKET        reduce using rule 95 (var_call -> IDENT .)
    SEMICOLON       reduce using rule 95 (var_call -> IDENT .)
    LBRACKET        shift and go to state 101


state 78

    (21) var_dec -> data_type IDENT . vardec_tail
    (24) var_initialization -> data_type IDENT . EQ value varinit_tail
    (22) vardec_tail -> . COMMA IDENT vardec_tail
    (23) vardec_tail -> . empty
    (183) empty -> .

    EQ              shift and go to state 177
    COMMA           shift and go to state 178
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    vardec_tail                    shift and go to state 176
    empty                          shift and go to state 179

state 79

    (97) list_dec -> list_dtype IDENT . listdec_tail
    (100) list_init -> list_dtype IDENT . LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (98) listdec_tail -> . COMMA IDENT listdec_tail
    (99) listdec_tail -> . empty
    (183) empty -> .

    LBRACKET        shift and go to state 181
    COMMA           shift and go to state 182
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    listdec_tail                   shift and go to state 180
    empty                          shift and go to state 183

state 80

    (1) program -> BIRTH global_declarations statements GHOST .

    $end            reduce using rule 1 (program -> BIRTH global_declarations statements GHOST .)


state 81

    (2) statements -> conditional_statement statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 2 (statements -> conditional_statement statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 2 (statements -> conditional_statement statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 2 (statements -> conditional_statement statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 2 (statements -> conditional_statement statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 2 (statements -> conditional_statement statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 2 (statements -> conditional_statement statements_tail .)
    GHOST           reduce using rule 2 (statements -> conditional_statement statements_tail .)
    RBRACE          reduce using rule 2 (statements -> conditional_statement statements_tail .)
    RPAREN          reduce using rule 2 (statements -> conditional_statement statements_tail .)
    REVIVE          reduce using rule 2 (statements -> conditional_statement statements_tail .)
    SHIFT           reduce using rule 2 (statements -> conditional_statement statements_tail .)
    OTHERWISE       reduce using rule 2 (statements -> conditional_statement statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 82

    (12) statements_tail -> statements .

    GHOST           reduce using rule 12 (statements_tail -> statements .)
    RBRACE          reduce using rule 12 (statements_tail -> statements .)
    RPAREN          reduce using rule 12 (statements_tail -> statements .)
    REVIVE          reduce using rule 12 (statements_tail -> statements .)
    SHIFT           reduce using rule 12 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 12 (statements_tail -> statements .)


state 83

    (13) statements_tail -> empty .
    (10) statements -> empty .
    (20) declarations -> empty .

  ! reduce/reduce conflict for GHOST resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for GHOST resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 10 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 10 (statements -> empty .)
    GHOST           reduce using rule 10 (statements -> empty .)
    RBRACE          reduce using rule 10 (statements -> empty .)
    RPAREN          reduce using rule 10 (statements -> empty .)
    REVIVE          reduce using rule 10 (statements -> empty .)
    SHIFT           reduce using rule 10 (statements -> empty .)
    OTHERWISE       reduce using rule 10 (statements -> empty .)
    CHECK           reduce using rule 20 (declarations -> empty .)
    SWAP            reduce using rule 20 (declarations -> empty .)
    DISPLAY         reduce using rule 20 (declarations -> empty .)
    GLOBAL          reduce using rule 20 (declarations -> empty .)
    FOR             reduce using rule 20 (declarations -> empty .)
    UNTIL           reduce using rule 20 (declarations -> empty .)
    REPEAT          reduce using rule 20 (declarations -> empty .)
    FUNCTION        reduce using rule 20 (declarations -> empty .)
    IDENT           reduce using rule 20 (declarations -> empty .)
    FUNCTION_INT    reduce using rule 20 (declarations -> empty .)
    FUNCTION_FLT    reduce using rule 20 (declarations -> empty .)
    FUNCTION_CHR    reduce using rule 20 (declarations -> empty .)
    FUNCTION_STR    reduce using rule 20 (declarations -> empty .)
    FUNCTION_BLN    reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_INT reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_FLT reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_CHR reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_STR reduce using rule 20 (declarations -> empty .)
    FUNCTION_LIST_BLN reduce using rule 20 (declarations -> empty .)
    INPUT           reduce using rule 20 (declarations -> empty .)
    LPAREN          reduce using rule 20 (declarations -> empty .)
    STR_LIT         reduce using rule 20 (declarations -> empty .)
    INT             reduce using rule 20 (declarations -> empty .)
    FLT             reduce using rule 20 (declarations -> empty .)
    BLN             reduce using rule 20 (declarations -> empty .)
    CHR             reduce using rule 20 (declarations -> empty .)
    STR             reduce using rule 20 (declarations -> empty .)
    LIST_INT        reduce using rule 20 (declarations -> empty .)
    LIST_FLT        reduce using rule 20 (declarations -> empty .)
    LIST_BLN        reduce using rule 20 (declarations -> empty .)
    LIST_STR        reduce using rule 20 (declarations -> empty .)
    LIST_CHR        reduce using rule 20 (declarations -> empty .)
    INT_LIT         reduce using rule 20 (declarations -> empty .)
    FLT_LIT         reduce using rule 20 (declarations -> empty .)
    BLN_LIT         reduce using rule 20 (declarations -> empty .)

  ! GHOST           [ reduce using rule 13 (statements_tail -> empty .) ]
  ! RBRACE          [ reduce using rule 13 (statements_tail -> empty .) ]
  ! RPAREN          [ reduce using rule 13 (statements_tail -> empty .) ]
  ! REVIVE          [ reduce using rule 13 (statements_tail -> empty .) ]
  ! SHIFT           [ reduce using rule 13 (statements_tail -> empty .) ]
  ! OTHERWISE       [ reduce using rule 13 (statements_tail -> empty .) ]
  ! GHOST           [ reduce using rule 20 (declarations -> empty .) ]
  ! RBRACE          [ reduce using rule 20 (declarations -> empty .) ]
  ! RPAREN          [ reduce using rule 20 (declarations -> empty .) ]
  ! REVIVE          [ reduce using rule 20 (declarations -> empty .) ]
  ! SHIFT           [ reduce using rule 20 (declarations -> empty .) ]
  ! OTHERWISE       [ reduce using rule 20 (declarations -> empty .) ]


state 84

    (3) statements -> loop_statement statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 3 (statements -> loop_statement statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (statements -> loop_statement statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 3 (statements -> loop_statement statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 3 (statements -> loop_statement statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 3 (statements -> loop_statement statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 3 (statements -> loop_statement statements_tail .)
    GHOST           reduce using rule 3 (statements -> loop_statement statements_tail .)
    RBRACE          reduce using rule 3 (statements -> loop_statement statements_tail .)
    RPAREN          reduce using rule 3 (statements -> loop_statement statements_tail .)
    REVIVE          reduce using rule 3 (statements -> loop_statement statements_tail .)
    SHIFT           reduce using rule 3 (statements -> loop_statement statements_tail .)
    OTHERWISE       reduce using rule 3 (statements -> loop_statement statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 85

    (4) statements -> function_statement statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 4 (statements -> function_statement statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (statements -> function_statement statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 4 (statements -> function_statement statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 4 (statements -> function_statement statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 4 (statements -> function_statement statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 4 (statements -> function_statement statements_tail .)
    GHOST           reduce using rule 4 (statements -> function_statement statements_tail .)
    RBRACE          reduce using rule 4 (statements -> function_statement statements_tail .)
    RPAREN          reduce using rule 4 (statements -> function_statement statements_tail .)
    REVIVE          reduce using rule 4 (statements -> function_statement statements_tail .)
    SHIFT           reduce using rule 4 (statements -> function_statement statements_tail .)
    OTHERWISE       reduce using rule 4 (statements -> function_statement statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 86

    (5) statements -> switch_statement statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 5 (statements -> switch_statement statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 5 (statements -> switch_statement statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (statements -> switch_statement statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 5 (statements -> switch_statement statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 5 (statements -> switch_statement statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 5 (statements -> switch_statement statements_tail .)
    GHOST           reduce using rule 5 (statements -> switch_statement statements_tail .)
    RBRACE          reduce using rule 5 (statements -> switch_statement statements_tail .)
    RPAREN          reduce using rule 5 (statements -> switch_statement statements_tail .)
    REVIVE          reduce using rule 5 (statements -> switch_statement statements_tail .)
    SHIFT           reduce using rule 5 (statements -> switch_statement statements_tail .)
    OTHERWISE       reduce using rule 5 (statements -> switch_statement statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 87

    (6) statements -> output_statement statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 6 (statements -> output_statement statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 6 (statements -> output_statement statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 6 (statements -> output_statement statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 6 (statements -> output_statement statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 6 (statements -> output_statement statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 6 (statements -> output_statement statements_tail .)
    GHOST           reduce using rule 6 (statements -> output_statement statements_tail .)
    RBRACE          reduce using rule 6 (statements -> output_statement statements_tail .)
    RPAREN          reduce using rule 6 (statements -> output_statement statements_tail .)
    REVIVE          reduce using rule 6 (statements -> output_statement statements_tail .)
    SHIFT           reduce using rule 6 (statements -> output_statement statements_tail .)
    OTHERWISE       reduce using rule 6 (statements -> output_statement statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 88

    (7) statements -> assignment_statement statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 7 (statements -> assignment_statement statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 7 (statements -> assignment_statement statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 7 (statements -> assignment_statement statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 7 (statements -> assignment_statement statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 7 (statements -> assignment_statement statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 7 (statements -> assignment_statement statements_tail .)
    GHOST           reduce using rule 7 (statements -> assignment_statement statements_tail .)
    RBRACE          reduce using rule 7 (statements -> assignment_statement statements_tail .)
    RPAREN          reduce using rule 7 (statements -> assignment_statement statements_tail .)
    REVIVE          reduce using rule 7 (statements -> assignment_statement statements_tail .)
    SHIFT           reduce using rule 7 (statements -> assignment_statement statements_tail .)
    OTHERWISE       reduce using rule 7 (statements -> assignment_statement statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 89

    (8) statements -> expression statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 8 (statements -> expression statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 8 (statements -> expression statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 8 (statements -> expression statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 8 (statements -> expression statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 8 (statements -> expression statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 8 (statements -> expression statements_tail .)
    GHOST           reduce using rule 8 (statements -> expression statements_tail .)
    RBRACE          reduce using rule 8 (statements -> expression statements_tail .)
    RPAREN          reduce using rule 8 (statements -> expression statements_tail .)
    REVIVE          reduce using rule 8 (statements -> expression statements_tail .)
    SHIFT           reduce using rule 8 (statements -> expression statements_tail .)
    OTHERWISE       reduce using rule 8 (statements -> expression statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 90

    (9) statements -> declarations statements_tail .
    (11) statements_tail -> statements_tail .

  ! reduce/reduce conflict for GHOST resolved using rule 9 (statements -> declarations statements_tail .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (statements -> declarations statements_tail .)
  ! reduce/reduce conflict for RPAREN resolved using rule 9 (statements -> declarations statements_tail .)
  ! reduce/reduce conflict for REVIVE resolved using rule 9 (statements -> declarations statements_tail .)
  ! reduce/reduce conflict for SHIFT resolved using rule 9 (statements -> declarations statements_tail .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 9 (statements -> declarations statements_tail .)
    GHOST           reduce using rule 9 (statements -> declarations statements_tail .)
    RBRACE          reduce using rule 9 (statements -> declarations statements_tail .)
    RPAREN          reduce using rule 9 (statements -> declarations statements_tail .)
    REVIVE          reduce using rule 9 (statements -> declarations statements_tail .)
    SHIFT           reduce using rule 9 (statements -> declarations statements_tail .)
    OTHERWISE       reduce using rule 9 (statements -> declarations statements_tail .)

  ! GHOST           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RBRACE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! RPAREN          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! REVIVE          [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! SHIFT           [ reduce using rule 11 (statements_tail -> statements_tail .) ]
  ! OTHERWISE       [ reduce using rule 11 (statements_tail -> statements_tail .) ]


state 91

    (112) conditional_statement -> CHECK LPAREN . condition RPAREN LBRACE statements RBRACE conditional_tail
    (120) condition -> . relational_expression
    (121) condition -> . logical_expression
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 184
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 75
    IDENT           shift and go to state 77

    condition                      shift and go to state 185
    relational_expression          shift and go to state 186
    logical_expression             shift and go to state 187
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 188
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 92

    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (68) re_term -> LPAREN . re_factor re_tail2 RPAREN re_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2

    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77
    LPAREN          shift and go to state 141

    ae_factor                      shift and go to state 93
    re_factor                      shift and go to state 189
    var_call                       shift and go to state 190
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54

state 93

    (52) ae_term -> LPAREN ae_factor . ae_tail2 RPAREN ae_tail2
    (51) ae_term -> ae_factor . ae_tail2
    (63) ae_tail2 -> . ae_term
    (64) ae_tail2 -> . ae_tail
    (65) ae_tail2 -> . empty
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    LPAREN          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    RPAREN          reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]

    ae_factor                      shift and go to state 69
    ae_tail2                       shift and go to state 191
    ae_term                        shift and go to state 138
    ae_tail                        shift and go to state 139
    empty                          shift and go to state 140
    var_call                       shift and go to state 150

state 94

    (68) re_term -> LPAREN re_factor . re_tail2 RPAREN re_tail2
    (67) re_term -> re_factor . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    RPAREN          reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]

    re_factor                      shift and go to state 70
    re_tail2                       shift and go to state 192
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_term                        shift and go to state 154
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 95

    (85) le_term -> LPAREN le_factor . le_tail2 RPAREN le_tail2
    (92) le_tail2 -> . empty
    (93) le_tail2 -> . le_tail
    (94) le_tail2 -> . le_term
    (183) empty -> .
    (89) le_tail -> . AND le_term
    (90) le_tail -> . OR le_term
    (91) le_tail -> . NOT le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    RPAREN          reduce using rule 183 (empty -> .)
    AND             shift and go to state 170
    OR              shift and go to state 171
    NOT             shift and go to state 172
    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

    le_factor                      shift and go to state 71
    le_tail2                       shift and go to state 193
    empty                          shift and go to state 167
    le_tail                        shift and go to state 168
    le_term                        shift and go to state 169
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 96

    (55) ae_factor -> var_call .
    (73) re_factor -> var_call .
    (88) le_factor -> var_call .

  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)

  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OR              [ reduce using rule 88 (le_factor -> var_call .) ]
  ! NOT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]


state 97

    (69) re_factor -> arithmetic_expression .

    GT              reduce using rule 69 (re_factor -> arithmetic_expression .)
    LT              reduce using rule 69 (re_factor -> arithmetic_expression .)
    EQ              reduce using rule 69 (re_factor -> arithmetic_expression .)
    NOT_EQ          reduce using rule 69 (re_factor -> arithmetic_expression .)
    GT_EQ           reduce using rule 69 (re_factor -> arithmetic_expression .)
    LT_EQ           reduce using rule 69 (re_factor -> arithmetic_expression .)
    LPAREN          reduce using rule 69 (re_factor -> arithmetic_expression .)
    INT_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    FLT_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    BLN_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    IDENT           reduce using rule 69 (re_factor -> arithmetic_expression .)
    RPAREN          reduce using rule 69 (re_factor -> arithmetic_expression .)
    AND             reduce using rule 69 (re_factor -> arithmetic_expression .)
    OR              reduce using rule 69 (re_factor -> arithmetic_expression .)
    NOT             reduce using rule 69 (re_factor -> arithmetic_expression .)
    CHECK           reduce using rule 69 (re_factor -> arithmetic_expression .)
    SWAP            reduce using rule 69 (re_factor -> arithmetic_expression .)
    DISPLAY         reduce using rule 69 (re_factor -> arithmetic_expression .)
    GLOBAL          reduce using rule 69 (re_factor -> arithmetic_expression .)
    FOR             reduce using rule 69 (re_factor -> arithmetic_expression .)
    UNTIL           reduce using rule 69 (re_factor -> arithmetic_expression .)
    REPEAT          reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION        reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_INT    reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_FLT    reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_CHR    reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_STR    reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_BLN    reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_LIST_INT reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_LIST_FLT reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_LIST_CHR reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_LIST_STR reduce using rule 69 (re_factor -> arithmetic_expression .)
    FUNCTION_LIST_BLN reduce using rule 69 (re_factor -> arithmetic_expression .)
    INPUT           reduce using rule 69 (re_factor -> arithmetic_expression .)
    STR_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    INT             reduce using rule 69 (re_factor -> arithmetic_expression .)
    FLT             reduce using rule 69 (re_factor -> arithmetic_expression .)
    BLN             reduce using rule 69 (re_factor -> arithmetic_expression .)
    CHR             reduce using rule 69 (re_factor -> arithmetic_expression .)
    STR             reduce using rule 69 (re_factor -> arithmetic_expression .)
    LIST_INT        reduce using rule 69 (re_factor -> arithmetic_expression .)
    LIST_FLT        reduce using rule 69 (re_factor -> arithmetic_expression .)
    LIST_BLN        reduce using rule 69 (re_factor -> arithmetic_expression .)
    LIST_STR        reduce using rule 69 (re_factor -> arithmetic_expression .)
    LIST_CHR        reduce using rule 69 (re_factor -> arithmetic_expression .)
    GHOST           reduce using rule 69 (re_factor -> arithmetic_expression .)
    RBRACE          reduce using rule 69 (re_factor -> arithmetic_expression .)
    REVIVE          reduce using rule 69 (re_factor -> arithmetic_expression .)
    SHIFT           reduce using rule 69 (re_factor -> arithmetic_expression .)
    OTHERWISE       reduce using rule 69 (re_factor -> arithmetic_expression .)
    COMMA           reduce using rule 69 (re_factor -> arithmetic_expression .)
    COLON           reduce using rule 69 (re_factor -> arithmetic_expression .)
    PLUS_PLUS       reduce using rule 69 (re_factor -> arithmetic_expression .)
    MINUS_MINUS     reduce using rule 69 (re_factor -> arithmetic_expression .)
    RBRACKET        reduce using rule 69 (re_factor -> arithmetic_expression .)
    SEMICOLON       reduce using rule 69 (re_factor -> arithmetic_expression .)


state 98

    (87) le_factor -> relational_expression .

    AND             reduce using rule 87 (le_factor -> relational_expression .)
    OR              reduce using rule 87 (le_factor -> relational_expression .)
    NOT             reduce using rule 87 (le_factor -> relational_expression .)
    LPAREN          reduce using rule 87 (le_factor -> relational_expression .)
    BLN_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    IDENT           reduce using rule 87 (le_factor -> relational_expression .)
    INT_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    FLT_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    RPAREN          reduce using rule 87 (le_factor -> relational_expression .)
    CHECK           reduce using rule 87 (le_factor -> relational_expression .)
    SWAP            reduce using rule 87 (le_factor -> relational_expression .)
    DISPLAY         reduce using rule 87 (le_factor -> relational_expression .)
    GLOBAL          reduce using rule 87 (le_factor -> relational_expression .)
    FOR             reduce using rule 87 (le_factor -> relational_expression .)
    UNTIL           reduce using rule 87 (le_factor -> relational_expression .)
    REPEAT          reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION        reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_INT    reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_FLT    reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_CHR    reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_STR    reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_BLN    reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_LIST_INT reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_LIST_FLT reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_LIST_CHR reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_LIST_STR reduce using rule 87 (le_factor -> relational_expression .)
    FUNCTION_LIST_BLN reduce using rule 87 (le_factor -> relational_expression .)
    INPUT           reduce using rule 87 (le_factor -> relational_expression .)
    STR_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    INT             reduce using rule 87 (le_factor -> relational_expression .)
    FLT             reduce using rule 87 (le_factor -> relational_expression .)
    BLN             reduce using rule 87 (le_factor -> relational_expression .)
    CHR             reduce using rule 87 (le_factor -> relational_expression .)
    STR             reduce using rule 87 (le_factor -> relational_expression .)
    LIST_INT        reduce using rule 87 (le_factor -> relational_expression .)
    LIST_FLT        reduce using rule 87 (le_factor -> relational_expression .)
    LIST_BLN        reduce using rule 87 (le_factor -> relational_expression .)
    LIST_STR        reduce using rule 87 (le_factor -> relational_expression .)
    LIST_CHR        reduce using rule 87 (le_factor -> relational_expression .)
    GHOST           reduce using rule 87 (le_factor -> relational_expression .)
    RBRACE          reduce using rule 87 (le_factor -> relational_expression .)
    REVIVE          reduce using rule 87 (le_factor -> relational_expression .)
    SHIFT           reduce using rule 87 (le_factor -> relational_expression .)
    OTHERWISE       reduce using rule 87 (le_factor -> relational_expression .)
    COMMA           reduce using rule 87 (le_factor -> relational_expression .)
    COLON           reduce using rule 87 (le_factor -> relational_expression .)
    PLUS_PLUS       reduce using rule 87 (le_factor -> relational_expression .)
    MINUS_MINUS     reduce using rule 87 (le_factor -> relational_expression .)
    RBRACKET        reduce using rule 87 (le_factor -> relational_expression .)


state 99

    (141) function_statement -> ret_type IDENT . LPAREN parameters RPAREN LBRACE statements revive RBRACE

    LPAREN          shift and go to state 194


state 100

    (143) function_call -> IDENT LPAREN . arguments RPAREN
    (146) arguments -> . var_call
    (147) arguments -> . literal
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT

    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 198
    FLT_LIT         shift and go to state 199
    BLN_LIT         shift and go to state 200
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 201

    arguments                      shift and go to state 195
    var_call                       shift and go to state 196
    literal                        shift and go to state 197

state 101

    (96) var_call -> IDENT LBRACKET . index RBRACKET
    (110) index -> . INT_LIT
    (111) index -> . IDENT

    INT_LIT         shift and go to state 204
    IDENT           shift and go to state 202

    index                          shift and go to state 203

state 102

    (116) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE

    IDENT           shift and go to state 205


state 103

    (165) output_statement -> DISPLAY value .

    CHECK           reduce using rule 165 (output_statement -> DISPLAY value .)
    SWAP            reduce using rule 165 (output_statement -> DISPLAY value .)
    DISPLAY         reduce using rule 165 (output_statement -> DISPLAY value .)
    GLOBAL          reduce using rule 165 (output_statement -> DISPLAY value .)
    FOR             reduce using rule 165 (output_statement -> DISPLAY value .)
    UNTIL           reduce using rule 165 (output_statement -> DISPLAY value .)
    REPEAT          reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION        reduce using rule 165 (output_statement -> DISPLAY value .)
    IDENT           reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_INT    reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_FLT    reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_CHR    reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_STR    reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_BLN    reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_LIST_INT reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_LIST_FLT reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_LIST_CHR reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_LIST_STR reduce using rule 165 (output_statement -> DISPLAY value .)
    FUNCTION_LIST_BLN reduce using rule 165 (output_statement -> DISPLAY value .)
    INPUT           reduce using rule 165 (output_statement -> DISPLAY value .)
    LPAREN          reduce using rule 165 (output_statement -> DISPLAY value .)
    STR_LIT         reduce using rule 165 (output_statement -> DISPLAY value .)
    INT             reduce using rule 165 (output_statement -> DISPLAY value .)
    FLT             reduce using rule 165 (output_statement -> DISPLAY value .)
    BLN             reduce using rule 165 (output_statement -> DISPLAY value .)
    CHR             reduce using rule 165 (output_statement -> DISPLAY value .)
    STR             reduce using rule 165 (output_statement -> DISPLAY value .)
    LIST_INT        reduce using rule 165 (output_statement -> DISPLAY value .)
    LIST_FLT        reduce using rule 165 (output_statement -> DISPLAY value .)
    LIST_BLN        reduce using rule 165 (output_statement -> DISPLAY value .)
    LIST_STR        reduce using rule 165 (output_statement -> DISPLAY value .)
    LIST_CHR        reduce using rule 165 (output_statement -> DISPLAY value .)
    INT_LIT         reduce using rule 165 (output_statement -> DISPLAY value .)
    FLT_LIT         reduce using rule 165 (output_statement -> DISPLAY value .)
    BLN_LIT         reduce using rule 165 (output_statement -> DISPLAY value .)
    GHOST           reduce using rule 165 (output_statement -> DISPLAY value .)
    RBRACE          reduce using rule 165 (output_statement -> DISPLAY value .)
    RPAREN          reduce using rule 165 (output_statement -> DISPLAY value .)
    REVIVE          reduce using rule 165 (output_statement -> DISPLAY value .)
    SHIFT           reduce using rule 165 (output_statement -> DISPLAY value .)
    OTHERWISE       reduce using rule 165 (output_statement -> DISPLAY value .)
    COMMA           reduce using rule 165 (output_statement -> DISPLAY value .)
    COLON           reduce using rule 165 (output_statement -> DISPLAY value .)
    PLUS_PLUS       reduce using rule 165 (output_statement -> DISPLAY value .)
    MINUS_MINUS     reduce using rule 165 (output_statement -> DISPLAY value .)
    RBRACKET        reduce using rule 165 (output_statement -> DISPLAY value .)


state 104

    (166) output_statement -> DISPLAY LPAREN . value RPAREN
    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (68) re_term -> LPAREN . re_factor re_tail2 RPAREN re_tail2
    (85) le_term -> LPAREN . le_factor le_tail2 RPAREN le_tail2
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT

    INT_LIT         shift and go to state 208
    FLT_LIT         shift and go to state 209
    BLN_LIT         shift and go to state 211
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 206
    ae_factor                      shift and go to state 93
    re_factor                      shift and go to state 94
    le_factor                      shift and go to state 207
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 210
    relational_expression          shift and go to state 212
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57

state 105

    (32) value -> literal .

    CHECK           reduce using rule 32 (value -> literal .)
    SWAP            reduce using rule 32 (value -> literal .)
    DISPLAY         reduce using rule 32 (value -> literal .)
    GLOBAL          reduce using rule 32 (value -> literal .)
    FOR             reduce using rule 32 (value -> literal .)
    UNTIL           reduce using rule 32 (value -> literal .)
    REPEAT          reduce using rule 32 (value -> literal .)
    FUNCTION        reduce using rule 32 (value -> literal .)
    IDENT           reduce using rule 32 (value -> literal .)
    FUNCTION_INT    reduce using rule 32 (value -> literal .)
    FUNCTION_FLT    reduce using rule 32 (value -> literal .)
    FUNCTION_CHR    reduce using rule 32 (value -> literal .)
    FUNCTION_STR    reduce using rule 32 (value -> literal .)
    FUNCTION_BLN    reduce using rule 32 (value -> literal .)
    FUNCTION_LIST_INT reduce using rule 32 (value -> literal .)
    FUNCTION_LIST_FLT reduce using rule 32 (value -> literal .)
    FUNCTION_LIST_CHR reduce using rule 32 (value -> literal .)
    FUNCTION_LIST_STR reduce using rule 32 (value -> literal .)
    FUNCTION_LIST_BLN reduce using rule 32 (value -> literal .)
    INPUT           reduce using rule 32 (value -> literal .)
    LPAREN          reduce using rule 32 (value -> literal .)
    STR_LIT         reduce using rule 32 (value -> literal .)
    INT             reduce using rule 32 (value -> literal .)
    FLT             reduce using rule 32 (value -> literal .)
    BLN             reduce using rule 32 (value -> literal .)
    CHR             reduce using rule 32 (value -> literal .)
    STR             reduce using rule 32 (value -> literal .)
    LIST_INT        reduce using rule 32 (value -> literal .)
    LIST_FLT        reduce using rule 32 (value -> literal .)
    LIST_BLN        reduce using rule 32 (value -> literal .)
    LIST_STR        reduce using rule 32 (value -> literal .)
    LIST_CHR        reduce using rule 32 (value -> literal .)
    INT_LIT         reduce using rule 32 (value -> literal .)
    FLT_LIT         reduce using rule 32 (value -> literal .)
    BLN_LIT         reduce using rule 32 (value -> literal .)
    GHOST           reduce using rule 32 (value -> literal .)
    RBRACE          reduce using rule 32 (value -> literal .)
    RPAREN          reduce using rule 32 (value -> literal .)
    REVIVE          reduce using rule 32 (value -> literal .)
    SHIFT           reduce using rule 32 (value -> literal .)
    OTHERWISE       reduce using rule 32 (value -> literal .)
    COMMA           reduce using rule 32 (value -> literal .)
    COLON           reduce using rule 32 (value -> literal .)
    PLUS_PLUS       reduce using rule 32 (value -> literal .)
    MINUS_MINUS     reduce using rule 32 (value -> literal .)
    RBRACKET        reduce using rule 32 (value -> literal .)


state 106

    (33) value -> expression .

    CHECK           reduce using rule 33 (value -> expression .)
    SWAP            reduce using rule 33 (value -> expression .)
    DISPLAY         reduce using rule 33 (value -> expression .)
    GLOBAL          reduce using rule 33 (value -> expression .)
    FOR             reduce using rule 33 (value -> expression .)
    UNTIL           reduce using rule 33 (value -> expression .)
    REPEAT          reduce using rule 33 (value -> expression .)
    FUNCTION        reduce using rule 33 (value -> expression .)
    IDENT           reduce using rule 33 (value -> expression .)
    FUNCTION_INT    reduce using rule 33 (value -> expression .)
    FUNCTION_FLT    reduce using rule 33 (value -> expression .)
    FUNCTION_CHR    reduce using rule 33 (value -> expression .)
    FUNCTION_STR    reduce using rule 33 (value -> expression .)
    FUNCTION_BLN    reduce using rule 33 (value -> expression .)
    FUNCTION_LIST_INT reduce using rule 33 (value -> expression .)
    FUNCTION_LIST_FLT reduce using rule 33 (value -> expression .)
    FUNCTION_LIST_CHR reduce using rule 33 (value -> expression .)
    FUNCTION_LIST_STR reduce using rule 33 (value -> expression .)
    FUNCTION_LIST_BLN reduce using rule 33 (value -> expression .)
    INPUT           reduce using rule 33 (value -> expression .)
    LPAREN          reduce using rule 33 (value -> expression .)
    STR_LIT         reduce using rule 33 (value -> expression .)
    INT             reduce using rule 33 (value -> expression .)
    FLT             reduce using rule 33 (value -> expression .)
    BLN             reduce using rule 33 (value -> expression .)
    CHR             reduce using rule 33 (value -> expression .)
    STR             reduce using rule 33 (value -> expression .)
    LIST_INT        reduce using rule 33 (value -> expression .)
    LIST_FLT        reduce using rule 33 (value -> expression .)
    LIST_BLN        reduce using rule 33 (value -> expression .)
    LIST_STR        reduce using rule 33 (value -> expression .)
    LIST_CHR        reduce using rule 33 (value -> expression .)
    INT_LIT         reduce using rule 33 (value -> expression .)
    FLT_LIT         reduce using rule 33 (value -> expression .)
    BLN_LIT         reduce using rule 33 (value -> expression .)
    GHOST           reduce using rule 33 (value -> expression .)
    RBRACE          reduce using rule 33 (value -> expression .)
    RPAREN          reduce using rule 33 (value -> expression .)
    REVIVE          reduce using rule 33 (value -> expression .)
    SHIFT           reduce using rule 33 (value -> expression .)
    OTHERWISE       reduce using rule 33 (value -> expression .)
    COMMA           reduce using rule 33 (value -> expression .)
    COLON           reduce using rule 33 (value -> expression .)
    PLUS_PLUS       reduce using rule 33 (value -> expression .)
    MINUS_MINUS     reduce using rule 33 (value -> expression .)
    RBRACKET        reduce using rule 33 (value -> expression .)


state 107

    (34) value -> var_call .
    (55) ae_factor -> var_call .
    (73) re_factor -> var_call .
    (88) le_factor -> var_call .

  ! reduce/reduce conflict for LPAREN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 34 (value -> var_call .)
    CHECK           reduce using rule 34 (value -> var_call .)
    SWAP            reduce using rule 34 (value -> var_call .)
    DISPLAY         reduce using rule 34 (value -> var_call .)
    GLOBAL          reduce using rule 34 (value -> var_call .)
    FOR             reduce using rule 34 (value -> var_call .)
    UNTIL           reduce using rule 34 (value -> var_call .)
    REPEAT          reduce using rule 34 (value -> var_call .)
    FUNCTION        reduce using rule 34 (value -> var_call .)
    IDENT           reduce using rule 34 (value -> var_call .)
    FUNCTION_INT    reduce using rule 34 (value -> var_call .)
    FUNCTION_FLT    reduce using rule 34 (value -> var_call .)
    FUNCTION_CHR    reduce using rule 34 (value -> var_call .)
    FUNCTION_STR    reduce using rule 34 (value -> var_call .)
    FUNCTION_BLN    reduce using rule 34 (value -> var_call .)
    FUNCTION_LIST_INT reduce using rule 34 (value -> var_call .)
    FUNCTION_LIST_FLT reduce using rule 34 (value -> var_call .)
    FUNCTION_LIST_CHR reduce using rule 34 (value -> var_call .)
    FUNCTION_LIST_STR reduce using rule 34 (value -> var_call .)
    FUNCTION_LIST_BLN reduce using rule 34 (value -> var_call .)
    INPUT           reduce using rule 34 (value -> var_call .)
    LPAREN          reduce using rule 34 (value -> var_call .)
    STR_LIT         reduce using rule 34 (value -> var_call .)
    INT             reduce using rule 34 (value -> var_call .)
    FLT             reduce using rule 34 (value -> var_call .)
    BLN             reduce using rule 34 (value -> var_call .)
    CHR             reduce using rule 34 (value -> var_call .)
    STR             reduce using rule 34 (value -> var_call .)
    LIST_INT        reduce using rule 34 (value -> var_call .)
    LIST_FLT        reduce using rule 34 (value -> var_call .)
    LIST_BLN        reduce using rule 34 (value -> var_call .)
    LIST_STR        reduce using rule 34 (value -> var_call .)
    LIST_CHR        reduce using rule 34 (value -> var_call .)
    INT_LIT         reduce using rule 34 (value -> var_call .)
    FLT_LIT         reduce using rule 34 (value -> var_call .)
    BLN_LIT         reduce using rule 34 (value -> var_call .)
    GHOST           reduce using rule 34 (value -> var_call .)
    RBRACE          reduce using rule 34 (value -> var_call .)
    RPAREN          reduce using rule 34 (value -> var_call .)
    REVIVE          reduce using rule 34 (value -> var_call .)
    SHIFT           reduce using rule 34 (value -> var_call .)
    OTHERWISE       reduce using rule 34 (value -> var_call .)
    COMMA           reduce using rule 34 (value -> var_call .)
    COLON           reduce using rule 34 (value -> var_call .)
    PLUS_PLUS       reduce using rule 34 (value -> var_call .)
    MINUS_MINUS     reduce using rule 34 (value -> var_call .)
    RBRACKET        reduce using rule 34 (value -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)

  ! LPAREN          [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FOR             [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! INT             [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! FLT             [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! BLN             [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! CHR             [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! STR             [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! COMMA           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! COLON           [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! RBRACKET        [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 73 (re_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FOR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! COMMA           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! COLON           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACKET        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OR              [ reduce using rule 88 (le_factor -> var_call .) ]
  ! NOT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 88 (le_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FOR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! CHR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! STR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 88 (le_factor -> var_call .) ]
  ! COMMA           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! COLON           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 88 (le_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RBRACKET        [ reduce using rule 88 (le_factor -> var_call .) ]


state 108

    (35) value -> function_call .

    CHECK           reduce using rule 35 (value -> function_call .)
    SWAP            reduce using rule 35 (value -> function_call .)
    DISPLAY         reduce using rule 35 (value -> function_call .)
    GLOBAL          reduce using rule 35 (value -> function_call .)
    FOR             reduce using rule 35 (value -> function_call .)
    UNTIL           reduce using rule 35 (value -> function_call .)
    REPEAT          reduce using rule 35 (value -> function_call .)
    FUNCTION        reduce using rule 35 (value -> function_call .)
    IDENT           reduce using rule 35 (value -> function_call .)
    FUNCTION_INT    reduce using rule 35 (value -> function_call .)
    FUNCTION_FLT    reduce using rule 35 (value -> function_call .)
    FUNCTION_CHR    reduce using rule 35 (value -> function_call .)
    FUNCTION_STR    reduce using rule 35 (value -> function_call .)
    FUNCTION_BLN    reduce using rule 35 (value -> function_call .)
    FUNCTION_LIST_INT reduce using rule 35 (value -> function_call .)
    FUNCTION_LIST_FLT reduce using rule 35 (value -> function_call .)
    FUNCTION_LIST_CHR reduce using rule 35 (value -> function_call .)
    FUNCTION_LIST_STR reduce using rule 35 (value -> function_call .)
    FUNCTION_LIST_BLN reduce using rule 35 (value -> function_call .)
    INPUT           reduce using rule 35 (value -> function_call .)
    LPAREN          reduce using rule 35 (value -> function_call .)
    STR_LIT         reduce using rule 35 (value -> function_call .)
    INT             reduce using rule 35 (value -> function_call .)
    FLT             reduce using rule 35 (value -> function_call .)
    BLN             reduce using rule 35 (value -> function_call .)
    CHR             reduce using rule 35 (value -> function_call .)
    STR             reduce using rule 35 (value -> function_call .)
    LIST_INT        reduce using rule 35 (value -> function_call .)
    LIST_FLT        reduce using rule 35 (value -> function_call .)
    LIST_BLN        reduce using rule 35 (value -> function_call .)
    LIST_STR        reduce using rule 35 (value -> function_call .)
    LIST_CHR        reduce using rule 35 (value -> function_call .)
    INT_LIT         reduce using rule 35 (value -> function_call .)
    FLT_LIT         reduce using rule 35 (value -> function_call .)
    BLN_LIT         reduce using rule 35 (value -> function_call .)
    GHOST           reduce using rule 35 (value -> function_call .)
    RBRACE          reduce using rule 35 (value -> function_call .)
    RPAREN          reduce using rule 35 (value -> function_call .)
    REVIVE          reduce using rule 35 (value -> function_call .)
    SHIFT           reduce using rule 35 (value -> function_call .)
    OTHERWISE       reduce using rule 35 (value -> function_call .)
    COMMA           reduce using rule 35 (value -> function_call .)
    COLON           reduce using rule 35 (value -> function_call .)
    PLUS_PLUS       reduce using rule 35 (value -> function_call .)
    MINUS_MINUS     reduce using rule 35 (value -> function_call .)
    RBRACKET        reduce using rule 35 (value -> function_call .)


state 109

    (36) value -> type_cast .

    CHECK           reduce using rule 36 (value -> type_cast .)
    SWAP            reduce using rule 36 (value -> type_cast .)
    DISPLAY         reduce using rule 36 (value -> type_cast .)
    GLOBAL          reduce using rule 36 (value -> type_cast .)
    FOR             reduce using rule 36 (value -> type_cast .)
    UNTIL           reduce using rule 36 (value -> type_cast .)
    REPEAT          reduce using rule 36 (value -> type_cast .)
    FUNCTION        reduce using rule 36 (value -> type_cast .)
    IDENT           reduce using rule 36 (value -> type_cast .)
    FUNCTION_INT    reduce using rule 36 (value -> type_cast .)
    FUNCTION_FLT    reduce using rule 36 (value -> type_cast .)
    FUNCTION_CHR    reduce using rule 36 (value -> type_cast .)
    FUNCTION_STR    reduce using rule 36 (value -> type_cast .)
    FUNCTION_BLN    reduce using rule 36 (value -> type_cast .)
    FUNCTION_LIST_INT reduce using rule 36 (value -> type_cast .)
    FUNCTION_LIST_FLT reduce using rule 36 (value -> type_cast .)
    FUNCTION_LIST_CHR reduce using rule 36 (value -> type_cast .)
    FUNCTION_LIST_STR reduce using rule 36 (value -> type_cast .)
    FUNCTION_LIST_BLN reduce using rule 36 (value -> type_cast .)
    INPUT           reduce using rule 36 (value -> type_cast .)
    LPAREN          reduce using rule 36 (value -> type_cast .)
    STR_LIT         reduce using rule 36 (value -> type_cast .)
    INT             reduce using rule 36 (value -> type_cast .)
    FLT             reduce using rule 36 (value -> type_cast .)
    BLN             reduce using rule 36 (value -> type_cast .)
    CHR             reduce using rule 36 (value -> type_cast .)
    STR             reduce using rule 36 (value -> type_cast .)
    LIST_INT        reduce using rule 36 (value -> type_cast .)
    LIST_FLT        reduce using rule 36 (value -> type_cast .)
    LIST_BLN        reduce using rule 36 (value -> type_cast .)
    LIST_STR        reduce using rule 36 (value -> type_cast .)
    LIST_CHR        reduce using rule 36 (value -> type_cast .)
    INT_LIT         reduce using rule 36 (value -> type_cast .)
    FLT_LIT         reduce using rule 36 (value -> type_cast .)
    BLN_LIT         reduce using rule 36 (value -> type_cast .)
    GHOST           reduce using rule 36 (value -> type_cast .)
    RBRACE          reduce using rule 36 (value -> type_cast .)
    RPAREN          reduce using rule 36 (value -> type_cast .)
    REVIVE          reduce using rule 36 (value -> type_cast .)
    SHIFT           reduce using rule 36 (value -> type_cast .)
    OTHERWISE       reduce using rule 36 (value -> type_cast .)
    COMMA           reduce using rule 36 (value -> type_cast .)
    COLON           reduce using rule 36 (value -> type_cast .)
    PLUS_PLUS       reduce using rule 36 (value -> type_cast .)
    MINUS_MINUS     reduce using rule 36 (value -> type_cast .)
    RBRACKET        reduce using rule 36 (value -> type_cast .)


state 110

    (37) value -> not_op .

    CHECK           reduce using rule 37 (value -> not_op .)
    SWAP            reduce using rule 37 (value -> not_op .)
    DISPLAY         reduce using rule 37 (value -> not_op .)
    GLOBAL          reduce using rule 37 (value -> not_op .)
    FOR             reduce using rule 37 (value -> not_op .)
    UNTIL           reduce using rule 37 (value -> not_op .)
    REPEAT          reduce using rule 37 (value -> not_op .)
    FUNCTION        reduce using rule 37 (value -> not_op .)
    IDENT           reduce using rule 37 (value -> not_op .)
    FUNCTION_INT    reduce using rule 37 (value -> not_op .)
    FUNCTION_FLT    reduce using rule 37 (value -> not_op .)
    FUNCTION_CHR    reduce using rule 37 (value -> not_op .)
    FUNCTION_STR    reduce using rule 37 (value -> not_op .)
    FUNCTION_BLN    reduce using rule 37 (value -> not_op .)
    FUNCTION_LIST_INT reduce using rule 37 (value -> not_op .)
    FUNCTION_LIST_FLT reduce using rule 37 (value -> not_op .)
    FUNCTION_LIST_CHR reduce using rule 37 (value -> not_op .)
    FUNCTION_LIST_STR reduce using rule 37 (value -> not_op .)
    FUNCTION_LIST_BLN reduce using rule 37 (value -> not_op .)
    INPUT           reduce using rule 37 (value -> not_op .)
    LPAREN          reduce using rule 37 (value -> not_op .)
    STR_LIT         reduce using rule 37 (value -> not_op .)
    INT             reduce using rule 37 (value -> not_op .)
    FLT             reduce using rule 37 (value -> not_op .)
    BLN             reduce using rule 37 (value -> not_op .)
    CHR             reduce using rule 37 (value -> not_op .)
    STR             reduce using rule 37 (value -> not_op .)
    LIST_INT        reduce using rule 37 (value -> not_op .)
    LIST_FLT        reduce using rule 37 (value -> not_op .)
    LIST_BLN        reduce using rule 37 (value -> not_op .)
    LIST_STR        reduce using rule 37 (value -> not_op .)
    LIST_CHR        reduce using rule 37 (value -> not_op .)
    INT_LIT         reduce using rule 37 (value -> not_op .)
    FLT_LIT         reduce using rule 37 (value -> not_op .)
    BLN_LIT         reduce using rule 37 (value -> not_op .)
    GHOST           reduce using rule 37 (value -> not_op .)
    RBRACE          reduce using rule 37 (value -> not_op .)
    RPAREN          reduce using rule 37 (value -> not_op .)
    REVIVE          reduce using rule 37 (value -> not_op .)
    SHIFT           reduce using rule 37 (value -> not_op .)
    OTHERWISE       reduce using rule 37 (value -> not_op .)
    COMMA           reduce using rule 37 (value -> not_op .)
    COLON           reduce using rule 37 (value -> not_op .)
    PLUS_PLUS       reduce using rule 37 (value -> not_op .)
    MINUS_MINUS     reduce using rule 37 (value -> not_op .)
    RBRACKET        reduce using rule 37 (value -> not_op .)


state 111

    (38) value -> negative_val .

    CHECK           reduce using rule 38 (value -> negative_val .)
    SWAP            reduce using rule 38 (value -> negative_val .)
    DISPLAY         reduce using rule 38 (value -> negative_val .)
    GLOBAL          reduce using rule 38 (value -> negative_val .)
    FOR             reduce using rule 38 (value -> negative_val .)
    UNTIL           reduce using rule 38 (value -> negative_val .)
    REPEAT          reduce using rule 38 (value -> negative_val .)
    FUNCTION        reduce using rule 38 (value -> negative_val .)
    IDENT           reduce using rule 38 (value -> negative_val .)
    FUNCTION_INT    reduce using rule 38 (value -> negative_val .)
    FUNCTION_FLT    reduce using rule 38 (value -> negative_val .)
    FUNCTION_CHR    reduce using rule 38 (value -> negative_val .)
    FUNCTION_STR    reduce using rule 38 (value -> negative_val .)
    FUNCTION_BLN    reduce using rule 38 (value -> negative_val .)
    FUNCTION_LIST_INT reduce using rule 38 (value -> negative_val .)
    FUNCTION_LIST_FLT reduce using rule 38 (value -> negative_val .)
    FUNCTION_LIST_CHR reduce using rule 38 (value -> negative_val .)
    FUNCTION_LIST_STR reduce using rule 38 (value -> negative_val .)
    FUNCTION_LIST_BLN reduce using rule 38 (value -> negative_val .)
    INPUT           reduce using rule 38 (value -> negative_val .)
    LPAREN          reduce using rule 38 (value -> negative_val .)
    STR_LIT         reduce using rule 38 (value -> negative_val .)
    INT             reduce using rule 38 (value -> negative_val .)
    FLT             reduce using rule 38 (value -> negative_val .)
    BLN             reduce using rule 38 (value -> negative_val .)
    CHR             reduce using rule 38 (value -> negative_val .)
    STR             reduce using rule 38 (value -> negative_val .)
    LIST_INT        reduce using rule 38 (value -> negative_val .)
    LIST_FLT        reduce using rule 38 (value -> negative_val .)
    LIST_BLN        reduce using rule 38 (value -> negative_val .)
    LIST_STR        reduce using rule 38 (value -> negative_val .)
    LIST_CHR        reduce using rule 38 (value -> negative_val .)
    INT_LIT         reduce using rule 38 (value -> negative_val .)
    FLT_LIT         reduce using rule 38 (value -> negative_val .)
    BLN_LIT         reduce using rule 38 (value -> negative_val .)
    GHOST           reduce using rule 38 (value -> negative_val .)
    RBRACE          reduce using rule 38 (value -> negative_val .)
    RPAREN          reduce using rule 38 (value -> negative_val .)
    REVIVE          reduce using rule 38 (value -> negative_val .)
    SHIFT           reduce using rule 38 (value -> negative_val .)
    OTHERWISE       reduce using rule 38 (value -> negative_val .)
    COMMA           reduce using rule 38 (value -> negative_val .)
    COLON           reduce using rule 38 (value -> negative_val .)
    PLUS_PLUS       reduce using rule 38 (value -> negative_val .)
    MINUS_MINUS     reduce using rule 38 (value -> negative_val .)
    RBRACKET        reduce using rule 38 (value -> negative_val .)


state 112

    (41) literal -> INT_LIT .
    (53) ae_factor -> INT_LIT .
    (70) re_factor -> INT_LIT .

  ! reduce/reduce conflict for LPAREN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for GT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 41 (literal -> INT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 53 (ae_factor -> INT_LIT .)
    CHECK           reduce using rule 41 (literal -> INT_LIT .)
    SWAP            reduce using rule 41 (literal -> INT_LIT .)
    DISPLAY         reduce using rule 41 (literal -> INT_LIT .)
    GLOBAL          reduce using rule 41 (literal -> INT_LIT .)
    FOR             reduce using rule 41 (literal -> INT_LIT .)
    UNTIL           reduce using rule 41 (literal -> INT_LIT .)
    REPEAT          reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION        reduce using rule 41 (literal -> INT_LIT .)
    IDENT           reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_INT    reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_FLT    reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_CHR    reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_STR    reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_BLN    reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_LIST_INT reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_LIST_STR reduce using rule 41 (literal -> INT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 41 (literal -> INT_LIT .)
    INPUT           reduce using rule 41 (literal -> INT_LIT .)
    LPAREN          reduce using rule 41 (literal -> INT_LIT .)
    STR_LIT         reduce using rule 41 (literal -> INT_LIT .)
    INT             reduce using rule 41 (literal -> INT_LIT .)
    FLT             reduce using rule 41 (literal -> INT_LIT .)
    BLN             reduce using rule 41 (literal -> INT_LIT .)
    CHR             reduce using rule 41 (literal -> INT_LIT .)
    STR             reduce using rule 41 (literal -> INT_LIT .)
    LIST_INT        reduce using rule 41 (literal -> INT_LIT .)
    LIST_FLT        reduce using rule 41 (literal -> INT_LIT .)
    LIST_BLN        reduce using rule 41 (literal -> INT_LIT .)
    LIST_STR        reduce using rule 41 (literal -> INT_LIT .)
    LIST_CHR        reduce using rule 41 (literal -> INT_LIT .)
    INT_LIT         reduce using rule 41 (literal -> INT_LIT .)
    FLT_LIT         reduce using rule 41 (literal -> INT_LIT .)
    BLN_LIT         reduce using rule 41 (literal -> INT_LIT .)
    GHOST           reduce using rule 41 (literal -> INT_LIT .)
    RBRACE          reduce using rule 41 (literal -> INT_LIT .)
    RPAREN          reduce using rule 41 (literal -> INT_LIT .)
    REVIVE          reduce using rule 41 (literal -> INT_LIT .)
    SHIFT           reduce using rule 41 (literal -> INT_LIT .)
    OTHERWISE       reduce using rule 41 (literal -> INT_LIT .)
    COMMA           reduce using rule 41 (literal -> INT_LIT .)
    COLON           reduce using rule 41 (literal -> INT_LIT .)
    PLUS_PLUS       reduce using rule 41 (literal -> INT_LIT .)
    MINUS_MINUS     reduce using rule 41 (literal -> INT_LIT .)
    RBRACKET        reduce using rule 41 (literal -> INT_LIT .)
    PLUS            reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS           reduce using rule 53 (ae_factor -> INT_LIT .)
    DIVISION        reduce using rule 53 (ae_factor -> INT_LIT .)
    MULTIPLY        reduce using rule 53 (ae_factor -> INT_LIT .)
    MODULO          reduce using rule 53 (ae_factor -> INT_LIT .)
    EXPONENT        reduce using rule 53 (ae_factor -> INT_LIT .)
    GT              reduce using rule 53 (ae_factor -> INT_LIT .)
    LT              reduce using rule 53 (ae_factor -> INT_LIT .)
    EQ              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT_EQ          reduce using rule 53 (ae_factor -> INT_LIT .)
    GT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    LT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    AND             reduce using rule 53 (ae_factor -> INT_LIT .)
    OR              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT             reduce using rule 53 (ae_factor -> INT_LIT .)

  ! LPAREN          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! INT_LIT         [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! IDENT           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! CHECK           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! SWAP            [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! DISPLAY         [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! GLOBAL          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FOR             [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! UNTIL           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! REPEAT          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! INPUT           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! STR_LIT         [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! INT             [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! FLT             [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! BLN             [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! CHR             [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! STR             [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! LIST_INT        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! LIST_STR        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! GHOST           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! RBRACE          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! RPAREN          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! REVIVE          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! SHIFT           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! COMMA           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! COLON           [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! RBRACKET        [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! GT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! EQ              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! IDENT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! CHECK           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SWAP            [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! DISPLAY         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GLOBAL          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FOR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! UNTIL           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! REPEAT          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INPUT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! STR_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! CHR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! STR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_INT        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_STR        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GHOST           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RBRACE          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! REVIVE          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SHIFT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! COMMA           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! COLON           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RBRACKET        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! AND             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OR              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]


state 113

    (42) literal -> FLT_LIT .
    (54) ae_factor -> FLT_LIT .
    (71) re_factor -> FLT_LIT .

  ! reduce/reduce conflict for LPAREN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for GT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 42 (literal -> FLT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 54 (ae_factor -> FLT_LIT .)
    CHECK           reduce using rule 42 (literal -> FLT_LIT .)
    SWAP            reduce using rule 42 (literal -> FLT_LIT .)
    DISPLAY         reduce using rule 42 (literal -> FLT_LIT .)
    GLOBAL          reduce using rule 42 (literal -> FLT_LIT .)
    FOR             reduce using rule 42 (literal -> FLT_LIT .)
    UNTIL           reduce using rule 42 (literal -> FLT_LIT .)
    REPEAT          reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION        reduce using rule 42 (literal -> FLT_LIT .)
    IDENT           reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_INT    reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_FLT    reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_CHR    reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_STR    reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_BLN    reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_LIST_INT reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_LIST_STR reduce using rule 42 (literal -> FLT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 42 (literal -> FLT_LIT .)
    INPUT           reduce using rule 42 (literal -> FLT_LIT .)
    LPAREN          reduce using rule 42 (literal -> FLT_LIT .)
    STR_LIT         reduce using rule 42 (literal -> FLT_LIT .)
    INT             reduce using rule 42 (literal -> FLT_LIT .)
    FLT             reduce using rule 42 (literal -> FLT_LIT .)
    BLN             reduce using rule 42 (literal -> FLT_LIT .)
    CHR             reduce using rule 42 (literal -> FLT_LIT .)
    STR             reduce using rule 42 (literal -> FLT_LIT .)
    LIST_INT        reduce using rule 42 (literal -> FLT_LIT .)
    LIST_FLT        reduce using rule 42 (literal -> FLT_LIT .)
    LIST_BLN        reduce using rule 42 (literal -> FLT_LIT .)
    LIST_STR        reduce using rule 42 (literal -> FLT_LIT .)
    LIST_CHR        reduce using rule 42 (literal -> FLT_LIT .)
    INT_LIT         reduce using rule 42 (literal -> FLT_LIT .)
    FLT_LIT         reduce using rule 42 (literal -> FLT_LIT .)
    BLN_LIT         reduce using rule 42 (literal -> FLT_LIT .)
    GHOST           reduce using rule 42 (literal -> FLT_LIT .)
    RBRACE          reduce using rule 42 (literal -> FLT_LIT .)
    RPAREN          reduce using rule 42 (literal -> FLT_LIT .)
    REVIVE          reduce using rule 42 (literal -> FLT_LIT .)
    SHIFT           reduce using rule 42 (literal -> FLT_LIT .)
    OTHERWISE       reduce using rule 42 (literal -> FLT_LIT .)
    COMMA           reduce using rule 42 (literal -> FLT_LIT .)
    COLON           reduce using rule 42 (literal -> FLT_LIT .)
    PLUS_PLUS       reduce using rule 42 (literal -> FLT_LIT .)
    MINUS_MINUS     reduce using rule 42 (literal -> FLT_LIT .)
    RBRACKET        reduce using rule 42 (literal -> FLT_LIT .)
    PLUS            reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS           reduce using rule 54 (ae_factor -> FLT_LIT .)
    DIVISION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MULTIPLY        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MODULO          reduce using rule 54 (ae_factor -> FLT_LIT .)
    EXPONENT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    EQ              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT_EQ          reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    AND             reduce using rule 54 (ae_factor -> FLT_LIT .)
    OR              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT             reduce using rule 54 (ae_factor -> FLT_LIT .)

  ! LPAREN          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! INT_LIT         [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! IDENT           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! CHECK           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! SWAP            [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! DISPLAY         [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! GLOBAL          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FOR             [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! UNTIL           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! REPEAT          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! INPUT           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! STR_LIT         [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! INT             [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! FLT             [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! BLN             [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! CHR             [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! STR             [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! LIST_INT        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! LIST_STR        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! GHOST           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! RBRACE          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! RPAREN          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! REVIVE          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! SHIFT           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! COMMA           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! COLON           [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! RBRACKET        [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! GT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! EQ              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! IDENT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! CHECK           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SWAP            [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! DISPLAY         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GLOBAL          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FOR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! UNTIL           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! REPEAT          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INPUT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! STR_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! CHR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! STR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_INT        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_STR        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GHOST           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RBRACE          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! REVIVE          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SHIFT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! COMMA           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! COLON           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RBRACKET        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! AND             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OR              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]


state 114

    (43) literal -> BLN_LIT .
    (72) re_factor -> BLN_LIT .
    (86) le_factor -> BLN_LIT .

  ! reduce/reduce conflict for LPAREN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 43 (literal -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 43 (literal -> BLN_LIT .)
    CHECK           reduce using rule 43 (literal -> BLN_LIT .)
    SWAP            reduce using rule 43 (literal -> BLN_LIT .)
    DISPLAY         reduce using rule 43 (literal -> BLN_LIT .)
    GLOBAL          reduce using rule 43 (literal -> BLN_LIT .)
    FOR             reduce using rule 43 (literal -> BLN_LIT .)
    UNTIL           reduce using rule 43 (literal -> BLN_LIT .)
    REPEAT          reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION        reduce using rule 43 (literal -> BLN_LIT .)
    IDENT           reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_INT    reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_FLT    reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_CHR    reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_STR    reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_BLN    reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_LIST_INT reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_LIST_FLT reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_LIST_CHR reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_LIST_STR reduce using rule 43 (literal -> BLN_LIT .)
    FUNCTION_LIST_BLN reduce using rule 43 (literal -> BLN_LIT .)
    INPUT           reduce using rule 43 (literal -> BLN_LIT .)
    LPAREN          reduce using rule 43 (literal -> BLN_LIT .)
    STR_LIT         reduce using rule 43 (literal -> BLN_LIT .)
    INT             reduce using rule 43 (literal -> BLN_LIT .)
    FLT             reduce using rule 43 (literal -> BLN_LIT .)
    BLN             reduce using rule 43 (literal -> BLN_LIT .)
    CHR             reduce using rule 43 (literal -> BLN_LIT .)
    STR             reduce using rule 43 (literal -> BLN_LIT .)
    LIST_INT        reduce using rule 43 (literal -> BLN_LIT .)
    LIST_FLT        reduce using rule 43 (literal -> BLN_LIT .)
    LIST_BLN        reduce using rule 43 (literal -> BLN_LIT .)
    LIST_STR        reduce using rule 43 (literal -> BLN_LIT .)
    LIST_CHR        reduce using rule 43 (literal -> BLN_LIT .)
    INT_LIT         reduce using rule 43 (literal -> BLN_LIT .)
    FLT_LIT         reduce using rule 43 (literal -> BLN_LIT .)
    BLN_LIT         reduce using rule 43 (literal -> BLN_LIT .)
    GHOST           reduce using rule 43 (literal -> BLN_LIT .)
    RBRACE          reduce using rule 43 (literal -> BLN_LIT .)
    RPAREN          reduce using rule 43 (literal -> BLN_LIT .)
    REVIVE          reduce using rule 43 (literal -> BLN_LIT .)
    SHIFT           reduce using rule 43 (literal -> BLN_LIT .)
    OTHERWISE       reduce using rule 43 (literal -> BLN_LIT .)
    COMMA           reduce using rule 43 (literal -> BLN_LIT .)
    COLON           reduce using rule 43 (literal -> BLN_LIT .)
    PLUS_PLUS       reduce using rule 43 (literal -> BLN_LIT .)
    MINUS_MINUS     reduce using rule 43 (literal -> BLN_LIT .)
    RBRACKET        reduce using rule 43 (literal -> BLN_LIT .)
    GT              reduce using rule 72 (re_factor -> BLN_LIT .)
    LT              reduce using rule 72 (re_factor -> BLN_LIT .)
    EQ              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT_EQ          reduce using rule 72 (re_factor -> BLN_LIT .)
    GT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    AND             reduce using rule 72 (re_factor -> BLN_LIT .)
    OR              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT             reduce using rule 72 (re_factor -> BLN_LIT .)

  ! LPAREN          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! INT_LIT         [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FLT_LIT         [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! BLN_LIT         [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! IDENT           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! CHECK           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! SWAP            [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! DISPLAY         [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! GLOBAL          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FOR             [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! UNTIL           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! REPEAT          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! INPUT           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! STR_LIT         [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! INT             [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! FLT             [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! BLN             [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! CHR             [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! STR             [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! LIST_INT        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! LIST_FLT        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! LIST_BLN        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! LIST_STR        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! LIST_CHR        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! GHOST           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! RBRACE          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! RPAREN          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! REVIVE          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! SHIFT           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! OTHERWISE       [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! COMMA           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! COLON           [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! RBRACKET        [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! AND             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OR              [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! NOT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! IDENT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! CHECK           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! SWAP            [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! DISPLAY         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! GLOBAL          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FOR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! UNTIL           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! REPEAT          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INPUT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! STR_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! CHR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! STR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_INT        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_FLT        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_BLN        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_STR        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_CHR        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! GHOST           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RBRACE          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! REVIVE          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! SHIFT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OTHERWISE       [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! COMMA           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! COLON           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RBRACKET        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]


state 115

    (44) literal -> CHR_LIT .

    CHECK           reduce using rule 44 (literal -> CHR_LIT .)
    SWAP            reduce using rule 44 (literal -> CHR_LIT .)
    DISPLAY         reduce using rule 44 (literal -> CHR_LIT .)
    GLOBAL          reduce using rule 44 (literal -> CHR_LIT .)
    FOR             reduce using rule 44 (literal -> CHR_LIT .)
    UNTIL           reduce using rule 44 (literal -> CHR_LIT .)
    REPEAT          reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION        reduce using rule 44 (literal -> CHR_LIT .)
    IDENT           reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_INT    reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_FLT    reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_CHR    reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_STR    reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_BLN    reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_LIST_INT reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_LIST_FLT reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_LIST_CHR reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_LIST_STR reduce using rule 44 (literal -> CHR_LIT .)
    FUNCTION_LIST_BLN reduce using rule 44 (literal -> CHR_LIT .)
    INPUT           reduce using rule 44 (literal -> CHR_LIT .)
    LPAREN          reduce using rule 44 (literal -> CHR_LIT .)
    STR_LIT         reduce using rule 44 (literal -> CHR_LIT .)
    INT             reduce using rule 44 (literal -> CHR_LIT .)
    FLT             reduce using rule 44 (literal -> CHR_LIT .)
    BLN             reduce using rule 44 (literal -> CHR_LIT .)
    CHR             reduce using rule 44 (literal -> CHR_LIT .)
    STR             reduce using rule 44 (literal -> CHR_LIT .)
    LIST_INT        reduce using rule 44 (literal -> CHR_LIT .)
    LIST_FLT        reduce using rule 44 (literal -> CHR_LIT .)
    LIST_BLN        reduce using rule 44 (literal -> CHR_LIT .)
    LIST_STR        reduce using rule 44 (literal -> CHR_LIT .)
    LIST_CHR        reduce using rule 44 (literal -> CHR_LIT .)
    INT_LIT         reduce using rule 44 (literal -> CHR_LIT .)
    FLT_LIT         reduce using rule 44 (literal -> CHR_LIT .)
    BLN_LIT         reduce using rule 44 (literal -> CHR_LIT .)
    GHOST           reduce using rule 44 (literal -> CHR_LIT .)
    RBRACE          reduce using rule 44 (literal -> CHR_LIT .)
    RPAREN          reduce using rule 44 (literal -> CHR_LIT .)
    REVIVE          reduce using rule 44 (literal -> CHR_LIT .)
    SHIFT           reduce using rule 44 (literal -> CHR_LIT .)
    OTHERWISE       reduce using rule 44 (literal -> CHR_LIT .)
    COMMA           reduce using rule 44 (literal -> CHR_LIT .)
    COLON           reduce using rule 44 (literal -> CHR_LIT .)
    PLUS_PLUS       reduce using rule 44 (literal -> CHR_LIT .)
    MINUS_MINUS     reduce using rule 44 (literal -> CHR_LIT .)
    RBRACKET        reduce using rule 44 (literal -> CHR_LIT .)


state 116

    (45) literal -> STR_LIT .
    (176) string_lit -> STR_LIT .

    CHECK           reduce using rule 45 (literal -> STR_LIT .)
    SWAP            reduce using rule 45 (literal -> STR_LIT .)
    DISPLAY         reduce using rule 45 (literal -> STR_LIT .)
    GLOBAL          reduce using rule 45 (literal -> STR_LIT .)
    FOR             reduce using rule 45 (literal -> STR_LIT .)
    UNTIL           reduce using rule 45 (literal -> STR_LIT .)
    REPEAT          reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION        reduce using rule 45 (literal -> STR_LIT .)
    IDENT           reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_INT    reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_FLT    reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_CHR    reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_STR    reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_BLN    reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_LIST_INT reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_LIST_FLT reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_LIST_CHR reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_LIST_STR reduce using rule 45 (literal -> STR_LIT .)
    FUNCTION_LIST_BLN reduce using rule 45 (literal -> STR_LIT .)
    INPUT           reduce using rule 45 (literal -> STR_LIT .)
    LPAREN          reduce using rule 45 (literal -> STR_LIT .)
    STR_LIT         reduce using rule 45 (literal -> STR_LIT .)
    INT             reduce using rule 45 (literal -> STR_LIT .)
    FLT             reduce using rule 45 (literal -> STR_LIT .)
    BLN             reduce using rule 45 (literal -> STR_LIT .)
    CHR             reduce using rule 45 (literal -> STR_LIT .)
    STR             reduce using rule 45 (literal -> STR_LIT .)
    LIST_INT        reduce using rule 45 (literal -> STR_LIT .)
    LIST_FLT        reduce using rule 45 (literal -> STR_LIT .)
    LIST_BLN        reduce using rule 45 (literal -> STR_LIT .)
    LIST_STR        reduce using rule 45 (literal -> STR_LIT .)
    LIST_CHR        reduce using rule 45 (literal -> STR_LIT .)
    INT_LIT         reduce using rule 45 (literal -> STR_LIT .)
    FLT_LIT         reduce using rule 45 (literal -> STR_LIT .)
    BLN_LIT         reduce using rule 45 (literal -> STR_LIT .)
    GHOST           reduce using rule 45 (literal -> STR_LIT .)
    RBRACE          reduce using rule 45 (literal -> STR_LIT .)
    RPAREN          reduce using rule 45 (literal -> STR_LIT .)
    REVIVE          reduce using rule 45 (literal -> STR_LIT .)
    SHIFT           reduce using rule 45 (literal -> STR_LIT .)
    OTHERWISE       reduce using rule 45 (literal -> STR_LIT .)
    COMMA           reduce using rule 45 (literal -> STR_LIT .)
    COLON           reduce using rule 45 (literal -> STR_LIT .)
    PLUS_PLUS       reduce using rule 45 (literal -> STR_LIT .)
    MINUS_MINUS     reduce using rule 45 (literal -> STR_LIT .)
    RBRACKET        reduce using rule 45 (literal -> STR_LIT .)
    PLUS            reduce using rule 176 (string_lit -> STR_LIT .)


state 117

    (95) var_call -> IDENT .
    (96) var_call -> IDENT . LBRACKET index RBRACKET
    (143) function_call -> IDENT . LPAREN arguments RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    CHECK           reduce using rule 95 (var_call -> IDENT .)
    SWAP            reduce using rule 95 (var_call -> IDENT .)
    DISPLAY         reduce using rule 95 (var_call -> IDENT .)
    GLOBAL          reduce using rule 95 (var_call -> IDENT .)
    FOR             reduce using rule 95 (var_call -> IDENT .)
    UNTIL           reduce using rule 95 (var_call -> IDENT .)
    REPEAT          reduce using rule 95 (var_call -> IDENT .)
    FUNCTION        reduce using rule 95 (var_call -> IDENT .)
    IDENT           reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_INT    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_FLT    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_CHR    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_STR    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_BLN    reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_INT reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_FLT reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_CHR reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_STR reduce using rule 95 (var_call -> IDENT .)
    FUNCTION_LIST_BLN reduce using rule 95 (var_call -> IDENT .)
    INPUT           reduce using rule 95 (var_call -> IDENT .)
    STR_LIT         reduce using rule 95 (var_call -> IDENT .)
    INT             reduce using rule 95 (var_call -> IDENT .)
    FLT             reduce using rule 95 (var_call -> IDENT .)
    BLN             reduce using rule 95 (var_call -> IDENT .)
    CHR             reduce using rule 95 (var_call -> IDENT .)
    STR             reduce using rule 95 (var_call -> IDENT .)
    LIST_INT        reduce using rule 95 (var_call -> IDENT .)
    LIST_FLT        reduce using rule 95 (var_call -> IDENT .)
    LIST_BLN        reduce using rule 95 (var_call -> IDENT .)
    LIST_STR        reduce using rule 95 (var_call -> IDENT .)
    LIST_CHR        reduce using rule 95 (var_call -> IDENT .)
    INT_LIT         reduce using rule 95 (var_call -> IDENT .)
    FLT_LIT         reduce using rule 95 (var_call -> IDENT .)
    BLN_LIT         reduce using rule 95 (var_call -> IDENT .)
    GHOST           reduce using rule 95 (var_call -> IDENT .)
    RBRACE          reduce using rule 95 (var_call -> IDENT .)
    RPAREN          reduce using rule 95 (var_call -> IDENT .)
    REVIVE          reduce using rule 95 (var_call -> IDENT .)
    SHIFT           reduce using rule 95 (var_call -> IDENT .)
    OTHERWISE       reduce using rule 95 (var_call -> IDENT .)
    COMMA           reduce using rule 95 (var_call -> IDENT .)
    COLON           reduce using rule 95 (var_call -> IDENT .)
    PLUS_PLUS       reduce using rule 95 (var_call -> IDENT .)
    MINUS_MINUS     reduce using rule 95 (var_call -> IDENT .)
    RBRACKET        reduce using rule 95 (var_call -> IDENT .)
    PLUS            reduce using rule 95 (var_call -> IDENT .)
    MINUS           reduce using rule 95 (var_call -> IDENT .)
    DIVISION        reduce using rule 95 (var_call -> IDENT .)
    MULTIPLY        reduce using rule 95 (var_call -> IDENT .)
    MODULO          reduce using rule 95 (var_call -> IDENT .)
    EXPONENT        reduce using rule 95 (var_call -> IDENT .)
    GT              reduce using rule 95 (var_call -> IDENT .)
    LT              reduce using rule 95 (var_call -> IDENT .)
    EQ              reduce using rule 95 (var_call -> IDENT .)
    NOT_EQ          reduce using rule 95 (var_call -> IDENT .)
    GT_EQ           reduce using rule 95 (var_call -> IDENT .)
    LT_EQ           reduce using rule 95 (var_call -> IDENT .)
    AND             reduce using rule 95 (var_call -> IDENT .)
    OR              reduce using rule 95 (var_call -> IDENT .)
    NOT             reduce using rule 95 (var_call -> IDENT .)
    PLUS_EQ         reduce using rule 95 (var_call -> IDENT .)
    MINUS_EQ        reduce using rule 95 (var_call -> IDENT .)
    MUL_EQ          reduce using rule 95 (var_call -> IDENT .)
    DIV_EQ          reduce using rule 95 (var_call -> IDENT .)
    MOD_EQ          reduce using rule 95 (var_call -> IDENT .)
    LBRACKET        shift and go to state 101
    LPAREN          shift and go to state 100

  ! LPAREN          [ reduce using rule 95 (var_call -> IDENT .) ]


state 118

    (144) function_call -> output_statement .

    CHECK           reduce using rule 144 (function_call -> output_statement .)
    SWAP            reduce using rule 144 (function_call -> output_statement .)
    DISPLAY         reduce using rule 144 (function_call -> output_statement .)
    GLOBAL          reduce using rule 144 (function_call -> output_statement .)
    FOR             reduce using rule 144 (function_call -> output_statement .)
    UNTIL           reduce using rule 144 (function_call -> output_statement .)
    REPEAT          reduce using rule 144 (function_call -> output_statement .)
    FUNCTION        reduce using rule 144 (function_call -> output_statement .)
    IDENT           reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_INT    reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_FLT    reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_CHR    reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_STR    reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_BLN    reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_LIST_INT reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_LIST_FLT reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_LIST_CHR reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_LIST_STR reduce using rule 144 (function_call -> output_statement .)
    FUNCTION_LIST_BLN reduce using rule 144 (function_call -> output_statement .)
    INPUT           reduce using rule 144 (function_call -> output_statement .)
    LPAREN          reduce using rule 144 (function_call -> output_statement .)
    STR_LIT         reduce using rule 144 (function_call -> output_statement .)
    INT             reduce using rule 144 (function_call -> output_statement .)
    FLT             reduce using rule 144 (function_call -> output_statement .)
    BLN             reduce using rule 144 (function_call -> output_statement .)
    CHR             reduce using rule 144 (function_call -> output_statement .)
    STR             reduce using rule 144 (function_call -> output_statement .)
    LIST_INT        reduce using rule 144 (function_call -> output_statement .)
    LIST_FLT        reduce using rule 144 (function_call -> output_statement .)
    LIST_BLN        reduce using rule 144 (function_call -> output_statement .)
    LIST_STR        reduce using rule 144 (function_call -> output_statement .)
    LIST_CHR        reduce using rule 144 (function_call -> output_statement .)
    INT_LIT         reduce using rule 144 (function_call -> output_statement .)
    FLT_LIT         reduce using rule 144 (function_call -> output_statement .)
    BLN_LIT         reduce using rule 144 (function_call -> output_statement .)
    GHOST           reduce using rule 144 (function_call -> output_statement .)
    RBRACE          reduce using rule 144 (function_call -> output_statement .)
    RPAREN          reduce using rule 144 (function_call -> output_statement .)
    REVIVE          reduce using rule 144 (function_call -> output_statement .)
    SHIFT           reduce using rule 144 (function_call -> output_statement .)
    OTHERWISE       reduce using rule 144 (function_call -> output_statement .)
    COMMA           reduce using rule 144 (function_call -> output_statement .)
    COLON           reduce using rule 144 (function_call -> output_statement .)
    PLUS_PLUS       reduce using rule 144 (function_call -> output_statement .)
    MINUS_MINUS     reduce using rule 144 (function_call -> output_statement .)
    RBRACKET        reduce using rule 144 (function_call -> output_statement .)


state 119

    (168) type_cast -> CONVERT_TO_INT . LPAREN value RPAREN

    LPAREN          shift and go to state 213


state 120

    (169) type_cast -> CONVERT_TO_FLT . LPAREN value RPAREN

    LPAREN          shift and go to state 214


state 121

    (170) type_cast -> CONVERT_TO_BLN . LPAREN value RPAREN

    LPAREN          shift and go to state 215


state 122

    (171) type_cast -> CONVERT_TO_STR . LPAREN value RPAREN

    LPAREN          shift and go to state 216


state 123

    (177) not_op -> NOT . value
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 217
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 124

    (39) negative_val -> TILDE . INT_LIT
    (40) negative_val -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 218
    FLT_LIT         shift and go to state 219


state 125

    (135) assignment_statement -> var_call assign_op . value
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    var_call                       shift and go to state 107
    value                          shift and go to state 220
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 126

    (136) assign_op -> PLUS_EQ .

    INT_LIT         reduce using rule 136 (assign_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 136 (assign_op -> PLUS_EQ .)
    BLN_LIT         reduce using rule 136 (assign_op -> PLUS_EQ .)
    CHR_LIT         reduce using rule 136 (assign_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 136 (assign_op -> PLUS_EQ .)
    IDENT           reduce using rule 136 (assign_op -> PLUS_EQ .)
    CONVERT_TO_INT  reduce using rule 136 (assign_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 136 (assign_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 136 (assign_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 136 (assign_op -> PLUS_EQ .)
    NOT             reduce using rule 136 (assign_op -> PLUS_EQ .)
    TILDE           reduce using rule 136 (assign_op -> PLUS_EQ .)
    DISPLAY         reduce using rule 136 (assign_op -> PLUS_EQ .)
    INPUT           reduce using rule 136 (assign_op -> PLUS_EQ .)
    LPAREN          reduce using rule 136 (assign_op -> PLUS_EQ .)


state 127

    (137) assign_op -> MINUS_EQ .

    INT_LIT         reduce using rule 137 (assign_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 137 (assign_op -> MINUS_EQ .)
    BLN_LIT         reduce using rule 137 (assign_op -> MINUS_EQ .)
    CHR_LIT         reduce using rule 137 (assign_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 137 (assign_op -> MINUS_EQ .)
    IDENT           reduce using rule 137 (assign_op -> MINUS_EQ .)
    CONVERT_TO_INT  reduce using rule 137 (assign_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 137 (assign_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 137 (assign_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 137 (assign_op -> MINUS_EQ .)
    NOT             reduce using rule 137 (assign_op -> MINUS_EQ .)
    TILDE           reduce using rule 137 (assign_op -> MINUS_EQ .)
    DISPLAY         reduce using rule 137 (assign_op -> MINUS_EQ .)
    INPUT           reduce using rule 137 (assign_op -> MINUS_EQ .)
    LPAREN          reduce using rule 137 (assign_op -> MINUS_EQ .)


state 128

    (138) assign_op -> MUL_EQ .

    INT_LIT         reduce using rule 138 (assign_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 138 (assign_op -> MUL_EQ .)
    BLN_LIT         reduce using rule 138 (assign_op -> MUL_EQ .)
    CHR_LIT         reduce using rule 138 (assign_op -> MUL_EQ .)
    STR_LIT         reduce using rule 138 (assign_op -> MUL_EQ .)
    IDENT           reduce using rule 138 (assign_op -> MUL_EQ .)
    CONVERT_TO_INT  reduce using rule 138 (assign_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 138 (assign_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 138 (assign_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 138 (assign_op -> MUL_EQ .)
    NOT             reduce using rule 138 (assign_op -> MUL_EQ .)
    TILDE           reduce using rule 138 (assign_op -> MUL_EQ .)
    DISPLAY         reduce using rule 138 (assign_op -> MUL_EQ .)
    INPUT           reduce using rule 138 (assign_op -> MUL_EQ .)
    LPAREN          reduce using rule 138 (assign_op -> MUL_EQ .)


state 129

    (139) assign_op -> DIV_EQ .

    INT_LIT         reduce using rule 139 (assign_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 139 (assign_op -> DIV_EQ .)
    BLN_LIT         reduce using rule 139 (assign_op -> DIV_EQ .)
    CHR_LIT         reduce using rule 139 (assign_op -> DIV_EQ .)
    STR_LIT         reduce using rule 139 (assign_op -> DIV_EQ .)
    IDENT           reduce using rule 139 (assign_op -> DIV_EQ .)
    CONVERT_TO_INT  reduce using rule 139 (assign_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 139 (assign_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 139 (assign_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 139 (assign_op -> DIV_EQ .)
    NOT             reduce using rule 139 (assign_op -> DIV_EQ .)
    TILDE           reduce using rule 139 (assign_op -> DIV_EQ .)
    DISPLAY         reduce using rule 139 (assign_op -> DIV_EQ .)
    INPUT           reduce using rule 139 (assign_op -> DIV_EQ .)
    LPAREN          reduce using rule 139 (assign_op -> DIV_EQ .)


state 130

    (140) assign_op -> MOD_EQ .

    INT_LIT         reduce using rule 140 (assign_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 140 (assign_op -> MOD_EQ .)
    BLN_LIT         reduce using rule 140 (assign_op -> MOD_EQ .)
    CHR_LIT         reduce using rule 140 (assign_op -> MOD_EQ .)
    STR_LIT         reduce using rule 140 (assign_op -> MOD_EQ .)
    IDENT           reduce using rule 140 (assign_op -> MOD_EQ .)
    CONVERT_TO_INT  reduce using rule 140 (assign_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 140 (assign_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 140 (assign_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 140 (assign_op -> MOD_EQ .)
    NOT             reduce using rule 140 (assign_op -> MOD_EQ .)
    TILDE           reduce using rule 140 (assign_op -> MOD_EQ .)
    DISPLAY         reduce using rule 140 (assign_op -> MOD_EQ .)
    INPUT           reduce using rule 140 (assign_op -> MOD_EQ .)
    LPAREN          reduce using rule 140 (assign_op -> MOD_EQ .)


state 131

    (125) for_loop -> FOR LPAREN . control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (128) control_variable -> . IDENT EQ INT_LIT
    (129) control_variable -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    IDENT           shift and go to state 222

    control_variable               shift and go to state 221
    var_call                       shift and go to state 223

state 132

    (126) until_loop -> UNTIL LPAREN . relational_expression RPAREN LBRACE statements RBRACE
    (66) relational_expression -> . re_term
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    relational_expression          shift and go to state 224
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 133

    (127) repeat_until -> REPEAT LBRACE . statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 225
    relational_expression          shift and go to state 45
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 134

    (172) string_concat -> string_lit stringcon_tail .

    CHECK           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    SWAP            reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    DISPLAY         reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    GLOBAL          reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FOR             reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    UNTIL           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    REPEAT          reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    IDENT           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_INT    reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_FLT    reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_CHR    reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_STR    reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_BLN    reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_LIST_INT reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_LIST_FLT reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_LIST_CHR reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_LIST_STR reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FUNCTION_LIST_BLN reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    INPUT           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    LPAREN          reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    STR_LIT         reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    INT             reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FLT             reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    BLN             reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    CHR             reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    STR             reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    LIST_INT        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    LIST_FLT        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    LIST_BLN        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    LIST_STR        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    LIST_CHR        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    INT_LIT         reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    FLT_LIT         reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    BLN_LIT         reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    GHOST           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    RBRACE          reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    RPAREN          reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    REVIVE          reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    SHIFT           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    OTHERWISE       reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    COMMA           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    COLON           reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    PLUS_PLUS       reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    MINUS_MINUS     reduce using rule 172 (string_concat -> string_lit stringcon_tail .)
    RBRACKET        reduce using rule 172 (string_concat -> string_lit stringcon_tail .)


state 135

    (173) stringcon_tail -> PLUS . string_lit stringcon_tail2
    (176) string_lit -> . STR_LIT

    STR_LIT         shift and go to state 72

    string_lit                     shift and go to state 226

state 136

    (167) input_statement -> INPUT LPAREN . statements RPAREN
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RPAREN          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 227
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 137

    (51) ae_term -> ae_factor ae_tail2 .

    CHECK           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    SWAP            reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    DISPLAY         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    GLOBAL          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FOR             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    UNTIL           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    REPEAT          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    IDENT           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_INT    reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_FLT    reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_CHR    reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_STR    reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_BLN    reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_LIST_INT reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_LIST_STR reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    INPUT           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LPAREN          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    STR_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    INT             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FLT             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    BLN             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    CHR             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    STR             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LIST_INT        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LIST_FLT        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LIST_BLN        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LIST_STR        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LIST_CHR        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    INT_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FLT_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    BLN_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    GHOST           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    GT              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LT              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    EQ              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    NOT_EQ          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    GT_EQ           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LT_EQ           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    AND             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    OR              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    NOT             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    RBRACE          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    RPAREN          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    REVIVE          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    SHIFT           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    OTHERWISE       reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    COMMA           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    COLON           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    PLUS_PLUS       reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    MINUS_MINUS     reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    RBRACKET        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    SEMICOLON       reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    PLUS            reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    MINUS           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    DIVISION        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    MULTIPLY        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    MODULO          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    EXPONENT        reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)


state 138

    (63) ae_tail2 -> ae_term .

    CHECK           reduce using rule 63 (ae_tail2 -> ae_term .)
    SWAP            reduce using rule 63 (ae_tail2 -> ae_term .)
    DISPLAY         reduce using rule 63 (ae_tail2 -> ae_term .)
    GLOBAL          reduce using rule 63 (ae_tail2 -> ae_term .)
    FOR             reduce using rule 63 (ae_tail2 -> ae_term .)
    UNTIL           reduce using rule 63 (ae_tail2 -> ae_term .)
    REPEAT          reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION        reduce using rule 63 (ae_tail2 -> ae_term .)
    IDENT           reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_INT    reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_FLT    reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_CHR    reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_STR    reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_BLN    reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_LIST_INT reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_LIST_FLT reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_LIST_CHR reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_LIST_STR reduce using rule 63 (ae_tail2 -> ae_term .)
    FUNCTION_LIST_BLN reduce using rule 63 (ae_tail2 -> ae_term .)
    INPUT           reduce using rule 63 (ae_tail2 -> ae_term .)
    LPAREN          reduce using rule 63 (ae_tail2 -> ae_term .)
    STR_LIT         reduce using rule 63 (ae_tail2 -> ae_term .)
    INT             reduce using rule 63 (ae_tail2 -> ae_term .)
    FLT             reduce using rule 63 (ae_tail2 -> ae_term .)
    BLN             reduce using rule 63 (ae_tail2 -> ae_term .)
    CHR             reduce using rule 63 (ae_tail2 -> ae_term .)
    STR             reduce using rule 63 (ae_tail2 -> ae_term .)
    LIST_INT        reduce using rule 63 (ae_tail2 -> ae_term .)
    LIST_FLT        reduce using rule 63 (ae_tail2 -> ae_term .)
    LIST_BLN        reduce using rule 63 (ae_tail2 -> ae_term .)
    LIST_STR        reduce using rule 63 (ae_tail2 -> ae_term .)
    LIST_CHR        reduce using rule 63 (ae_tail2 -> ae_term .)
    INT_LIT         reduce using rule 63 (ae_tail2 -> ae_term .)
    FLT_LIT         reduce using rule 63 (ae_tail2 -> ae_term .)
    BLN_LIT         reduce using rule 63 (ae_tail2 -> ae_term .)
    GHOST           reduce using rule 63 (ae_tail2 -> ae_term .)
    GT              reduce using rule 63 (ae_tail2 -> ae_term .)
    LT              reduce using rule 63 (ae_tail2 -> ae_term .)
    EQ              reduce using rule 63 (ae_tail2 -> ae_term .)
    NOT_EQ          reduce using rule 63 (ae_tail2 -> ae_term .)
    GT_EQ           reduce using rule 63 (ae_tail2 -> ae_term .)
    LT_EQ           reduce using rule 63 (ae_tail2 -> ae_term .)
    AND             reduce using rule 63 (ae_tail2 -> ae_term .)
    OR              reduce using rule 63 (ae_tail2 -> ae_term .)
    NOT             reduce using rule 63 (ae_tail2 -> ae_term .)
    RBRACE          reduce using rule 63 (ae_tail2 -> ae_term .)
    RPAREN          reduce using rule 63 (ae_tail2 -> ae_term .)
    REVIVE          reduce using rule 63 (ae_tail2 -> ae_term .)
    SHIFT           reduce using rule 63 (ae_tail2 -> ae_term .)
    OTHERWISE       reduce using rule 63 (ae_tail2 -> ae_term .)
    COMMA           reduce using rule 63 (ae_tail2 -> ae_term .)
    COLON           reduce using rule 63 (ae_tail2 -> ae_term .)
    PLUS_PLUS       reduce using rule 63 (ae_tail2 -> ae_term .)
    MINUS_MINUS     reduce using rule 63 (ae_tail2 -> ae_term .)
    RBRACKET        reduce using rule 63 (ae_tail2 -> ae_term .)
    SEMICOLON       reduce using rule 63 (ae_tail2 -> ae_term .)
    PLUS            reduce using rule 63 (ae_tail2 -> ae_term .)
    MINUS           reduce using rule 63 (ae_tail2 -> ae_term .)
    DIVISION        reduce using rule 63 (ae_tail2 -> ae_term .)
    MULTIPLY        reduce using rule 63 (ae_tail2 -> ae_term .)
    MODULO          reduce using rule 63 (ae_tail2 -> ae_term .)
    EXPONENT        reduce using rule 63 (ae_tail2 -> ae_term .)


state 139

    (64) ae_tail2 -> ae_tail .

    CHECK           reduce using rule 64 (ae_tail2 -> ae_tail .)
    SWAP            reduce using rule 64 (ae_tail2 -> ae_tail .)
    DISPLAY         reduce using rule 64 (ae_tail2 -> ae_tail .)
    GLOBAL          reduce using rule 64 (ae_tail2 -> ae_tail .)
    FOR             reduce using rule 64 (ae_tail2 -> ae_tail .)
    UNTIL           reduce using rule 64 (ae_tail2 -> ae_tail .)
    REPEAT          reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION        reduce using rule 64 (ae_tail2 -> ae_tail .)
    IDENT           reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_INT    reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_FLT    reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_CHR    reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_STR    reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_BLN    reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_LIST_INT reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_LIST_STR reduce using rule 64 (ae_tail2 -> ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 64 (ae_tail2 -> ae_tail .)
    INPUT           reduce using rule 64 (ae_tail2 -> ae_tail .)
    LPAREN          reduce using rule 64 (ae_tail2 -> ae_tail .)
    STR_LIT         reduce using rule 64 (ae_tail2 -> ae_tail .)
    INT             reduce using rule 64 (ae_tail2 -> ae_tail .)
    FLT             reduce using rule 64 (ae_tail2 -> ae_tail .)
    BLN             reduce using rule 64 (ae_tail2 -> ae_tail .)
    CHR             reduce using rule 64 (ae_tail2 -> ae_tail .)
    STR             reduce using rule 64 (ae_tail2 -> ae_tail .)
    LIST_INT        reduce using rule 64 (ae_tail2 -> ae_tail .)
    LIST_FLT        reduce using rule 64 (ae_tail2 -> ae_tail .)
    LIST_BLN        reduce using rule 64 (ae_tail2 -> ae_tail .)
    LIST_STR        reduce using rule 64 (ae_tail2 -> ae_tail .)
    LIST_CHR        reduce using rule 64 (ae_tail2 -> ae_tail .)
    INT_LIT         reduce using rule 64 (ae_tail2 -> ae_tail .)
    FLT_LIT         reduce using rule 64 (ae_tail2 -> ae_tail .)
    BLN_LIT         reduce using rule 64 (ae_tail2 -> ae_tail .)
    GHOST           reduce using rule 64 (ae_tail2 -> ae_tail .)
    GT              reduce using rule 64 (ae_tail2 -> ae_tail .)
    LT              reduce using rule 64 (ae_tail2 -> ae_tail .)
    EQ              reduce using rule 64 (ae_tail2 -> ae_tail .)
    NOT_EQ          reduce using rule 64 (ae_tail2 -> ae_tail .)
    GT_EQ           reduce using rule 64 (ae_tail2 -> ae_tail .)
    LT_EQ           reduce using rule 64 (ae_tail2 -> ae_tail .)
    AND             reduce using rule 64 (ae_tail2 -> ae_tail .)
    OR              reduce using rule 64 (ae_tail2 -> ae_tail .)
    NOT             reduce using rule 64 (ae_tail2 -> ae_tail .)
    RBRACE          reduce using rule 64 (ae_tail2 -> ae_tail .)
    RPAREN          reduce using rule 64 (ae_tail2 -> ae_tail .)
    REVIVE          reduce using rule 64 (ae_tail2 -> ae_tail .)
    SHIFT           reduce using rule 64 (ae_tail2 -> ae_tail .)
    OTHERWISE       reduce using rule 64 (ae_tail2 -> ae_tail .)
    COMMA           reduce using rule 64 (ae_tail2 -> ae_tail .)
    COLON           reduce using rule 64 (ae_tail2 -> ae_tail .)
    PLUS_PLUS       reduce using rule 64 (ae_tail2 -> ae_tail .)
    MINUS_MINUS     reduce using rule 64 (ae_tail2 -> ae_tail .)
    RBRACKET        reduce using rule 64 (ae_tail2 -> ae_tail .)
    SEMICOLON       reduce using rule 64 (ae_tail2 -> ae_tail .)
    PLUS            reduce using rule 64 (ae_tail2 -> ae_tail .)
    MINUS           reduce using rule 64 (ae_tail2 -> ae_tail .)
    DIVISION        reduce using rule 64 (ae_tail2 -> ae_tail .)
    MULTIPLY        reduce using rule 64 (ae_tail2 -> ae_tail .)
    MODULO          reduce using rule 64 (ae_tail2 -> ae_tail .)
    EXPONENT        reduce using rule 64 (ae_tail2 -> ae_tail .)


state 140

    (65) ae_tail2 -> empty .
    (62) ae_tail -> empty .

  ! reduce/reduce conflict for CHECK resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for SWAP resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for UNTIL resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for REPEAT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for IDENT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for INPUT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LPAREN resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FLT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for BLN resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for CHR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for STR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for GHOST resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for GT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for NOT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for COLON resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for DIVISION resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for MODULO resolved using rule 62 (ae_tail -> empty .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 62 (ae_tail -> empty .)
    CHECK           reduce using rule 62 (ae_tail -> empty .)
    SWAP            reduce using rule 62 (ae_tail -> empty .)
    DISPLAY         reduce using rule 62 (ae_tail -> empty .)
    GLOBAL          reduce using rule 62 (ae_tail -> empty .)
    FOR             reduce using rule 62 (ae_tail -> empty .)
    UNTIL           reduce using rule 62 (ae_tail -> empty .)
    REPEAT          reduce using rule 62 (ae_tail -> empty .)
    FUNCTION        reduce using rule 62 (ae_tail -> empty .)
    IDENT           reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_INT    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_FLT    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_CHR    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_STR    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_BLN    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 62 (ae_tail -> empty .)
    INPUT           reduce using rule 62 (ae_tail -> empty .)
    LPAREN          reduce using rule 62 (ae_tail -> empty .)
    STR_LIT         reduce using rule 62 (ae_tail -> empty .)
    INT             reduce using rule 62 (ae_tail -> empty .)
    FLT             reduce using rule 62 (ae_tail -> empty .)
    BLN             reduce using rule 62 (ae_tail -> empty .)
    CHR             reduce using rule 62 (ae_tail -> empty .)
    STR             reduce using rule 62 (ae_tail -> empty .)
    LIST_INT        reduce using rule 62 (ae_tail -> empty .)
    LIST_FLT        reduce using rule 62 (ae_tail -> empty .)
    LIST_BLN        reduce using rule 62 (ae_tail -> empty .)
    LIST_STR        reduce using rule 62 (ae_tail -> empty .)
    LIST_CHR        reduce using rule 62 (ae_tail -> empty .)
    INT_LIT         reduce using rule 62 (ae_tail -> empty .)
    FLT_LIT         reduce using rule 62 (ae_tail -> empty .)
    BLN_LIT         reduce using rule 62 (ae_tail -> empty .)
    GHOST           reduce using rule 62 (ae_tail -> empty .)
    GT              reduce using rule 62 (ae_tail -> empty .)
    LT              reduce using rule 62 (ae_tail -> empty .)
    EQ              reduce using rule 62 (ae_tail -> empty .)
    NOT_EQ          reduce using rule 62 (ae_tail -> empty .)
    GT_EQ           reduce using rule 62 (ae_tail -> empty .)
    LT_EQ           reduce using rule 62 (ae_tail -> empty .)
    AND             reduce using rule 62 (ae_tail -> empty .)
    OR              reduce using rule 62 (ae_tail -> empty .)
    NOT             reduce using rule 62 (ae_tail -> empty .)
    RBRACE          reduce using rule 62 (ae_tail -> empty .)
    RPAREN          reduce using rule 62 (ae_tail -> empty .)
    REVIVE          reduce using rule 62 (ae_tail -> empty .)
    SHIFT           reduce using rule 62 (ae_tail -> empty .)
    OTHERWISE       reduce using rule 62 (ae_tail -> empty .)
    COMMA           reduce using rule 62 (ae_tail -> empty .)
    COLON           reduce using rule 62 (ae_tail -> empty .)
    PLUS_PLUS       reduce using rule 62 (ae_tail -> empty .)
    MINUS_MINUS     reduce using rule 62 (ae_tail -> empty .)
    RBRACKET        reduce using rule 62 (ae_tail -> empty .)
    SEMICOLON       reduce using rule 62 (ae_tail -> empty .)
    PLUS            reduce using rule 62 (ae_tail -> empty .)
    MINUS           reduce using rule 62 (ae_tail -> empty .)
    DIVISION        reduce using rule 62 (ae_tail -> empty .)
    MULTIPLY        reduce using rule 62 (ae_tail -> empty .)
    MODULO          reduce using rule 62 (ae_tail -> empty .)
    EXPONENT        reduce using rule 62 (ae_tail -> empty .)

  ! CHECK           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! SWAP            [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! DISPLAY         [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! GLOBAL          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FOR             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! UNTIL           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! REPEAT          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! IDENT           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_INT    [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_FLT    [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_CHR    [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_STR    [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_BLN    [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! INPUT           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LPAREN          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! STR_LIT         [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! INT             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FLT             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! BLN             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! CHR             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! STR             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LIST_INT        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LIST_FLT        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LIST_BLN        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LIST_STR        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LIST_CHR        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! INT_LIT         [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! FLT_LIT         [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! BLN_LIT         [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! GHOST           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! GT              [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LT              [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! EQ              [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! NOT_EQ          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! GT_EQ           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! LT_EQ           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! AND             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! OR              [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! NOT             [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! RBRACE          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! RPAREN          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! REVIVE          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! SHIFT           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! OTHERWISE       [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! COMMA           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! COLON           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! PLUS_PLUS       [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! MINUS_MINUS     [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! RBRACKET        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! SEMICOLON       [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! PLUS            [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! MINUS           [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! DIVISION        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! MULTIPLY        [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! MODULO          [ reduce using rule 65 (ae_tail2 -> empty .) ]
  ! EXPONENT        [ reduce using rule 65 (ae_tail2 -> empty .) ]


state 141

    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_factor                      shift and go to state 228
    var_call                       shift and go to state 150

state 142

    (56) ae_tail -> PLUS . ae_term ae_tail
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_term                        shift and go to state 229
    ae_factor                      shift and go to state 69
    var_call                       shift and go to state 150

state 143

    (57) ae_tail -> MINUS . ae_term ae_tail
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_term                        shift and go to state 230
    ae_factor                      shift and go to state 69
    var_call                       shift and go to state 150

state 144

    (58) ae_tail -> DIVISION . ae_term ae_tail
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_term                        shift and go to state 231
    ae_factor                      shift and go to state 69
    var_call                       shift and go to state 150

state 145

    (59) ae_tail -> MULTIPLY . ae_term ae_tail
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_term                        shift and go to state 232
    ae_factor                      shift and go to state 69
    var_call                       shift and go to state 150

state 146

    (60) ae_tail -> MODULO . ae_term ae_tail
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_term                        shift and go to state 233
    ae_factor                      shift and go to state 69
    var_call                       shift and go to state 150

state 147

    (61) ae_tail -> EXPONENT . ae_term ae_tail
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_term                        shift and go to state 234
    ae_factor                      shift and go to state 69
    var_call                       shift and go to state 150

state 148

    (53) ae_factor -> INT_LIT .

    LPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    PLUS            reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS           reduce using rule 53 (ae_factor -> INT_LIT .)
    DIVISION        reduce using rule 53 (ae_factor -> INT_LIT .)
    MULTIPLY        reduce using rule 53 (ae_factor -> INT_LIT .)
    MODULO          reduce using rule 53 (ae_factor -> INT_LIT .)
    EXPONENT        reduce using rule 53 (ae_factor -> INT_LIT .)
    INT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    IDENT           reduce using rule 53 (ae_factor -> INT_LIT .)
    CHECK           reduce using rule 53 (ae_factor -> INT_LIT .)
    SWAP            reduce using rule 53 (ae_factor -> INT_LIT .)
    DISPLAY         reduce using rule 53 (ae_factor -> INT_LIT .)
    GLOBAL          reduce using rule 53 (ae_factor -> INT_LIT .)
    FOR             reduce using rule 53 (ae_factor -> INT_LIT .)
    UNTIL           reduce using rule 53 (ae_factor -> INT_LIT .)
    REPEAT          reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION        reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_INT    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_FLT    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_CHR    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_STR    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_BLN    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_INT reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_STR reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 53 (ae_factor -> INT_LIT .)
    INPUT           reduce using rule 53 (ae_factor -> INT_LIT .)
    STR_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    INT             reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT             reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN             reduce using rule 53 (ae_factor -> INT_LIT .)
    CHR             reduce using rule 53 (ae_factor -> INT_LIT .)
    STR             reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_INT        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_FLT        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_BLN        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_STR        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_CHR        reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    GHOST           reduce using rule 53 (ae_factor -> INT_LIT .)
    GT              reduce using rule 53 (ae_factor -> INT_LIT .)
    LT              reduce using rule 53 (ae_factor -> INT_LIT .)
    EQ              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT_EQ          reduce using rule 53 (ae_factor -> INT_LIT .)
    GT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    LT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    AND             reduce using rule 53 (ae_factor -> INT_LIT .)
    OR              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT             reduce using rule 53 (ae_factor -> INT_LIT .)
    RBRACE          reduce using rule 53 (ae_factor -> INT_LIT .)
    RPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    REVIVE          reduce using rule 53 (ae_factor -> INT_LIT .)
    SHIFT           reduce using rule 53 (ae_factor -> INT_LIT .)
    OTHERWISE       reduce using rule 53 (ae_factor -> INT_LIT .)
    COMMA           reduce using rule 53 (ae_factor -> INT_LIT .)
    COLON           reduce using rule 53 (ae_factor -> INT_LIT .)
    PLUS_PLUS       reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS_MINUS     reduce using rule 53 (ae_factor -> INT_LIT .)
    RBRACKET        reduce using rule 53 (ae_factor -> INT_LIT .)
    SEMICOLON       reduce using rule 53 (ae_factor -> INT_LIT .)


state 149

    (54) ae_factor -> FLT_LIT .

    LPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    PLUS            reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS           reduce using rule 54 (ae_factor -> FLT_LIT .)
    DIVISION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MULTIPLY        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MODULO          reduce using rule 54 (ae_factor -> FLT_LIT .)
    EXPONENT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    IDENT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    CHECK           reduce using rule 54 (ae_factor -> FLT_LIT .)
    SWAP            reduce using rule 54 (ae_factor -> FLT_LIT .)
    DISPLAY         reduce using rule 54 (ae_factor -> FLT_LIT .)
    GLOBAL          reduce using rule 54 (ae_factor -> FLT_LIT .)
    FOR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    UNTIL           reduce using rule 54 (ae_factor -> FLT_LIT .)
    REPEAT          reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_INT    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_FLT    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_CHR    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_STR    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_BLN    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_INT reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_STR reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 54 (ae_factor -> FLT_LIT .)
    INPUT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    STR_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN             reduce using rule 54 (ae_factor -> FLT_LIT .)
    CHR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    STR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_INT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_FLT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_BLN        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_STR        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_CHR        reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    GHOST           reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    EQ              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT_EQ          reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    AND             reduce using rule 54 (ae_factor -> FLT_LIT .)
    OR              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    RBRACE          reduce using rule 54 (ae_factor -> FLT_LIT .)
    RPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    REVIVE          reduce using rule 54 (ae_factor -> FLT_LIT .)
    SHIFT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    OTHERWISE       reduce using rule 54 (ae_factor -> FLT_LIT .)
    COMMA           reduce using rule 54 (ae_factor -> FLT_LIT .)
    COLON           reduce using rule 54 (ae_factor -> FLT_LIT .)
    PLUS_PLUS       reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS_MINUS     reduce using rule 54 (ae_factor -> FLT_LIT .)
    RBRACKET        reduce using rule 54 (ae_factor -> FLT_LIT .)
    SEMICOLON       reduce using rule 54 (ae_factor -> FLT_LIT .)


state 150

    (55) ae_factor -> var_call .

    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    CHECK           reduce using rule 55 (ae_factor -> var_call .)
    SWAP            reduce using rule 55 (ae_factor -> var_call .)
    DISPLAY         reduce using rule 55 (ae_factor -> var_call .)
    GLOBAL          reduce using rule 55 (ae_factor -> var_call .)
    FOR             reduce using rule 55 (ae_factor -> var_call .)
    UNTIL           reduce using rule 55 (ae_factor -> var_call .)
    REPEAT          reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION        reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_INT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_FLT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_CHR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_STR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_BLN    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_INT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_FLT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_CHR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_STR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_BLN reduce using rule 55 (ae_factor -> var_call .)
    INPUT           reduce using rule 55 (ae_factor -> var_call .)
    STR_LIT         reduce using rule 55 (ae_factor -> var_call .)
    INT             reduce using rule 55 (ae_factor -> var_call .)
    FLT             reduce using rule 55 (ae_factor -> var_call .)
    BLN             reduce using rule 55 (ae_factor -> var_call .)
    CHR             reduce using rule 55 (ae_factor -> var_call .)
    STR             reduce using rule 55 (ae_factor -> var_call .)
    LIST_INT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_FLT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_BLN        reduce using rule 55 (ae_factor -> var_call .)
    LIST_STR        reduce using rule 55 (ae_factor -> var_call .)
    LIST_CHR        reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    GHOST           reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)
    RBRACE          reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    REVIVE          reduce using rule 55 (ae_factor -> var_call .)
    SHIFT           reduce using rule 55 (ae_factor -> var_call .)
    OTHERWISE       reduce using rule 55 (ae_factor -> var_call .)
    COMMA           reduce using rule 55 (ae_factor -> var_call .)
    COLON           reduce using rule 55 (ae_factor -> var_call .)
    PLUS_PLUS       reduce using rule 55 (ae_factor -> var_call .)
    MINUS_MINUS     reduce using rule 55 (ae_factor -> var_call .)
    RBRACKET        reduce using rule 55 (ae_factor -> var_call .)
    SEMICOLON       reduce using rule 55 (ae_factor -> var_call .)


state 151

    (67) re_term -> re_factor re_tail2 .

    CHECK           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    SWAP            reduce using rule 67 (re_term -> re_factor re_tail2 .)
    DISPLAY         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    GLOBAL          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FOR             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    UNTIL           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    REPEAT          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    IDENT           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_INT    reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_FLT    reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_CHR    reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_STR    reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_BLN    reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 67 (re_term -> re_factor re_tail2 .)
    INPUT           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LPAREN          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    STR_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    INT             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FLT             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    BLN             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    CHR             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    STR             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LIST_INT        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LIST_FLT        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LIST_BLN        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LIST_STR        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LIST_CHR        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    INT_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FLT_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    BLN_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    GHOST           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    AND             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    OR              reduce using rule 67 (re_term -> re_factor re_tail2 .)
    NOT             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    RBRACE          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    RPAREN          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    REVIVE          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    SHIFT           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    OTHERWISE       reduce using rule 67 (re_term -> re_factor re_tail2 .)
    COMMA           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    COLON           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    PLUS_PLUS       reduce using rule 67 (re_term -> re_factor re_tail2 .)
    MINUS_MINUS     reduce using rule 67 (re_term -> re_factor re_tail2 .)
    RBRACKET        reduce using rule 67 (re_term -> re_factor re_tail2 .)
    GT              reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LT              reduce using rule 67 (re_term -> re_factor re_tail2 .)
    EQ              reduce using rule 67 (re_term -> re_factor re_tail2 .)
    NOT_EQ          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    GT_EQ           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LT_EQ           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    SEMICOLON       reduce using rule 67 (re_term -> re_factor re_tail2 .)


state 152

    (80) re_tail2 -> empty .

    CHECK           reduce using rule 80 (re_tail2 -> empty .)
    SWAP            reduce using rule 80 (re_tail2 -> empty .)
    DISPLAY         reduce using rule 80 (re_tail2 -> empty .)
    GLOBAL          reduce using rule 80 (re_tail2 -> empty .)
    FOR             reduce using rule 80 (re_tail2 -> empty .)
    UNTIL           reduce using rule 80 (re_tail2 -> empty .)
    REPEAT          reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION        reduce using rule 80 (re_tail2 -> empty .)
    IDENT           reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_INT    reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_FLT    reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_CHR    reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_STR    reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_BLN    reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_LIST_INT reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_LIST_FLT reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_LIST_CHR reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_LIST_STR reduce using rule 80 (re_tail2 -> empty .)
    FUNCTION_LIST_BLN reduce using rule 80 (re_tail2 -> empty .)
    INPUT           reduce using rule 80 (re_tail2 -> empty .)
    LPAREN          reduce using rule 80 (re_tail2 -> empty .)
    STR_LIT         reduce using rule 80 (re_tail2 -> empty .)
    INT             reduce using rule 80 (re_tail2 -> empty .)
    FLT             reduce using rule 80 (re_tail2 -> empty .)
    BLN             reduce using rule 80 (re_tail2 -> empty .)
    CHR             reduce using rule 80 (re_tail2 -> empty .)
    STR             reduce using rule 80 (re_tail2 -> empty .)
    LIST_INT        reduce using rule 80 (re_tail2 -> empty .)
    LIST_FLT        reduce using rule 80 (re_tail2 -> empty .)
    LIST_BLN        reduce using rule 80 (re_tail2 -> empty .)
    LIST_STR        reduce using rule 80 (re_tail2 -> empty .)
    LIST_CHR        reduce using rule 80 (re_tail2 -> empty .)
    INT_LIT         reduce using rule 80 (re_tail2 -> empty .)
    FLT_LIT         reduce using rule 80 (re_tail2 -> empty .)
    BLN_LIT         reduce using rule 80 (re_tail2 -> empty .)
    GHOST           reduce using rule 80 (re_tail2 -> empty .)
    AND             reduce using rule 80 (re_tail2 -> empty .)
    OR              reduce using rule 80 (re_tail2 -> empty .)
    NOT             reduce using rule 80 (re_tail2 -> empty .)
    RBRACE          reduce using rule 80 (re_tail2 -> empty .)
    RPAREN          reduce using rule 80 (re_tail2 -> empty .)
    REVIVE          reduce using rule 80 (re_tail2 -> empty .)
    SHIFT           reduce using rule 80 (re_tail2 -> empty .)
    OTHERWISE       reduce using rule 80 (re_tail2 -> empty .)
    COMMA           reduce using rule 80 (re_tail2 -> empty .)
    COLON           reduce using rule 80 (re_tail2 -> empty .)
    PLUS_PLUS       reduce using rule 80 (re_tail2 -> empty .)
    MINUS_MINUS     reduce using rule 80 (re_tail2 -> empty .)
    RBRACKET        reduce using rule 80 (re_tail2 -> empty .)
    GT              reduce using rule 80 (re_tail2 -> empty .)
    LT              reduce using rule 80 (re_tail2 -> empty .)
    EQ              reduce using rule 80 (re_tail2 -> empty .)
    NOT_EQ          reduce using rule 80 (re_tail2 -> empty .)
    GT_EQ           reduce using rule 80 (re_tail2 -> empty .)
    LT_EQ           reduce using rule 80 (re_tail2 -> empty .)
    SEMICOLON       reduce using rule 80 (re_tail2 -> empty .)


state 153

    (81) re_tail2 -> re_tail .

    CHECK           reduce using rule 81 (re_tail2 -> re_tail .)
    SWAP            reduce using rule 81 (re_tail2 -> re_tail .)
    DISPLAY         reduce using rule 81 (re_tail2 -> re_tail .)
    GLOBAL          reduce using rule 81 (re_tail2 -> re_tail .)
    FOR             reduce using rule 81 (re_tail2 -> re_tail .)
    UNTIL           reduce using rule 81 (re_tail2 -> re_tail .)
    REPEAT          reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION        reduce using rule 81 (re_tail2 -> re_tail .)
    IDENT           reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_INT    reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_FLT    reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_CHR    reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_STR    reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_BLN    reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_LIST_INT reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_LIST_FLT reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_LIST_CHR reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_LIST_STR reduce using rule 81 (re_tail2 -> re_tail .)
    FUNCTION_LIST_BLN reduce using rule 81 (re_tail2 -> re_tail .)
    INPUT           reduce using rule 81 (re_tail2 -> re_tail .)
    LPAREN          reduce using rule 81 (re_tail2 -> re_tail .)
    STR_LIT         reduce using rule 81 (re_tail2 -> re_tail .)
    INT             reduce using rule 81 (re_tail2 -> re_tail .)
    FLT             reduce using rule 81 (re_tail2 -> re_tail .)
    BLN             reduce using rule 81 (re_tail2 -> re_tail .)
    CHR             reduce using rule 81 (re_tail2 -> re_tail .)
    STR             reduce using rule 81 (re_tail2 -> re_tail .)
    LIST_INT        reduce using rule 81 (re_tail2 -> re_tail .)
    LIST_FLT        reduce using rule 81 (re_tail2 -> re_tail .)
    LIST_BLN        reduce using rule 81 (re_tail2 -> re_tail .)
    LIST_STR        reduce using rule 81 (re_tail2 -> re_tail .)
    LIST_CHR        reduce using rule 81 (re_tail2 -> re_tail .)
    INT_LIT         reduce using rule 81 (re_tail2 -> re_tail .)
    FLT_LIT         reduce using rule 81 (re_tail2 -> re_tail .)
    BLN_LIT         reduce using rule 81 (re_tail2 -> re_tail .)
    GHOST           reduce using rule 81 (re_tail2 -> re_tail .)
    AND             reduce using rule 81 (re_tail2 -> re_tail .)
    OR              reduce using rule 81 (re_tail2 -> re_tail .)
    NOT             reduce using rule 81 (re_tail2 -> re_tail .)
    RBRACE          reduce using rule 81 (re_tail2 -> re_tail .)
    RPAREN          reduce using rule 81 (re_tail2 -> re_tail .)
    REVIVE          reduce using rule 81 (re_tail2 -> re_tail .)
    SHIFT           reduce using rule 81 (re_tail2 -> re_tail .)
    OTHERWISE       reduce using rule 81 (re_tail2 -> re_tail .)
    COMMA           reduce using rule 81 (re_tail2 -> re_tail .)
    COLON           reduce using rule 81 (re_tail2 -> re_tail .)
    PLUS_PLUS       reduce using rule 81 (re_tail2 -> re_tail .)
    MINUS_MINUS     reduce using rule 81 (re_tail2 -> re_tail .)
    RBRACKET        reduce using rule 81 (re_tail2 -> re_tail .)
    GT              reduce using rule 81 (re_tail2 -> re_tail .)
    LT              reduce using rule 81 (re_tail2 -> re_tail .)
    EQ              reduce using rule 81 (re_tail2 -> re_tail .)
    NOT_EQ          reduce using rule 81 (re_tail2 -> re_tail .)
    GT_EQ           reduce using rule 81 (re_tail2 -> re_tail .)
    LT_EQ           reduce using rule 81 (re_tail2 -> re_tail .)
    SEMICOLON       reduce using rule 81 (re_tail2 -> re_tail .)


state 154

    (82) re_tail2 -> re_term .

    CHECK           reduce using rule 82 (re_tail2 -> re_term .)
    SWAP            reduce using rule 82 (re_tail2 -> re_term .)
    DISPLAY         reduce using rule 82 (re_tail2 -> re_term .)
    GLOBAL          reduce using rule 82 (re_tail2 -> re_term .)
    FOR             reduce using rule 82 (re_tail2 -> re_term .)
    UNTIL           reduce using rule 82 (re_tail2 -> re_term .)
    REPEAT          reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION        reduce using rule 82 (re_tail2 -> re_term .)
    IDENT           reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_INT    reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_FLT    reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_CHR    reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_STR    reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_BLN    reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_LIST_INT reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_LIST_FLT reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_LIST_CHR reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_LIST_STR reduce using rule 82 (re_tail2 -> re_term .)
    FUNCTION_LIST_BLN reduce using rule 82 (re_tail2 -> re_term .)
    INPUT           reduce using rule 82 (re_tail2 -> re_term .)
    LPAREN          reduce using rule 82 (re_tail2 -> re_term .)
    STR_LIT         reduce using rule 82 (re_tail2 -> re_term .)
    INT             reduce using rule 82 (re_tail2 -> re_term .)
    FLT             reduce using rule 82 (re_tail2 -> re_term .)
    BLN             reduce using rule 82 (re_tail2 -> re_term .)
    CHR             reduce using rule 82 (re_tail2 -> re_term .)
    STR             reduce using rule 82 (re_tail2 -> re_term .)
    LIST_INT        reduce using rule 82 (re_tail2 -> re_term .)
    LIST_FLT        reduce using rule 82 (re_tail2 -> re_term .)
    LIST_BLN        reduce using rule 82 (re_tail2 -> re_term .)
    LIST_STR        reduce using rule 82 (re_tail2 -> re_term .)
    LIST_CHR        reduce using rule 82 (re_tail2 -> re_term .)
    INT_LIT         reduce using rule 82 (re_tail2 -> re_term .)
    FLT_LIT         reduce using rule 82 (re_tail2 -> re_term .)
    BLN_LIT         reduce using rule 82 (re_tail2 -> re_term .)
    GHOST           reduce using rule 82 (re_tail2 -> re_term .)
    AND             reduce using rule 82 (re_tail2 -> re_term .)
    OR              reduce using rule 82 (re_tail2 -> re_term .)
    NOT             reduce using rule 82 (re_tail2 -> re_term .)
    RBRACE          reduce using rule 82 (re_tail2 -> re_term .)
    RPAREN          reduce using rule 82 (re_tail2 -> re_term .)
    REVIVE          reduce using rule 82 (re_tail2 -> re_term .)
    SHIFT           reduce using rule 82 (re_tail2 -> re_term .)
    OTHERWISE       reduce using rule 82 (re_tail2 -> re_term .)
    COMMA           reduce using rule 82 (re_tail2 -> re_term .)
    COLON           reduce using rule 82 (re_tail2 -> re_term .)
    PLUS_PLUS       reduce using rule 82 (re_tail2 -> re_term .)
    MINUS_MINUS     reduce using rule 82 (re_tail2 -> re_term .)
    RBRACKET        reduce using rule 82 (re_tail2 -> re_term .)
    GT              reduce using rule 82 (re_tail2 -> re_term .)
    LT              reduce using rule 82 (re_tail2 -> re_term .)
    EQ              reduce using rule 82 (re_tail2 -> re_term .)
    NOT_EQ          reduce using rule 82 (re_tail2 -> re_term .)
    GT_EQ           reduce using rule 82 (re_tail2 -> re_term .)
    LT_EQ           reduce using rule 82 (re_tail2 -> re_term .)
    SEMICOLON       reduce using rule 82 (re_tail2 -> re_term .)


state 155

    (74) re_tail -> GT . re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_term                        shift and go to state 235
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 156

    (75) re_tail -> LT . re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_term                        shift and go to state 236
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 157

    (76) re_tail -> EQ . re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_term                        shift and go to state 237
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 158

    (77) re_tail -> NOT_EQ . re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_term                        shift and go to state 238
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 159

    (78) re_tail -> GT_EQ . re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_term                        shift and go to state 239
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 160

    (79) re_tail -> LT_EQ . re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_term                        shift and go to state 240
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 161

    (68) re_term -> LPAREN . re_factor re_tail2 RPAREN re_tail2
    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2

    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77
    LPAREN          shift and go to state 141

    re_factor                      shift and go to state 189
    ae_factor                      shift and go to state 93
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54

state 162

    (70) re_factor -> INT_LIT .
    (53) ae_factor -> INT_LIT .

  ! reduce/reduce conflict for LPAREN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (ae_factor -> INT_LIT .)
    LPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    PLUS            reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS           reduce using rule 53 (ae_factor -> INT_LIT .)
    DIVISION        reduce using rule 53 (ae_factor -> INT_LIT .)
    MULTIPLY        reduce using rule 53 (ae_factor -> INT_LIT .)
    MODULO          reduce using rule 53 (ae_factor -> INT_LIT .)
    EXPONENT        reduce using rule 53 (ae_factor -> INT_LIT .)
    INT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    IDENT           reduce using rule 53 (ae_factor -> INT_LIT .)
    GT              reduce using rule 53 (ae_factor -> INT_LIT .)
    LT              reduce using rule 53 (ae_factor -> INT_LIT .)
    EQ              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT_EQ          reduce using rule 53 (ae_factor -> INT_LIT .)
    GT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    LT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    CHECK           reduce using rule 53 (ae_factor -> INT_LIT .)
    SWAP            reduce using rule 53 (ae_factor -> INT_LIT .)
    DISPLAY         reduce using rule 53 (ae_factor -> INT_LIT .)
    GLOBAL          reduce using rule 53 (ae_factor -> INT_LIT .)
    FOR             reduce using rule 53 (ae_factor -> INT_LIT .)
    UNTIL           reduce using rule 53 (ae_factor -> INT_LIT .)
    REPEAT          reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION        reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_INT    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_FLT    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_CHR    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_STR    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_BLN    reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_INT reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_STR reduce using rule 53 (ae_factor -> INT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 53 (ae_factor -> INT_LIT .)
    INPUT           reduce using rule 53 (ae_factor -> INT_LIT .)
    STR_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    INT             reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT             reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN             reduce using rule 53 (ae_factor -> INT_LIT .)
    CHR             reduce using rule 53 (ae_factor -> INT_LIT .)
    STR             reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_INT        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_FLT        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_BLN        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_STR        reduce using rule 53 (ae_factor -> INT_LIT .)
    LIST_CHR        reduce using rule 53 (ae_factor -> INT_LIT .)
    GHOST           reduce using rule 53 (ae_factor -> INT_LIT .)
    AND             reduce using rule 53 (ae_factor -> INT_LIT .)
    OR              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT             reduce using rule 53 (ae_factor -> INT_LIT .)
    RBRACE          reduce using rule 53 (ae_factor -> INT_LIT .)
    RPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    REVIVE          reduce using rule 53 (ae_factor -> INT_LIT .)
    SHIFT           reduce using rule 53 (ae_factor -> INT_LIT .)
    OTHERWISE       reduce using rule 53 (ae_factor -> INT_LIT .)
    COMMA           reduce using rule 53 (ae_factor -> INT_LIT .)
    COLON           reduce using rule 53 (ae_factor -> INT_LIT .)
    PLUS_PLUS       reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS_MINUS     reduce using rule 53 (ae_factor -> INT_LIT .)
    RBRACKET        reduce using rule 53 (ae_factor -> INT_LIT .)
    SEMICOLON       reduce using rule 53 (ae_factor -> INT_LIT .)

  ! GT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! EQ              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! IDENT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! CHECK           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SWAP            [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! DISPLAY         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GLOBAL          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FOR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! UNTIL           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! REPEAT          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INPUT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! STR_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! CHR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! STR             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_INT        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_STR        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GHOST           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! AND             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OR              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RBRACE          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! REVIVE          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SHIFT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! COMMA           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! COLON           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RBRACKET        [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! SEMICOLON       [ reduce using rule 70 (re_factor -> INT_LIT .) ]


state 163

    (71) re_factor -> FLT_LIT .
    (54) ae_factor -> FLT_LIT .

  ! reduce/reduce conflict for LPAREN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (ae_factor -> FLT_LIT .)
    LPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    PLUS            reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS           reduce using rule 54 (ae_factor -> FLT_LIT .)
    DIVISION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MULTIPLY        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MODULO          reduce using rule 54 (ae_factor -> FLT_LIT .)
    EXPONENT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    IDENT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    EQ              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT_EQ          reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    CHECK           reduce using rule 54 (ae_factor -> FLT_LIT .)
    SWAP            reduce using rule 54 (ae_factor -> FLT_LIT .)
    DISPLAY         reduce using rule 54 (ae_factor -> FLT_LIT .)
    GLOBAL          reduce using rule 54 (ae_factor -> FLT_LIT .)
    FOR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    UNTIL           reduce using rule 54 (ae_factor -> FLT_LIT .)
    REPEAT          reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_INT    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_FLT    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_CHR    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_STR    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_BLN    reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_INT reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_STR reduce using rule 54 (ae_factor -> FLT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 54 (ae_factor -> FLT_LIT .)
    INPUT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    STR_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN             reduce using rule 54 (ae_factor -> FLT_LIT .)
    CHR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    STR             reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_INT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_FLT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_BLN        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_STR        reduce using rule 54 (ae_factor -> FLT_LIT .)
    LIST_CHR        reduce using rule 54 (ae_factor -> FLT_LIT .)
    GHOST           reduce using rule 54 (ae_factor -> FLT_LIT .)
    AND             reduce using rule 54 (ae_factor -> FLT_LIT .)
    OR              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    RBRACE          reduce using rule 54 (ae_factor -> FLT_LIT .)
    RPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    REVIVE          reduce using rule 54 (ae_factor -> FLT_LIT .)
    SHIFT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    OTHERWISE       reduce using rule 54 (ae_factor -> FLT_LIT .)
    COMMA           reduce using rule 54 (ae_factor -> FLT_LIT .)
    COLON           reduce using rule 54 (ae_factor -> FLT_LIT .)
    PLUS_PLUS       reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS_MINUS     reduce using rule 54 (ae_factor -> FLT_LIT .)
    RBRACKET        reduce using rule 54 (ae_factor -> FLT_LIT .)
    SEMICOLON       reduce using rule 54 (ae_factor -> FLT_LIT .)

  ! GT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! EQ              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! IDENT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! CHECK           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SWAP            [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! DISPLAY         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GLOBAL          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FOR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! UNTIL           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! REPEAT          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INPUT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! STR_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! CHR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! STR             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_INT        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_FLT        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_BLN        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_STR        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LIST_CHR        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GHOST           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! AND             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OR              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RBRACE          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! REVIVE          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SHIFT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OTHERWISE       [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! COMMA           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! COLON           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RBRACKET        [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! SEMICOLON       [ reduce using rule 71 (re_factor -> FLT_LIT .) ]


state 164

    (72) re_factor -> BLN_LIT .

    GT              reduce using rule 72 (re_factor -> BLN_LIT .)
    LT              reduce using rule 72 (re_factor -> BLN_LIT .)
    EQ              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT_EQ          reduce using rule 72 (re_factor -> BLN_LIT .)
    GT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    INT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    IDENT           reduce using rule 72 (re_factor -> BLN_LIT .)
    CHECK           reduce using rule 72 (re_factor -> BLN_LIT .)
    SWAP            reduce using rule 72 (re_factor -> BLN_LIT .)
    DISPLAY         reduce using rule 72 (re_factor -> BLN_LIT .)
    GLOBAL          reduce using rule 72 (re_factor -> BLN_LIT .)
    FOR             reduce using rule 72 (re_factor -> BLN_LIT .)
    UNTIL           reduce using rule 72 (re_factor -> BLN_LIT .)
    REPEAT          reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION        reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_INT    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_FLT    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_CHR    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_STR    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_BLN    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_INT reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_FLT reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_CHR reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_STR reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_BLN reduce using rule 72 (re_factor -> BLN_LIT .)
    INPUT           reduce using rule 72 (re_factor -> BLN_LIT .)
    STR_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    INT             reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT             reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN             reduce using rule 72 (re_factor -> BLN_LIT .)
    CHR             reduce using rule 72 (re_factor -> BLN_LIT .)
    STR             reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_INT        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_FLT        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_BLN        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_STR        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_CHR        reduce using rule 72 (re_factor -> BLN_LIT .)
    GHOST           reduce using rule 72 (re_factor -> BLN_LIT .)
    AND             reduce using rule 72 (re_factor -> BLN_LIT .)
    OR              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT             reduce using rule 72 (re_factor -> BLN_LIT .)
    RBRACE          reduce using rule 72 (re_factor -> BLN_LIT .)
    RPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    REVIVE          reduce using rule 72 (re_factor -> BLN_LIT .)
    SHIFT           reduce using rule 72 (re_factor -> BLN_LIT .)
    OTHERWISE       reduce using rule 72 (re_factor -> BLN_LIT .)
    COMMA           reduce using rule 72 (re_factor -> BLN_LIT .)
    COLON           reduce using rule 72 (re_factor -> BLN_LIT .)
    PLUS_PLUS       reduce using rule 72 (re_factor -> BLN_LIT .)
    MINUS_MINUS     reduce using rule 72 (re_factor -> BLN_LIT .)
    RBRACKET        reduce using rule 72 (re_factor -> BLN_LIT .)
    SEMICOLON       reduce using rule 72 (re_factor -> BLN_LIT .)


state 165

    (73) re_factor -> var_call .
    (55) ae_factor -> var_call .

  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (ae_factor -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    CHECK           reduce using rule 55 (ae_factor -> var_call .)
    SWAP            reduce using rule 55 (ae_factor -> var_call .)
    DISPLAY         reduce using rule 55 (ae_factor -> var_call .)
    GLOBAL          reduce using rule 55 (ae_factor -> var_call .)
    FOR             reduce using rule 55 (ae_factor -> var_call .)
    UNTIL           reduce using rule 55 (ae_factor -> var_call .)
    REPEAT          reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION        reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_INT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_FLT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_CHR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_STR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_BLN    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_INT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_FLT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_CHR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_STR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_BLN reduce using rule 55 (ae_factor -> var_call .)
    INPUT           reduce using rule 55 (ae_factor -> var_call .)
    STR_LIT         reduce using rule 55 (ae_factor -> var_call .)
    INT             reduce using rule 55 (ae_factor -> var_call .)
    FLT             reduce using rule 55 (ae_factor -> var_call .)
    BLN             reduce using rule 55 (ae_factor -> var_call .)
    CHR             reduce using rule 55 (ae_factor -> var_call .)
    STR             reduce using rule 55 (ae_factor -> var_call .)
    LIST_INT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_FLT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_BLN        reduce using rule 55 (ae_factor -> var_call .)
    LIST_STR        reduce using rule 55 (ae_factor -> var_call .)
    LIST_CHR        reduce using rule 55 (ae_factor -> var_call .)
    GHOST           reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)
    RBRACE          reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    REVIVE          reduce using rule 55 (ae_factor -> var_call .)
    SHIFT           reduce using rule 55 (ae_factor -> var_call .)
    OTHERWISE       reduce using rule 55 (ae_factor -> var_call .)
    COMMA           reduce using rule 55 (ae_factor -> var_call .)
    COLON           reduce using rule 55 (ae_factor -> var_call .)
    PLUS_PLUS       reduce using rule 55 (ae_factor -> var_call .)
    MINUS_MINUS     reduce using rule 55 (ae_factor -> var_call .)
    RBRACKET        reduce using rule 55 (ae_factor -> var_call .)
    SEMICOLON       reduce using rule 55 (ae_factor -> var_call .)

  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 73 (re_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FOR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! COMMA           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! COLON           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACKET        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SEMICOLON       [ reduce using rule 73 (re_factor -> var_call .) ]


state 166

    (84) le_term -> le_factor le_tail2 .

    CHECK           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    SWAP            reduce using rule 84 (le_term -> le_factor le_tail2 .)
    DISPLAY         reduce using rule 84 (le_term -> le_factor le_tail2 .)
    GLOBAL          reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FOR             reduce using rule 84 (le_term -> le_factor le_tail2 .)
    UNTIL           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    REPEAT          reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION        reduce using rule 84 (le_term -> le_factor le_tail2 .)
    IDENT           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_INT    reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_FLT    reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_CHR    reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_STR    reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_BLN    reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_LIST_INT reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_LIST_STR reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 84 (le_term -> le_factor le_tail2 .)
    INPUT           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    LPAREN          reduce using rule 84 (le_term -> le_factor le_tail2 .)
    STR_LIT         reduce using rule 84 (le_term -> le_factor le_tail2 .)
    INT             reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FLT             reduce using rule 84 (le_term -> le_factor le_tail2 .)
    BLN             reduce using rule 84 (le_term -> le_factor le_tail2 .)
    CHR             reduce using rule 84 (le_term -> le_factor le_tail2 .)
    STR             reduce using rule 84 (le_term -> le_factor le_tail2 .)
    LIST_INT        reduce using rule 84 (le_term -> le_factor le_tail2 .)
    LIST_FLT        reduce using rule 84 (le_term -> le_factor le_tail2 .)
    LIST_BLN        reduce using rule 84 (le_term -> le_factor le_tail2 .)
    LIST_STR        reduce using rule 84 (le_term -> le_factor le_tail2 .)
    LIST_CHR        reduce using rule 84 (le_term -> le_factor le_tail2 .)
    INT_LIT         reduce using rule 84 (le_term -> le_factor le_tail2 .)
    FLT_LIT         reduce using rule 84 (le_term -> le_factor le_tail2 .)
    BLN_LIT         reduce using rule 84 (le_term -> le_factor le_tail2 .)
    GHOST           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    RBRACE          reduce using rule 84 (le_term -> le_factor le_tail2 .)
    RPAREN          reduce using rule 84 (le_term -> le_factor le_tail2 .)
    REVIVE          reduce using rule 84 (le_term -> le_factor le_tail2 .)
    SHIFT           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    OTHERWISE       reduce using rule 84 (le_term -> le_factor le_tail2 .)
    COMMA           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    COLON           reduce using rule 84 (le_term -> le_factor le_tail2 .)
    PLUS_PLUS       reduce using rule 84 (le_term -> le_factor le_tail2 .)
    MINUS_MINUS     reduce using rule 84 (le_term -> le_factor le_tail2 .)
    RBRACKET        reduce using rule 84 (le_term -> le_factor le_tail2 .)


state 167

    (92) le_tail2 -> empty .

    CHECK           reduce using rule 92 (le_tail2 -> empty .)
    SWAP            reduce using rule 92 (le_tail2 -> empty .)
    DISPLAY         reduce using rule 92 (le_tail2 -> empty .)
    GLOBAL          reduce using rule 92 (le_tail2 -> empty .)
    FOR             reduce using rule 92 (le_tail2 -> empty .)
    UNTIL           reduce using rule 92 (le_tail2 -> empty .)
    REPEAT          reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION        reduce using rule 92 (le_tail2 -> empty .)
    IDENT           reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_INT    reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_FLT    reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_CHR    reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_STR    reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_BLN    reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_LIST_INT reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_LIST_FLT reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_LIST_CHR reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_LIST_STR reduce using rule 92 (le_tail2 -> empty .)
    FUNCTION_LIST_BLN reduce using rule 92 (le_tail2 -> empty .)
    INPUT           reduce using rule 92 (le_tail2 -> empty .)
    LPAREN          reduce using rule 92 (le_tail2 -> empty .)
    STR_LIT         reduce using rule 92 (le_tail2 -> empty .)
    INT             reduce using rule 92 (le_tail2 -> empty .)
    FLT             reduce using rule 92 (le_tail2 -> empty .)
    BLN             reduce using rule 92 (le_tail2 -> empty .)
    CHR             reduce using rule 92 (le_tail2 -> empty .)
    STR             reduce using rule 92 (le_tail2 -> empty .)
    LIST_INT        reduce using rule 92 (le_tail2 -> empty .)
    LIST_FLT        reduce using rule 92 (le_tail2 -> empty .)
    LIST_BLN        reduce using rule 92 (le_tail2 -> empty .)
    LIST_STR        reduce using rule 92 (le_tail2 -> empty .)
    LIST_CHR        reduce using rule 92 (le_tail2 -> empty .)
    INT_LIT         reduce using rule 92 (le_tail2 -> empty .)
    FLT_LIT         reduce using rule 92 (le_tail2 -> empty .)
    BLN_LIT         reduce using rule 92 (le_tail2 -> empty .)
    GHOST           reduce using rule 92 (le_tail2 -> empty .)
    RBRACE          reduce using rule 92 (le_tail2 -> empty .)
    RPAREN          reduce using rule 92 (le_tail2 -> empty .)
    REVIVE          reduce using rule 92 (le_tail2 -> empty .)
    SHIFT           reduce using rule 92 (le_tail2 -> empty .)
    OTHERWISE       reduce using rule 92 (le_tail2 -> empty .)
    COMMA           reduce using rule 92 (le_tail2 -> empty .)
    COLON           reduce using rule 92 (le_tail2 -> empty .)
    PLUS_PLUS       reduce using rule 92 (le_tail2 -> empty .)
    MINUS_MINUS     reduce using rule 92 (le_tail2 -> empty .)
    RBRACKET        reduce using rule 92 (le_tail2 -> empty .)


state 168

    (93) le_tail2 -> le_tail .

    CHECK           reduce using rule 93 (le_tail2 -> le_tail .)
    SWAP            reduce using rule 93 (le_tail2 -> le_tail .)
    DISPLAY         reduce using rule 93 (le_tail2 -> le_tail .)
    GLOBAL          reduce using rule 93 (le_tail2 -> le_tail .)
    FOR             reduce using rule 93 (le_tail2 -> le_tail .)
    UNTIL           reduce using rule 93 (le_tail2 -> le_tail .)
    REPEAT          reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION        reduce using rule 93 (le_tail2 -> le_tail .)
    IDENT           reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_INT    reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_FLT    reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_CHR    reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_STR    reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_BLN    reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_LIST_INT reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_LIST_FLT reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_LIST_CHR reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_LIST_STR reduce using rule 93 (le_tail2 -> le_tail .)
    FUNCTION_LIST_BLN reduce using rule 93 (le_tail2 -> le_tail .)
    INPUT           reduce using rule 93 (le_tail2 -> le_tail .)
    LPAREN          reduce using rule 93 (le_tail2 -> le_tail .)
    STR_LIT         reduce using rule 93 (le_tail2 -> le_tail .)
    INT             reduce using rule 93 (le_tail2 -> le_tail .)
    FLT             reduce using rule 93 (le_tail2 -> le_tail .)
    BLN             reduce using rule 93 (le_tail2 -> le_tail .)
    CHR             reduce using rule 93 (le_tail2 -> le_tail .)
    STR             reduce using rule 93 (le_tail2 -> le_tail .)
    LIST_INT        reduce using rule 93 (le_tail2 -> le_tail .)
    LIST_FLT        reduce using rule 93 (le_tail2 -> le_tail .)
    LIST_BLN        reduce using rule 93 (le_tail2 -> le_tail .)
    LIST_STR        reduce using rule 93 (le_tail2 -> le_tail .)
    LIST_CHR        reduce using rule 93 (le_tail2 -> le_tail .)
    INT_LIT         reduce using rule 93 (le_tail2 -> le_tail .)
    FLT_LIT         reduce using rule 93 (le_tail2 -> le_tail .)
    BLN_LIT         reduce using rule 93 (le_tail2 -> le_tail .)
    GHOST           reduce using rule 93 (le_tail2 -> le_tail .)
    RBRACE          reduce using rule 93 (le_tail2 -> le_tail .)
    RPAREN          reduce using rule 93 (le_tail2 -> le_tail .)
    REVIVE          reduce using rule 93 (le_tail2 -> le_tail .)
    SHIFT           reduce using rule 93 (le_tail2 -> le_tail .)
    OTHERWISE       reduce using rule 93 (le_tail2 -> le_tail .)
    COMMA           reduce using rule 93 (le_tail2 -> le_tail .)
    COLON           reduce using rule 93 (le_tail2 -> le_tail .)
    PLUS_PLUS       reduce using rule 93 (le_tail2 -> le_tail .)
    MINUS_MINUS     reduce using rule 93 (le_tail2 -> le_tail .)
    RBRACKET        reduce using rule 93 (le_tail2 -> le_tail .)


state 169

    (94) le_tail2 -> le_term .

    CHECK           reduce using rule 94 (le_tail2 -> le_term .)
    SWAP            reduce using rule 94 (le_tail2 -> le_term .)
    DISPLAY         reduce using rule 94 (le_tail2 -> le_term .)
    GLOBAL          reduce using rule 94 (le_tail2 -> le_term .)
    FOR             reduce using rule 94 (le_tail2 -> le_term .)
    UNTIL           reduce using rule 94 (le_tail2 -> le_term .)
    REPEAT          reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION        reduce using rule 94 (le_tail2 -> le_term .)
    IDENT           reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_INT    reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_FLT    reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_CHR    reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_STR    reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_BLN    reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_LIST_INT reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_LIST_FLT reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_LIST_CHR reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_LIST_STR reduce using rule 94 (le_tail2 -> le_term .)
    FUNCTION_LIST_BLN reduce using rule 94 (le_tail2 -> le_term .)
    INPUT           reduce using rule 94 (le_tail2 -> le_term .)
    LPAREN          reduce using rule 94 (le_tail2 -> le_term .)
    STR_LIT         reduce using rule 94 (le_tail2 -> le_term .)
    INT             reduce using rule 94 (le_tail2 -> le_term .)
    FLT             reduce using rule 94 (le_tail2 -> le_term .)
    BLN             reduce using rule 94 (le_tail2 -> le_term .)
    CHR             reduce using rule 94 (le_tail2 -> le_term .)
    STR             reduce using rule 94 (le_tail2 -> le_term .)
    LIST_INT        reduce using rule 94 (le_tail2 -> le_term .)
    LIST_FLT        reduce using rule 94 (le_tail2 -> le_term .)
    LIST_BLN        reduce using rule 94 (le_tail2 -> le_term .)
    LIST_STR        reduce using rule 94 (le_tail2 -> le_term .)
    LIST_CHR        reduce using rule 94 (le_tail2 -> le_term .)
    INT_LIT         reduce using rule 94 (le_tail2 -> le_term .)
    FLT_LIT         reduce using rule 94 (le_tail2 -> le_term .)
    BLN_LIT         reduce using rule 94 (le_tail2 -> le_term .)
    GHOST           reduce using rule 94 (le_tail2 -> le_term .)
    RBRACE          reduce using rule 94 (le_tail2 -> le_term .)
    RPAREN          reduce using rule 94 (le_tail2 -> le_term .)
    REVIVE          reduce using rule 94 (le_tail2 -> le_term .)
    SHIFT           reduce using rule 94 (le_tail2 -> le_term .)
    OTHERWISE       reduce using rule 94 (le_tail2 -> le_term .)
    COMMA           reduce using rule 94 (le_tail2 -> le_term .)
    COLON           reduce using rule 94 (le_tail2 -> le_term .)
    PLUS_PLUS       reduce using rule 94 (le_tail2 -> le_term .)
    MINUS_MINUS     reduce using rule 94 (le_tail2 -> le_term .)
    RBRACKET        reduce using rule 94 (le_tail2 -> le_term .)


state 170

    (89) le_tail -> AND . le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

    le_term                        shift and go to state 241
    le_factor                      shift and go to state 71
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 171

    (90) le_tail -> OR . le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

    le_term                        shift and go to state 242
    le_factor                      shift and go to state 71
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 172

    (91) le_tail -> NOT . le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

    le_term                        shift and go to state 243
    le_factor                      shift and go to state 71
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 173

    (85) le_term -> LPAREN . le_factor le_tail2 RPAREN le_tail2
    (68) re_term -> LPAREN . re_factor re_tail2 RPAREN re_tail2
    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2

    BLN_LIT         shift and go to state 174
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    IDENT           shift and go to state 77
    LPAREN          shift and go to state 161

    le_factor                      shift and go to state 95
    re_factor                      shift and go to state 94
    ae_factor                      shift and go to state 93
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    arithmetic_expression          shift and go to state 97
    re_term                        shift and go to state 55
    ae_term                        shift and go to state 54

state 174

    (86) le_factor -> BLN_LIT .
    (72) re_factor -> BLN_LIT .

  ! reduce/reduce conflict for LPAREN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for CHECK resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for SWAP resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for UNTIL resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for REPEAT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INPUT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for GHOST resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for REVIVE resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for SHIFT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for COLON resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 72 (re_factor -> BLN_LIT .)
    GT              reduce using rule 72 (re_factor -> BLN_LIT .)
    LT              reduce using rule 72 (re_factor -> BLN_LIT .)
    EQ              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT_EQ          reduce using rule 72 (re_factor -> BLN_LIT .)
    GT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    INT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    IDENT           reduce using rule 72 (re_factor -> BLN_LIT .)
    AND             reduce using rule 72 (re_factor -> BLN_LIT .)
    OR              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT             reduce using rule 72 (re_factor -> BLN_LIT .)
    CHECK           reduce using rule 72 (re_factor -> BLN_LIT .)
    SWAP            reduce using rule 72 (re_factor -> BLN_LIT .)
    DISPLAY         reduce using rule 72 (re_factor -> BLN_LIT .)
    GLOBAL          reduce using rule 72 (re_factor -> BLN_LIT .)
    FOR             reduce using rule 72 (re_factor -> BLN_LIT .)
    UNTIL           reduce using rule 72 (re_factor -> BLN_LIT .)
    REPEAT          reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION        reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_INT    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_FLT    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_CHR    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_STR    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_BLN    reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_INT reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_FLT reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_CHR reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_STR reduce using rule 72 (re_factor -> BLN_LIT .)
    FUNCTION_LIST_BLN reduce using rule 72 (re_factor -> BLN_LIT .)
    INPUT           reduce using rule 72 (re_factor -> BLN_LIT .)
    STR_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    INT             reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT             reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN             reduce using rule 72 (re_factor -> BLN_LIT .)
    CHR             reduce using rule 72 (re_factor -> BLN_LIT .)
    STR             reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_INT        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_FLT        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_BLN        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_STR        reduce using rule 72 (re_factor -> BLN_LIT .)
    LIST_CHR        reduce using rule 72 (re_factor -> BLN_LIT .)
    GHOST           reduce using rule 72 (re_factor -> BLN_LIT .)
    RBRACE          reduce using rule 72 (re_factor -> BLN_LIT .)
    RPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    REVIVE          reduce using rule 72 (re_factor -> BLN_LIT .)
    SHIFT           reduce using rule 72 (re_factor -> BLN_LIT .)
    OTHERWISE       reduce using rule 72 (re_factor -> BLN_LIT .)
    COMMA           reduce using rule 72 (re_factor -> BLN_LIT .)
    COLON           reduce using rule 72 (re_factor -> BLN_LIT .)
    PLUS_PLUS       reduce using rule 72 (re_factor -> BLN_LIT .)
    MINUS_MINUS     reduce using rule 72 (re_factor -> BLN_LIT .)
    RBRACKET        reduce using rule 72 (re_factor -> BLN_LIT .)

  ! AND             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OR              [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! NOT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! IDENT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! CHECK           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! SWAP            [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! DISPLAY         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! GLOBAL          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FOR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! UNTIL           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! REPEAT          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_INT    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_FLT    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_CHR    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_STR    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_BLN    [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INPUT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! STR_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! CHR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! STR             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_INT        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_FLT        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_BLN        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_STR        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LIST_CHR        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! GHOST           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RBRACE          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! REVIVE          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! SHIFT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OTHERWISE       [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! COMMA           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! COLON           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! PLUS_PLUS       [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! MINUS_MINUS     [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RBRACKET        [ reduce using rule 86 (le_factor -> BLN_LIT .) ]


state 175

    (88) le_factor -> var_call .
    (73) re_factor -> var_call .
    (55) ae_factor -> var_call .

  ! reduce/reduce conflict for LPAREN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for COLON resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHECK resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SWAP resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for DISPLAY resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for UNTIL resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REPEAT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FUNCTION_LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INPUT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_INT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_FLT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_BLN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_STR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LIST_CHR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GHOST resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for REVIVE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for SHIFT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (ae_factor -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)
    CHECK           reduce using rule 55 (ae_factor -> var_call .)
    SWAP            reduce using rule 55 (ae_factor -> var_call .)
    DISPLAY         reduce using rule 55 (ae_factor -> var_call .)
    GLOBAL          reduce using rule 55 (ae_factor -> var_call .)
    FOR             reduce using rule 55 (ae_factor -> var_call .)
    UNTIL           reduce using rule 55 (ae_factor -> var_call .)
    REPEAT          reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION        reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_INT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_FLT    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_CHR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_STR    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_BLN    reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_INT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_FLT reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_CHR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_STR reduce using rule 55 (ae_factor -> var_call .)
    FUNCTION_LIST_BLN reduce using rule 55 (ae_factor -> var_call .)
    INPUT           reduce using rule 55 (ae_factor -> var_call .)
    STR_LIT         reduce using rule 55 (ae_factor -> var_call .)
    INT             reduce using rule 55 (ae_factor -> var_call .)
    FLT             reduce using rule 55 (ae_factor -> var_call .)
    BLN             reduce using rule 55 (ae_factor -> var_call .)
    CHR             reduce using rule 55 (ae_factor -> var_call .)
    STR             reduce using rule 55 (ae_factor -> var_call .)
    LIST_INT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_FLT        reduce using rule 55 (ae_factor -> var_call .)
    LIST_BLN        reduce using rule 55 (ae_factor -> var_call .)
    LIST_STR        reduce using rule 55 (ae_factor -> var_call .)
    LIST_CHR        reduce using rule 55 (ae_factor -> var_call .)
    GHOST           reduce using rule 55 (ae_factor -> var_call .)
    RBRACE          reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    REVIVE          reduce using rule 55 (ae_factor -> var_call .)
    SHIFT           reduce using rule 55 (ae_factor -> var_call .)
    OTHERWISE       reduce using rule 55 (ae_factor -> var_call .)
    COMMA           reduce using rule 55 (ae_factor -> var_call .)
    COLON           reduce using rule 55 (ae_factor -> var_call .)
    PLUS_PLUS       reduce using rule 55 (ae_factor -> var_call .)
    MINUS_MINUS     reduce using rule 55 (ae_factor -> var_call .)
    RBRACKET        reduce using rule 55 (ae_factor -> var_call .)

  ! AND             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OR              [ reduce using rule 88 (le_factor -> var_call .) ]
  ! NOT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 88 (le_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FOR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! CHR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! STR             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 88 (le_factor -> var_call .) ]
  ! COMMA           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! COLON           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 88 (le_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RBRACKET        [ reduce using rule 88 (le_factor -> var_call .) ]
  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHECK           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SWAP            [ reduce using rule 73 (re_factor -> var_call .) ]
  ! DISPLAY         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GLOBAL          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FOR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! UNTIL           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REPEAT          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_INT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_FLT    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_CHR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_STR    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_BLN    [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INPUT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! CHR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! STR             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_INT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_FLT        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_BLN        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_STR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LIST_CHR        [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GHOST           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! REVIVE          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! SHIFT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OTHERWISE       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! COMMA           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! COLON           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RBRACKET        [ reduce using rule 73 (re_factor -> var_call .) ]


state 176

    (21) var_dec -> data_type IDENT vardec_tail .

    CHECK           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    SWAP            reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    DISPLAY         reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    GLOBAL          reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FOR             reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    UNTIL           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    REPEAT          reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION        reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    IDENT           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_INT    reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_FLT    reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_CHR    reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_STR    reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_BLN    reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_LIST_INT reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_LIST_FLT reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_LIST_CHR reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_LIST_STR reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FUNCTION_LIST_BLN reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    INPUT           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    LPAREN          reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    STR_LIT         reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    INT             reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FLT             reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    BLN             reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    CHR             reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    STR             reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    LIST_INT        reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    LIST_FLT        reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    LIST_BLN        reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    LIST_STR        reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    LIST_CHR        reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    INT_LIT         reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    FLT_LIT         reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    BLN_LIT         reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    GHOST           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    RBRACE          reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    RPAREN          reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    REVIVE          reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    SHIFT           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    OTHERWISE       reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)
    COMMA           reduce using rule 21 (var_dec -> data_type IDENT vardec_tail .)


state 177

    (24) var_initialization -> data_type IDENT EQ . value varinit_tail
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 244
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 178

    (22) vardec_tail -> COMMA . IDENT vardec_tail

    IDENT           shift and go to state 245


state 179

    (23) vardec_tail -> empty .

    CHECK           reduce using rule 23 (vardec_tail -> empty .)
    SWAP            reduce using rule 23 (vardec_tail -> empty .)
    DISPLAY         reduce using rule 23 (vardec_tail -> empty .)
    GLOBAL          reduce using rule 23 (vardec_tail -> empty .)
    FOR             reduce using rule 23 (vardec_tail -> empty .)
    UNTIL           reduce using rule 23 (vardec_tail -> empty .)
    REPEAT          reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION        reduce using rule 23 (vardec_tail -> empty .)
    IDENT           reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_INT    reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_FLT    reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_CHR    reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_STR    reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_BLN    reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 23 (vardec_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 23 (vardec_tail -> empty .)
    INPUT           reduce using rule 23 (vardec_tail -> empty .)
    LPAREN          reduce using rule 23 (vardec_tail -> empty .)
    STR_LIT         reduce using rule 23 (vardec_tail -> empty .)
    INT             reduce using rule 23 (vardec_tail -> empty .)
    FLT             reduce using rule 23 (vardec_tail -> empty .)
    BLN             reduce using rule 23 (vardec_tail -> empty .)
    CHR             reduce using rule 23 (vardec_tail -> empty .)
    STR             reduce using rule 23 (vardec_tail -> empty .)
    LIST_INT        reduce using rule 23 (vardec_tail -> empty .)
    LIST_FLT        reduce using rule 23 (vardec_tail -> empty .)
    LIST_BLN        reduce using rule 23 (vardec_tail -> empty .)
    LIST_STR        reduce using rule 23 (vardec_tail -> empty .)
    LIST_CHR        reduce using rule 23 (vardec_tail -> empty .)
    INT_LIT         reduce using rule 23 (vardec_tail -> empty .)
    FLT_LIT         reduce using rule 23 (vardec_tail -> empty .)
    BLN_LIT         reduce using rule 23 (vardec_tail -> empty .)
    GHOST           reduce using rule 23 (vardec_tail -> empty .)
    RBRACE          reduce using rule 23 (vardec_tail -> empty .)
    RPAREN          reduce using rule 23 (vardec_tail -> empty .)
    REVIVE          reduce using rule 23 (vardec_tail -> empty .)
    SHIFT           reduce using rule 23 (vardec_tail -> empty .)
    OTHERWISE       reduce using rule 23 (vardec_tail -> empty .)
    COMMA           reduce using rule 23 (vardec_tail -> empty .)


state 180

    (97) list_dec -> list_dtype IDENT listdec_tail .

    CHECK           reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    SWAP            reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    DISPLAY         reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    GLOBAL          reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FOR             reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    UNTIL           reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    REPEAT          reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION        reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    IDENT           reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_INT    reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_FLT    reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_CHR    reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_STR    reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_BLN    reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_LIST_INT reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_LIST_FLT reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_LIST_CHR reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_LIST_STR reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FUNCTION_LIST_BLN reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    INPUT           reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    LPAREN          reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    STR_LIT         reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    INT             reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FLT             reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    BLN             reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    CHR             reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    STR             reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    LIST_INT        reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    LIST_FLT        reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    LIST_BLN        reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    LIST_STR        reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    LIST_CHR        reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    INT_LIT         reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    FLT_LIT         reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    BLN_LIT         reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    GHOST           reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    RBRACE          reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    RPAREN          reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    REVIVE          reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    SHIFT           reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)
    OTHERWISE       reduce using rule 97 (list_dec -> list_dtype IDENT listdec_tail .)


state 181

    (100) list_init -> list_dtype IDENT LBRACKET . index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (110) index -> . INT_LIT
    (111) index -> . IDENT

    INT_LIT         shift and go to state 204
    IDENT           shift and go to state 202

    index                          shift and go to state 246

state 182

    (98) listdec_tail -> COMMA . IDENT listdec_tail

    IDENT           shift and go to state 247


state 183

    (99) listdec_tail -> empty .

    CHECK           reduce using rule 99 (listdec_tail -> empty .)
    SWAP            reduce using rule 99 (listdec_tail -> empty .)
    DISPLAY         reduce using rule 99 (listdec_tail -> empty .)
    GLOBAL          reduce using rule 99 (listdec_tail -> empty .)
    FOR             reduce using rule 99 (listdec_tail -> empty .)
    UNTIL           reduce using rule 99 (listdec_tail -> empty .)
    REPEAT          reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION        reduce using rule 99 (listdec_tail -> empty .)
    IDENT           reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_INT    reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_FLT    reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_CHR    reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_STR    reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_BLN    reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 99 (listdec_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 99 (listdec_tail -> empty .)
    INPUT           reduce using rule 99 (listdec_tail -> empty .)
    LPAREN          reduce using rule 99 (listdec_tail -> empty .)
    STR_LIT         reduce using rule 99 (listdec_tail -> empty .)
    INT             reduce using rule 99 (listdec_tail -> empty .)
    FLT             reduce using rule 99 (listdec_tail -> empty .)
    BLN             reduce using rule 99 (listdec_tail -> empty .)
    CHR             reduce using rule 99 (listdec_tail -> empty .)
    STR             reduce using rule 99 (listdec_tail -> empty .)
    LIST_INT        reduce using rule 99 (listdec_tail -> empty .)
    LIST_FLT        reduce using rule 99 (listdec_tail -> empty .)
    LIST_BLN        reduce using rule 99 (listdec_tail -> empty .)
    LIST_STR        reduce using rule 99 (listdec_tail -> empty .)
    LIST_CHR        reduce using rule 99 (listdec_tail -> empty .)
    INT_LIT         reduce using rule 99 (listdec_tail -> empty .)
    FLT_LIT         reduce using rule 99 (listdec_tail -> empty .)
    BLN_LIT         reduce using rule 99 (listdec_tail -> empty .)
    GHOST           reduce using rule 99 (listdec_tail -> empty .)
    RBRACE          reduce using rule 99 (listdec_tail -> empty .)
    RPAREN          reduce using rule 99 (listdec_tail -> empty .)
    REVIVE          reduce using rule 99 (listdec_tail -> empty .)
    SHIFT           reduce using rule 99 (listdec_tail -> empty .)
    OTHERWISE       reduce using rule 99 (listdec_tail -> empty .)


state 184

    (68) re_term -> LPAREN . re_factor re_tail2 RPAREN re_tail2
    (85) le_term -> LPAREN . le_factor le_tail2 RPAREN le_tail2
    (52) ae_term -> LPAREN . ae_factor ae_tail2 RPAREN ae_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (66) relational_expression -> . re_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2

    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 75
    IDENT           shift and go to state 77
    LPAREN          shift and go to state 92

    re_factor                      shift and go to state 94
    le_factor                      shift and go to state 95
    ae_factor                      shift and go to state 93
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 188
    relational_expression          shift and go to state 98
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55

state 185

    (112) conditional_statement -> CHECK LPAREN condition . RPAREN LBRACE statements RBRACE conditional_tail

    RPAREN          shift and go to state 248


state 186

    (120) condition -> relational_expression .
    (87) le_factor -> relational_expression .

  ! reduce/reduce conflict for RPAREN resolved using rule 87 (le_factor -> relational_expression .)
    AND             reduce using rule 87 (le_factor -> relational_expression .)
    OR              reduce using rule 87 (le_factor -> relational_expression .)
    NOT             reduce using rule 87 (le_factor -> relational_expression .)
    LPAREN          reduce using rule 87 (le_factor -> relational_expression .)
    BLN_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    IDENT           reduce using rule 87 (le_factor -> relational_expression .)
    INT_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    FLT_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    RPAREN          reduce using rule 87 (le_factor -> relational_expression .)

  ! RPAREN          [ reduce using rule 120 (condition -> relational_expression .) ]


state 187

    (121) condition -> logical_expression .

    RPAREN          reduce using rule 121 (condition -> logical_expression .)


state 188

    (73) re_factor -> var_call .
    (88) le_factor -> var_call .
    (55) ae_factor -> var_call .

  ! reduce/reduce conflict for AND resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (re_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)

  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OR              [ reduce using rule 88 (le_factor -> var_call .) ]
  ! NOT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]


state 189

    (68) re_term -> LPAREN re_factor . re_tail2 RPAREN re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    RPAREN          reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    re_factor                      shift and go to state 70
    re_tail2                       shift and go to state 249
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_term                        shift and go to state 154
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 190

    (55) ae_factor -> var_call .
    (73) re_factor -> var_call .

  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 55 (ae_factor -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    RPAREN          reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)

  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! RPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]


state 191

    (52) ae_term -> LPAREN ae_factor ae_tail2 . RPAREN ae_tail2
    (51) ae_term -> ae_factor ae_tail2 .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 250
    GT              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LT              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    EQ              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    NOT_EQ          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    GT_EQ           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LT_EQ           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    LPAREN          reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    INT_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    FLT_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    BLN_LIT         reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    IDENT           reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    AND             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    OR              reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)
    NOT             reduce using rule 51 (ae_term -> ae_factor ae_tail2 .)

  ! RPAREN          [ reduce using rule 51 (ae_term -> ae_factor ae_tail2 .) ]


state 192

    (68) re_term -> LPAREN re_factor re_tail2 . RPAREN re_tail2
    (67) re_term -> re_factor re_tail2 .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 251
    AND             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    OR              reduce using rule 67 (re_term -> re_factor re_tail2 .)
    NOT             reduce using rule 67 (re_term -> re_factor re_tail2 .)
    LPAREN          reduce using rule 67 (re_term -> re_factor re_tail2 .)
    BLN_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    IDENT           reduce using rule 67 (re_term -> re_factor re_tail2 .)
    INT_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)
    FLT_LIT         reduce using rule 67 (re_term -> re_factor re_tail2 .)

  ! RPAREN          [ reduce using rule 67 (re_term -> re_factor re_tail2 .) ]


state 193

    (85) le_term -> LPAREN le_factor le_tail2 . RPAREN le_tail2

    RPAREN          shift and go to state 252


state 194

    (141) function_statement -> ret_type IDENT LPAREN . parameters RPAREN LBRACE statements revive RBRACE
    (160) parameters -> . var_dec next_parameters
    (161) parameters -> . empty
    (21) var_dec -> . data_type IDENT vardec_tail
    (183) empty -> .
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    RPAREN          reduce using rule 183 (empty -> .)
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17

    parameters                     shift and go to state 253
    var_dec                        shift and go to state 254
    empty                          shift and go to state 255
    data_type                      shift and go to state 256

state 195

    (143) function_call -> IDENT LPAREN arguments . RPAREN

    RPAREN          shift and go to state 257


state 196

    (146) arguments -> var_call .

    RPAREN          reduce using rule 146 (arguments -> var_call .)


state 197

    (147) arguments -> literal .

    RPAREN          reduce using rule 147 (arguments -> literal .)


state 198

    (41) literal -> INT_LIT .

    RPAREN          reduce using rule 41 (literal -> INT_LIT .)


state 199

    (42) literal -> FLT_LIT .

    RPAREN          reduce using rule 42 (literal -> FLT_LIT .)


state 200

    (43) literal -> BLN_LIT .

    RPAREN          reduce using rule 43 (literal -> BLN_LIT .)


state 201

    (45) literal -> STR_LIT .

    RPAREN          reduce using rule 45 (literal -> STR_LIT .)


state 202

    (111) index -> IDENT .

    RBRACKET        reduce using rule 111 (index -> IDENT .)


state 203

    (96) var_call -> IDENT LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 258


state 204

    (110) index -> INT_LIT .

    RBRACKET        reduce using rule 110 (index -> INT_LIT .)


state 205

    (116) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE switch_condition OTHERWISE statements RBRACE

    RPAREN          shift and go to state 259


state 206

    (166) output_statement -> DISPLAY LPAREN value . RPAREN

    RPAREN          shift and go to state 260


state 207

    (85) le_term -> LPAREN le_factor . le_tail2 RPAREN le_tail2
    (84) le_term -> le_factor . le_tail2
    (92) le_tail2 -> . empty
    (93) le_tail2 -> . le_tail
    (94) le_tail2 -> . le_term
    (183) empty -> .
    (89) le_tail -> . AND le_term
    (90) le_tail -> . OR le_term
    (91) le_tail -> . NOT le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    RPAREN          reduce using rule 183 (empty -> .)
    AND             shift and go to state 170
    OR              shift and go to state 171
    NOT             shift and go to state 172
    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

    le_factor                      shift and go to state 71
    le_tail2                       shift and go to state 261
    empty                          shift and go to state 167
    le_tail                        shift and go to state 168
    le_term                        shift and go to state 169
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 208

    (53) ae_factor -> INT_LIT .
    (70) re_factor -> INT_LIT .
    (41) literal -> INT_LIT .

  ! reduce/reduce conflict for GT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 53 (ae_factor -> INT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (literal -> INT_LIT .)
    LPAREN          reduce using rule 53 (ae_factor -> INT_LIT .)
    PLUS            reduce using rule 53 (ae_factor -> INT_LIT .)
    MINUS           reduce using rule 53 (ae_factor -> INT_LIT .)
    DIVISION        reduce using rule 53 (ae_factor -> INT_LIT .)
    MULTIPLY        reduce using rule 53 (ae_factor -> INT_LIT .)
    MODULO          reduce using rule 53 (ae_factor -> INT_LIT .)
    EXPONENT        reduce using rule 53 (ae_factor -> INT_LIT .)
    INT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    FLT_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    IDENT           reduce using rule 53 (ae_factor -> INT_LIT .)
    GT              reduce using rule 53 (ae_factor -> INT_LIT .)
    LT              reduce using rule 53 (ae_factor -> INT_LIT .)
    EQ              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT_EQ          reduce using rule 53 (ae_factor -> INT_LIT .)
    GT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    LT_EQ           reduce using rule 53 (ae_factor -> INT_LIT .)
    BLN_LIT         reduce using rule 53 (ae_factor -> INT_LIT .)
    AND             reduce using rule 53 (ae_factor -> INT_LIT .)
    OR              reduce using rule 53 (ae_factor -> INT_LIT .)
    NOT             reduce using rule 53 (ae_factor -> INT_LIT .)
    RPAREN          reduce using rule 41 (literal -> INT_LIT .)

  ! RPAREN          [ reduce using rule 53 (ae_factor -> INT_LIT .) ]
  ! GT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! EQ              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! GT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LT_EQ           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! LPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! INT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! IDENT           [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! RPAREN          [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! AND             [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! OR              [ reduce using rule 70 (re_factor -> INT_LIT .) ]
  ! NOT             [ reduce using rule 70 (re_factor -> INT_LIT .) ]


state 209

    (54) ae_factor -> FLT_LIT .
    (71) re_factor -> FLT_LIT .
    (42) literal -> FLT_LIT .

  ! reduce/reduce conflict for GT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for AND resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 54 (ae_factor -> FLT_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (literal -> FLT_LIT .)
    LPAREN          reduce using rule 54 (ae_factor -> FLT_LIT .)
    PLUS            reduce using rule 54 (ae_factor -> FLT_LIT .)
    MINUS           reduce using rule 54 (ae_factor -> FLT_LIT .)
    DIVISION        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MULTIPLY        reduce using rule 54 (ae_factor -> FLT_LIT .)
    MODULO          reduce using rule 54 (ae_factor -> FLT_LIT .)
    EXPONENT        reduce using rule 54 (ae_factor -> FLT_LIT .)
    INT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    FLT_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    IDENT           reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT              reduce using rule 54 (ae_factor -> FLT_LIT .)
    EQ              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT_EQ          reduce using rule 54 (ae_factor -> FLT_LIT .)
    GT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    LT_EQ           reduce using rule 54 (ae_factor -> FLT_LIT .)
    BLN_LIT         reduce using rule 54 (ae_factor -> FLT_LIT .)
    AND             reduce using rule 54 (ae_factor -> FLT_LIT .)
    OR              reduce using rule 54 (ae_factor -> FLT_LIT .)
    NOT             reduce using rule 54 (ae_factor -> FLT_LIT .)
    RPAREN          reduce using rule 42 (literal -> FLT_LIT .)

  ! RPAREN          [ reduce using rule 54 (ae_factor -> FLT_LIT .) ]
  ! GT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! EQ              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT_EQ          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! GT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LT_EQ           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! LPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! INT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! FLT_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! BLN_LIT         [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! IDENT           [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! RPAREN          [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! AND             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! OR              [ reduce using rule 71 (re_factor -> FLT_LIT .) ]
  ! NOT             [ reduce using rule 71 (re_factor -> FLT_LIT .) ]


state 210

    (69) re_factor -> arithmetic_expression .
    (46) expression -> arithmetic_expression .

  ! reduce/reduce conflict for RPAREN resolved using rule 46 (expression -> arithmetic_expression .)
    GT              reduce using rule 69 (re_factor -> arithmetic_expression .)
    LT              reduce using rule 69 (re_factor -> arithmetic_expression .)
    EQ              reduce using rule 69 (re_factor -> arithmetic_expression .)
    NOT_EQ          reduce using rule 69 (re_factor -> arithmetic_expression .)
    GT_EQ           reduce using rule 69 (re_factor -> arithmetic_expression .)
    LT_EQ           reduce using rule 69 (re_factor -> arithmetic_expression .)
    LPAREN          reduce using rule 69 (re_factor -> arithmetic_expression .)
    INT_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    FLT_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    BLN_LIT         reduce using rule 69 (re_factor -> arithmetic_expression .)
    IDENT           reduce using rule 69 (re_factor -> arithmetic_expression .)
    AND             reduce using rule 69 (re_factor -> arithmetic_expression .)
    OR              reduce using rule 69 (re_factor -> arithmetic_expression .)
    NOT             reduce using rule 69 (re_factor -> arithmetic_expression .)
    RPAREN          reduce using rule 46 (expression -> arithmetic_expression .)

  ! RPAREN          [ reduce using rule 69 (re_factor -> arithmetic_expression .) ]


state 211

    (72) re_factor -> BLN_LIT .
    (86) le_factor -> BLN_LIT .
    (43) literal -> BLN_LIT .

  ! reduce/reduce conflict for AND resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for OR resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for NOT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for IDENT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (re_factor -> BLN_LIT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (literal -> BLN_LIT .)
    GT              reduce using rule 72 (re_factor -> BLN_LIT .)
    LT              reduce using rule 72 (re_factor -> BLN_LIT .)
    EQ              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT_EQ          reduce using rule 72 (re_factor -> BLN_LIT .)
    GT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LT_EQ           reduce using rule 72 (re_factor -> BLN_LIT .)
    LPAREN          reduce using rule 72 (re_factor -> BLN_LIT .)
    INT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    FLT_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    BLN_LIT         reduce using rule 72 (re_factor -> BLN_LIT .)
    IDENT           reduce using rule 72 (re_factor -> BLN_LIT .)
    AND             reduce using rule 72 (re_factor -> BLN_LIT .)
    OR              reduce using rule 72 (re_factor -> BLN_LIT .)
    NOT             reduce using rule 72 (re_factor -> BLN_LIT .)
    RPAREN          reduce using rule 43 (literal -> BLN_LIT .)

  ! RPAREN          [ reduce using rule 72 (re_factor -> BLN_LIT .) ]
  ! AND             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! OR              [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! NOT             [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! LPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! BLN_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! IDENT           [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! INT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! FLT_LIT         [ reduce using rule 86 (le_factor -> BLN_LIT .) ]
  ! RPAREN          [ reduce using rule 86 (le_factor -> BLN_LIT .) ]


state 212

    (87) le_factor -> relational_expression .
    (47) expression -> relational_expression .

  ! reduce/reduce conflict for RPAREN resolved using rule 47 (expression -> relational_expression .)
    AND             reduce using rule 87 (le_factor -> relational_expression .)
    OR              reduce using rule 87 (le_factor -> relational_expression .)
    NOT             reduce using rule 87 (le_factor -> relational_expression .)
    LPAREN          reduce using rule 87 (le_factor -> relational_expression .)
    BLN_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    IDENT           reduce using rule 87 (le_factor -> relational_expression .)
    INT_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    FLT_LIT         reduce using rule 87 (le_factor -> relational_expression .)
    RPAREN          reduce using rule 47 (expression -> relational_expression .)

  ! RPAREN          [ reduce using rule 87 (le_factor -> relational_expression .) ]


state 213

    (168) type_cast -> CONVERT_TO_INT LPAREN . value RPAREN
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 262
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 214

    (169) type_cast -> CONVERT_TO_FLT LPAREN . value RPAREN
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 263
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 215

    (170) type_cast -> CONVERT_TO_BLN LPAREN . value RPAREN
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 264
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 216

    (171) type_cast -> CONVERT_TO_STR LPAREN . value RPAREN
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 265
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 217

    (177) not_op -> NOT value .

    CHECK           reduce using rule 177 (not_op -> NOT value .)
    SWAP            reduce using rule 177 (not_op -> NOT value .)
    DISPLAY         reduce using rule 177 (not_op -> NOT value .)
    GLOBAL          reduce using rule 177 (not_op -> NOT value .)
    FOR             reduce using rule 177 (not_op -> NOT value .)
    UNTIL           reduce using rule 177 (not_op -> NOT value .)
    REPEAT          reduce using rule 177 (not_op -> NOT value .)
    FUNCTION        reduce using rule 177 (not_op -> NOT value .)
    IDENT           reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_INT    reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_FLT    reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_CHR    reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_STR    reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_BLN    reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_LIST_INT reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_LIST_FLT reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_LIST_CHR reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_LIST_STR reduce using rule 177 (not_op -> NOT value .)
    FUNCTION_LIST_BLN reduce using rule 177 (not_op -> NOT value .)
    INPUT           reduce using rule 177 (not_op -> NOT value .)
    LPAREN          reduce using rule 177 (not_op -> NOT value .)
    STR_LIT         reduce using rule 177 (not_op -> NOT value .)
    INT             reduce using rule 177 (not_op -> NOT value .)
    FLT             reduce using rule 177 (not_op -> NOT value .)
    BLN             reduce using rule 177 (not_op -> NOT value .)
    CHR             reduce using rule 177 (not_op -> NOT value .)
    STR             reduce using rule 177 (not_op -> NOT value .)
    LIST_INT        reduce using rule 177 (not_op -> NOT value .)
    LIST_FLT        reduce using rule 177 (not_op -> NOT value .)
    LIST_BLN        reduce using rule 177 (not_op -> NOT value .)
    LIST_STR        reduce using rule 177 (not_op -> NOT value .)
    LIST_CHR        reduce using rule 177 (not_op -> NOT value .)
    INT_LIT         reduce using rule 177 (not_op -> NOT value .)
    FLT_LIT         reduce using rule 177 (not_op -> NOT value .)
    BLN_LIT         reduce using rule 177 (not_op -> NOT value .)
    GHOST           reduce using rule 177 (not_op -> NOT value .)
    RBRACE          reduce using rule 177 (not_op -> NOT value .)
    RPAREN          reduce using rule 177 (not_op -> NOT value .)
    REVIVE          reduce using rule 177 (not_op -> NOT value .)
    SHIFT           reduce using rule 177 (not_op -> NOT value .)
    OTHERWISE       reduce using rule 177 (not_op -> NOT value .)
    COMMA           reduce using rule 177 (not_op -> NOT value .)
    COLON           reduce using rule 177 (not_op -> NOT value .)
    PLUS_PLUS       reduce using rule 177 (not_op -> NOT value .)
    MINUS_MINUS     reduce using rule 177 (not_op -> NOT value .)
    RBRACKET        reduce using rule 177 (not_op -> NOT value .)


state 218

    (39) negative_val -> TILDE INT_LIT .

    CHECK           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    SWAP            reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    DISPLAY         reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    GLOBAL          reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FOR             reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    UNTIL           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    REPEAT          reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION        reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    IDENT           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_INT    reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_FLT    reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_CHR    reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_STR    reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_BLN    reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_LIST_INT reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_LIST_STR reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    INPUT           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    LPAREN          reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    STR_LIT         reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    INT             reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FLT             reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    BLN             reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    CHR             reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    STR             reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    LIST_INT        reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    LIST_FLT        reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    LIST_BLN        reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    LIST_STR        reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    LIST_CHR        reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    INT_LIT         reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    FLT_LIT         reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    BLN_LIT         reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    GHOST           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    RBRACE          reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    RPAREN          reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    REVIVE          reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    SHIFT           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    OTHERWISE       reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    COMMA           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    COLON           reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    PLUS_PLUS       reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    MINUS_MINUS     reduce using rule 39 (negative_val -> TILDE INT_LIT .)
    RBRACKET        reduce using rule 39 (negative_val -> TILDE INT_LIT .)


state 219

    (40) negative_val -> TILDE FLT_LIT .

    CHECK           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    SWAP            reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    DISPLAY         reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    GLOBAL          reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FOR             reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    UNTIL           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    REPEAT          reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    IDENT           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_INT    reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_FLT    reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_CHR    reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_STR    reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_BLN    reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_LIST_INT reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_LIST_FLT reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_LIST_CHR reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_LIST_STR reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FUNCTION_LIST_BLN reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    INPUT           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    LPAREN          reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    STR_LIT         reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    INT             reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FLT             reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    BLN             reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    CHR             reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    STR             reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    LIST_INT        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    LIST_FLT        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    LIST_BLN        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    LIST_STR        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    LIST_CHR        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    INT_LIT         reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    FLT_LIT         reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    BLN_LIT         reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    GHOST           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    RBRACE          reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    REVIVE          reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    SHIFT           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    OTHERWISE       reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    COMMA           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    COLON           reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    PLUS_PLUS       reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    MINUS_MINUS     reduce using rule 40 (negative_val -> TILDE FLT_LIT .)
    RBRACKET        reduce using rule 40 (negative_val -> TILDE FLT_LIT .)


state 220

    (135) assignment_statement -> var_call assign_op value .

    CHECK           reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    SWAP            reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    DISPLAY         reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    GLOBAL          reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FOR             reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    UNTIL           reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    REPEAT          reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION        reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    IDENT           reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_INT    reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_FLT    reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_CHR    reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_STR    reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_BLN    reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_LIST_INT reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_LIST_FLT reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_LIST_CHR reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_LIST_STR reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FUNCTION_LIST_BLN reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    INPUT           reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    LPAREN          reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    STR_LIT         reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    INT             reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FLT             reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    BLN             reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    CHR             reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    STR             reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    LIST_INT        reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    LIST_FLT        reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    LIST_BLN        reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    LIST_STR        reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    LIST_CHR        reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    INT_LIT         reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    FLT_LIT         reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    BLN_LIT         reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    GHOST           reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    RBRACE          reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    RPAREN          reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    REVIVE          reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    SHIFT           reduce using rule 135 (assignment_statement -> var_call assign_op value .)
    OTHERWISE       reduce using rule 135 (assignment_statement -> var_call assign_op value .)


state 221

    (125) for_loop -> FOR LPAREN control_variable . SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE

    SEMICOLON       shift and go to state 266


state 222

    (128) control_variable -> IDENT . EQ INT_LIT
    (95) var_call -> IDENT .
    (96) var_call -> IDENT . LBRACKET index RBRACKET

    EQ              shift and go to state 267
    SEMICOLON       reduce using rule 95 (var_call -> IDENT .)
    LBRACKET        shift and go to state 101


state 223

    (129) control_variable -> var_call .

    SEMICOLON       reduce using rule 129 (control_variable -> var_call .)


state 224

    (126) until_loop -> UNTIL LPAREN relational_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 268


state 225

    (127) repeat_until -> REPEAT LBRACE statements . RBRACE UNTIL LPAREN relational_expression RPAREN

    RBRACE          shift and go to state 269


state 226

    (173) stringcon_tail -> PLUS string_lit . stringcon_tail2
    (174) stringcon_tail2 -> . stringcon_tail
    (175) stringcon_tail2 -> . empty
    (173) stringcon_tail -> . PLUS string_lit stringcon_tail2
    (183) empty -> .

    PLUS            shift and go to state 135
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)

    stringcon_tail2                shift and go to state 270
    stringcon_tail                 shift and go to state 271
    empty                          shift and go to state 272

state 227

    (167) input_statement -> INPUT LPAREN statements . RPAREN

    RPAREN          shift and go to state 273


state 228

    (52) ae_term -> LPAREN ae_factor . ae_tail2 RPAREN ae_tail2
    (63) ae_tail2 -> . ae_term
    (64) ae_tail2 -> . ae_tail
    (65) ae_tail2 -> . empty
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

    LPAREN          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    RPAREN          reduce using rule 183 (empty -> .)
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

    ae_factor                      shift and go to state 69
    ae_tail2                       shift and go to state 274
    ae_term                        shift and go to state 138
    ae_tail                        shift and go to state 139
    empty                          shift and go to state 140
    var_call                       shift and go to state 150

state 229

    (56) ae_tail -> PLUS ae_term . ae_tail
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)

  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_tail                        shift and go to state 275
    empty                          shift and go to state 276

state 230

    (57) ae_tail -> MINUS ae_term . ae_tail
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)

  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_tail                        shift and go to state 277
    empty                          shift and go to state 276

state 231

    (58) ae_tail -> DIVISION ae_term . ae_tail
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)

  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_tail                        shift and go to state 278
    empty                          shift and go to state 276

state 232

    (59) ae_tail -> MULTIPLY ae_term . ae_tail
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)

  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_tail                        shift and go to state 279
    empty                          shift and go to state 276

state 233

    (60) ae_tail -> MODULO ae_term . ae_tail
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)

  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_tail                        shift and go to state 280
    empty                          shift and go to state 276

state 234

    (61) ae_tail -> EXPONENT ae_term . ae_tail
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)

  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_tail                        shift and go to state 281
    empty                          shift and go to state 276

state 235

    (74) re_tail -> GT re_term . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_term                        shift and go to state 154
    re_tail2                       shift and go to state 282
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 236

    (75) re_tail -> LT re_term . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_term                        shift and go to state 154
    re_tail2                       shift and go to state 283
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 237

    (76) re_tail -> EQ re_term . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_term                        shift and go to state 154
    re_tail2                       shift and go to state 284
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 238

    (77) re_tail -> NOT_EQ re_term . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_term                        shift and go to state 154
    re_tail2                       shift and go to state 285
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 239

    (78) re_tail -> GT_EQ re_term . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_term                        shift and go to state 154
    re_tail2                       shift and go to state 286
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 240

    (79) re_tail -> LT_EQ re_term . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_term                        shift and go to state 154
    re_tail2                       shift and go to state 287
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 241

    (89) le_tail -> AND le_term .

    CHECK           reduce using rule 89 (le_tail -> AND le_term .)
    SWAP            reduce using rule 89 (le_tail -> AND le_term .)
    DISPLAY         reduce using rule 89 (le_tail -> AND le_term .)
    GLOBAL          reduce using rule 89 (le_tail -> AND le_term .)
    FOR             reduce using rule 89 (le_tail -> AND le_term .)
    UNTIL           reduce using rule 89 (le_tail -> AND le_term .)
    REPEAT          reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION        reduce using rule 89 (le_tail -> AND le_term .)
    IDENT           reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_INT    reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_FLT    reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_CHR    reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_STR    reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_BLN    reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_LIST_INT reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_LIST_FLT reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_LIST_CHR reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_LIST_STR reduce using rule 89 (le_tail -> AND le_term .)
    FUNCTION_LIST_BLN reduce using rule 89 (le_tail -> AND le_term .)
    INPUT           reduce using rule 89 (le_tail -> AND le_term .)
    LPAREN          reduce using rule 89 (le_tail -> AND le_term .)
    STR_LIT         reduce using rule 89 (le_tail -> AND le_term .)
    INT             reduce using rule 89 (le_tail -> AND le_term .)
    FLT             reduce using rule 89 (le_tail -> AND le_term .)
    BLN             reduce using rule 89 (le_tail -> AND le_term .)
    CHR             reduce using rule 89 (le_tail -> AND le_term .)
    STR             reduce using rule 89 (le_tail -> AND le_term .)
    LIST_INT        reduce using rule 89 (le_tail -> AND le_term .)
    LIST_FLT        reduce using rule 89 (le_tail -> AND le_term .)
    LIST_BLN        reduce using rule 89 (le_tail -> AND le_term .)
    LIST_STR        reduce using rule 89 (le_tail -> AND le_term .)
    LIST_CHR        reduce using rule 89 (le_tail -> AND le_term .)
    INT_LIT         reduce using rule 89 (le_tail -> AND le_term .)
    FLT_LIT         reduce using rule 89 (le_tail -> AND le_term .)
    BLN_LIT         reduce using rule 89 (le_tail -> AND le_term .)
    GHOST           reduce using rule 89 (le_tail -> AND le_term .)
    RBRACE          reduce using rule 89 (le_tail -> AND le_term .)
    RPAREN          reduce using rule 89 (le_tail -> AND le_term .)
    REVIVE          reduce using rule 89 (le_tail -> AND le_term .)
    SHIFT           reduce using rule 89 (le_tail -> AND le_term .)
    OTHERWISE       reduce using rule 89 (le_tail -> AND le_term .)
    COMMA           reduce using rule 89 (le_tail -> AND le_term .)
    COLON           reduce using rule 89 (le_tail -> AND le_term .)
    PLUS_PLUS       reduce using rule 89 (le_tail -> AND le_term .)
    MINUS_MINUS     reduce using rule 89 (le_tail -> AND le_term .)
    RBRACKET        reduce using rule 89 (le_tail -> AND le_term .)


state 242

    (90) le_tail -> OR le_term .

    CHECK           reduce using rule 90 (le_tail -> OR le_term .)
    SWAP            reduce using rule 90 (le_tail -> OR le_term .)
    DISPLAY         reduce using rule 90 (le_tail -> OR le_term .)
    GLOBAL          reduce using rule 90 (le_tail -> OR le_term .)
    FOR             reduce using rule 90 (le_tail -> OR le_term .)
    UNTIL           reduce using rule 90 (le_tail -> OR le_term .)
    REPEAT          reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION        reduce using rule 90 (le_tail -> OR le_term .)
    IDENT           reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_INT    reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_FLT    reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_CHR    reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_STR    reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_BLN    reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_LIST_INT reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_LIST_FLT reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_LIST_CHR reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_LIST_STR reduce using rule 90 (le_tail -> OR le_term .)
    FUNCTION_LIST_BLN reduce using rule 90 (le_tail -> OR le_term .)
    INPUT           reduce using rule 90 (le_tail -> OR le_term .)
    LPAREN          reduce using rule 90 (le_tail -> OR le_term .)
    STR_LIT         reduce using rule 90 (le_tail -> OR le_term .)
    INT             reduce using rule 90 (le_tail -> OR le_term .)
    FLT             reduce using rule 90 (le_tail -> OR le_term .)
    BLN             reduce using rule 90 (le_tail -> OR le_term .)
    CHR             reduce using rule 90 (le_tail -> OR le_term .)
    STR             reduce using rule 90 (le_tail -> OR le_term .)
    LIST_INT        reduce using rule 90 (le_tail -> OR le_term .)
    LIST_FLT        reduce using rule 90 (le_tail -> OR le_term .)
    LIST_BLN        reduce using rule 90 (le_tail -> OR le_term .)
    LIST_STR        reduce using rule 90 (le_tail -> OR le_term .)
    LIST_CHR        reduce using rule 90 (le_tail -> OR le_term .)
    INT_LIT         reduce using rule 90 (le_tail -> OR le_term .)
    FLT_LIT         reduce using rule 90 (le_tail -> OR le_term .)
    BLN_LIT         reduce using rule 90 (le_tail -> OR le_term .)
    GHOST           reduce using rule 90 (le_tail -> OR le_term .)
    RBRACE          reduce using rule 90 (le_tail -> OR le_term .)
    RPAREN          reduce using rule 90 (le_tail -> OR le_term .)
    REVIVE          reduce using rule 90 (le_tail -> OR le_term .)
    SHIFT           reduce using rule 90 (le_tail -> OR le_term .)
    OTHERWISE       reduce using rule 90 (le_tail -> OR le_term .)
    COMMA           reduce using rule 90 (le_tail -> OR le_term .)
    COLON           reduce using rule 90 (le_tail -> OR le_term .)
    PLUS_PLUS       reduce using rule 90 (le_tail -> OR le_term .)
    MINUS_MINUS     reduce using rule 90 (le_tail -> OR le_term .)
    RBRACKET        reduce using rule 90 (le_tail -> OR le_term .)


state 243

    (91) le_tail -> NOT le_term .

    CHECK           reduce using rule 91 (le_tail -> NOT le_term .)
    SWAP            reduce using rule 91 (le_tail -> NOT le_term .)
    DISPLAY         reduce using rule 91 (le_tail -> NOT le_term .)
    GLOBAL          reduce using rule 91 (le_tail -> NOT le_term .)
    FOR             reduce using rule 91 (le_tail -> NOT le_term .)
    UNTIL           reduce using rule 91 (le_tail -> NOT le_term .)
    REPEAT          reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION        reduce using rule 91 (le_tail -> NOT le_term .)
    IDENT           reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_INT    reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_FLT    reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_CHR    reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_STR    reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_BLN    reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_LIST_INT reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_LIST_FLT reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_LIST_CHR reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_LIST_STR reduce using rule 91 (le_tail -> NOT le_term .)
    FUNCTION_LIST_BLN reduce using rule 91 (le_tail -> NOT le_term .)
    INPUT           reduce using rule 91 (le_tail -> NOT le_term .)
    LPAREN          reduce using rule 91 (le_tail -> NOT le_term .)
    STR_LIT         reduce using rule 91 (le_tail -> NOT le_term .)
    INT             reduce using rule 91 (le_tail -> NOT le_term .)
    FLT             reduce using rule 91 (le_tail -> NOT le_term .)
    BLN             reduce using rule 91 (le_tail -> NOT le_term .)
    CHR             reduce using rule 91 (le_tail -> NOT le_term .)
    STR             reduce using rule 91 (le_tail -> NOT le_term .)
    LIST_INT        reduce using rule 91 (le_tail -> NOT le_term .)
    LIST_FLT        reduce using rule 91 (le_tail -> NOT le_term .)
    LIST_BLN        reduce using rule 91 (le_tail -> NOT le_term .)
    LIST_STR        reduce using rule 91 (le_tail -> NOT le_term .)
    LIST_CHR        reduce using rule 91 (le_tail -> NOT le_term .)
    INT_LIT         reduce using rule 91 (le_tail -> NOT le_term .)
    FLT_LIT         reduce using rule 91 (le_tail -> NOT le_term .)
    BLN_LIT         reduce using rule 91 (le_tail -> NOT le_term .)
    GHOST           reduce using rule 91 (le_tail -> NOT le_term .)
    RBRACE          reduce using rule 91 (le_tail -> NOT le_term .)
    RPAREN          reduce using rule 91 (le_tail -> NOT le_term .)
    REVIVE          reduce using rule 91 (le_tail -> NOT le_term .)
    SHIFT           reduce using rule 91 (le_tail -> NOT le_term .)
    OTHERWISE       reduce using rule 91 (le_tail -> NOT le_term .)
    COMMA           reduce using rule 91 (le_tail -> NOT le_term .)
    COLON           reduce using rule 91 (le_tail -> NOT le_term .)
    PLUS_PLUS       reduce using rule 91 (le_tail -> NOT le_term .)
    MINUS_MINUS     reduce using rule 91 (le_tail -> NOT le_term .)
    RBRACKET        reduce using rule 91 (le_tail -> NOT le_term .)


state 244

    (24) var_initialization -> data_type IDENT EQ value . varinit_tail
    (25) varinit_tail -> . COMMA IDENT EQ value varinit_tail
    (26) varinit_tail -> . empty
    (183) empty -> .

    COMMA           shift and go to state 289
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    varinit_tail                   shift and go to state 288
    empty                          shift and go to state 290

state 245

    (22) vardec_tail -> COMMA IDENT . vardec_tail
    (22) vardec_tail -> . COMMA IDENT vardec_tail
    (23) vardec_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 178
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

  ! COMMA           [ reduce using rule 183 (empty -> .) ]

    vardec_tail                    shift and go to state 291
    empty                          shift and go to state 179

state 246

    (100) list_init -> list_dtype IDENT LBRACKET index . RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail

    RBRACKET        shift and go to state 292


state 247

    (98) listdec_tail -> COMMA IDENT . listdec_tail
    (98) listdec_tail -> . COMMA IDENT listdec_tail
    (99) listdec_tail -> . empty
    (183) empty -> .

    COMMA           shift and go to state 182
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    listdec_tail                   shift and go to state 293
    empty                          shift and go to state 183

state 248

    (112) conditional_statement -> CHECK LPAREN condition RPAREN . LBRACE statements RBRACE conditional_tail

    LBRACE          shift and go to state 294


state 249

    (68) re_term -> LPAREN re_factor re_tail2 . RPAREN re_tail2

    RPAREN          shift and go to state 251


state 250

    (52) ae_term -> LPAREN ae_factor ae_tail2 RPAREN . ae_tail2
    (63) ae_tail2 -> . ae_term
    (64) ae_tail2 -> . ae_tail
    (65) ae_tail2 -> . empty
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (56) ae_tail -> . PLUS ae_term ae_tail
    (57) ae_tail -> . MINUS ae_term ae_tail
    (58) ae_tail -> . DIVISION ae_term ae_tail
    (59) ae_tail -> . MULTIPLY ae_term ae_tail
    (60) ae_tail -> . MODULO ae_term ae_tail
    (61) ae_tail -> . EXPONENT ae_term ae_tail
    (62) ae_tail -> . empty
    (183) empty -> .
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    LPAREN          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    DIVISION        shift and go to state 144
    MULTIPLY        shift and go to state 145
    MODULO          shift and go to state 146
    EXPONENT        shift and go to state 147
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    GT              reduce using rule 183 (empty -> .)
    LT              reduce using rule 183 (empty -> .)
    EQ              reduce using rule 183 (empty -> .)
    NOT_EQ          reduce using rule 183 (empty -> .)
    GT_EQ           reduce using rule 183 (empty -> .)
    LT_EQ           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    INT_LIT         shift and go to state 148
    FLT_LIT         shift and go to state 149
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! PLUS            [ reduce using rule 183 (empty -> .) ]
  ! MINUS           [ reduce using rule 183 (empty -> .) ]
  ! DIVISION        [ reduce using rule 183 (empty -> .) ]
  ! MULTIPLY        [ reduce using rule 183 (empty -> .) ]
  ! MODULO          [ reduce using rule 183 (empty -> .) ]
  ! EXPONENT        [ reduce using rule 183 (empty -> .) ]

    ae_factor                      shift and go to state 69
    ae_tail2                       shift and go to state 295
    ae_term                        shift and go to state 138
    ae_tail                        shift and go to state 139
    empty                          shift and go to state 140
    var_call                       shift and go to state 150

state 251

    (68) re_term -> LPAREN re_factor re_tail2 RPAREN . re_tail2
    (80) re_tail2 -> . empty
    (81) re_tail2 -> . re_tail
    (82) re_tail2 -> . re_term
    (183) empty -> .
    (74) re_tail -> . GT re_term re_tail2
    (75) re_tail -> . LT re_term re_tail2
    (76) re_tail -> . EQ re_term re_tail2
    (77) re_tail -> . NOT_EQ re_term re_tail2
    (78) re_tail -> . GT_EQ re_term re_tail2
    (79) re_tail -> . LT_EQ re_term re_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GT_EQ resolved as shift
  ! shift/reduce conflict for LT_EQ resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    AND             reduce using rule 183 (empty -> .)
    OR              reduce using rule 183 (empty -> .)
    NOT             reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    SEMICOLON       reduce using rule 183 (empty -> .)
    GT              shift and go to state 155
    LT              shift and go to state 156
    EQ              shift and go to state 157
    NOT_EQ          shift and go to state 158
    GT_EQ           shift and go to state 159
    LT_EQ           shift and go to state 160
    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]
  ! GT              [ reduce using rule 183 (empty -> .) ]
  ! LT              [ reduce using rule 183 (empty -> .) ]
  ! EQ              [ reduce using rule 183 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 183 (empty -> .) ]
  ! GT_EQ           [ reduce using rule 183 (empty -> .) ]
  ! LT_EQ           [ reduce using rule 183 (empty -> .) ]

    re_factor                      shift and go to state 70
    re_tail2                       shift and go to state 296
    empty                          shift and go to state 152
    re_tail                        shift and go to state 153
    re_term                        shift and go to state 154
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 252

    (85) le_term -> LPAREN le_factor le_tail2 RPAREN . le_tail2
    (92) le_tail2 -> . empty
    (93) le_tail2 -> . le_tail
    (94) le_tail2 -> . le_term
    (183) empty -> .
    (89) le_tail -> . AND le_term
    (90) le_tail -> . OR le_term
    (91) le_tail -> . NOT le_term
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (66) relational_expression -> . re_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    COMMA           reduce using rule 183 (empty -> .)
    COLON           reduce using rule 183 (empty -> .)
    PLUS_PLUS       reduce using rule 183 (empty -> .)
    MINUS_MINUS     reduce using rule 183 (empty -> .)
    RBRACKET        reduce using rule 183 (empty -> .)
    AND             shift and go to state 170
    OR              shift and go to state 171
    NOT             shift and go to state 172
    LPAREN          shift and go to state 173
    BLN_LIT         shift and go to state 174
    IDENT           shift and go to state 77
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163

  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    le_factor                      shift and go to state 71
    le_tail2                       shift and go to state 297
    empty                          shift and go to state 167
    le_tail                        shift and go to state 168
    le_term                        shift and go to state 169
    relational_expression          shift and go to state 98
    var_call                       shift and go to state 175
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 253

    (141) function_statement -> ret_type IDENT LPAREN parameters . RPAREN LBRACE statements revive RBRACE

    RPAREN          shift and go to state 298


state 254

    (160) parameters -> var_dec . next_parameters
    (162) next_parameters -> . COMMA parameters

    COMMA           shift and go to state 300

    next_parameters                shift and go to state 299

state 255

    (161) parameters -> empty .

    RPAREN          reduce using rule 161 (parameters -> empty .)


state 256

    (21) var_dec -> data_type . IDENT vardec_tail

    IDENT           shift and go to state 301


state 257

    (143) function_call -> IDENT LPAREN arguments RPAREN .

    CHECK           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    SWAP            reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    DISPLAY         reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    GLOBAL          reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FOR             reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    UNTIL           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    REPEAT          reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    IDENT           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_INT    reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_FLT    reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_CHR    reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_STR    reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_BLN    reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_LIST_INT reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_LIST_STR reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    INPUT           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    LPAREN          reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    STR_LIT         reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    INT             reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FLT             reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    BLN             reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    CHR             reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    STR             reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    LIST_INT        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    LIST_FLT        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    LIST_BLN        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    LIST_STR        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    LIST_CHR        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    INT_LIT         reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    FLT_LIT         reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    BLN_LIT         reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    GHOST           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    REVIVE          reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    SHIFT           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    OTHERWISE       reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    COMMA           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    COLON           reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    PLUS_PLUS       reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    MINUS_MINUS     reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 143 (function_call -> IDENT LPAREN arguments RPAREN .)


state 258

    (96) var_call -> IDENT LBRACKET index RBRACKET .

    PLUS_EQ         reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LPAREN          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    PLUS            reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MINUS           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MODULO          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    INT_LIT         reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FLT_LIT         reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    IDENT           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    CHECK           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    SWAP            reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    DISPLAY         reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    GLOBAL          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FOR             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    UNTIL           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    REPEAT          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_INT    reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_FLT    reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_CHR    reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_STR    reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_BLN    reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_LIST_INT reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_LIST_FLT reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_LIST_CHR reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_LIST_STR reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FUNCTION_LIST_BLN reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    INPUT           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    STR_LIT         reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    INT             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    FLT             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    BLN             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    CHR             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    STR             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LIST_INT        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LIST_FLT        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LIST_BLN        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LIST_STR        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LIST_CHR        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    BLN_LIT         reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    GHOST           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    GT              reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LT              reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    EQ              reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    AND             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    OR              reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    NOT             reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    RBRACE          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    REVIVE          reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    SHIFT           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    OTHERWISE       reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    COMMA           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    COLON           reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    PLUS_PLUS       reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 96 (var_call -> IDENT LBRACKET index RBRACKET .)


state 259

    (116) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE switch_condition OTHERWISE statements RBRACE

    LBRACE          shift and go to state 302


state 260

    (166) output_statement -> DISPLAY LPAREN value RPAREN .

    CHECK           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    SWAP            reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    DISPLAY         reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    GLOBAL          reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FOR             reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    UNTIL           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    REPEAT          reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    IDENT           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_INT    reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_FLT    reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_CHR    reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_STR    reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_BLN    reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_LIST_INT reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_LIST_STR reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    INPUT           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    LPAREN          reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    STR_LIT         reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    INT             reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FLT             reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    BLN             reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    CHR             reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    STR             reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    LIST_INT        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    LIST_FLT        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    LIST_BLN        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    LIST_STR        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    LIST_CHR        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    INT_LIT         reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    FLT_LIT         reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    BLN_LIT         reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    GHOST           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    RBRACE          reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    RPAREN          reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    REVIVE          reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    SHIFT           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    OTHERWISE       reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    COMMA           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    COLON           reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    PLUS_PLUS       reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    MINUS_MINUS     reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)
    RBRACKET        reduce using rule 166 (output_statement -> DISPLAY LPAREN value RPAREN .)


state 261

    (85) le_term -> LPAREN le_factor le_tail2 . RPAREN le_tail2
    (84) le_term -> le_factor le_tail2 .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 252

  ! RPAREN          [ reduce using rule 84 (le_term -> le_factor le_tail2 .) ]


state 262

    (168) type_cast -> CONVERT_TO_INT LPAREN value . RPAREN

    RPAREN          shift and go to state 303


state 263

    (169) type_cast -> CONVERT_TO_FLT LPAREN value . RPAREN

    RPAREN          shift and go to state 304


state 264

    (170) type_cast -> CONVERT_TO_BLN LPAREN value . RPAREN

    RPAREN          shift and go to state 305


state 265

    (171) type_cast -> CONVERT_TO_STR LPAREN value . RPAREN

    RPAREN          shift and go to state 306


state 266

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON . relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (66) relational_expression -> . re_term
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    relational_expression          shift and go to state 307
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 267

    (128) control_variable -> IDENT EQ . INT_LIT

    INT_LIT         shift and go to state 308


state 268

    (126) until_loop -> UNTIL LPAREN relational_expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 309


state 269

    (127) repeat_until -> REPEAT LBRACE statements RBRACE . UNTIL LPAREN relational_expression RPAREN

    UNTIL           shift and go to state 310


state 270

    (173) stringcon_tail -> PLUS string_lit stringcon_tail2 .

    CHECK           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    SWAP            reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    DISPLAY         reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    GLOBAL          reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FOR             reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    UNTIL           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    REPEAT          reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    IDENT           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_INT    reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_FLT    reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_CHR    reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_STR    reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_BLN    reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_LIST_INT reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_LIST_STR reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    INPUT           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    LPAREN          reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    STR_LIT         reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    INT             reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FLT             reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    BLN             reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    CHR             reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    STR             reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    LIST_INT        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    LIST_FLT        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    LIST_BLN        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    LIST_STR        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    LIST_CHR        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    INT_LIT         reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    FLT_LIT         reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    BLN_LIT         reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    GHOST           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    RBRACE          reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    RPAREN          reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    REVIVE          reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    SHIFT           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    OTHERWISE       reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    COMMA           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    COLON           reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    PLUS_PLUS       reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    MINUS_MINUS     reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)
    RBRACKET        reduce using rule 173 (stringcon_tail -> PLUS string_lit stringcon_tail2 .)


state 271

    (174) stringcon_tail2 -> stringcon_tail .

    CHECK           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    SWAP            reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    DISPLAY         reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    GLOBAL          reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FOR             reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    UNTIL           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    REPEAT          reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    IDENT           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_INT    reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_FLT    reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_CHR    reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_STR    reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_BLN    reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_LIST_INT reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_LIST_FLT reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_LIST_CHR reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_LIST_STR reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FUNCTION_LIST_BLN reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    INPUT           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    LPAREN          reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    STR_LIT         reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    INT             reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FLT             reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    BLN             reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    CHR             reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    STR             reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    LIST_INT        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    LIST_FLT        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    LIST_BLN        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    LIST_STR        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    LIST_CHR        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    INT_LIT         reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    FLT_LIT         reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    BLN_LIT         reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    GHOST           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    RBRACE          reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    RPAREN          reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    REVIVE          reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    SHIFT           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    OTHERWISE       reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    COMMA           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    COLON           reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    PLUS_PLUS       reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    MINUS_MINUS     reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)
    RBRACKET        reduce using rule 174 (stringcon_tail2 -> stringcon_tail .)


state 272

    (175) stringcon_tail2 -> empty .

    CHECK           reduce using rule 175 (stringcon_tail2 -> empty .)
    SWAP            reduce using rule 175 (stringcon_tail2 -> empty .)
    DISPLAY         reduce using rule 175 (stringcon_tail2 -> empty .)
    GLOBAL          reduce using rule 175 (stringcon_tail2 -> empty .)
    FOR             reduce using rule 175 (stringcon_tail2 -> empty .)
    UNTIL           reduce using rule 175 (stringcon_tail2 -> empty .)
    REPEAT          reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION        reduce using rule 175 (stringcon_tail2 -> empty .)
    IDENT           reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_INT    reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_FLT    reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_CHR    reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_STR    reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_BLN    reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_LIST_INT reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_LIST_FLT reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_LIST_CHR reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_LIST_STR reduce using rule 175 (stringcon_tail2 -> empty .)
    FUNCTION_LIST_BLN reduce using rule 175 (stringcon_tail2 -> empty .)
    INPUT           reduce using rule 175 (stringcon_tail2 -> empty .)
    LPAREN          reduce using rule 175 (stringcon_tail2 -> empty .)
    STR_LIT         reduce using rule 175 (stringcon_tail2 -> empty .)
    INT             reduce using rule 175 (stringcon_tail2 -> empty .)
    FLT             reduce using rule 175 (stringcon_tail2 -> empty .)
    BLN             reduce using rule 175 (stringcon_tail2 -> empty .)
    CHR             reduce using rule 175 (stringcon_tail2 -> empty .)
    STR             reduce using rule 175 (stringcon_tail2 -> empty .)
    LIST_INT        reduce using rule 175 (stringcon_tail2 -> empty .)
    LIST_FLT        reduce using rule 175 (stringcon_tail2 -> empty .)
    LIST_BLN        reduce using rule 175 (stringcon_tail2 -> empty .)
    LIST_STR        reduce using rule 175 (stringcon_tail2 -> empty .)
    LIST_CHR        reduce using rule 175 (stringcon_tail2 -> empty .)
    INT_LIT         reduce using rule 175 (stringcon_tail2 -> empty .)
    FLT_LIT         reduce using rule 175 (stringcon_tail2 -> empty .)
    BLN_LIT         reduce using rule 175 (stringcon_tail2 -> empty .)
    GHOST           reduce using rule 175 (stringcon_tail2 -> empty .)
    RBRACE          reduce using rule 175 (stringcon_tail2 -> empty .)
    RPAREN          reduce using rule 175 (stringcon_tail2 -> empty .)
    REVIVE          reduce using rule 175 (stringcon_tail2 -> empty .)
    SHIFT           reduce using rule 175 (stringcon_tail2 -> empty .)
    OTHERWISE       reduce using rule 175 (stringcon_tail2 -> empty .)
    COMMA           reduce using rule 175 (stringcon_tail2 -> empty .)
    COLON           reduce using rule 175 (stringcon_tail2 -> empty .)
    PLUS_PLUS       reduce using rule 175 (stringcon_tail2 -> empty .)
    MINUS_MINUS     reduce using rule 175 (stringcon_tail2 -> empty .)
    RBRACKET        reduce using rule 175 (stringcon_tail2 -> empty .)


state 273

    (167) input_statement -> INPUT LPAREN statements RPAREN .

    CHECK           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    SWAP            reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    DISPLAY         reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    GLOBAL          reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FOR             reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    UNTIL           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    REPEAT          reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    IDENT           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_INT    reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_FLT    reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_CHR    reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_STR    reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_BLN    reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_LIST_INT reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_LIST_STR reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    INPUT           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    LPAREN          reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    STR_LIT         reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    INT             reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FLT             reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    BLN             reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    CHR             reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    STR             reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    LIST_INT        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    LIST_FLT        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    LIST_BLN        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    LIST_STR        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    LIST_CHR        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    INT_LIT         reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    FLT_LIT         reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    BLN_LIT         reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    GHOST           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    RBRACE          reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    RPAREN          reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    REVIVE          reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    SHIFT           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    OTHERWISE       reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    COMMA           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    COLON           reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    PLUS_PLUS       reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    MINUS_MINUS     reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)
    RBRACKET        reduce using rule 167 (input_statement -> INPUT LPAREN statements RPAREN .)


state 274

    (52) ae_term -> LPAREN ae_factor ae_tail2 . RPAREN ae_tail2

    RPAREN          shift and go to state 250


state 275

    (56) ae_tail -> PLUS ae_term ae_tail .

    CHECK           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    SWAP            reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    DISPLAY         reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    GLOBAL          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FOR             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    UNTIL           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    REPEAT          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    IDENT           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_INT    reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_FLT    reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_CHR    reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_STR    reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_BLN    reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_LIST_INT reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_LIST_STR reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    INPUT           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LPAREN          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    STR_LIT         reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    INT             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FLT             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    BLN             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    CHR             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    STR             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LIST_INT        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LIST_FLT        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LIST_BLN        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LIST_STR        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LIST_CHR        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    INT_LIT         reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    FLT_LIT         reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    BLN_LIT         reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    GHOST           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    GT              reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LT              reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    EQ              reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    NOT_EQ          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    GT_EQ           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    LT_EQ           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    AND             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    OR              reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    NOT             reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    RBRACE          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    RPAREN          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    REVIVE          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    SHIFT           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    OTHERWISE       reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    COMMA           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    COLON           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    PLUS_PLUS       reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    MINUS_MINUS     reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    RBRACKET        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    SEMICOLON       reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    PLUS            reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    MINUS           reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    DIVISION        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    MULTIPLY        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    MODULO          reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)
    EXPONENT        reduce using rule 56 (ae_tail -> PLUS ae_term ae_tail .)


state 276

    (62) ae_tail -> empty .

    CHECK           reduce using rule 62 (ae_tail -> empty .)
    SWAP            reduce using rule 62 (ae_tail -> empty .)
    DISPLAY         reduce using rule 62 (ae_tail -> empty .)
    GLOBAL          reduce using rule 62 (ae_tail -> empty .)
    FOR             reduce using rule 62 (ae_tail -> empty .)
    UNTIL           reduce using rule 62 (ae_tail -> empty .)
    REPEAT          reduce using rule 62 (ae_tail -> empty .)
    FUNCTION        reduce using rule 62 (ae_tail -> empty .)
    IDENT           reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_INT    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_FLT    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_CHR    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_STR    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_BLN    reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 62 (ae_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 62 (ae_tail -> empty .)
    INPUT           reduce using rule 62 (ae_tail -> empty .)
    LPAREN          reduce using rule 62 (ae_tail -> empty .)
    STR_LIT         reduce using rule 62 (ae_tail -> empty .)
    INT             reduce using rule 62 (ae_tail -> empty .)
    FLT             reduce using rule 62 (ae_tail -> empty .)
    BLN             reduce using rule 62 (ae_tail -> empty .)
    CHR             reduce using rule 62 (ae_tail -> empty .)
    STR             reduce using rule 62 (ae_tail -> empty .)
    LIST_INT        reduce using rule 62 (ae_tail -> empty .)
    LIST_FLT        reduce using rule 62 (ae_tail -> empty .)
    LIST_BLN        reduce using rule 62 (ae_tail -> empty .)
    LIST_STR        reduce using rule 62 (ae_tail -> empty .)
    LIST_CHR        reduce using rule 62 (ae_tail -> empty .)
    INT_LIT         reduce using rule 62 (ae_tail -> empty .)
    FLT_LIT         reduce using rule 62 (ae_tail -> empty .)
    BLN_LIT         reduce using rule 62 (ae_tail -> empty .)
    GHOST           reduce using rule 62 (ae_tail -> empty .)
    GT              reduce using rule 62 (ae_tail -> empty .)
    LT              reduce using rule 62 (ae_tail -> empty .)
    EQ              reduce using rule 62 (ae_tail -> empty .)
    NOT_EQ          reduce using rule 62 (ae_tail -> empty .)
    GT_EQ           reduce using rule 62 (ae_tail -> empty .)
    LT_EQ           reduce using rule 62 (ae_tail -> empty .)
    AND             reduce using rule 62 (ae_tail -> empty .)
    OR              reduce using rule 62 (ae_tail -> empty .)
    NOT             reduce using rule 62 (ae_tail -> empty .)
    RBRACE          reduce using rule 62 (ae_tail -> empty .)
    RPAREN          reduce using rule 62 (ae_tail -> empty .)
    REVIVE          reduce using rule 62 (ae_tail -> empty .)
    SHIFT           reduce using rule 62 (ae_tail -> empty .)
    OTHERWISE       reduce using rule 62 (ae_tail -> empty .)
    COMMA           reduce using rule 62 (ae_tail -> empty .)
    COLON           reduce using rule 62 (ae_tail -> empty .)
    PLUS_PLUS       reduce using rule 62 (ae_tail -> empty .)
    MINUS_MINUS     reduce using rule 62 (ae_tail -> empty .)
    RBRACKET        reduce using rule 62 (ae_tail -> empty .)
    SEMICOLON       reduce using rule 62 (ae_tail -> empty .)
    PLUS            reduce using rule 62 (ae_tail -> empty .)
    MINUS           reduce using rule 62 (ae_tail -> empty .)
    DIVISION        reduce using rule 62 (ae_tail -> empty .)
    MULTIPLY        reduce using rule 62 (ae_tail -> empty .)
    MODULO          reduce using rule 62 (ae_tail -> empty .)
    EXPONENT        reduce using rule 62 (ae_tail -> empty .)


state 277

    (57) ae_tail -> MINUS ae_term ae_tail .

    CHECK           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    SWAP            reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    DISPLAY         reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    GLOBAL          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FOR             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    UNTIL           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    REPEAT          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    IDENT           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_INT    reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_FLT    reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_CHR    reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_STR    reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_BLN    reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_LIST_INT reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_LIST_STR reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    INPUT           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LPAREN          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    STR_LIT         reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    INT             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FLT             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    BLN             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    CHR             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    STR             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LIST_INT        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LIST_FLT        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LIST_BLN        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LIST_STR        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LIST_CHR        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    INT_LIT         reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    FLT_LIT         reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    BLN_LIT         reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    GHOST           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    GT              reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LT              reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    EQ              reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    NOT_EQ          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    GT_EQ           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    LT_EQ           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    AND             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    OR              reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    NOT             reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    RBRACE          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    RPAREN          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    REVIVE          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    SHIFT           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    OTHERWISE       reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    COMMA           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    COLON           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    PLUS_PLUS       reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    MINUS_MINUS     reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    RBRACKET        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    SEMICOLON       reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    PLUS            reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    MINUS           reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    DIVISION        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    MULTIPLY        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    MODULO          reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)
    EXPONENT        reduce using rule 57 (ae_tail -> MINUS ae_term ae_tail .)


state 278

    (58) ae_tail -> DIVISION ae_term ae_tail .

    CHECK           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    SWAP            reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    DISPLAY         reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    GLOBAL          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FOR             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    UNTIL           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    REPEAT          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    IDENT           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_INT    reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_FLT    reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_CHR    reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_STR    reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_BLN    reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_LIST_INT reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_LIST_STR reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    INPUT           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LPAREN          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    STR_LIT         reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    INT             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FLT             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    BLN             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    CHR             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    STR             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LIST_INT        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LIST_FLT        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LIST_BLN        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LIST_STR        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LIST_CHR        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    INT_LIT         reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    FLT_LIT         reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    BLN_LIT         reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    GHOST           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    GT              reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LT              reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    EQ              reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    NOT_EQ          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    GT_EQ           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    LT_EQ           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    AND             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    OR              reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    NOT             reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    RBRACE          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    RPAREN          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    REVIVE          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    SHIFT           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    OTHERWISE       reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    COMMA           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    COLON           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    PLUS_PLUS       reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    MINUS_MINUS     reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    RBRACKET        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    SEMICOLON       reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    PLUS            reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    MINUS           reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    DIVISION        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    MULTIPLY        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    MODULO          reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)
    EXPONENT        reduce using rule 58 (ae_tail -> DIVISION ae_term ae_tail .)


state 279

    (59) ae_tail -> MULTIPLY ae_term ae_tail .

    CHECK           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    SWAP            reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    DISPLAY         reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    GLOBAL          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FOR             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    UNTIL           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    REPEAT          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    IDENT           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_INT    reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_FLT    reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_CHR    reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_STR    reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_BLN    reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_LIST_INT reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_LIST_STR reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    INPUT           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LPAREN          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    STR_LIT         reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    INT             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FLT             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    BLN             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    CHR             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    STR             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LIST_INT        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LIST_FLT        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LIST_BLN        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LIST_STR        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LIST_CHR        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    INT_LIT         reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    FLT_LIT         reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    BLN_LIT         reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    GHOST           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    GT              reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LT              reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    EQ              reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    NOT_EQ          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    GT_EQ           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    LT_EQ           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    AND             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    OR              reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    NOT             reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    RBRACE          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    RPAREN          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    REVIVE          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    SHIFT           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    OTHERWISE       reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    COMMA           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    COLON           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    PLUS_PLUS       reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    MINUS_MINUS     reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    RBRACKET        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    SEMICOLON       reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    PLUS            reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    MINUS           reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    DIVISION        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    MULTIPLY        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    MODULO          reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)
    EXPONENT        reduce using rule 59 (ae_tail -> MULTIPLY ae_term ae_tail .)


state 280

    (60) ae_tail -> MODULO ae_term ae_tail .

    CHECK           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    SWAP            reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    DISPLAY         reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    GLOBAL          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FOR             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    UNTIL           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    REPEAT          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    IDENT           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_INT    reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_FLT    reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_CHR    reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_STR    reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_BLN    reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_LIST_INT reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_LIST_STR reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    INPUT           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LPAREN          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    STR_LIT         reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    INT             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FLT             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    BLN             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    CHR             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    STR             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LIST_INT        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LIST_FLT        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LIST_BLN        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LIST_STR        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LIST_CHR        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    INT_LIT         reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    FLT_LIT         reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    BLN_LIT         reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    GHOST           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    GT              reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LT              reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    EQ              reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    NOT_EQ          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    GT_EQ           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    LT_EQ           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    AND             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    OR              reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    NOT             reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    RBRACE          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    RPAREN          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    REVIVE          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    SHIFT           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    OTHERWISE       reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    COMMA           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    COLON           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    PLUS_PLUS       reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    MINUS_MINUS     reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    RBRACKET        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    SEMICOLON       reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    PLUS            reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    MINUS           reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    DIVISION        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    MULTIPLY        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    MODULO          reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)
    EXPONENT        reduce using rule 60 (ae_tail -> MODULO ae_term ae_tail .)


state 281

    (61) ae_tail -> EXPONENT ae_term ae_tail .

    CHECK           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    SWAP            reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    DISPLAY         reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    GLOBAL          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FOR             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    UNTIL           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    REPEAT          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    IDENT           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_INT    reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_FLT    reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_CHR    reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_STR    reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_BLN    reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_LIST_INT reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_LIST_FLT reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_LIST_CHR reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_LIST_STR reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FUNCTION_LIST_BLN reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    INPUT           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LPAREN          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    STR_LIT         reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    INT             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FLT             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    BLN             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    CHR             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    STR             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LIST_INT        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LIST_FLT        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LIST_BLN        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LIST_STR        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LIST_CHR        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    INT_LIT         reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    FLT_LIT         reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    BLN_LIT         reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    GHOST           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    GT              reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LT              reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    EQ              reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    NOT_EQ          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    GT_EQ           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    LT_EQ           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    AND             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    OR              reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    NOT             reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    RBRACE          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    RPAREN          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    REVIVE          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    SHIFT           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    OTHERWISE       reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    COMMA           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    COLON           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    PLUS_PLUS       reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    MINUS_MINUS     reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    RBRACKET        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    SEMICOLON       reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    PLUS            reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    MINUS           reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    DIVISION        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    MULTIPLY        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    MODULO          reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)
    EXPONENT        reduce using rule 61 (ae_tail -> EXPONENT ae_term ae_tail .)


state 282

    (74) re_tail -> GT re_term re_tail2 .

    CHECK           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    SWAP            reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    DISPLAY         reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    GLOBAL          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FOR             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    UNTIL           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    REPEAT          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    IDENT           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_INT    reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_FLT    reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_CHR    reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_STR    reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_BLN    reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    INPUT           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LPAREN          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    STR_LIT         reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    INT             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FLT             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    BLN             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    CHR             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    STR             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LIST_INT        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LIST_FLT        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LIST_BLN        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LIST_STR        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LIST_CHR        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    INT_LIT         reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    FLT_LIT         reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    BLN_LIT         reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    GHOST           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    AND             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    OR              reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    NOT             reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    RBRACE          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    RPAREN          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    REVIVE          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    SHIFT           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    OTHERWISE       reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    COMMA           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    COLON           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    PLUS_PLUS       reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    MINUS_MINUS     reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    RBRACKET        reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    GT              reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LT              reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    EQ              reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    NOT_EQ          reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    GT_EQ           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    LT_EQ           reduce using rule 74 (re_tail -> GT re_term re_tail2 .)
    SEMICOLON       reduce using rule 74 (re_tail -> GT re_term re_tail2 .)


state 283

    (75) re_tail -> LT re_term re_tail2 .

    CHECK           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    SWAP            reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    DISPLAY         reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    GLOBAL          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FOR             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    UNTIL           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    REPEAT          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    IDENT           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_INT    reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_FLT    reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_CHR    reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_STR    reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_BLN    reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    INPUT           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LPAREN          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    STR_LIT         reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    INT             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FLT             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    BLN             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    CHR             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    STR             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LIST_INT        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LIST_FLT        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LIST_BLN        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LIST_STR        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LIST_CHR        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    INT_LIT         reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    FLT_LIT         reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    BLN_LIT         reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    GHOST           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    AND             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    OR              reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    NOT             reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    RBRACE          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    RPAREN          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    REVIVE          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    SHIFT           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    OTHERWISE       reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    COMMA           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    COLON           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    PLUS_PLUS       reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    MINUS_MINUS     reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    RBRACKET        reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    GT              reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LT              reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    EQ              reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    NOT_EQ          reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    GT_EQ           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    LT_EQ           reduce using rule 75 (re_tail -> LT re_term re_tail2 .)
    SEMICOLON       reduce using rule 75 (re_tail -> LT re_term re_tail2 .)


state 284

    (76) re_tail -> EQ re_term re_tail2 .

    CHECK           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    SWAP            reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    DISPLAY         reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    GLOBAL          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FOR             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    UNTIL           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    REPEAT          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    IDENT           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_INT    reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_FLT    reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_CHR    reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_STR    reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_BLN    reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    INPUT           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LPAREN          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    STR_LIT         reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    INT             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FLT             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    BLN             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    CHR             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    STR             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LIST_INT        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LIST_FLT        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LIST_BLN        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LIST_STR        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LIST_CHR        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    INT_LIT         reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    FLT_LIT         reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    BLN_LIT         reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    GHOST           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    AND             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    OR              reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    NOT             reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    RBRACE          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    RPAREN          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    REVIVE          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    SHIFT           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    OTHERWISE       reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    COMMA           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    COLON           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    PLUS_PLUS       reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    MINUS_MINUS     reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    RBRACKET        reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    GT              reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LT              reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    EQ              reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    NOT_EQ          reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    GT_EQ           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    LT_EQ           reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)
    SEMICOLON       reduce using rule 76 (re_tail -> EQ re_term re_tail2 .)


state 285

    (77) re_tail -> NOT_EQ re_term re_tail2 .

    CHECK           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    SWAP            reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    DISPLAY         reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    GLOBAL          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FOR             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    UNTIL           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    REPEAT          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    IDENT           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_INT    reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_FLT    reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_CHR    reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_STR    reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_BLN    reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    INPUT           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LPAREN          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    STR_LIT         reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    INT             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FLT             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    BLN             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    CHR             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    STR             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LIST_INT        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LIST_FLT        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LIST_BLN        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LIST_STR        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LIST_CHR        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    INT_LIT         reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    FLT_LIT         reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    BLN_LIT         reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    GHOST           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    AND             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    OR              reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    NOT             reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    RBRACE          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    RPAREN          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    REVIVE          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    SHIFT           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    OTHERWISE       reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    COMMA           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    COLON           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    PLUS_PLUS       reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    MINUS_MINUS     reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    RBRACKET        reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    GT              reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LT              reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    EQ              reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    NOT_EQ          reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    GT_EQ           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    LT_EQ           reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)
    SEMICOLON       reduce using rule 77 (re_tail -> NOT_EQ re_term re_tail2 .)


state 286

    (78) re_tail -> GT_EQ re_term re_tail2 .

    CHECK           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    SWAP            reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    DISPLAY         reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    GLOBAL          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FOR             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    UNTIL           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    REPEAT          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    IDENT           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_INT    reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_FLT    reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_CHR    reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_STR    reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_BLN    reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    INPUT           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LPAREN          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    STR_LIT         reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    INT             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FLT             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    BLN             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    CHR             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    STR             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LIST_INT        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LIST_FLT        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LIST_BLN        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LIST_STR        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LIST_CHR        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    INT_LIT         reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    FLT_LIT         reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    BLN_LIT         reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    GHOST           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    AND             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    OR              reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    NOT             reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    RBRACE          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    RPAREN          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    REVIVE          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    SHIFT           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    OTHERWISE       reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    COMMA           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    COLON           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    PLUS_PLUS       reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    MINUS_MINUS     reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    RBRACKET        reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    GT              reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LT              reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    EQ              reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    NOT_EQ          reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    GT_EQ           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    LT_EQ           reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)
    SEMICOLON       reduce using rule 78 (re_tail -> GT_EQ re_term re_tail2 .)


state 287

    (79) re_tail -> LT_EQ re_term re_tail2 .

    CHECK           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    SWAP            reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    DISPLAY         reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    GLOBAL          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FOR             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    UNTIL           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    REPEAT          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    IDENT           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_INT    reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_FLT    reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_CHR    reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_STR    reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_BLN    reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    INPUT           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LPAREN          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    STR_LIT         reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    INT             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FLT             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    BLN             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    CHR             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    STR             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LIST_INT        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LIST_FLT        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LIST_BLN        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LIST_STR        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LIST_CHR        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    INT_LIT         reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    FLT_LIT         reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    BLN_LIT         reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    GHOST           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    AND             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    OR              reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    NOT             reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    RBRACE          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    RPAREN          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    REVIVE          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    SHIFT           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    OTHERWISE       reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    COMMA           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    COLON           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    PLUS_PLUS       reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    MINUS_MINUS     reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    RBRACKET        reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    GT              reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LT              reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    EQ              reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    NOT_EQ          reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    GT_EQ           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    LT_EQ           reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)
    SEMICOLON       reduce using rule 79 (re_tail -> LT_EQ re_term re_tail2 .)


state 288

    (24) var_initialization -> data_type IDENT EQ value varinit_tail .

    CHECK           reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    SWAP            reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    DISPLAY         reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    GLOBAL          reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FOR             reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    UNTIL           reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    REPEAT          reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION        reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    IDENT           reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_INT    reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_FLT    reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_CHR    reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_STR    reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_BLN    reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_LIST_INT reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_LIST_FLT reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_LIST_CHR reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_LIST_STR reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FUNCTION_LIST_BLN reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    INPUT           reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    LPAREN          reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    STR_LIT         reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    INT             reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FLT             reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    BLN             reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    CHR             reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    STR             reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    LIST_INT        reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    LIST_FLT        reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    LIST_BLN        reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    LIST_STR        reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    LIST_CHR        reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    INT_LIT         reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    FLT_LIT         reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    BLN_LIT         reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    GHOST           reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    RBRACE          reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    RPAREN          reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    REVIVE          reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    SHIFT           reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)
    OTHERWISE       reduce using rule 24 (var_initialization -> data_type IDENT EQ value varinit_tail .)


state 289

    (25) varinit_tail -> COMMA . IDENT EQ value varinit_tail

    IDENT           shift and go to state 311


state 290

    (26) varinit_tail -> empty .

    CHECK           reduce using rule 26 (varinit_tail -> empty .)
    SWAP            reduce using rule 26 (varinit_tail -> empty .)
    DISPLAY         reduce using rule 26 (varinit_tail -> empty .)
    GLOBAL          reduce using rule 26 (varinit_tail -> empty .)
    FOR             reduce using rule 26 (varinit_tail -> empty .)
    UNTIL           reduce using rule 26 (varinit_tail -> empty .)
    REPEAT          reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION        reduce using rule 26 (varinit_tail -> empty .)
    IDENT           reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_INT    reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_FLT    reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_CHR    reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_STR    reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_BLN    reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 26 (varinit_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 26 (varinit_tail -> empty .)
    INPUT           reduce using rule 26 (varinit_tail -> empty .)
    LPAREN          reduce using rule 26 (varinit_tail -> empty .)
    STR_LIT         reduce using rule 26 (varinit_tail -> empty .)
    INT             reduce using rule 26 (varinit_tail -> empty .)
    FLT             reduce using rule 26 (varinit_tail -> empty .)
    BLN             reduce using rule 26 (varinit_tail -> empty .)
    CHR             reduce using rule 26 (varinit_tail -> empty .)
    STR             reduce using rule 26 (varinit_tail -> empty .)
    LIST_INT        reduce using rule 26 (varinit_tail -> empty .)
    LIST_FLT        reduce using rule 26 (varinit_tail -> empty .)
    LIST_BLN        reduce using rule 26 (varinit_tail -> empty .)
    LIST_STR        reduce using rule 26 (varinit_tail -> empty .)
    LIST_CHR        reduce using rule 26 (varinit_tail -> empty .)
    INT_LIT         reduce using rule 26 (varinit_tail -> empty .)
    FLT_LIT         reduce using rule 26 (varinit_tail -> empty .)
    BLN_LIT         reduce using rule 26 (varinit_tail -> empty .)
    GHOST           reduce using rule 26 (varinit_tail -> empty .)
    RBRACE          reduce using rule 26 (varinit_tail -> empty .)
    RPAREN          reduce using rule 26 (varinit_tail -> empty .)
    REVIVE          reduce using rule 26 (varinit_tail -> empty .)
    SHIFT           reduce using rule 26 (varinit_tail -> empty .)
    OTHERWISE       reduce using rule 26 (varinit_tail -> empty .)


state 291

    (22) vardec_tail -> COMMA IDENT vardec_tail .

    CHECK           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    SWAP            reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    DISPLAY         reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    GLOBAL          reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FOR             reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    UNTIL           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    REPEAT          reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION        reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    IDENT           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_INT    reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_FLT    reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_CHR    reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_STR    reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_BLN    reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_LIST_INT reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_LIST_FLT reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_LIST_CHR reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_LIST_STR reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FUNCTION_LIST_BLN reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    INPUT           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    LPAREN          reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    STR_LIT         reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    INT             reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FLT             reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    BLN             reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    CHR             reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    STR             reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    LIST_INT        reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    LIST_FLT        reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    LIST_BLN        reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    LIST_STR        reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    LIST_CHR        reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    INT_LIT         reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    FLT_LIT         reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    BLN_LIT         reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    GHOST           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    RBRACE          reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    RPAREN          reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    REVIVE          reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    SHIFT           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    OTHERWISE       reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)
    COMMA           reduce using rule 22 (vardec_tail -> COMMA IDENT vardec_tail .)


state 292

    (100) list_init -> list_dtype IDENT LBRACKET index RBRACKET . EQ LBRACKET list_element RBRACKET listinit_tail

    EQ              shift and go to state 312


state 293

    (98) listdec_tail -> COMMA IDENT listdec_tail .

    CHECK           reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    SWAP            reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    DISPLAY         reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    GLOBAL          reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FOR             reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    UNTIL           reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    REPEAT          reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION        reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    IDENT           reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_INT    reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_FLT    reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_CHR    reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_STR    reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_BLN    reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_LIST_INT reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_LIST_FLT reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_LIST_CHR reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_LIST_STR reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FUNCTION_LIST_BLN reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    INPUT           reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    LPAREN          reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    STR_LIT         reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    INT             reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FLT             reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    BLN             reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    CHR             reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    STR             reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    LIST_INT        reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    LIST_FLT        reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    LIST_BLN        reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    LIST_STR        reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    LIST_CHR        reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    INT_LIT         reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    FLT_LIT         reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    BLN_LIT         reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    GHOST           reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    RBRACE          reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    RPAREN          reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    REVIVE          reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    SHIFT           reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)
    OTHERWISE       reduce using rule 98 (listdec_tail -> COMMA IDENT listdec_tail .)


state 294

    (112) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE . statements RBRACE conditional_tail
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 313
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 295

    (52) ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .

    CHECK           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    SWAP            reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    DISPLAY         reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    GLOBAL          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FOR             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    UNTIL           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    REPEAT          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    IDENT           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_INT    reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_FLT    reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_CHR    reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_STR    reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_BLN    reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_LIST_INT reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_LIST_STR reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    INPUT           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LPAREN          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    STR_LIT         reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    INT             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FLT             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    BLN             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    CHR             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    STR             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LIST_INT        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LIST_FLT        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LIST_BLN        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LIST_STR        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LIST_CHR        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    INT_LIT         reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    FLT_LIT         reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    BLN_LIT         reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    GHOST           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    GT              reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LT              reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    EQ              reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    NOT_EQ          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    GT_EQ           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    LT_EQ           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    AND             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    OR              reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    NOT             reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    RBRACE          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    RPAREN          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    REVIVE          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    SHIFT           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    OTHERWISE       reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    COMMA           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    COLON           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    PLUS_PLUS       reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    MINUS_MINUS     reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    RBRACKET        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    SEMICOLON       reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    PLUS            reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    MINUS           reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    DIVISION        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    MULTIPLY        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    MODULO          reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)
    EXPONENT        reduce using rule 52 (ae_term -> LPAREN ae_factor ae_tail2 RPAREN ae_tail2 .)


state 296

    (68) re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .

    CHECK           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    SWAP            reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    DISPLAY         reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    GLOBAL          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FOR             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    UNTIL           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    REPEAT          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    IDENT           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_INT    reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_FLT    reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_CHR    reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_STR    reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_BLN    reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_LIST_INT reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_LIST_STR reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    INPUT           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LPAREN          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    STR_LIT         reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    INT             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FLT             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    BLN             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    CHR             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    STR             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LIST_INT        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LIST_FLT        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LIST_BLN        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LIST_STR        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LIST_CHR        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    INT_LIT         reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    FLT_LIT         reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    BLN_LIT         reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    GHOST           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    AND             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    OR              reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    NOT             reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    RBRACE          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    RPAREN          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    REVIVE          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    SHIFT           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    OTHERWISE       reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    COMMA           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    COLON           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    PLUS_PLUS       reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    MINUS_MINUS     reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    RBRACKET        reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    GT              reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LT              reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    EQ              reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    NOT_EQ          reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    GT_EQ           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    LT_EQ           reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)
    SEMICOLON       reduce using rule 68 (re_term -> LPAREN re_factor re_tail2 RPAREN re_tail2 .)


state 297

    (85) le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .

    CHECK           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    SWAP            reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    DISPLAY         reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    GLOBAL          reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FOR             reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    UNTIL           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    REPEAT          reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    IDENT           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_INT    reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_FLT    reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_CHR    reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_STR    reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_BLN    reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_LIST_INT reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_LIST_FLT reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_LIST_CHR reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_LIST_STR reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FUNCTION_LIST_BLN reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    INPUT           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    LPAREN          reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    STR_LIT         reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    INT             reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FLT             reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    BLN             reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    CHR             reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    STR             reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    LIST_INT        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    LIST_FLT        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    LIST_BLN        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    LIST_STR        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    LIST_CHR        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    INT_LIT         reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    FLT_LIT         reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    BLN_LIT         reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    GHOST           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    RBRACE          reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    RPAREN          reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    REVIVE          reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    SHIFT           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    OTHERWISE       reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    COMMA           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    COLON           reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    PLUS_PLUS       reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    MINUS_MINUS     reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)
    RBRACKET        reduce using rule 85 (le_term -> LPAREN le_factor le_tail2 RPAREN le_tail2 .)


state 298

    (141) function_statement -> ret_type IDENT LPAREN parameters RPAREN . LBRACE statements revive RBRACE

    LBRACE          shift and go to state 314


state 299

    (160) parameters -> var_dec next_parameters .

    RPAREN          reduce using rule 160 (parameters -> var_dec next_parameters .)


state 300

    (162) next_parameters -> COMMA . parameters
    (160) parameters -> . var_dec next_parameters
    (161) parameters -> . empty
    (21) var_dec -> . data_type IDENT vardec_tail
    (183) empty -> .
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    RPAREN          reduce using rule 183 (empty -> .)
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17

    parameters                     shift and go to state 315
    var_dec                        shift and go to state 254
    empty                          shift and go to state 255
    data_type                      shift and go to state 256

state 301

    (21) var_dec -> data_type IDENT . vardec_tail
    (22) vardec_tail -> . COMMA IDENT vardec_tail
    (23) vardec_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 178

  ! COMMA           [ reduce using rule 183 (empty -> .) ]

    vardec_tail                    shift and go to state 176
    empty                          shift and go to state 179

state 302

    (116) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . switch_condition OTHERWISE statements RBRACE
    (117) switch_condition -> . SHIFT value COLON statements switch_cond_tail

    SHIFT           shift and go to state 317

    switch_condition               shift and go to state 316

state 303

    (168) type_cast -> CONVERT_TO_INT LPAREN value RPAREN .

    CHECK           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    SWAP            reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    DISPLAY         reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    GLOBAL          reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FOR             reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    UNTIL           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    REPEAT          reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    IDENT           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_INT    reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_FLT    reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_CHR    reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_STR    reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_BLN    reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_LIST_INT reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_LIST_STR reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    INPUT           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    LPAREN          reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    STR_LIT         reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    INT             reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FLT             reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    BLN             reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    CHR             reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    STR             reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    LIST_INT        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    LIST_FLT        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    LIST_BLN        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    LIST_STR        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    LIST_CHR        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    INT_LIT         reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    FLT_LIT         reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    BLN_LIT         reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    GHOST           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    RBRACE          reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    RPAREN          reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    REVIVE          reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    SHIFT           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    OTHERWISE       reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    COMMA           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    COLON           reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    PLUS_PLUS       reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    MINUS_MINUS     reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)
    RBRACKET        reduce using rule 168 (type_cast -> CONVERT_TO_INT LPAREN value RPAREN .)


state 304

    (169) type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .

    CHECK           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    SWAP            reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    DISPLAY         reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    GLOBAL          reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FOR             reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    UNTIL           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    REPEAT          reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    IDENT           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_INT    reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_FLT    reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_CHR    reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_STR    reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_BLN    reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_LIST_INT reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_LIST_STR reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    INPUT           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    LPAREN          reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    STR_LIT         reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    INT             reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FLT             reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    BLN             reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    CHR             reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    STR             reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    LIST_INT        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    LIST_FLT        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    LIST_BLN        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    LIST_STR        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    LIST_CHR        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    INT_LIT         reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    FLT_LIT         reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    BLN_LIT         reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    GHOST           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    RBRACE          reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    RPAREN          reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    REVIVE          reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    SHIFT           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    OTHERWISE       reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    COMMA           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    COLON           reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    PLUS_PLUS       reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    MINUS_MINUS     reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)
    RBRACKET        reduce using rule 169 (type_cast -> CONVERT_TO_FLT LPAREN value RPAREN .)


state 305

    (170) type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .

    CHECK           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    SWAP            reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    DISPLAY         reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    GLOBAL          reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FOR             reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    UNTIL           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    REPEAT          reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    IDENT           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_INT    reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_FLT    reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_CHR    reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_STR    reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_BLN    reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_LIST_INT reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_LIST_STR reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    INPUT           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    LPAREN          reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    STR_LIT         reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    INT             reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FLT             reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    BLN             reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    CHR             reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    STR             reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    LIST_INT        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    LIST_FLT        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    LIST_BLN        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    LIST_STR        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    LIST_CHR        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    INT_LIT         reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    FLT_LIT         reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    BLN_LIT         reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    GHOST           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    RBRACE          reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    RPAREN          reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    REVIVE          reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    SHIFT           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    OTHERWISE       reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    COMMA           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    COLON           reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    PLUS_PLUS       reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    MINUS_MINUS     reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)
    RBRACKET        reduce using rule 170 (type_cast -> CONVERT_TO_BLN LPAREN value RPAREN .)


state 306

    (171) type_cast -> CONVERT_TO_STR LPAREN value RPAREN .

    CHECK           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    SWAP            reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    DISPLAY         reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    GLOBAL          reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FOR             reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    UNTIL           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    REPEAT          reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    IDENT           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_INT    reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_FLT    reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_CHR    reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_STR    reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_BLN    reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_LIST_INT reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_LIST_STR reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    INPUT           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    LPAREN          reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    STR_LIT         reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    INT             reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FLT             reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    BLN             reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    CHR             reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    STR             reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    LIST_INT        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    LIST_FLT        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    LIST_BLN        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    LIST_STR        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    LIST_CHR        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    INT_LIT         reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    FLT_LIT         reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    BLN_LIT         reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    GHOST           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    RBRACE          reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    RPAREN          reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    REVIVE          reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    SHIFT           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    OTHERWISE       reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    COMMA           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    COLON           reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    PLUS_PLUS       reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    MINUS_MINUS     reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)
    RBRACKET        reduce using rule 171 (type_cast -> CONVERT_TO_STR LPAREN value RPAREN .)


state 307

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression . SEMICOLON update RPAREN LBRACE statements RBRACE

    SEMICOLON       shift and go to state 318


state 308

    (128) control_variable -> IDENT EQ INT_LIT .

    SEMICOLON       reduce using rule 128 (control_variable -> IDENT EQ INT_LIT .)


state 309

    (126) until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    relational_expression          shift and go to state 45
    statements                     shift and go to state 319
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 310

    (127) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL . LPAREN relational_expression RPAREN

    LPAREN          shift and go to state 320


state 311

    (25) varinit_tail -> COMMA IDENT . EQ value varinit_tail

    EQ              shift and go to state 321


state 312

    (100) list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ . LBRACKET list_element RBRACKET listinit_tail

    LBRACKET        shift and go to state 322


state 313

    (112) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements . RBRACE conditional_tail

    RBRACE          shift and go to state 323


state 314

    (141) function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE . statements revive RBRACE
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    REVIVE          reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    ret_type                       shift and go to state 38
    statements                     shift and go to state 324
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 315

    (162) next_parameters -> COMMA parameters .

    RPAREN          reduce using rule 162 (next_parameters -> COMMA parameters .)


state 316

    (116) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition . OTHERWISE statements RBRACE

    OTHERWISE       shift and go to state 325


state 317

    (117) switch_condition -> SHIFT . value COLON statements switch_cond_tail
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 326
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 318

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON . update RPAREN LBRACE statements RBRACE
    (130) update -> . unary
    (131) update -> . assignment_statement
    (132) unary -> . value unary_op
    (135) assignment_statement -> . var_call assign_op value
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    IDENT           shift and go to state 117
    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    relational_expression          shift and go to state 45
    update                         shift and go to state 327
    unary                          shift and go to state 328
    assignment_statement           shift and go to state 329
    value                          shift and go to state 330
    var_call                       shift and go to state 331
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 319

    (126) until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 332


state 320

    (127) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN . relational_expression RPAREN
    (66) relational_expression -> . re_term
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 161
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 164
    IDENT           shift and go to state 77

    relational_expression          shift and go to state 333
    re_term                        shift and go to state 55
    re_factor                      shift and go to state 70
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 165
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 321

    (25) varinit_tail -> COMMA IDENT EQ . value varinit_tail
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 334
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 322

    (100) list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET . list_element RBRACKET listinit_tail
    (108) list_element -> . value
    (109) list_element -> . value COMMA list_element
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    list_element                   shift and go to state 335
    value                          shift and go to state 336
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 323

    (112) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE . conditional_tail
    (113) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE
    (114) conditional_tail -> . OTHERWISE LBRACE statements RBRACE
    (115) conditional_tail -> . empty
    (183) empty -> .

  ! shift/reduce conflict for OTHERWISE resolved as shift
    OTHERWISE_CHECK shift and go to state 338
    OTHERWISE       shift and go to state 339
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)

  ! OTHERWISE       [ reduce using rule 183 (empty -> .) ]

    conditional_tail               shift and go to state 337
    empty                          shift and go to state 340

state 324

    (141) function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements . revive RBRACE
    (163) revive -> . REVIVE value
    (164) revive -> . empty
    (183) empty -> .

    REVIVE          shift and go to state 342
    RBRACE          reduce using rule 183 (empty -> .)

    revive                         shift and go to state 341
    empty                          shift and go to state 343

state 325

    (116) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE . statements RBRACE
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 344
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 326

    (117) switch_condition -> SHIFT value . COLON statements switch_cond_tail

    COLON           shift and go to state 345


state 327

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 346


state 328

    (130) update -> unary .

    RPAREN          reduce using rule 130 (update -> unary .)


state 329

    (131) update -> assignment_statement .

    RPAREN          reduce using rule 131 (update -> assignment_statement .)


state 330

    (132) unary -> value . unary_op
    (133) unary_op -> . PLUS_PLUS
    (134) unary_op -> . MINUS_MINUS

    PLUS_PLUS       shift and go to state 348
    MINUS_MINUS     shift and go to state 349

    unary_op                       shift and go to state 347

state 331

    (135) assignment_statement -> var_call . assign_op value
    (34) value -> var_call .
    (55) ae_factor -> var_call .
    (73) re_factor -> var_call .
    (88) le_factor -> var_call .
    (136) assign_op -> . PLUS_EQ
    (137) assign_op -> . MINUS_EQ
    (138) assign_op -> . MUL_EQ
    (139) assign_op -> . DIV_EQ
    (140) assign_op -> . MOD_EQ

  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for GT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for GT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LT_EQ resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for AND resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for OR resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for NOT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for LPAREN resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for BLN_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for IDENT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for FLT_LIT resolved using rule 55 (ae_factor -> var_call .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 34 (value -> var_call .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 34 (value -> var_call .)
    PLUS_PLUS       reduce using rule 34 (value -> var_call .)
    MINUS_MINUS     reduce using rule 34 (value -> var_call .)
    LPAREN          reduce using rule 55 (ae_factor -> var_call .)
    PLUS            reduce using rule 55 (ae_factor -> var_call .)
    MINUS           reduce using rule 55 (ae_factor -> var_call .)
    DIVISION        reduce using rule 55 (ae_factor -> var_call .)
    MULTIPLY        reduce using rule 55 (ae_factor -> var_call .)
    MODULO          reduce using rule 55 (ae_factor -> var_call .)
    EXPONENT        reduce using rule 55 (ae_factor -> var_call .)
    INT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    FLT_LIT         reduce using rule 55 (ae_factor -> var_call .)
    IDENT           reduce using rule 55 (ae_factor -> var_call .)
    GT              reduce using rule 55 (ae_factor -> var_call .)
    LT              reduce using rule 55 (ae_factor -> var_call .)
    EQ              reduce using rule 55 (ae_factor -> var_call .)
    NOT_EQ          reduce using rule 55 (ae_factor -> var_call .)
    GT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    LT_EQ           reduce using rule 55 (ae_factor -> var_call .)
    BLN_LIT         reduce using rule 55 (ae_factor -> var_call .)
    AND             reduce using rule 55 (ae_factor -> var_call .)
    OR              reduce using rule 55 (ae_factor -> var_call .)
    NOT             reduce using rule 55 (ae_factor -> var_call .)
    PLUS_EQ         shift and go to state 126
    MINUS_EQ        shift and go to state 127
    MUL_EQ          shift and go to state 128
    DIV_EQ          shift and go to state 129
    MOD_EQ          shift and go to state 130

  ! PLUS_PLUS       [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 55 (ae_factor -> var_call .) ]
  ! GT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! EQ              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT_EQ          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! GT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LT_EQ           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 73 (re_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 73 (re_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 73 (re_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 73 (re_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! OR              [ reduce using rule 73 (re_factor -> var_call .) ]
  ! NOT             [ reduce using rule 73 (re_factor -> var_call .) ]
  ! AND             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! OR              [ reduce using rule 88 (le_factor -> var_call .) ]
  ! NOT             [ reduce using rule 88 (le_factor -> var_call .) ]
  ! LPAREN          [ reduce using rule 88 (le_factor -> var_call .) ]
  ! BLN_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! IDENT           [ reduce using rule 88 (le_factor -> var_call .) ]
  ! INT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! FLT_LIT         [ reduce using rule 88 (le_factor -> var_call .) ]
  ! PLUS_PLUS       [ reduce using rule 88 (le_factor -> var_call .) ]
  ! MINUS_MINUS     [ reduce using rule 88 (le_factor -> var_call .) ]

    assign_op                      shift and go to state 125

state 332

    (126) until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .

    CHECK           reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    SWAP            reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    GLOBAL          reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    UNTIL           reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    REPEAT          reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    IDENT           reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_INT    reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_FLT    reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_CHR    reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_STR    reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_BLN    reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_INT reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_FLT reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_CHR reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_STR reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_BLN reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    STR_LIT         reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FLT             reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    BLN             reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    CHR             reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    LIST_INT        reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    LIST_FLT        reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    LIST_BLN        reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    LIST_STR        reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    LIST_CHR        reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    INT_LIT         reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    FLT_LIT         reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    BLN_LIT         reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    GHOST           reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    REVIVE          reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    SHIFT           reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 126 (until_loop -> UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE .)


state 333

    (127) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression . RPAREN

    RPAREN          shift and go to state 350


state 334

    (25) varinit_tail -> COMMA IDENT EQ value . varinit_tail
    (25) varinit_tail -> . COMMA IDENT EQ value varinit_tail
    (26) varinit_tail -> . empty
    (183) empty -> .

    COMMA           shift and go to state 289
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    varinit_tail                   shift and go to state 351
    empty                          shift and go to state 290

state 335

    (100) list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element . RBRACKET listinit_tail

    RBRACKET        shift and go to state 352


state 336

    (108) list_element -> value .
    (109) list_element -> value . COMMA list_element

    RBRACKET        reduce using rule 108 (list_element -> value .)
    COMMA           shift and go to state 353


state 337

    (112) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .

    CHECK           reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    SWAP            reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    DISPLAY         reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    GLOBAL          reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FOR             reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    UNTIL           reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    REPEAT          reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION        reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    IDENT           reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_INT    reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_FLT    reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_CHR    reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_STR    reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_BLN    reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_LIST_INT reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_LIST_FLT reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_LIST_CHR reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_LIST_STR reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FUNCTION_LIST_BLN reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    INPUT           reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    LPAREN          reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    STR_LIT         reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    INT             reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FLT             reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    BLN             reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    CHR             reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    STR             reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    LIST_INT        reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    LIST_FLT        reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    LIST_BLN        reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    LIST_STR        reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    LIST_CHR        reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    INT_LIT         reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    FLT_LIT         reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    BLN_LIT         reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    GHOST           reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    RBRACE          reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    RPAREN          reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    REVIVE          reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    SHIFT           reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    OTHERWISE       reduce using rule 112 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)


state 338

    (113) conditional_tail -> OTHERWISE_CHECK . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 354


state 339

    (114) conditional_tail -> OTHERWISE . LBRACE statements RBRACE

    LBRACE          shift and go to state 355


state 340

    (115) conditional_tail -> empty .

    CHECK           reduce using rule 115 (conditional_tail -> empty .)
    SWAP            reduce using rule 115 (conditional_tail -> empty .)
    DISPLAY         reduce using rule 115 (conditional_tail -> empty .)
    GLOBAL          reduce using rule 115 (conditional_tail -> empty .)
    FOR             reduce using rule 115 (conditional_tail -> empty .)
    UNTIL           reduce using rule 115 (conditional_tail -> empty .)
    REPEAT          reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION        reduce using rule 115 (conditional_tail -> empty .)
    IDENT           reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_INT    reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_FLT    reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_CHR    reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_STR    reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_BLN    reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 115 (conditional_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 115 (conditional_tail -> empty .)
    INPUT           reduce using rule 115 (conditional_tail -> empty .)
    LPAREN          reduce using rule 115 (conditional_tail -> empty .)
    STR_LIT         reduce using rule 115 (conditional_tail -> empty .)
    INT             reduce using rule 115 (conditional_tail -> empty .)
    FLT             reduce using rule 115 (conditional_tail -> empty .)
    BLN             reduce using rule 115 (conditional_tail -> empty .)
    CHR             reduce using rule 115 (conditional_tail -> empty .)
    STR             reduce using rule 115 (conditional_tail -> empty .)
    LIST_INT        reduce using rule 115 (conditional_tail -> empty .)
    LIST_FLT        reduce using rule 115 (conditional_tail -> empty .)
    LIST_BLN        reduce using rule 115 (conditional_tail -> empty .)
    LIST_STR        reduce using rule 115 (conditional_tail -> empty .)
    LIST_CHR        reduce using rule 115 (conditional_tail -> empty .)
    INT_LIT         reduce using rule 115 (conditional_tail -> empty .)
    FLT_LIT         reduce using rule 115 (conditional_tail -> empty .)
    BLN_LIT         reduce using rule 115 (conditional_tail -> empty .)
    GHOST           reduce using rule 115 (conditional_tail -> empty .)
    RBRACE          reduce using rule 115 (conditional_tail -> empty .)
    RPAREN          reduce using rule 115 (conditional_tail -> empty .)
    REVIVE          reduce using rule 115 (conditional_tail -> empty .)
    SHIFT           reduce using rule 115 (conditional_tail -> empty .)
    OTHERWISE       reduce using rule 115 (conditional_tail -> empty .)


state 341

    (141) function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive . RBRACE

    RBRACE          shift and go to state 356


state 342

    (163) revive -> REVIVE . value
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 357
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 343

    (164) revive -> empty .

    RBRACE          reduce using rule 164 (revive -> empty .)


state 344

    (116) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements . RBRACE

    RBRACE          shift and go to state 358


state 345

    (117) switch_condition -> SHIFT value COLON . statements switch_cond_tail
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 359
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 346

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 360


state 347

    (132) unary -> value unary_op .

    RPAREN          reduce using rule 132 (unary -> value unary_op .)


state 348

    (133) unary_op -> PLUS_PLUS .

    RPAREN          reduce using rule 133 (unary_op -> PLUS_PLUS .)


state 349

    (134) unary_op -> MINUS_MINUS .

    RPAREN          reduce using rule 134 (unary_op -> MINUS_MINUS .)


state 350

    (127) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .

    CHECK           reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    SWAP            reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    DISPLAY         reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    GLOBAL          reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FOR             reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    UNTIL           reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    REPEAT          reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION        reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    IDENT           reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_INT    reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_FLT    reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_CHR    reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_STR    reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_BLN    reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_LIST_INT reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_LIST_FLT reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_LIST_CHR reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_LIST_STR reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FUNCTION_LIST_BLN reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    INPUT           reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    LPAREN          reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    STR_LIT         reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    INT             reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FLT             reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    BLN             reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    CHR             reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    STR             reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    LIST_INT        reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    LIST_FLT        reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    LIST_BLN        reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    LIST_STR        reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    LIST_CHR        reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    INT_LIT         reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    FLT_LIT         reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    BLN_LIT         reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    GHOST           reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    RBRACE          reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    RPAREN          reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    REVIVE          reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    SHIFT           reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)
    OTHERWISE       reduce using rule 127 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN .)


state 351

    (25) varinit_tail -> COMMA IDENT EQ value varinit_tail .

    CHECK           reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    SWAP            reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    DISPLAY         reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    GLOBAL          reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FOR             reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    UNTIL           reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    REPEAT          reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION        reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    IDENT           reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_INT    reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_FLT    reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_CHR    reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_STR    reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_BLN    reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_LIST_INT reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_LIST_FLT reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_LIST_CHR reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_LIST_STR reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FUNCTION_LIST_BLN reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    INPUT           reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    LPAREN          reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    STR_LIT         reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    INT             reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FLT             reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    BLN             reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    CHR             reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    STR             reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    LIST_INT        reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    LIST_FLT        reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    LIST_BLN        reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    LIST_STR        reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    LIST_CHR        reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    INT_LIT         reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    FLT_LIT         reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    BLN_LIT         reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    GHOST           reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    RBRACE          reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    RPAREN          reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    REVIVE          reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    SHIFT           reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)
    OTHERWISE       reduce using rule 25 (varinit_tail -> COMMA IDENT EQ value varinit_tail .)


state 352

    (100) list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET . listinit_tail
    (101) listinit_tail -> . COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (102) listinit_tail -> . empty
    (183) empty -> .

    COMMA           shift and go to state 362
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    listinit_tail                  shift and go to state 361
    empty                          shift and go to state 363

state 353

    (109) list_element -> value COMMA . list_element
    (108) list_element -> . value
    (109) list_element -> . value COMMA list_element
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    value                          shift and go to state 336
    list_element                   shift and go to state 364
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 354

    (113) conditional_tail -> OTHERWISE_CHECK LPAREN . condition RPAREN LBRACE statements RBRACE
    (120) condition -> . relational_expression
    (121) condition -> . logical_expression
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call
    (50) arithmetic_expression -> . ae_term
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call

    LPAREN          shift and go to state 184
    INT_LIT         shift and go to state 162
    FLT_LIT         shift and go to state 163
    BLN_LIT         shift and go to state 75
    IDENT           shift and go to state 77

    condition                      shift and go to state 365
    relational_expression          shift and go to state 186
    logical_expression             shift and go to state 187
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71
    arithmetic_expression          shift and go to state 97
    var_call                       shift and go to state 188
    ae_term                        shift and go to state 54
    ae_factor                      shift and go to state 69

state 355

    (114) conditional_tail -> OTHERWISE LBRACE . statements RBRACE
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 366
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 356

    (141) function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .

    CHECK           reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    SWAP            reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    DISPLAY         reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    GLOBAL          reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FOR             reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    UNTIL           reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    REPEAT          reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION        reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    IDENT           reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_INT    reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_FLT    reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_CHR    reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_STR    reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_BLN    reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_LIST_INT reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_LIST_FLT reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_LIST_CHR reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_LIST_STR reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FUNCTION_LIST_BLN reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    INPUT           reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    LPAREN          reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    STR_LIT         reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    INT             reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FLT             reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    BLN             reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    CHR             reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    STR             reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    LIST_INT        reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    LIST_FLT        reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    LIST_BLN        reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    LIST_STR        reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    LIST_CHR        reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    INT_LIT         reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    FLT_LIT         reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    BLN_LIT         reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    GHOST           reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    RBRACE          reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    RPAREN          reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    REVIVE          reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    SHIFT           reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)
    OTHERWISE       reduce using rule 141 (function_statement -> ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE .)


state 357

    (163) revive -> REVIVE value .

    RBRACE          reduce using rule 163 (revive -> REVIVE value .)


state 358

    (116) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .

    CHECK           reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    SWAP            reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    DISPLAY         reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    GLOBAL          reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FOR             reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    UNTIL           reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    REPEAT          reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION        reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    IDENT           reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_INT    reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_FLT    reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_CHR    reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_STR    reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_BLN    reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_LIST_INT reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_LIST_FLT reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_LIST_CHR reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_LIST_STR reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FUNCTION_LIST_BLN reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    INPUT           reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    LPAREN          reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    STR_LIT         reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    INT             reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FLT             reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    BLN             reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    CHR             reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    STR             reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    LIST_INT        reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    LIST_FLT        reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    LIST_BLN        reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    LIST_STR        reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    LIST_CHR        reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    INT_LIT         reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    FLT_LIT         reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    BLN_LIT         reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    GHOST           reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    RBRACE          reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    RPAREN          reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    REVIVE          reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    SHIFT           reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)
    OTHERWISE       reduce using rule 116 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE .)


state 359

    (117) switch_condition -> SHIFT value COLON statements . switch_cond_tail
    (118) switch_cond_tail -> . switch_condition
    (119) switch_cond_tail -> . empty
    (117) switch_condition -> . SHIFT value COLON statements switch_cond_tail
    (183) empty -> .

    SHIFT           shift and go to state 317
    OTHERWISE       reduce using rule 183 (empty -> .)

    switch_cond_tail               shift and go to state 367
    switch_condition               shift and go to state 368
    empty                          shift and go to state 369

state 360

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE . statements RBRACE
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    relational_expression          shift and go to state 45
    statements                     shift and go to state 370
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 361

    (100) list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .

    CHECK           reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    SWAP            reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    DISPLAY         reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    GLOBAL          reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FOR             reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    UNTIL           reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    REPEAT          reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION        reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    IDENT           reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_INT    reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_FLT    reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_CHR    reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_STR    reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_BLN    reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_INT reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_FLT reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_CHR reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_STR reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_BLN reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    INPUT           reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LPAREN          reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    STR_LIT         reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    INT             reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FLT             reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    BLN             reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    CHR             reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    STR             reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_INT        reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_FLT        reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_BLN        reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_STR        reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_CHR        reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    INT_LIT         reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FLT_LIT         reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    BLN_LIT         reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    GHOST           reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    RBRACE          reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    RPAREN          reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    REVIVE          reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    SHIFT           reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    OTHERWISE       reduce using rule 100 (list_init -> list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)


state 362

    (101) listinit_tail -> COMMA . IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail

    IDENT           shift and go to state 371


state 363

    (102) listinit_tail -> empty .

    CHECK           reduce using rule 102 (listinit_tail -> empty .)
    SWAP            reduce using rule 102 (listinit_tail -> empty .)
    DISPLAY         reduce using rule 102 (listinit_tail -> empty .)
    GLOBAL          reduce using rule 102 (listinit_tail -> empty .)
    FOR             reduce using rule 102 (listinit_tail -> empty .)
    UNTIL           reduce using rule 102 (listinit_tail -> empty .)
    REPEAT          reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION        reduce using rule 102 (listinit_tail -> empty .)
    IDENT           reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_INT    reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_FLT    reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_CHR    reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_STR    reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_BLN    reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_LIST_INT reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_LIST_FLT reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_LIST_CHR reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_LIST_STR reduce using rule 102 (listinit_tail -> empty .)
    FUNCTION_LIST_BLN reduce using rule 102 (listinit_tail -> empty .)
    INPUT           reduce using rule 102 (listinit_tail -> empty .)
    LPAREN          reduce using rule 102 (listinit_tail -> empty .)
    STR_LIT         reduce using rule 102 (listinit_tail -> empty .)
    INT             reduce using rule 102 (listinit_tail -> empty .)
    FLT             reduce using rule 102 (listinit_tail -> empty .)
    BLN             reduce using rule 102 (listinit_tail -> empty .)
    CHR             reduce using rule 102 (listinit_tail -> empty .)
    STR             reduce using rule 102 (listinit_tail -> empty .)
    LIST_INT        reduce using rule 102 (listinit_tail -> empty .)
    LIST_FLT        reduce using rule 102 (listinit_tail -> empty .)
    LIST_BLN        reduce using rule 102 (listinit_tail -> empty .)
    LIST_STR        reduce using rule 102 (listinit_tail -> empty .)
    LIST_CHR        reduce using rule 102 (listinit_tail -> empty .)
    INT_LIT         reduce using rule 102 (listinit_tail -> empty .)
    FLT_LIT         reduce using rule 102 (listinit_tail -> empty .)
    BLN_LIT         reduce using rule 102 (listinit_tail -> empty .)
    GHOST           reduce using rule 102 (listinit_tail -> empty .)
    RBRACE          reduce using rule 102 (listinit_tail -> empty .)
    RPAREN          reduce using rule 102 (listinit_tail -> empty .)
    REVIVE          reduce using rule 102 (listinit_tail -> empty .)
    SHIFT           reduce using rule 102 (listinit_tail -> empty .)
    OTHERWISE       reduce using rule 102 (listinit_tail -> empty .)


state 364

    (109) list_element -> value COMMA list_element .

    RBRACKET        reduce using rule 109 (list_element -> value COMMA list_element .)


state 365

    (113) conditional_tail -> OTHERWISE_CHECK LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 372


state 366

    (114) conditional_tail -> OTHERWISE LBRACE statements . RBRACE

    RBRACE          shift and go to state 373


state 367

    (117) switch_condition -> SHIFT value COLON statements switch_cond_tail .

    OTHERWISE       reduce using rule 117 (switch_condition -> SHIFT value COLON statements switch_cond_tail .)


state 368

    (118) switch_cond_tail -> switch_condition .

    OTHERWISE       reduce using rule 118 (switch_cond_tail -> switch_condition .)


state 369

    (119) switch_cond_tail -> empty .

    OTHERWISE       reduce using rule 119 (switch_cond_tail -> empty .)


state 370

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 374


state 371

    (101) listinit_tail -> COMMA IDENT . LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail

    LBRACKET        shift and go to state 375


state 372

    (113) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 376


state 373

    (114) conditional_tail -> OTHERWISE LBRACE statements RBRACE .

    CHECK           reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    SWAP            reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    GLOBAL          reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FOR             reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    UNTIL           reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    REPEAT          reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    IDENT           reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_INT    reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_FLT    reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_CHR    reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_STR    reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_BLN    reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_LIST_INT reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_LIST_FLT reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_LIST_CHR reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_LIST_STR reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FUNCTION_LIST_BLN reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    INPUT           reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    LPAREN          reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    STR_LIT         reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    INT             reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FLT             reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    BLN             reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    CHR             reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    STR             reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    LIST_INT        reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    LIST_FLT        reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    LIST_BLN        reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    LIST_STR        reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    LIST_CHR        reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    INT_LIT         reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    FLT_LIT         reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    BLN_LIT         reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    GHOST           reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    RPAREN          reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    REVIVE          reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    SHIFT           reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 114 (conditional_tail -> OTHERWISE LBRACE statements RBRACE .)


state 374

    (125) for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .

    CHECK           reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    SWAP            reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    GLOBAL          reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    UNTIL           reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    REPEAT          reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    IDENT           reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_INT    reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_FLT    reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_CHR    reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_STR    reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_BLN    reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_INT reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_FLT reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_CHR reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_STR reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_BLN reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    STR_LIT         reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FLT             reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    BLN             reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    CHR             reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    LIST_INT        reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    LIST_FLT        reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    LIST_BLN        reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    LIST_STR        reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    LIST_CHR        reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    INT_LIT         reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    FLT_LIT         reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    BLN_LIT         reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    GHOST           reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    REVIVE          reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    SHIFT           reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 125 (for_loop -> FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE .)


state 375

    (101) listinit_tail -> COMMA IDENT LBRACKET . index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (110) index -> . INT_LIT
    (111) index -> . IDENT

    INT_LIT         shift and go to state 204
    IDENT           shift and go to state 202

    index                          shift and go to state 377

state 376

    (113) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE . statements RBRACE
    (2) statements -> . conditional_statement statements_tail
    (3) statements -> . loop_statement statements_tail
    (4) statements -> . function_statement statements_tail
    (5) statements -> . switch_statement statements_tail
    (6) statements -> . output_statement statements_tail
    (7) statements -> . assignment_statement statements_tail
    (8) statements -> . expression statements_tail
    (9) statements -> . declarations statements_tail
    (10) statements -> . empty
    (112) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (122) loop_statement -> . for_loop
    (123) loop_statement -> . until_loop
    (124) loop_statement -> . repeat_until
    (141) function_statement -> . ret_type IDENT LPAREN parameters RPAREN LBRACE statements revive RBRACE
    (142) function_statement -> . function_call
    (116) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (135) assignment_statement -> . var_call assign_op value
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (15) declarations -> . GLOBAL var_call
    (16) declarations -> . var_dec
    (17) declarations -> . var_initialization
    (18) declarations -> . list_dec
    (19) declarations -> . list_init
    (20) declarations -> . empty
    (183) empty -> .
    (125) for_loop -> . FOR LPAREN control_variable SEMICOLON relational_expression SEMICOLON update RPAREN LBRACE statements RBRACE
    (126) until_loop -> . UNTIL LPAREN relational_expression RPAREN LBRACE statements RBRACE
    (127) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN relational_expression RPAREN
    (148) ret_type -> . FUNCTION
    (149) ret_type -> . function_dtype
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (21) var_dec -> . data_type IDENT vardec_tail
    (24) var_initialization -> . data_type IDENT EQ value varinit_tail
    (97) list_dec -> . list_dtype IDENT listdec_tail
    (100) list_init -> . list_dtype IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (150) function_dtype -> . FUNCTION_INT
    (151) function_dtype -> . FUNCTION_FLT
    (152) function_dtype -> . FUNCTION_CHR
    (153) function_dtype -> . FUNCTION_STR
    (154) function_dtype -> . FUNCTION_BLN
    (155) function_dtype -> . FUNCTION_LIST_INT
    (156) function_dtype -> . FUNCTION_LIST_FLT
    (157) function_dtype -> . FUNCTION_LIST_CHR
    (158) function_dtype -> . FUNCTION_LIST_STR
    (159) function_dtype -> . FUNCTION_LIST_BLN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (103) list_dtype -> . LIST_INT
    (104) list_dtype -> . LIST_FLT
    (105) list_dtype -> . LIST_BLN
    (106) list_dtype -> . LIST_STR
    (107) list_dtype -> . LIST_CHR
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for FUNCTION_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_BLN resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_INT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_FLT resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_CHR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_STR resolved as shift
  ! shift/reduce conflict for FUNCTION_LIST_BLN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STR_LIT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
  ! shift/reduce conflict for LIST_INT resolved as shift
  ! shift/reduce conflict for LIST_FLT resolved as shift
  ! shift/reduce conflict for LIST_BLN resolved as shift
  ! shift/reduce conflict for LIST_STR resolved as shift
  ! shift/reduce conflict for LIST_CHR resolved as shift
  ! shift/reduce conflict for INT_LIT resolved as shift
  ! shift/reduce conflict for FLT_LIT resolved as shift
  ! shift/reduce conflict for BLN_LIT resolved as shift
    CHECK           shift and go to state 33
    SWAP            shift and go to state 41
    DISPLAY         shift and go to state 42
    GLOBAL          shift and go to state 5
    RBRACE          reduce using rule 183 (empty -> .)
    FOR             shift and go to state 48
    UNTIL           shift and go to state 49
    REPEAT          shift and go to state 50
    FUNCTION        shift and go to state 51
    IDENT           shift and go to state 39
    FUNCTION_INT    shift and go to state 58
    FUNCTION_FLT    shift and go to state 59
    FUNCTION_CHR    shift and go to state 60
    FUNCTION_STR    shift and go to state 61
    FUNCTION_BLN    shift and go to state 62
    FUNCTION_LIST_INT shift and go to state 63
    FUNCTION_LIST_FLT shift and go to state 64
    FUNCTION_LIST_CHR shift and go to state 65
    FUNCTION_LIST_STR shift and go to state 66
    FUNCTION_LIST_BLN shift and go to state 67
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34
    STR_LIT         shift and go to state 72
    INT             shift and go to state 13
    FLT             shift and go to state 14
    BLN             shift and go to state 15
    CHR             shift and go to state 16
    STR             shift and go to state 17
    LIST_INT        shift and go to state 18
    LIST_FLT        shift and go to state 19
    LIST_BLN        shift and go to state 20
    LIST_STR        shift and go to state 21
    LIST_CHR        shift and go to state 22
    INT_LIT         shift and go to state 73
    FLT_LIT         shift and go to state 74
    BLN_LIT         shift and go to state 75

  ! CHECK           [ reduce using rule 183 (empty -> .) ]
  ! SWAP            [ reduce using rule 183 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 183 (empty -> .) ]
  ! GLOBAL          [ reduce using rule 183 (empty -> .) ]
  ! FOR             [ reduce using rule 183 (empty -> .) ]
  ! UNTIL           [ reduce using rule 183 (empty -> .) ]
  ! REPEAT          [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 183 (empty -> .) ]
  ! IDENT           [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_INT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_FLT    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_CHR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_STR    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_BLN    [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_INT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_FLT [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_CHR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_STR [ reduce using rule 183 (empty -> .) ]
  ! FUNCTION_LIST_BLN [ reduce using rule 183 (empty -> .) ]
  ! INPUT           [ reduce using rule 183 (empty -> .) ]
  ! LPAREN          [ reduce using rule 183 (empty -> .) ]
  ! STR_LIT         [ reduce using rule 183 (empty -> .) ]
  ! INT             [ reduce using rule 183 (empty -> .) ]
  ! FLT             [ reduce using rule 183 (empty -> .) ]
  ! BLN             [ reduce using rule 183 (empty -> .) ]
  ! CHR             [ reduce using rule 183 (empty -> .) ]
  ! STR             [ reduce using rule 183 (empty -> .) ]
  ! LIST_INT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_FLT        [ reduce using rule 183 (empty -> .) ]
  ! LIST_BLN        [ reduce using rule 183 (empty -> .) ]
  ! LIST_STR        [ reduce using rule 183 (empty -> .) ]
  ! LIST_CHR        [ reduce using rule 183 (empty -> .) ]
  ! INT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! FLT_LIT         [ reduce using rule 183 (empty -> .) ]
  ! BLN_LIT         [ reduce using rule 183 (empty -> .) ]

    statements                     shift and go to state 378
    conditional_statement          shift and go to state 24
    loop_statement                 shift and go to state 25
    function_statement             shift and go to state 26
    switch_statement               shift and go to state 27
    output_statement               shift and go to state 28
    assignment_statement           shift and go to state 29
    expression                     shift and go to state 30
    declarations                   shift and go to state 31
    empty                          shift and go to state 32
    for_loop                       shift and go to state 35
    until_loop                     shift and go to state 36
    repeat_until                   shift and go to state 37
    ret_type                       shift and go to state 38
    function_call                  shift and go to state 40
    var_call                       shift and go to state 43
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    var_dec                        shift and go to state 6
    var_initialization             shift and go to state 7
    list_dec                       shift and go to state 8
    list_init                      shift and go to state 9
    function_dtype                 shift and go to state 52
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    data_type                      shift and go to state 11
    list_dtype                     shift and go to state 12
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 377

    (101) listinit_tail -> COMMA IDENT LBRACKET index . RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail

    RBRACKET        shift and go to state 379


state 378

    (113) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 380


state 379

    (101) listinit_tail -> COMMA IDENT LBRACKET index RBRACKET . EQ LBRACKET list_element RBRACKET listinit_tail

    EQ              shift and go to state 381


state 380

    (113) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .

    CHECK           reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    SWAP            reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    DISPLAY         reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    GLOBAL          reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    UNTIL           reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    REPEAT          reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENT           reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_INT    reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_FLT    reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_CHR    reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_STR    reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_BLN    reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_INT reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_FLT reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_CHR reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_STR reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION_LIST_BLN reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    STR_LIT         reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLT             reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    BLN             reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    CHR             reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    LIST_INT        reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    LIST_FLT        reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    LIST_BLN        reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    LIST_STR        reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    LIST_CHR        reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    INT_LIT         reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLT_LIT         reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    BLN_LIT         reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    GHOST           reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    REVIVE          reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    SHIFT           reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)
    OTHERWISE       reduce using rule 113 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE .)


state 381

    (101) listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ . LBRACKET list_element RBRACKET listinit_tail

    LBRACKET        shift and go to state 382


state 382

    (101) listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET . list_element RBRACKET listinit_tail
    (108) list_element -> . value
    (109) list_element -> . value COMMA list_element
    (32) value -> . literal
    (33) value -> . expression
    (34) value -> . var_call
    (35) value -> . function_call
    (36) value -> . type_cast
    (37) value -> . not_op
    (38) value -> . negative_val
    (41) literal -> . INT_LIT
    (42) literal -> . FLT_LIT
    (43) literal -> . BLN_LIT
    (44) literal -> . CHR_LIT
    (45) literal -> . STR_LIT
    (46) expression -> . arithmetic_expression
    (47) expression -> . relational_expression
    (48) expression -> . logical_expression
    (49) expression -> . string_concat
    (95) var_call -> . IDENT
    (96) var_call -> . IDENT LBRACKET index RBRACKET
    (143) function_call -> . IDENT LPAREN arguments RPAREN
    (144) function_call -> . output_statement
    (145) function_call -> . input_statement
    (168) type_cast -> . CONVERT_TO_INT LPAREN value RPAREN
    (169) type_cast -> . CONVERT_TO_FLT LPAREN value RPAREN
    (170) type_cast -> . CONVERT_TO_BLN LPAREN value RPAREN
    (171) type_cast -> . CONVERT_TO_STR LPAREN value RPAREN
    (177) not_op -> . NOT value
    (39) negative_val -> . TILDE INT_LIT
    (40) negative_val -> . TILDE FLT_LIT
    (50) arithmetic_expression -> . ae_term
    (66) relational_expression -> . re_term
    (83) logical_expression -> . le_term
    (172) string_concat -> . string_lit stringcon_tail
    (165) output_statement -> . DISPLAY value
    (166) output_statement -> . DISPLAY LPAREN value RPAREN
    (167) input_statement -> . INPUT LPAREN statements RPAREN
    (51) ae_term -> . ae_factor ae_tail2
    (52) ae_term -> . LPAREN ae_factor ae_tail2 RPAREN ae_tail2
    (67) re_term -> . re_factor re_tail2
    (68) re_term -> . LPAREN re_factor re_tail2 RPAREN re_tail2
    (84) le_term -> . le_factor le_tail2
    (85) le_term -> . LPAREN le_factor le_tail2 RPAREN le_tail2
    (176) string_lit -> . STR_LIT
    (53) ae_factor -> . INT_LIT
    (54) ae_factor -> . FLT_LIT
    (55) ae_factor -> . var_call
    (69) re_factor -> . arithmetic_expression
    (70) re_factor -> . INT_LIT
    (71) re_factor -> . FLT_LIT
    (72) re_factor -> . BLN_LIT
    (73) re_factor -> . var_call
    (86) le_factor -> . BLN_LIT
    (87) le_factor -> . relational_expression
    (88) le_factor -> . var_call

    INT_LIT         shift and go to state 112
    FLT_LIT         shift and go to state 113
    BLN_LIT         shift and go to state 114
    CHR_LIT         shift and go to state 115
    STR_LIT         shift and go to state 116
    IDENT           shift and go to state 117
    CONVERT_TO_INT  shift and go to state 119
    CONVERT_TO_FLT  shift and go to state 120
    CONVERT_TO_BLN  shift and go to state 121
    CONVERT_TO_STR  shift and go to state 122
    NOT             shift and go to state 123
    TILDE           shift and go to state 124
    DISPLAY         shift and go to state 42
    INPUT           shift and go to state 68
    LPAREN          shift and go to state 34

    list_element                   shift and go to state 383
    value                          shift and go to state 336
    literal                        shift and go to state 105
    expression                     shift and go to state 106
    var_call                       shift and go to state 107
    function_call                  shift and go to state 108
    type_cast                      shift and go to state 109
    not_op                         shift and go to state 110
    negative_val                   shift and go to state 111
    arithmetic_expression          shift and go to state 44
    relational_expression          shift and go to state 45
    logical_expression             shift and go to state 46
    string_concat                  shift and go to state 47
    output_statement               shift and go to state 118
    input_statement                shift and go to state 53
    ae_term                        shift and go to state 54
    re_term                        shift and go to state 55
    le_term                        shift and go to state 56
    string_lit                     shift and go to state 57
    ae_factor                      shift and go to state 69
    re_factor                      shift and go to state 70
    le_factor                      shift and go to state 71

state 383

    (101) listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element . RBRACKET listinit_tail

    RBRACKET        shift and go to state 384


state 384

    (101) listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET . listinit_tail
    (101) listinit_tail -> . COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail
    (102) listinit_tail -> . empty
    (183) empty -> .

    COMMA           shift and go to state 362
    CHECK           reduce using rule 183 (empty -> .)
    SWAP            reduce using rule 183 (empty -> .)
    DISPLAY         reduce using rule 183 (empty -> .)
    GLOBAL          reduce using rule 183 (empty -> .)
    FOR             reduce using rule 183 (empty -> .)
    UNTIL           reduce using rule 183 (empty -> .)
    REPEAT          reduce using rule 183 (empty -> .)
    FUNCTION        reduce using rule 183 (empty -> .)
    IDENT           reduce using rule 183 (empty -> .)
    FUNCTION_INT    reduce using rule 183 (empty -> .)
    FUNCTION_FLT    reduce using rule 183 (empty -> .)
    FUNCTION_CHR    reduce using rule 183 (empty -> .)
    FUNCTION_STR    reduce using rule 183 (empty -> .)
    FUNCTION_BLN    reduce using rule 183 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 183 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 183 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 183 (empty -> .)
    INPUT           reduce using rule 183 (empty -> .)
    LPAREN          reduce using rule 183 (empty -> .)
    STR_LIT         reduce using rule 183 (empty -> .)
    INT             reduce using rule 183 (empty -> .)
    FLT             reduce using rule 183 (empty -> .)
    BLN             reduce using rule 183 (empty -> .)
    CHR             reduce using rule 183 (empty -> .)
    STR             reduce using rule 183 (empty -> .)
    LIST_INT        reduce using rule 183 (empty -> .)
    LIST_FLT        reduce using rule 183 (empty -> .)
    LIST_BLN        reduce using rule 183 (empty -> .)
    LIST_STR        reduce using rule 183 (empty -> .)
    LIST_CHR        reduce using rule 183 (empty -> .)
    INT_LIT         reduce using rule 183 (empty -> .)
    FLT_LIT         reduce using rule 183 (empty -> .)
    BLN_LIT         reduce using rule 183 (empty -> .)
    GHOST           reduce using rule 183 (empty -> .)
    RBRACE          reduce using rule 183 (empty -> .)
    RPAREN          reduce using rule 183 (empty -> .)
    REVIVE          reduce using rule 183 (empty -> .)
    SHIFT           reduce using rule 183 (empty -> .)
    OTHERWISE       reduce using rule 183 (empty -> .)

    listinit_tail                  shift and go to state 385
    empty                          shift and go to state 363

state 385

    (101) listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .

    CHECK           reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    SWAP            reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    DISPLAY         reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    GLOBAL          reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FOR             reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    UNTIL           reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    REPEAT          reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION        reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    IDENT           reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_INT    reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_FLT    reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_CHR    reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_STR    reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_BLN    reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_INT reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_FLT reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_CHR reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_STR reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FUNCTION_LIST_BLN reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    INPUT           reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LPAREN          reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    STR_LIT         reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    INT             reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FLT             reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    BLN             reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    CHR             reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    STR             reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_INT        reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_FLT        reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_BLN        reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_STR        reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    LIST_CHR        reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    INT_LIT         reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    FLT_LIT         reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    BLN_LIT         reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    GHOST           reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    RBRACE          reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    RPAREN          reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    REVIVE          reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    SHIFT           reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)
    OTHERWISE       reduce using rule 101 (listinit_tail -> COMMA IDENT LBRACKET index RBRACKET EQ LBRACKET list_element RBRACKET listinit_tail .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GLOBAL in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for FLT in state 2 resolved as shift
WARNING: shift/reduce conflict for BLN in state 2 resolved as shift
WARNING: shift/reduce conflict for CHR in state 2 resolved as shift
WARNING: shift/reduce conflict for STR in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 2 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 3 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 3 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 3 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 3 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FLT in state 3 resolved as shift
WARNING: shift/reduce conflict for BLN in state 3 resolved as shift
WARNING: shift/reduce conflict for CHR in state 3 resolved as shift
WARNING: shift/reduce conflict for STR in state 3 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 3 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 3 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 3 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 3 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 3 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 3 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 3 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 3 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 24 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 24 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 24 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 24 resolved as shift
WARNING: shift/reduce conflict for FOR in state 24 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 24 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 24 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 24 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 24 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 24 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 24 resolved as shift
WARNING: shift/reduce conflict for INT in state 24 resolved as shift
WARNING: shift/reduce conflict for FLT in state 24 resolved as shift
WARNING: shift/reduce conflict for BLN in state 24 resolved as shift
WARNING: shift/reduce conflict for CHR in state 24 resolved as shift
WARNING: shift/reduce conflict for STR in state 24 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 24 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 24 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 24 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 24 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 24 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 24 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 24 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 24 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 25 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 25 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 25 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 25 resolved as shift
WARNING: shift/reduce conflict for FOR in state 25 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 25 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 25 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 25 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 25 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 25 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 25 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 25 resolved as shift
WARNING: shift/reduce conflict for INT in state 25 resolved as shift
WARNING: shift/reduce conflict for FLT in state 25 resolved as shift
WARNING: shift/reduce conflict for BLN in state 25 resolved as shift
WARNING: shift/reduce conflict for CHR in state 25 resolved as shift
WARNING: shift/reduce conflict for STR in state 25 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 25 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 25 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 25 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 25 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 25 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 25 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 25 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 25 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 26 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 26 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 26 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 26 resolved as shift
WARNING: shift/reduce conflict for FOR in state 26 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 26 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 26 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 26 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 26 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 26 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 26 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 26 resolved as shift
WARNING: shift/reduce conflict for INT in state 26 resolved as shift
WARNING: shift/reduce conflict for FLT in state 26 resolved as shift
WARNING: shift/reduce conflict for BLN in state 26 resolved as shift
WARNING: shift/reduce conflict for CHR in state 26 resolved as shift
WARNING: shift/reduce conflict for STR in state 26 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 26 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 26 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 26 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 26 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 26 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 26 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 26 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 26 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 27 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 27 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 27 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 27 resolved as shift
WARNING: shift/reduce conflict for FOR in state 27 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 27 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 27 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 27 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 27 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 27 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 27 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 27 resolved as shift
WARNING: shift/reduce conflict for INT in state 27 resolved as shift
WARNING: shift/reduce conflict for FLT in state 27 resolved as shift
WARNING: shift/reduce conflict for BLN in state 27 resolved as shift
WARNING: shift/reduce conflict for CHR in state 27 resolved as shift
WARNING: shift/reduce conflict for STR in state 27 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 27 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 27 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 27 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 27 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 27 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 27 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 27 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 27 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 28 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 28 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 28 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 28 resolved as shift
WARNING: shift/reduce conflict for FOR in state 28 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 28 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 28 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 28 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 28 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 28 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 28 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 28 resolved as shift
WARNING: shift/reduce conflict for INT in state 28 resolved as shift
WARNING: shift/reduce conflict for FLT in state 28 resolved as shift
WARNING: shift/reduce conflict for BLN in state 28 resolved as shift
WARNING: shift/reduce conflict for CHR in state 28 resolved as shift
WARNING: shift/reduce conflict for STR in state 28 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 28 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 28 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 28 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 28 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 28 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 28 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 28 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 28 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 29 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 29 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 29 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 29 resolved as shift
WARNING: shift/reduce conflict for FOR in state 29 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 29 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 29 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 29 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 29 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 29 resolved as shift
WARNING: shift/reduce conflict for INT in state 29 resolved as shift
WARNING: shift/reduce conflict for FLT in state 29 resolved as shift
WARNING: shift/reduce conflict for BLN in state 29 resolved as shift
WARNING: shift/reduce conflict for CHR in state 29 resolved as shift
WARNING: shift/reduce conflict for STR in state 29 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 29 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 29 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 29 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 29 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 29 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 29 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 29 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 29 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 30 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 30 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 30 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 30 resolved as shift
WARNING: shift/reduce conflict for FOR in state 30 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 30 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 30 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 30 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 30 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 30 resolved as shift
WARNING: shift/reduce conflict for INT in state 30 resolved as shift
WARNING: shift/reduce conflict for FLT in state 30 resolved as shift
WARNING: shift/reduce conflict for BLN in state 30 resolved as shift
WARNING: shift/reduce conflict for CHR in state 30 resolved as shift
WARNING: shift/reduce conflict for STR in state 30 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 30 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 30 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 30 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 30 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 30 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 30 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 30 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 30 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 31 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 31 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 31 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 31 resolved as shift
WARNING: shift/reduce conflict for FOR in state 31 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 31 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 31 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 31 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 31 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 31 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 31 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 31 resolved as shift
WARNING: shift/reduce conflict for INT in state 31 resolved as shift
WARNING: shift/reduce conflict for FLT in state 31 resolved as shift
WARNING: shift/reduce conflict for BLN in state 31 resolved as shift
WARNING: shift/reduce conflict for CHR in state 31 resolved as shift
WARNING: shift/reduce conflict for STR in state 31 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 31 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 31 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 31 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 31 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 31 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 31 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 31 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 31 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 39 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 69 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 69 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 69 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 69 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 69 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 69 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 69 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 70 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 70 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 70 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 71 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 71 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 71 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 71 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 93 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 93 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 93 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 93 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 94 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 94 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 94 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 94 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 133 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 133 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 133 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 133 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 133 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 133 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 133 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 133 resolved as shift
WARNING: shift/reduce conflict for INT in state 133 resolved as shift
WARNING: shift/reduce conflict for FLT in state 133 resolved as shift
WARNING: shift/reduce conflict for BLN in state 133 resolved as shift
WARNING: shift/reduce conflict for CHR in state 133 resolved as shift
WARNING: shift/reduce conflict for STR in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 133 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 133 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 133 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 133 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 136 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 136 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 136 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 136 resolved as shift
WARNING: shift/reduce conflict for FOR in state 136 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 136 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 136 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 136 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 136 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 136 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 136 resolved as shift
WARNING: shift/reduce conflict for INT in state 136 resolved as shift
WARNING: shift/reduce conflict for FLT in state 136 resolved as shift
WARNING: shift/reduce conflict for BLN in state 136 resolved as shift
WARNING: shift/reduce conflict for CHR in state 136 resolved as shift
WARNING: shift/reduce conflict for STR in state 136 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 136 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 136 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 136 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 136 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 136 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 136 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 136 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 136 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 191 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 192 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 229 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 229 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 229 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 230 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 230 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 230 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 230 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 230 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 230 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 231 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 231 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 231 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 231 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 231 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 231 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 232 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 232 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 232 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 232 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 232 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 232 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 233 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 233 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 233 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 233 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 233 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 233 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 234 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 234 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 234 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 234 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 234 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 234 resolved as shift
WARNING: shift/reduce conflict for GT in state 235 resolved as shift
WARNING: shift/reduce conflict for LT in state 235 resolved as shift
WARNING: shift/reduce conflict for EQ in state 235 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 235 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 235 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 235 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 235 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 235 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 235 resolved as shift
WARNING: shift/reduce conflict for GT in state 236 resolved as shift
WARNING: shift/reduce conflict for LT in state 236 resolved as shift
WARNING: shift/reduce conflict for EQ in state 236 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 236 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 236 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 236 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 236 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 236 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 236 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 236 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 236 resolved as shift
WARNING: shift/reduce conflict for GT in state 237 resolved as shift
WARNING: shift/reduce conflict for LT in state 237 resolved as shift
WARNING: shift/reduce conflict for EQ in state 237 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 237 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 237 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 237 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 237 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 237 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 237 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 237 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 237 resolved as shift
WARNING: shift/reduce conflict for GT in state 238 resolved as shift
WARNING: shift/reduce conflict for LT in state 238 resolved as shift
WARNING: shift/reduce conflict for EQ in state 238 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 238 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 238 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 238 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 238 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 238 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 238 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 238 resolved as shift
WARNING: shift/reduce conflict for GT in state 239 resolved as shift
WARNING: shift/reduce conflict for LT in state 239 resolved as shift
WARNING: shift/reduce conflict for EQ in state 239 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 239 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 239 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 239 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 239 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 239 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 239 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 239 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 239 resolved as shift
WARNING: shift/reduce conflict for GT in state 240 resolved as shift
WARNING: shift/reduce conflict for LT in state 240 resolved as shift
WARNING: shift/reduce conflict for EQ in state 240 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 240 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 240 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 240 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 240 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 240 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 240 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 240 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 240 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 245 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 250 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 250 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 250 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 250 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 250 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 250 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 250 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 250 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 250 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 250 resolved as shift
WARNING: shift/reduce conflict for GT in state 251 resolved as shift
WARNING: shift/reduce conflict for LT in state 251 resolved as shift
WARNING: shift/reduce conflict for EQ in state 251 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 251 resolved as shift
WARNING: shift/reduce conflict for GT_EQ in state 251 resolved as shift
WARNING: shift/reduce conflict for LT_EQ in state 251 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 251 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 251 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 251 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 251 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 251 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 252 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 252 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 252 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 252 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 252 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 261 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 294 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 294 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 294 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 294 resolved as shift
WARNING: shift/reduce conflict for FOR in state 294 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 294 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 294 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 294 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 294 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 294 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 294 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 294 resolved as shift
WARNING: shift/reduce conflict for INT in state 294 resolved as shift
WARNING: shift/reduce conflict for FLT in state 294 resolved as shift
WARNING: shift/reduce conflict for BLN in state 294 resolved as shift
WARNING: shift/reduce conflict for CHR in state 294 resolved as shift
WARNING: shift/reduce conflict for STR in state 294 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 294 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 294 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 294 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 294 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 294 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 294 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 294 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 294 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 301 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 309 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 309 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 309 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 309 resolved as shift
WARNING: shift/reduce conflict for FOR in state 309 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 309 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 309 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 309 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 309 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 309 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 309 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 309 resolved as shift
WARNING: shift/reduce conflict for INT in state 309 resolved as shift
WARNING: shift/reduce conflict for FLT in state 309 resolved as shift
WARNING: shift/reduce conflict for BLN in state 309 resolved as shift
WARNING: shift/reduce conflict for CHR in state 309 resolved as shift
WARNING: shift/reduce conflict for STR in state 309 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 309 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 309 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 309 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 309 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 309 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 309 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 309 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 309 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 314 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 314 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 314 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 314 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 314 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 314 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 314 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 314 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 314 resolved as shift
WARNING: shift/reduce conflict for INT in state 314 resolved as shift
WARNING: shift/reduce conflict for FLT in state 314 resolved as shift
WARNING: shift/reduce conflict for BLN in state 314 resolved as shift
WARNING: shift/reduce conflict for CHR in state 314 resolved as shift
WARNING: shift/reduce conflict for STR in state 314 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 314 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 314 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 314 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 314 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 314 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 314 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 314 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 314 resolved as shift
WARNING: shift/reduce conflict for OTHERWISE in state 323 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 325 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 325 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 325 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 325 resolved as shift
WARNING: shift/reduce conflict for FOR in state 325 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 325 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 325 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 325 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 325 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 325 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 325 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 325 resolved as shift
WARNING: shift/reduce conflict for INT in state 325 resolved as shift
WARNING: shift/reduce conflict for FLT in state 325 resolved as shift
WARNING: shift/reduce conflict for BLN in state 325 resolved as shift
WARNING: shift/reduce conflict for CHR in state 325 resolved as shift
WARNING: shift/reduce conflict for STR in state 325 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 325 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 325 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 325 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 325 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 325 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 325 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 325 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 325 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 345 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 345 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 345 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 345 resolved as shift
WARNING: shift/reduce conflict for FOR in state 345 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 345 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 345 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 345 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 345 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 345 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 345 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 345 resolved as shift
WARNING: shift/reduce conflict for INT in state 345 resolved as shift
WARNING: shift/reduce conflict for FLT in state 345 resolved as shift
WARNING: shift/reduce conflict for BLN in state 345 resolved as shift
WARNING: shift/reduce conflict for CHR in state 345 resolved as shift
WARNING: shift/reduce conflict for STR in state 345 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 345 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 345 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 345 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 345 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 345 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 345 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 345 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 345 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 355 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 355 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 355 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 355 resolved as shift
WARNING: shift/reduce conflict for FOR in state 355 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 355 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 355 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 355 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 355 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 355 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 355 resolved as shift
WARNING: shift/reduce conflict for INT in state 355 resolved as shift
WARNING: shift/reduce conflict for FLT in state 355 resolved as shift
WARNING: shift/reduce conflict for BLN in state 355 resolved as shift
WARNING: shift/reduce conflict for CHR in state 355 resolved as shift
WARNING: shift/reduce conflict for STR in state 355 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 355 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 355 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 355 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 355 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 355 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 355 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 355 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 355 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 360 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 360 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 360 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 360 resolved as shift
WARNING: shift/reduce conflict for FOR in state 360 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 360 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 360 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 360 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 360 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 360 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 360 resolved as shift
WARNING: shift/reduce conflict for INT in state 360 resolved as shift
WARNING: shift/reduce conflict for FLT in state 360 resolved as shift
WARNING: shift/reduce conflict for BLN in state 360 resolved as shift
WARNING: shift/reduce conflict for CHR in state 360 resolved as shift
WARNING: shift/reduce conflict for STR in state 360 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 360 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 360 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 360 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 360 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 360 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 360 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 360 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 360 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 376 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 376 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 376 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 376 resolved as shift
WARNING: shift/reduce conflict for FOR in state 376 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 376 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 376 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_INT in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_FLT in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_CHR in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_STR in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_BLN in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_INT in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_FLT in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_CHR in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_STR in state 376 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_LIST_BLN in state 376 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 376 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 376 resolved as shift
WARNING: shift/reduce conflict for STR_LIT in state 376 resolved as shift
WARNING: shift/reduce conflict for INT in state 376 resolved as shift
WARNING: shift/reduce conflict for FLT in state 376 resolved as shift
WARNING: shift/reduce conflict for BLN in state 376 resolved as shift
WARNING: shift/reduce conflict for CHR in state 376 resolved as shift
WARNING: shift/reduce conflict for STR in state 376 resolved as shift
WARNING: shift/reduce conflict for LIST_INT in state 376 resolved as shift
WARNING: shift/reduce conflict for LIST_FLT in state 376 resolved as shift
WARNING: shift/reduce conflict for LIST_BLN in state 376 resolved as shift
WARNING: shift/reduce conflict for LIST_STR in state 376 resolved as shift
WARNING: shift/reduce conflict for LIST_CHR in state 376 resolved as shift
WARNING: shift/reduce conflict for INT_LIT in state 376 resolved as shift
WARNING: shift/reduce conflict for FLT_LIT in state 376 resolved as shift
WARNING: shift/reduce conflict for BLN_LIT in state 376 resolved as shift
WARNING: reduce/reduce conflict in state 28 resolved using rule (function_call -> output_statement)
WARNING: rejected rule (empty -> <empty>) in state 28
WARNING: reduce/reduce conflict in state 32 resolved using rule (statements -> empty)
WARNING: rejected rule (declarations -> empty) in state 32
WARNING: reduce/reduce conflict in state 43 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 43
WARNING: reduce/reduce conflict in state 43 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 43
WARNING: reduce/reduce conflict in state 44 resolved using rule (expression -> arithmetic_expression)
WARNING: rejected rule (re_factor -> arithmetic_expression) in state 44
WARNING: reduce/reduce conflict in state 45 resolved using rule (expression -> relational_expression)
WARNING: rejected rule (le_factor -> relational_expression) in state 45
WARNING: reduce/reduce conflict in state 73 resolved using rule (ae_factor -> INT_LIT)
WARNING: rejected rule (re_factor -> INT_LIT) in state 73
WARNING: reduce/reduce conflict in state 74 resolved using rule (ae_factor -> FLT_LIT)
WARNING: rejected rule (re_factor -> FLT_LIT) in state 74
WARNING: reduce/reduce conflict in state 75 resolved using rule (re_factor -> BLN_LIT)
WARNING: rejected rule (le_factor -> BLN_LIT) in state 75
WARNING: reduce/reduce conflict in state 81 resolved using rule (statements -> conditional_statement statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 81
WARNING: reduce/reduce conflict in state 83 resolved using rule (statements -> empty)
WARNING: rejected rule (statements_tail -> empty) in state 83
WARNING: reduce/reduce conflict in state 83 resolved using rule (statements -> empty)
WARNING: rejected rule (declarations -> empty) in state 83
WARNING: reduce/reduce conflict in state 84 resolved using rule (statements -> loop_statement statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 84
WARNING: reduce/reduce conflict in state 85 resolved using rule (statements -> function_statement statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 85
WARNING: reduce/reduce conflict in state 86 resolved using rule (statements -> switch_statement statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 86
WARNING: reduce/reduce conflict in state 87 resolved using rule (statements -> output_statement statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 87
WARNING: reduce/reduce conflict in state 88 resolved using rule (statements -> assignment_statement statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 88
WARNING: reduce/reduce conflict in state 89 resolved using rule (statements -> expression statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 89
WARNING: reduce/reduce conflict in state 90 resolved using rule (statements -> declarations statements_tail)
WARNING: rejected rule (statements_tail -> statements_tail) in state 90
WARNING: reduce/reduce conflict in state 96 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 96
WARNING: reduce/reduce conflict in state 96 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 96
WARNING: reduce/reduce conflict in state 107 resolved using rule (value -> var_call)
WARNING: rejected rule (ae_factor -> var_call) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (value -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (value -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 107
WARNING: reduce/reduce conflict in state 112 resolved using rule (literal -> INT_LIT)
WARNING: rejected rule (ae_factor -> INT_LIT) in state 112
WARNING: reduce/reduce conflict in state 112 resolved using rule (ae_factor -> INT_LIT)
WARNING: rejected rule (re_factor -> INT_LIT) in state 112
WARNING: reduce/reduce conflict in state 112 resolved using rule (literal -> INT_LIT)
WARNING: rejected rule (re_factor -> INT_LIT) in state 112
WARNING: reduce/reduce conflict in state 113 resolved using rule (literal -> FLT_LIT)
WARNING: rejected rule (ae_factor -> FLT_LIT) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (ae_factor -> FLT_LIT)
WARNING: rejected rule (re_factor -> FLT_LIT) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (literal -> FLT_LIT)
WARNING: rejected rule (re_factor -> FLT_LIT) in state 113
WARNING: reduce/reduce conflict in state 114 resolved using rule (literal -> BLN_LIT)
WARNING: rejected rule (re_factor -> BLN_LIT) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (re_factor -> BLN_LIT)
WARNING: rejected rule (le_factor -> BLN_LIT) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (literal -> BLN_LIT)
WARNING: rejected rule (le_factor -> BLN_LIT) in state 114
WARNING: reduce/reduce conflict in state 140 resolved using rule (ae_tail -> empty)
WARNING: rejected rule (ae_tail2 -> empty) in state 140
WARNING: reduce/reduce conflict in state 162 resolved using rule (ae_factor -> INT_LIT)
WARNING: rejected rule (re_factor -> INT_LIT) in state 162
WARNING: reduce/reduce conflict in state 163 resolved using rule (ae_factor -> FLT_LIT)
WARNING: rejected rule (re_factor -> FLT_LIT) in state 163
WARNING: reduce/reduce conflict in state 165 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 165
WARNING: reduce/reduce conflict in state 174 resolved using rule (re_factor -> BLN_LIT)
WARNING: rejected rule (le_factor -> BLN_LIT) in state 174
WARNING: reduce/reduce conflict in state 175 resolved using rule (re_factor -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 175
WARNING: reduce/reduce conflict in state 175 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 175
WARNING: reduce/reduce conflict in state 186 resolved using rule (le_factor -> relational_expression)
WARNING: rejected rule (condition -> relational_expression) in state 186
WARNING: reduce/reduce conflict in state 188 resolved using rule (re_factor -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 188
WARNING: reduce/reduce conflict in state 188 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 188
WARNING: reduce/reduce conflict in state 190 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 190
WARNING: reduce/reduce conflict in state 208 resolved using rule (ae_factor -> INT_LIT)
WARNING: rejected rule (re_factor -> INT_LIT) in state 208
WARNING: reduce/reduce conflict in state 208 resolved using rule (literal -> INT_LIT)
WARNING: rejected rule (ae_factor -> INT_LIT) in state 208
WARNING: reduce/reduce conflict in state 209 resolved using rule (ae_factor -> FLT_LIT)
WARNING: rejected rule (re_factor -> FLT_LIT) in state 209
WARNING: reduce/reduce conflict in state 209 resolved using rule (literal -> FLT_LIT)
WARNING: rejected rule (ae_factor -> FLT_LIT) in state 209
WARNING: reduce/reduce conflict in state 210 resolved using rule (expression -> arithmetic_expression)
WARNING: rejected rule (re_factor -> arithmetic_expression) in state 210
WARNING: reduce/reduce conflict in state 211 resolved using rule (re_factor -> BLN_LIT)
WARNING: rejected rule (le_factor -> BLN_LIT) in state 211
WARNING: reduce/reduce conflict in state 211 resolved using rule (literal -> BLN_LIT)
WARNING: rejected rule (re_factor -> BLN_LIT) in state 211
WARNING: reduce/reduce conflict in state 212 resolved using rule (expression -> relational_expression)
WARNING: rejected rule (le_factor -> relational_expression) in state 212
WARNING: reduce/reduce conflict in state 331 resolved using rule (value -> var_call)
WARNING: rejected rule (ae_factor -> var_call) in state 331
WARNING: reduce/reduce conflict in state 331 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 331
WARNING: reduce/reduce conflict in state 331 resolved using rule (value -> var_call)
WARNING: rejected rule (re_factor -> var_call) in state 331
WARNING: reduce/reduce conflict in state 331 resolved using rule (ae_factor -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 331
WARNING: reduce/reduce conflict in state 331 resolved using rule (value -> var_call)
WARNING: rejected rule (le_factor -> var_call) in state 331
WARNING: Rule (re_factor -> var_call) is never reduced
WARNING: Rule (le_factor -> var_call) is never reduced
WARNING: Rule (re_factor -> INT_LIT) is never reduced
WARNING: Rule (re_factor -> FLT_LIT) is never reduced
WARNING: Rule (le_factor -> BLN_LIT) is never reduced
WARNING: Rule (statements_tail -> statements_tail) is never reduced
WARNING: Rule (statements_tail -> empty) is never reduced
WARNING: Rule (ae_tail2 -> empty) is never reduced
WARNING: Rule (condition -> relational_expression) is never reduced
