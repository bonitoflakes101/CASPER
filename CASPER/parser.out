Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLN_LIT
    CARRIAGE_RETURN
    COMMENT
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    ILLEGAL
    IN
    LIST_BLN
    LIST_BLN2D
    LIST_CHR
    LIST_CHR2D
    LIST_FLT
    LIST_FLT2D
    LIST_INT
    LIST_INT2D
    LIST_STR
    LIST_STR2D
    MEASURE
    NOT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
Rule 2     maybe_newline -> empty
Rule 3     maybe_newline -> NEWLINE maybe_newline
Rule 4     unli_newline -> NEWLINE
Rule 5     unli_newline -> NEWLINE unli_newline
Rule 6     main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 7     global_dec -> global_statement unli_newline global_tail
Rule 8     global_dec -> empty
Rule 9     global_tail -> global_dec
Rule 10    global_statement -> var_statement global_statement_tail
Rule 11    var_statement -> data_type IDENT list_dec
Rule 12    list_dec -> empty
Rule 13    list_dec -> LBRACKET RBRACKET _2d_list
Rule 14    _2d_list -> empty
Rule 15    _2d_list -> LBRACKET RBRACKET
Rule 16    global_statement_tail -> empty
Rule 17    global_statement_tail -> COMMA IDENT global_statement_tail
Rule 18    global_statement_tail -> EQ global_value global_statement_tail2
Rule 19    global_statement_tail2 -> COMMA IDENT global_statement_tail
Rule 20    global_statement_tail2 -> empty
Rule 21    global_value -> expression
Rule 22    global_value -> list_value
Rule 23    list_value -> LBRACKET list_element RBRACKET
Rule 24    list_element -> literal element_tail
Rule 25    element_tail -> COMMA list_element
Rule 26    element_tail -> empty
Rule 27    data_type -> INT
Rule 28    data_type -> FLT
Rule 29    data_type -> BLN
Rule 30    data_type -> CHR
Rule 31    data_type -> STR
Rule 32    expression -> factor factor_tail
Rule 33    factor -> var_call postfix
Rule 34    factor -> literal1
Rule 35    factor -> TILDE INT_LIT
Rule 36    factor -> TILDE FLT_LIT
Rule 37    factor -> LPAREN factor_expression RPAREN
Rule 38    factor_expression -> factor_expression_factor factor_expression_tail
Rule 39    factor_expression_factor -> var_call postfix
Rule 40    factor_expression_factor -> factor_expression1
Rule 41    factor_expression_factor -> TILDE INT_LIT
Rule 42    factor_expression_factor -> TILDE FLT_LIT
Rule 43    factor_expression_factor -> LPAREN factor_expression RPAREN
Rule 44    factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail
Rule 45    factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail
Rule 46    factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail
Rule 47    factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail
Rule 48    factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail
Rule 49    factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail
Rule 50    factor_expression_tail -> GT factor_expression_factor factor_expression_tail
Rule 51    factor_expression_tail -> LT factor_expression_factor factor_expression_tail
Rule 52    factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail
Rule 53    factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail
Rule 54    factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail
Rule 55    factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail
Rule 56    factor_expression_tail -> AND factor_expression_factor factor_expression_tail
Rule 57    factor_expression_tail -> OR factor_expression_factor factor_expression_tail
Rule 58    factor_expression_tail -> empty
Rule 59    factor_expression1 -> INT_LIT
Rule 60    factor_expression1 -> FLT_LIT
Rule 61    factor_expression1 -> DAY
Rule 62    factor_expression1 -> NIGHT
Rule 63    factor_expression1 -> STR_LIT
Rule 64    factor_tail -> PLUS factor factor_tail
Rule 65    factor_tail -> MINUS factor factor_tail
Rule 66    factor_tail -> MULTIPLY factor factor_tail
Rule 67    factor_tail -> DIVISION factor factor_tail
Rule 68    factor_tail -> MODULO factor factor_tail
Rule 69    factor_tail -> EXPONENT factor factor_tail
Rule 70    factor_tail -> GT factor factor_tail
Rule 71    factor_tail -> LT factor factor_tail
Rule 72    factor_tail -> EQ_EQ factor factor_tail
Rule 73    factor_tail -> GT_EQ factor factor_tail
Rule 74    factor_tail -> LT_EQ factor factor_tail
Rule 75    factor_tail -> NOT_EQ factor factor_tail
Rule 76    factor_tail -> AND factor factor_tail
Rule 77    factor_tail -> OR factor factor_tail
Rule 78    factor_tail -> empty
Rule 79    literal -> literal1
Rule 80    literal -> literal2
Rule 81    literal1 -> INT_LIT
Rule 82    literal1 -> FLT_LIT
Rule 83    literal1 -> DAY
Rule 84    literal1 -> NIGHT
Rule 85    literal1 -> STR_LIT
Rule 86    literal2 -> CHR_LIT
Rule 87    function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail
Rule 88    function_statements -> empty
Rule 89    function_statements_tail -> function_statements
Rule 90    function_statements_tail -> empty
Rule 91    ret_type -> FUNCTION
Rule 92    ret_type -> function_dtype
Rule 93    function_dtype -> FUNCTION_INT
Rule 94    function_dtype -> FUNCTION_FLT
Rule 95    function_dtype -> FUNCTION_CHR
Rule 96    function_dtype -> FUNCTION_BLN
Rule 97    function_dtype -> FUNCTION_STR
Rule 98    function_dtype -> FUNCTION_LIST_INT
Rule 99    function_dtype -> FUNCTION_LIST_FLT
Rule 100   function_dtype -> FUNCTION_LIST_CHR
Rule 101   function_dtype -> FUNCTION_LIST_STR
Rule 102   function_dtype -> FUNCTION_LIST_BLN
Rule 103   parameters -> data_type IDENT parameters_tail
Rule 104   parameters -> empty
Rule 105   parameters_tail -> COMMA data_type IDENT parameters_tail
Rule 106   parameters_tail -> empty
Rule 107   revive -> REVIVE revive_value
Rule 108   revive -> empty
Rule 109   revive_value -> revive_type_cast
Rule 110   revive_value -> revive_expression
Rule 111   revive_value -> function_call
Rule 112   revive_expression -> revive_factor revive_factor_tail
Rule 113   revive_factor -> var_call postfix
Rule 114   revive_factor -> revive_factor1
Rule 115   revive_factor -> TILDE INT_LIT
Rule 116   revive_factor -> TILDE FLT_LIT
Rule 117   revive_factor -> LPAREN revive_factor RPAREN
Rule 118   revive_factor_tail -> PLUS revive_factor revive_factor_tail
Rule 119   revive_factor_tail -> MINUS revive_factor revive_factor_tail
Rule 120   revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail
Rule 121   revive_factor_tail -> DIVISION revive_factor revive_factor_tail
Rule 122   revive_factor_tail -> MODULO revive_factor revive_factor_tail
Rule 123   revive_factor_tail -> EXPONENT revive_factor revive_factor_tail
Rule 124   revive_factor_tail -> GT revive_factor revive_factor_tail
Rule 125   revive_factor_tail -> LT revive_factor revive_factor_tail
Rule 126   revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail
Rule 127   revive_factor_tail -> GT_EQ revive_factor revive_factor_tail
Rule 128   revive_factor_tail -> LT_EQ revive_factor revive_factor_tail
Rule 129   revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail
Rule 130   revive_factor_tail -> AND revive_factor revive_factor_tail
Rule 131   revive_factor_tail -> OR revive_factor revive_factor_tail
Rule 132   revive_factor_tail -> empty
Rule 133   revive_factor1 -> INT_LIT
Rule 134   revive_factor1 -> FLT_LIT
Rule 135   revive_factor1 -> DAY
Rule 136   revive_factor1 -> NIGHT
Rule 137   revive_factor1 -> STR_LIT
Rule 138   revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 139   revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 140   revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 141   revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 142   statements -> empty
Rule 143   statements -> local_dec maybe_newline statements_tail
Rule 144   statements_tail -> switch_statement unli_newline statements
Rule 145   statements_tail -> loop_statement unli_newline statements
Rule 146   statements_tail -> function_call unli_newline statements
Rule 147   statements_tail -> assignment_statement unli_newline statements
Rule 148   statements_tail -> output_statement unli_newline statements
Rule 149   statements_tail -> conditional_statement unli_newline statements
Rule 150   statements_tail -> statements
Rule 151   local_dec -> var_statement local_dec_tail
Rule 152   local_dec -> empty
Rule 153   local_dec_tail -> empty
Rule 154   local_dec_tail -> COMMA IDENT local_dec_tail
Rule 155   local_dec_tail -> EQ local_value local_dec_tail2
Rule 156   local_dec_tail2 -> COMMA IDENT local_dec_tail
Rule 157   local_dec_tail2 -> empty
Rule 158   local_value -> local_value_value
Rule 159   local_value -> list_value
Rule 160   local_value_value -> local_type_cast
Rule 161   local_value_value -> local_expression
Rule 162   local_value_value -> function_call
Rule 163   local_expression -> local_factor local_factor_tail
Rule 164   local_factor -> var_call postfix
Rule 165   local_factor -> local_factor1
Rule 166   local_factor -> TILDE INT_LIT
Rule 167   local_factor -> TILDE FLT_LIT
Rule 168   local_factor -> LPAREN local_factor RPAREN
Rule 169   local_factor_tail -> PLUS local_factor local_factor_tail
Rule 170   local_factor_tail -> MINUS local_factor local_factor_tail
Rule 171   local_factor_tail -> MULTIPLY local_factor local_factor_tail
Rule 172   local_factor_tail -> DIVISION local_factor local_factor_tail
Rule 173   local_factor_tail -> MODULO local_factor local_factor_tail
Rule 174   local_factor_tail -> EXPONENT local_factor local_factor_tail
Rule 175   local_factor_tail -> GT local_factor local_factor_tail
Rule 176   local_factor_tail -> LT local_factor local_factor_tail
Rule 177   local_factor_tail -> EQ_EQ local_factor local_factor_tail
Rule 178   local_factor_tail -> GT_EQ local_factor local_factor_tail
Rule 179   local_factor_tail -> LT_EQ local_factor local_factor_tail
Rule 180   local_factor_tail -> NOT_EQ local_factor local_factor_tail
Rule 181   local_factor_tail -> AND local_factor local_factor_tail
Rule 182   local_factor_tail -> OR local_factor local_factor_tail
Rule 183   local_factor_tail -> empty
Rule 184   local_factor1 -> INT_LIT
Rule 185   local_factor1 -> FLT_LIT
Rule 186   local_factor1 -> DAY
Rule 187   local_factor1 -> NIGHT
Rule 188   local_factor1 -> STR_LIT
Rule 189   local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 190   local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 191   local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 192   local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 193   conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 194   conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
Rule 195   conditional_tail -> empty
Rule 196   condition -> condition_factor condition_tail
Rule 197   condition_factor -> var_call postfix
Rule 198   condition_factor -> condition1
Rule 199   condition_factor -> TILDE INT_LIT
Rule 200   condition_factor -> TILDE FLT_LIT
Rule 201   condition_factor -> LPAREN condition RPAREN
Rule 202   condition_tail -> PLUS condition_factor condition_tail
Rule 203   condition_tail -> MINUS condition_factor condition_tail
Rule 204   condition_tail -> MULTIPLY condition_factor condition_tail
Rule 205   condition_tail -> DIVISION condition_factor condition_tail
Rule 206   condition_tail -> MODULO condition_factor condition_tail
Rule 207   condition_tail -> EXPONENT condition_factor condition_tail
Rule 208   condition_tail -> GT condition_factor condition_tail
Rule 209   condition_tail -> LT condition_factor condition_tail
Rule 210   condition_tail -> EQ_EQ condition_factor condition_tail
Rule 211   condition_tail -> GT_EQ condition_factor condition_tail
Rule 212   condition_tail -> LT_EQ condition_factor condition_tail
Rule 213   condition_tail -> NOT_EQ condition_factor condition_tail
Rule 214   condition_tail -> AND condition_factor condition_tail
Rule 215   condition_tail -> OR condition_factor condition_tail
Rule 216   condition_tail -> empty
Rule 217   condition1 -> INT_LIT
Rule 218   condition1 -> FLT_LIT
Rule 219   condition1 -> DAY
Rule 220   condition1 -> NIGHT
Rule 221   condition1 -> STR_LIT
Rule 222   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
Rule 223   switch_condition -> SHIFT switch_value COLON statements switchcond_tail
Rule 224   switch_value -> switch_type_cast
Rule 225   switch_value -> switch_expression
Rule 226   switch_value -> function_call
Rule 227   switch_expression -> switch_factor switch_factor_tail
Rule 228   switch_factor -> var_call postfix
Rule 229   switch_factor -> switch_factor1
Rule 230   switch_factor -> TILDE INT_LIT
Rule 231   switch_factor -> TILDE FLT_LIT
Rule 232   switch_factor -> LPAREN switch_factor RPAREN
Rule 233   switch_factor_tail -> PLUS switch_factor switch_factor_tail
Rule 234   switch_factor_tail -> MINUS switch_factor switch_factor_tail
Rule 235   switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail
Rule 236   switch_factor_tail -> DIVISION switch_factor switch_factor_tail
Rule 237   switch_factor_tail -> MODULO switch_factor switch_factor_tail
Rule 238   switch_factor_tail -> EXPONENT switch_factor switch_factor_tail
Rule 239   switch_factor_tail -> GT switch_factor switch_factor_tail
Rule 240   switch_factor_tail -> LT switch_factor switch_factor_tail
Rule 241   switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail
Rule 242   switch_factor_tail -> GT_EQ switch_factor switch_factor_tail
Rule 243   switch_factor_tail -> LT_EQ switch_factor switch_factor_tail
Rule 244   switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail
Rule 245   switch_factor_tail -> AND switch_factor switch_factor_tail
Rule 246   switch_factor_tail -> OR switch_factor switch_factor_tail
Rule 247   switch_factor_tail -> empty
Rule 248   switch_factor1 -> INT_LIT
Rule 249   switch_factor1 -> FLT_LIT
Rule 250   switch_factor1 -> DAY
Rule 251   switch_factor1 -> NIGHT
Rule 252   switch_factor1 -> STR_LIT
Rule 253   switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 254   switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 255   switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 256   switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 257   switchcond_tail -> switch_condition
Rule 258   switchcond_tail -> empty
Rule 259   loop_statement -> for_loop
Rule 260   loop_statement -> until_loop
Rule 261   loop_statement -> repeat_until
Rule 262   for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
Rule 263   for_expression -> for_factor for_factor_tail
Rule 264   for_factor -> var_call postfix
Rule 265   for_factor -> for_factor1
Rule 266   for_factor -> TILDE INT_LIT
Rule 267   for_factor -> TILDE FLT_LIT
Rule 268   for_factor -> LPAREN for_factor RPAREN
Rule 269   for_factor_tail -> PLUS for_factor for_factor_tail
Rule 270   for_factor_tail -> MINUS for_factor for_factor_tail
Rule 271   for_factor_tail -> MULTIPLY for_factor for_factor_tail
Rule 272   for_factor_tail -> DIVISION for_factor for_factor_tail
Rule 273   for_factor_tail -> MODULO for_factor for_factor_tail
Rule 274   for_factor_tail -> EXPONENT for_factor for_factor_tail
Rule 275   for_factor_tail -> GT for_factor for_factor_tail
Rule 276   for_factor_tail -> LT for_factor for_factor_tail
Rule 277   for_factor_tail -> EQ_EQ for_factor for_factor_tail
Rule 278   for_factor_tail -> GT_EQ for_factor for_factor_tail
Rule 279   for_factor_tail -> LT_EQ for_factor for_factor_tail
Rule 280   for_factor_tail -> NOT_EQ for_factor for_factor_tail
Rule 281   for_factor_tail -> AND for_factor for_factor_tail
Rule 282   for_factor_tail -> OR for_factor for_factor_tail
Rule 283   for_factor_tail -> empty
Rule 284   for_factor1 -> INT_LIT
Rule 285   for_factor1 -> FLT_LIT
Rule 286   for_factor1 -> DAY
Rule 287   for_factor1 -> NIGHT
Rule 288   for_factor1 -> STR_LIT
Rule 289   until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
Rule 290   until_expression -> until_factor until_factor_tail
Rule 291   until_factor -> var_call postfix
Rule 292   until_factor -> until_factor1
Rule 293   until_factor -> TILDE INT_LIT
Rule 294   until_factor -> TILDE FLT_LIT
Rule 295   until_factor -> LPAREN until_factor RPAREN
Rule 296   until_factor_tail -> PLUS until_factor until_factor_tail
Rule 297   until_factor_tail -> MINUS until_factor until_factor_tail
Rule 298   until_factor_tail -> MULTIPLY until_factor until_factor_tail
Rule 299   until_factor_tail -> DIVISION until_factor until_factor_tail
Rule 300   until_factor_tail -> MODULO until_factor until_factor_tail
Rule 301   until_factor_tail -> EXPONENT until_factor until_factor_tail
Rule 302   until_factor_tail -> GT until_factor until_factor_tail
Rule 303   until_factor_tail -> LT until_factor until_factor_tail
Rule 304   until_factor_tail -> EQ_EQ until_factor until_factor_tail
Rule 305   until_factor_tail -> GT_EQ until_factor until_factor_tail
Rule 306   until_factor_tail -> LT_EQ until_factor until_factor_tail
Rule 307   until_factor_tail -> NOT_EQ until_factor until_factor_tail
Rule 308   until_factor_tail -> AND until_factor until_factor_tail
Rule 309   until_factor_tail -> OR until_factor until_factor_tail
Rule 310   until_factor_tail -> empty
Rule 311   until_factor1 -> INT_LIT
Rule 312   until_factor1 -> FLT_LIT
Rule 313   until_factor1 -> DAY
Rule 314   until_factor1 -> NIGHT
Rule 315   until_factor1 -> STR_LIT
Rule 316   repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
Rule 317   control_variable -> INT IDENT EQ control_var_tail
Rule 318   control_var_tail -> INT_LIT
Rule 319   control_var_tail -> var_call
Rule 320   update -> var_call update_tail
Rule 321   update_tail -> postfix_op
Rule 322   update_tail -> compound_op value
Rule 323   postfix_op -> PLUS_PLUS
Rule 324   postfix_op -> MINUS_MINUS
Rule 325   function_call -> FUNCTION_NAME LPAREN arguments RPAREN
Rule 326   function_call -> input_statement
Rule 327   arguments -> empty
Rule 328   arguments -> arg_value arg_tail
Rule 329   arg_tail -> COMMA arg_value arg_tail
Rule 330   arg_tail -> empty
Rule 331   arg_value -> literal
Rule 332   arg_value -> var_call
Rule 333   output_statement -> DISPLAY value next_val
Rule 334   next_val -> COMMA value next_val
Rule 335   next_val -> empty
Rule 336   assignment_statement -> IDENT assign_tail
Rule 337   assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
Rule 338   assign_tail -> DOT PUSH LPAREN list_element RPAREN
Rule 339   assign_tail -> assign_op value
Rule 340   assign_op -> compound_op
Rule 341   assign_op -> EQ
Rule 342   compound_op -> PLUS_EQ
Rule 343   compound_op -> MINUS_EQ
Rule 344   compound_op -> MUL_EQ
Rule 345   compound_op -> DIV_EQ
Rule 346   compound_op -> MOD_EQ
Rule 347   start -> INT_LIT
Rule 348   deleteCount -> empty
Rule 349   deleteCount -> INT_LIT
Rule 350   splice_items -> empty
Rule 351   splice_items -> list_element
Rule 352   var_call -> IDENT list_index
Rule 353   list_index -> LBRACKET index RBRACKET list_index2
Rule 354   list_index -> empty
Rule 355   list_index2 -> LBRACKET index RBRACKET
Rule 356   list_index2 -> empty
Rule 357   index -> INT_LIT
Rule 358   index -> IDENT
Rule 359   postfix -> empty
Rule 360   postfix -> postfix_op
Rule 361   value -> type_cast
Rule 362   value -> value_expression
Rule 363   value -> function_call
Rule 364   value_expression -> value_factor value_factor_tail
Rule 365   value_factor -> var_call postfix
Rule 366   value_factor -> value_factor1
Rule 367   value_factor -> TILDE INT_LIT
Rule 368   value_factor -> TILDE FLT_LIT
Rule 369   value_factor -> LPAREN value_factor RPAREN
Rule 370   value_factor_tail -> PLUS value_factor value_factor_tail
Rule 371   value_factor_tail -> MINUS value_factor value_factor_tail
Rule 372   value_factor_tail -> MULTIPLY value_factor value_factor_tail
Rule 373   value_factor_tail -> DIVISION value_factor value_factor_tail
Rule 374   value_factor_tail -> MODULO value_factor value_factor_tail
Rule 375   value_factor_tail -> EXPONENT value_factor value_factor_tail
Rule 376   value_factor_tail -> GT value_factor value_factor_tail
Rule 377   value_factor_tail -> LT value_factor value_factor_tail
Rule 378   value_factor_tail -> EQ_EQ value_factor value_factor_tail
Rule 379   value_factor_tail -> GT_EQ value_factor value_factor_tail
Rule 380   value_factor_tail -> LT_EQ value_factor value_factor_tail
Rule 381   value_factor_tail -> NOT_EQ value_factor value_factor_tail
Rule 382   value_factor_tail -> AND value_factor value_factor_tail
Rule 383   value_factor_tail -> OR value_factor value_factor_tail
Rule 384   value_factor_tail -> empty
Rule 385   value_factor1 -> INT_LIT
Rule 386   value_factor1 -> FLT_LIT
Rule 387   value_factor1 -> DAY
Rule 388   value_factor1 -> NIGHT
Rule 389   value_factor1 -> STR_LIT
Rule 390   type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 391   type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 392   type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 393   type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 394   typecast_value -> expression
Rule 395   typecast_value -> FUNCTION_NAME LPAREN RPAREN
Rule 396   typecast_value -> input_statement
Rule 397   input_statement -> INPUT LPAREN RPAREN
Rule 398   empty -> <empty>

Terminals, with rules where they appear

AND                  : 56 76 130 181 214 245 281 308 382
BIRTH                : 1
BLN                  : 29
BLN_LIT              : 
CARRIAGE_RETURN      : 
CHECK                : 193
CHR                  : 30
CHR_LIT              : 86
COLON                : 223
COMMA                : 17 19 25 105 154 156 329 334 337 337
COMMENT              : 
CONVERT_TO_BLN       : 140 191 255 392
CONVERT_TO_FLT       : 139 190 254 391
CONVERT_TO_INT       : 138 189 253 390
CONVERT_TO_STR       : 141 192 256 393
DAY                  : 61 83 135 186 219 250 286 313 387
DISPLAY              : 333
DIVISION             : 47 67 121 172 205 236 272 299 373
DIV_EQ               : 345
DOT                  : 337 338
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 18 155 317 341
EQ_EQ                : 52 72 126 177 210 241 277 304 378
EXPONENT             : 49 69 123 174 207 238 274 301 375
FLT                  : 28
FLT_LIT              : 36 42 60 82 116 134 167 185 200 218 231 249 267 285 294 312 368 386
FOR                  : 262
FUNCTION             : 91
FUNCTION_BLN         : 96
FUNCTION_CHR         : 95
FUNCTION_FLT         : 94
FUNCTION_INT         : 93
FUNCTION_LIST_BLN    : 102
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 100
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 99
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 98
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 101
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 87 325 395
FUNCTION_STR         : 97
GHOST                : 1
GT                   : 50 70 124 175 208 239 275 302 376
GT_EQ                : 53 73 127 178 211 242 278 305 379
IDENT                : 11 17 19 103 105 154 156 222 317 336 352 358
ILLEGAL              : 
IN                   : 
INPUT                : 397
INT                  : 27 317
INT_LIT              : 35 41 59 81 115 133 166 184 199 217 230 248 266 284 293 311 318 347 349 357 367 385
LBRACE               : 6 87 193 193 194 222 222 262 289 316
LBRACKET             : 13 15 23 353 355
LIST_BLN             : 
LIST_BLN2D           : 
LIST_CHR             : 
LIST_CHR2D           : 
LIST_FLT             : 
LIST_FLT2D           : 
LIST_INT             : 
LIST_INT2D           : 
LIST_STR             : 
LIST_STR2D           : 
LPAREN               : 6 37 43 87 117 138 139 140 141 168 189 190 191 192 193 194 201 222 232 253 254 255 256 262 268 289 295 316 325 337 338 369 390 391 392 393 395 397
LT                   : 51 71 125 176 209 240 276 303 377
LT_EQ                : 54 74 128 179 212 243 279 306 380
MAIN_CASPER          : 6
MEASURE              : 
MINUS                : 45 65 119 170 203 234 270 297 371
MINUS_EQ             : 343
MINUS_MINUS          : 324
MODULO               : 48 68 122 173 206 237 273 300 374
MOD_EQ               : 346
MULTIPLY             : 46 66 120 171 204 235 271 298 372
MUL_EQ               : 344
NEWLINE              : 3 4 5
NIGHT                : 62 84 136 187 220 251 287 314 388
NOT                  : 
NOT_EQ               : 55 75 129 180 213 244 280 307 381
OR                   : 57 77 131 182 215 246 282 309 383
OTHERWISE            : 193 222
OTHERWISE_CHECK      : 194
PLUS                 : 44 64 118 169 202 233 269 296 370
PLUS_EQ              : 342
PLUS_PLUS            : 323
POW                  : 
PUSH                 : 338
RBRACE               : 6 87 193 193 194 222 222 262 289 316
RBRACKET             : 13 15 23 353 355
REPEAT               : 316
REVIVE               : 107
RPAREN               : 6 37 43 87 117 138 139 140 141 168 189 190 191 192 193 194 201 222 232 253 254 255 256 262 268 289 295 316 325 337 338 369 390 391 392 393 395 397
SEMICOLON            : 262 262
SHIFT                : 223
SKIP                 : 
SPLICE               : 337
STOP                 : 
STR                  : 31
STR_LIT              : 63 85 137 188 221 252 288 315 389
SWAP                 : 222
TILDE                : 35 36 41 42 115 116 166 167 199 200 230 231 266 267 293 294 367 368
TYPE                 : 
UNTIL                : 289 316
error                : 

Nonterminals, with rules where they appear

_2d_list             : 13
arg_tail             : 328 329
arg_value            : 328 329
arguments            : 325
assign_op            : 339
assign_tail          : 336
assignment_statement : 147
compound_op          : 322 340
condition            : 193 194 201
condition1           : 198
condition_factor     : 196 202 203 204 205 206 207 208 209 210 211 212 213 214 215
condition_tail       : 196 202 203 204 205 206 207 208 209 210 211 212 213 214 215
conditional_statement : 149
conditional_tail     : 193 194
control_var_tail     : 317
control_variable     : 262
data_type            : 11 103 105
deleteCount          : 337
element_tail         : 24
empty                : 2 8 12 14 16 20 26 58 78 88 90 104 106 108 132 142 152 153 157 183 195 216 247 258 283 310 327 330 335 348 350 354 356 359 384
expression           : 21 394
factor               : 32 64 65 66 67 68 69 70 71 72 73 74 75 76 77
factor_expression    : 37 43
factor_expression1   : 40
factor_expression_factor : 38 44 45 46 47 48 49 50 51 52 53 54 55 56 57
factor_expression_tail : 38 44 45 46 47 48 49 50 51 52 53 54 55 56 57
factor_tail          : 32 64 65 66 67 68 69 70 71 72 73 74 75 76 77
for_expression       : 262
for_factor           : 263 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282
for_factor1          : 265
for_factor_tail      : 263 269 270 271 272 273 274 275 276 277 278 279 280 281 282
for_loop             : 259
function_call        : 111 146 162 226 363
function_dtype       : 92
function_statements  : 1 89
function_statements_tail : 87
global_dec           : 1 9
global_statement     : 7
global_statement_tail : 10 17 19
global_statement_tail2 : 18
global_tail          : 7
global_value         : 18
index                : 353 355
input_statement      : 326 396
list_dec             : 11
list_element         : 23 25 338 351
list_index           : 352
list_index2          : 353
list_value           : 22 159
literal              : 24 331
literal1             : 34 79
literal2             : 80
local_dec            : 143
local_dec_tail       : 151 154 156
local_dec_tail2      : 155
local_expression     : 161
local_factor         : 163 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
local_factor1        : 165
local_factor_tail    : 163 169 170 171 172 173 174 175 176 177 178 179 180 181 182
local_type_cast      : 160
local_value          : 155
local_value_value    : 158
loop_statement       : 145
main_function        : 1
maybe_newline        : 1 1 3 6 6 6 87 87 143 193 193 193 193 193 193 193 262 262
next_val             : 333 334
output_statement     : 148
parameters           : 87
parameters_tail      : 103 105
postfix              : 33 39 113 164 197 228 264 291 365
postfix_op           : 321 360
program              : 0
repeat_until         : 261
ret_type             : 87
revive               : 87
revive_expression    : 110
revive_factor        : 112 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131
revive_factor1       : 114
revive_factor_tail   : 112 118 119 120 121 122 123 124 125 126 127 128 129 130 131
revive_type_cast     : 109
revive_value         : 107
splice_items         : 337
start                : 337
statements           : 6 87 144 145 146 147 148 149 150 193 193 194 222 223 262 289 316
statements_tail      : 143
switch_condition     : 222 257
switch_expression    : 225
switch_factor        : 227 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246
switch_factor1       : 229
switch_factor_tail   : 227 233 234 235 236 237 238 239 240 241 242 243 244 245 246
switch_statement     : 144
switch_type_cast     : 224
switch_value         : 223
switchcond_tail      : 223
type_cast            : 361
typecast_value       : 138 139 140 141 189 190 191 192 253 254 255 256 390 391 392 393
unli_newline         : 1 1 5 7 87 144 145 146 147 148 149
until_expression     : 289 316
until_factor         : 290 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309
until_factor1        : 292
until_factor_tail    : 290 296 297 298 299 300 301 302 303 304 305 306 307 308 309
until_loop           : 260
update               : 262
update_tail          : 320
value                : 322 333 334 339
value_expression     : 362
value_factor         : 364 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383
value_factor1        : 366
value_factor_tail    : 364 370 371 372 373 374 375 376 377 378 379 380 381 382 383
var_call             : 33 39 113 164 197 228 264 291 319 320 332 365
var_statement        : 10 151

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 3

state 3

    (1) program -> BIRTH unli_newline . global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (398) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    NEWLINE         reduce using rule 398 (empty -> .)
    FUNCTION        reduce using rule 398 (empty -> .)
    FUNCTION_INT    reduce using rule 398 (empty -> .)
    FUNCTION_FLT    reduce using rule 398 (empty -> .)
    FUNCTION_CHR    reduce using rule 398 (empty -> .)
    FUNCTION_BLN    reduce using rule 398 (empty -> .)
    FUNCTION_STR    reduce using rule 398 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 398 (empty -> .)
    MAIN_CASPER     reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_dec                     shift and go to state 5
    global_statement               shift and go to state 6
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 4

    (4) unli_newline -> NEWLINE .
    (5) unli_newline -> NEWLINE . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    INT             reduce using rule 4 (unli_newline -> NEWLINE .)
    FLT             reduce using rule 4 (unli_newline -> NEWLINE .)
    BLN             reduce using rule 4 (unli_newline -> NEWLINE .)
    CHR             reduce using rule 4 (unli_newline -> NEWLINE .)
    STR             reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION        reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_INT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_FLT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_CHR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_BLN    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_STR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_INT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_FLT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_CHR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_STR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_BLN reduce using rule 4 (unli_newline -> NEWLINE .)
    MAIN_CASPER     reduce using rule 4 (unli_newline -> NEWLINE .)
    GHOST           reduce using rule 4 (unli_newline -> NEWLINE .)
    RBRACE          reduce using rule 4 (unli_newline -> NEWLINE .)
    SWAP            reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_NAME   reduce using rule 4 (unli_newline -> NEWLINE .)
    IDENT           reduce using rule 4 (unli_newline -> NEWLINE .)
    DISPLAY         reduce using rule 4 (unli_newline -> NEWLINE .)
    CHECK           reduce using rule 4 (unli_newline -> NEWLINE .)
    FOR             reduce using rule 4 (unli_newline -> NEWLINE .)
    UNTIL           reduce using rule 4 (unli_newline -> NEWLINE .)
    REPEAT          reduce using rule 4 (unli_newline -> NEWLINE .)
    INPUT           reduce using rule 4 (unli_newline -> NEWLINE .)
    REVIVE          reduce using rule 4 (unli_newline -> NEWLINE .)
    SHIFT           reduce using rule 4 (unli_newline -> NEWLINE .)
    OTHERWISE       reduce using rule 4 (unli_newline -> NEWLINE .)
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 4 (unli_newline -> NEWLINE .) ]

    unli_newline                   shift and go to state 15

state 5

    (1) program -> BIRTH unli_newline global_dec . maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 398 (empty -> .)
    FUNCTION_INT    reduce using rule 398 (empty -> .)
    FUNCTION_FLT    reduce using rule 398 (empty -> .)
    FUNCTION_CHR    reduce using rule 398 (empty -> .)
    FUNCTION_BLN    reduce using rule 398 (empty -> .)
    FUNCTION_STR    reduce using rule 398 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 398 (empty -> .)
    MAIN_CASPER     reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 16
    empty                          shift and go to state 17

state 6

    (7) global_dec -> global_statement . unli_newline global_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 19

state 7

    (8) global_dec -> empty .

    NEWLINE         reduce using rule 8 (global_dec -> empty .)
    FUNCTION        reduce using rule 8 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 8 (global_dec -> empty .)
    MAIN_CASPER     reduce using rule 8 (global_dec -> empty .)


state 8

    (10) global_statement -> var_statement . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (398) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 398 (empty -> .)

    global_statement_tail          shift and go to state 20
    empty                          shift and go to state 21

state 9

    (11) var_statement -> data_type . IDENT list_dec

    IDENT           shift and go to state 24


state 10

    (27) data_type -> INT .

    IDENT           reduce using rule 27 (data_type -> INT .)


state 11

    (28) data_type -> FLT .

    IDENT           reduce using rule 28 (data_type -> FLT .)


state 12

    (29) data_type -> BLN .

    IDENT           reduce using rule 29 (data_type -> BLN .)


state 13

    (30) data_type -> CHR .

    IDENT           reduce using rule 30 (data_type -> CHR .)


state 14

    (31) data_type -> STR .

    IDENT           reduce using rule 31 (data_type -> STR .)


state 15

    (5) unli_newline -> NEWLINE unli_newline .

    INT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FLT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    BLN             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    STR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    NEWLINE         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION        reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_INT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_FLT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_CHR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_BLN    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_STR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_INT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_FLT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_CHR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_STR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_BLN reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    MAIN_CASPER     reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    GHOST           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    RBRACE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SWAP            reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_NAME   reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    IDENT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    DISPLAY         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHECK           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FOR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    UNTIL           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REPEAT          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    INPUT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REVIVE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SHIFT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    OTHERWISE       reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)


state 16

    (1) program -> BIRTH unli_newline global_dec maybe_newline . function_statements maybe_newline main_function unli_newline GHOST
    (87) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail
    (88) function_statements -> . empty
    (91) ret_type -> . FUNCTION
    (92) ret_type -> . function_dtype
    (398) empty -> .
    (93) function_dtype -> . FUNCTION_INT
    (94) function_dtype -> . FUNCTION_FLT
    (95) function_dtype -> . FUNCTION_CHR
    (96) function_dtype -> . FUNCTION_BLN
    (97) function_dtype -> . FUNCTION_STR
    (98) function_dtype -> . FUNCTION_LIST_INT
    (99) function_dtype -> . FUNCTION_LIST_FLT
    (100) function_dtype -> . FUNCTION_LIST_CHR
    (101) function_dtype -> . FUNCTION_LIST_STR
    (102) function_dtype -> . FUNCTION_LIST_BLN

    FUNCTION        shift and go to state 28
    NEWLINE         reduce using rule 398 (empty -> .)
    MAIN_CASPER     reduce using rule 398 (empty -> .)
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    function_statements            shift and go to state 25
    ret_type                       shift and go to state 26
    empty                          shift and go to state 27
    function_dtype                 shift and go to state 29

state 17

    (2) maybe_newline -> empty .

    FUNCTION        reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_INT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_FLT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_CHR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_BLN    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_STR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_INT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_FLT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_CHR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_STR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_BLN reduce using rule 2 (maybe_newline -> empty .)
    NEWLINE         reduce using rule 2 (maybe_newline -> empty .)
    MAIN_CASPER     reduce using rule 2 (maybe_newline -> empty .)
    LBRACE          reduce using rule 2 (maybe_newline -> empty .)
    INT             reduce using rule 2 (maybe_newline -> empty .)
    FLT             reduce using rule 2 (maybe_newline -> empty .)
    BLN             reduce using rule 2 (maybe_newline -> empty .)
    CHR             reduce using rule 2 (maybe_newline -> empty .)
    STR             reduce using rule 2 (maybe_newline -> empty .)
    REVIVE          reduce using rule 2 (maybe_newline -> empty .)
    SWAP            reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_NAME   reduce using rule 2 (maybe_newline -> empty .)
    IDENT           reduce using rule 2 (maybe_newline -> empty .)
    DISPLAY         reduce using rule 2 (maybe_newline -> empty .)
    CHECK           reduce using rule 2 (maybe_newline -> empty .)
    FOR             reduce using rule 2 (maybe_newline -> empty .)
    UNTIL           reduce using rule 2 (maybe_newline -> empty .)
    REPEAT          reduce using rule 2 (maybe_newline -> empty .)
    INPUT           reduce using rule 2 (maybe_newline -> empty .)
    RBRACE          reduce using rule 2 (maybe_newline -> empty .)
    SHIFT           reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE       reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE_CHECK reduce using rule 2 (maybe_newline -> empty .)


state 18

    (3) maybe_newline -> NEWLINE . maybe_newline
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 398 (empty -> .)
    FUNCTION_INT    reduce using rule 398 (empty -> .)
    FUNCTION_FLT    reduce using rule 398 (empty -> .)
    FUNCTION_CHR    reduce using rule 398 (empty -> .)
    FUNCTION_BLN    reduce using rule 398 (empty -> .)
    FUNCTION_STR    reduce using rule 398 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 398 (empty -> .)
    MAIN_CASPER     reduce using rule 398 (empty -> .)
    LBRACE          reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    OTHERWISE_CHECK reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 40
    empty                          shift and go to state 17

state 19

    (7) global_dec -> global_statement unli_newline . global_tail
    (9) global_tail -> . global_dec
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (398) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    NEWLINE         reduce using rule 398 (empty -> .)
    FUNCTION        reduce using rule 398 (empty -> .)
    FUNCTION_INT    reduce using rule 398 (empty -> .)
    FUNCTION_FLT    reduce using rule 398 (empty -> .)
    FUNCTION_CHR    reduce using rule 398 (empty -> .)
    FUNCTION_BLN    reduce using rule 398 (empty -> .)
    FUNCTION_STR    reduce using rule 398 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 398 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 398 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 398 (empty -> .)
    MAIN_CASPER     reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_statement               shift and go to state 6
    global_tail                    shift and go to state 41
    global_dec                     shift and go to state 42
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 20

    (10) global_statement -> var_statement global_statement_tail .

    NEWLINE         reduce using rule 10 (global_statement -> var_statement global_statement_tail .)


state 21

    (16) global_statement_tail -> empty .

    NEWLINE         reduce using rule 16 (global_statement_tail -> empty .)


state 22

    (17) global_statement_tail -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 43


state 23

    (18) global_statement_tail -> EQ . global_value global_statement_tail2
    (21) global_value -> . expression
    (22) global_value -> . list_value
    (32) expression -> . factor factor_tail
    (23) list_value -> . LBRACKET list_element RBRACKET
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    global_value                   shift and go to state 44
    expression                     shift and go to state 45
    list_value                     shift and go to state 46
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 24

    (11) var_statement -> data_type IDENT . list_dec
    (12) list_dec -> . empty
    (13) list_dec -> . LBRACKET RBRACKET _2d_list
    (398) empty -> .

    LBRACKET        shift and go to state 61
    COMMA           reduce using rule 398 (empty -> .)
    EQ              reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    list_dec                       shift and go to state 59
    empty                          shift and go to state 60

state 25

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements . maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    MAIN_CASPER     reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 62
    empty                          shift and go to state 17

state 26

    (87) function_statements -> ret_type . FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail

    FUNCTION_NAME   shift and go to state 63


state 27

    (88) function_statements -> empty .

    NEWLINE         reduce using rule 88 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 88 (function_statements -> empty .)


state 28

    (91) ret_type -> FUNCTION .

    FUNCTION_NAME   reduce using rule 91 (ret_type -> FUNCTION .)


state 29

    (92) ret_type -> function_dtype .

    FUNCTION_NAME   reduce using rule 92 (ret_type -> function_dtype .)


state 30

    (93) function_dtype -> FUNCTION_INT .

    FUNCTION_NAME   reduce using rule 93 (function_dtype -> FUNCTION_INT .)


state 31

    (94) function_dtype -> FUNCTION_FLT .

    FUNCTION_NAME   reduce using rule 94 (function_dtype -> FUNCTION_FLT .)


state 32

    (95) function_dtype -> FUNCTION_CHR .

    FUNCTION_NAME   reduce using rule 95 (function_dtype -> FUNCTION_CHR .)


state 33

    (96) function_dtype -> FUNCTION_BLN .

    FUNCTION_NAME   reduce using rule 96 (function_dtype -> FUNCTION_BLN .)


state 34

    (97) function_dtype -> FUNCTION_STR .

    FUNCTION_NAME   reduce using rule 97 (function_dtype -> FUNCTION_STR .)


state 35

    (98) function_dtype -> FUNCTION_LIST_INT .

    FUNCTION_NAME   reduce using rule 98 (function_dtype -> FUNCTION_LIST_INT .)


state 36

    (99) function_dtype -> FUNCTION_LIST_FLT .

    FUNCTION_NAME   reduce using rule 99 (function_dtype -> FUNCTION_LIST_FLT .)


state 37

    (100) function_dtype -> FUNCTION_LIST_CHR .

    FUNCTION_NAME   reduce using rule 100 (function_dtype -> FUNCTION_LIST_CHR .)


state 38

    (101) function_dtype -> FUNCTION_LIST_STR .

    FUNCTION_NAME   reduce using rule 101 (function_dtype -> FUNCTION_LIST_STR .)


state 39

    (102) function_dtype -> FUNCTION_LIST_BLN .

    FUNCTION_NAME   reduce using rule 102 (function_dtype -> FUNCTION_LIST_BLN .)


state 40

    (3) maybe_newline -> NEWLINE maybe_newline .

    FUNCTION        reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_INT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_FLT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_CHR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_BLN    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_STR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_INT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_FLT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_CHR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_STR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_BLN reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    NEWLINE         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    MAIN_CASPER     reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    LBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FLT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    BLN             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    STR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REVIVE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SWAP            reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_NAME   reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    IDENT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    DISPLAY         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHECK           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FOR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    UNTIL           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REPEAT          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INPUT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    RBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SHIFT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE       reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE_CHECK reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)


state 41

    (7) global_dec -> global_statement unli_newline global_tail .

    NEWLINE         reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION        reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_INT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_FLT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_CHR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_BLN    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_STR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_INT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_FLT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_CHR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_STR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_BLN reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    MAIN_CASPER     reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)


state 42

    (9) global_tail -> global_dec .

    NEWLINE         reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION        reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_INT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_FLT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_CHR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_BLN    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_STR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_INT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_FLT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_CHR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_STR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_BLN reduce using rule 9 (global_tail -> global_dec .)
    MAIN_CASPER     reduce using rule 9 (global_tail -> global_dec .)


state 43

    (17) global_statement_tail -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (398) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 398 (empty -> .)

    global_statement_tail          shift and go to state 64
    empty                          shift and go to state 21

state 44

    (18) global_statement_tail -> EQ global_value . global_statement_tail2
    (19) global_statement_tail2 -> . COMMA IDENT global_statement_tail
    (20) global_statement_tail2 -> . empty
    (398) empty -> .

    COMMA           shift and go to state 66
    NEWLINE         reduce using rule 398 (empty -> .)

    global_statement_tail2         shift and go to state 65
    empty                          shift and go to state 67

state 45

    (21) global_value -> expression .

    COMMA           reduce using rule 21 (global_value -> expression .)
    NEWLINE         reduce using rule 21 (global_value -> expression .)


state 46

    (22) global_value -> list_value .

    COMMA           reduce using rule 22 (global_value -> list_value .)
    NEWLINE         reduce using rule 22 (global_value -> list_value .)


state 47

    (32) expression -> factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 68
    empty                          shift and go to state 83

state 48

    (23) list_value -> LBRACKET . list_element RBRACKET
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 84
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 49

    (33) factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 89
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 50

    (34) factor -> literal1 .

    PLUS            reduce using rule 34 (factor -> literal1 .)
    MINUS           reduce using rule 34 (factor -> literal1 .)
    MULTIPLY        reduce using rule 34 (factor -> literal1 .)
    DIVISION        reduce using rule 34 (factor -> literal1 .)
    MODULO          reduce using rule 34 (factor -> literal1 .)
    EXPONENT        reduce using rule 34 (factor -> literal1 .)
    GT              reduce using rule 34 (factor -> literal1 .)
    LT              reduce using rule 34 (factor -> literal1 .)
    EQ_EQ           reduce using rule 34 (factor -> literal1 .)
    GT_EQ           reduce using rule 34 (factor -> literal1 .)
    LT_EQ           reduce using rule 34 (factor -> literal1 .)
    NOT_EQ          reduce using rule 34 (factor -> literal1 .)
    AND             reduce using rule 34 (factor -> literal1 .)
    OR              reduce using rule 34 (factor -> literal1 .)
    COMMA           reduce using rule 34 (factor -> literal1 .)
    NEWLINE         reduce using rule 34 (factor -> literal1 .)
    RPAREN          reduce using rule 34 (factor -> literal1 .)


state 51

    (35) factor -> TILDE . INT_LIT
    (36) factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 94
    FLT_LIT         shift and go to state 95


state 52

    (81) literal1 -> INT_LIT .

    PLUS            reduce using rule 81 (literal1 -> INT_LIT .)
    MINUS           reduce using rule 81 (literal1 -> INT_LIT .)
    MULTIPLY        reduce using rule 81 (literal1 -> INT_LIT .)
    DIVISION        reduce using rule 81 (literal1 -> INT_LIT .)
    MODULO          reduce using rule 81 (literal1 -> INT_LIT .)
    EXPONENT        reduce using rule 81 (literal1 -> INT_LIT .)
    GT              reduce using rule 81 (literal1 -> INT_LIT .)
    LT              reduce using rule 81 (literal1 -> INT_LIT .)
    EQ_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    GT_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    LT_EQ           reduce using rule 81 (literal1 -> INT_LIT .)
    NOT_EQ          reduce using rule 81 (literal1 -> INT_LIT .)
    AND             reduce using rule 81 (literal1 -> INT_LIT .)
    OR              reduce using rule 81 (literal1 -> INT_LIT .)
    COMMA           reduce using rule 81 (literal1 -> INT_LIT .)
    NEWLINE         reduce using rule 81 (literal1 -> INT_LIT .)
    RBRACKET        reduce using rule 81 (literal1 -> INT_LIT .)
    RPAREN          reduce using rule 81 (literal1 -> INT_LIT .)


state 53

    (82) literal1 -> FLT_LIT .

    PLUS            reduce using rule 82 (literal1 -> FLT_LIT .)
    MINUS           reduce using rule 82 (literal1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 82 (literal1 -> FLT_LIT .)
    DIVISION        reduce using rule 82 (literal1 -> FLT_LIT .)
    MODULO          reduce using rule 82 (literal1 -> FLT_LIT .)
    EXPONENT        reduce using rule 82 (literal1 -> FLT_LIT .)
    GT              reduce using rule 82 (literal1 -> FLT_LIT .)
    LT              reduce using rule 82 (literal1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    GT_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    LT_EQ           reduce using rule 82 (literal1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 82 (literal1 -> FLT_LIT .)
    AND             reduce using rule 82 (literal1 -> FLT_LIT .)
    OR              reduce using rule 82 (literal1 -> FLT_LIT .)
    COMMA           reduce using rule 82 (literal1 -> FLT_LIT .)
    NEWLINE         reduce using rule 82 (literal1 -> FLT_LIT .)
    RBRACKET        reduce using rule 82 (literal1 -> FLT_LIT .)
    RPAREN          reduce using rule 82 (literal1 -> FLT_LIT .)


state 54

    (37) factor -> LPAREN . factor_expression RPAREN
    (38) factor_expression -> . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression              shift and go to state 97
    factor_expression_factor       shift and go to state 98
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 55

    (352) var_call -> IDENT . list_index
    (353) list_index -> . LBRACKET index RBRACKET list_index2
    (354) list_index -> . empty
    (398) empty -> .

    LBRACKET        shift and go to state 108
    PLUS_PLUS       reduce using rule 398 (empty -> .)
    MINUS_MINUS     reduce using rule 398 (empty -> .)
    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SEMICOLON       reduce using rule 398 (empty -> .)
    COLON           reduce using rule 398 (empty -> .)
    PLUS_EQ         reduce using rule 398 (empty -> .)
    MINUS_EQ        reduce using rule 398 (empty -> .)
    MUL_EQ          reduce using rule 398 (empty -> .)
    DIV_EQ          reduce using rule 398 (empty -> .)
    MOD_EQ          reduce using rule 398 (empty -> .)

    list_index                     shift and go to state 107
    empty                          shift and go to state 109

state 56

    (83) literal1 -> DAY .

    PLUS            reduce using rule 83 (literal1 -> DAY .)
    MINUS           reduce using rule 83 (literal1 -> DAY .)
    MULTIPLY        reduce using rule 83 (literal1 -> DAY .)
    DIVISION        reduce using rule 83 (literal1 -> DAY .)
    MODULO          reduce using rule 83 (literal1 -> DAY .)
    EXPONENT        reduce using rule 83 (literal1 -> DAY .)
    GT              reduce using rule 83 (literal1 -> DAY .)
    LT              reduce using rule 83 (literal1 -> DAY .)
    EQ_EQ           reduce using rule 83 (literal1 -> DAY .)
    GT_EQ           reduce using rule 83 (literal1 -> DAY .)
    LT_EQ           reduce using rule 83 (literal1 -> DAY .)
    NOT_EQ          reduce using rule 83 (literal1 -> DAY .)
    AND             reduce using rule 83 (literal1 -> DAY .)
    OR              reduce using rule 83 (literal1 -> DAY .)
    COMMA           reduce using rule 83 (literal1 -> DAY .)
    NEWLINE         reduce using rule 83 (literal1 -> DAY .)
    RBRACKET        reduce using rule 83 (literal1 -> DAY .)
    RPAREN          reduce using rule 83 (literal1 -> DAY .)


state 57

    (84) literal1 -> NIGHT .

    PLUS            reduce using rule 84 (literal1 -> NIGHT .)
    MINUS           reduce using rule 84 (literal1 -> NIGHT .)
    MULTIPLY        reduce using rule 84 (literal1 -> NIGHT .)
    DIVISION        reduce using rule 84 (literal1 -> NIGHT .)
    MODULO          reduce using rule 84 (literal1 -> NIGHT .)
    EXPONENT        reduce using rule 84 (literal1 -> NIGHT .)
    GT              reduce using rule 84 (literal1 -> NIGHT .)
    LT              reduce using rule 84 (literal1 -> NIGHT .)
    EQ_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    GT_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    LT_EQ           reduce using rule 84 (literal1 -> NIGHT .)
    NOT_EQ          reduce using rule 84 (literal1 -> NIGHT .)
    AND             reduce using rule 84 (literal1 -> NIGHT .)
    OR              reduce using rule 84 (literal1 -> NIGHT .)
    COMMA           reduce using rule 84 (literal1 -> NIGHT .)
    NEWLINE         reduce using rule 84 (literal1 -> NIGHT .)
    RBRACKET        reduce using rule 84 (literal1 -> NIGHT .)
    RPAREN          reduce using rule 84 (literal1 -> NIGHT .)


state 58

    (85) literal1 -> STR_LIT .

    PLUS            reduce using rule 85 (literal1 -> STR_LIT .)
    MINUS           reduce using rule 85 (literal1 -> STR_LIT .)
    MULTIPLY        reduce using rule 85 (literal1 -> STR_LIT .)
    DIVISION        reduce using rule 85 (literal1 -> STR_LIT .)
    MODULO          reduce using rule 85 (literal1 -> STR_LIT .)
    EXPONENT        reduce using rule 85 (literal1 -> STR_LIT .)
    GT              reduce using rule 85 (literal1 -> STR_LIT .)
    LT              reduce using rule 85 (literal1 -> STR_LIT .)
    EQ_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    GT_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    LT_EQ           reduce using rule 85 (literal1 -> STR_LIT .)
    NOT_EQ          reduce using rule 85 (literal1 -> STR_LIT .)
    AND             reduce using rule 85 (literal1 -> STR_LIT .)
    OR              reduce using rule 85 (literal1 -> STR_LIT .)
    COMMA           reduce using rule 85 (literal1 -> STR_LIT .)
    NEWLINE         reduce using rule 85 (literal1 -> STR_LIT .)
    RBRACKET        reduce using rule 85 (literal1 -> STR_LIT .)
    RPAREN          reduce using rule 85 (literal1 -> STR_LIT .)


state 59

    (11) var_statement -> data_type IDENT list_dec .

    COMMA           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    EQ              reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    NEWLINE         reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    SWAP            reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    FUNCTION_NAME   reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    IDENT           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    DISPLAY         reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    CHECK           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    FOR             reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    UNTIL           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    REPEAT          reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    INPUT           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    INT             reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    FLT             reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    BLN             reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    CHR             reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    STR             reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    REVIVE          reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    RBRACE          reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    SHIFT           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    OTHERWISE       reduce using rule 11 (var_statement -> data_type IDENT list_dec .)


state 60

    (12) list_dec -> empty .

    COMMA           reduce using rule 12 (list_dec -> empty .)
    EQ              reduce using rule 12 (list_dec -> empty .)
    NEWLINE         reduce using rule 12 (list_dec -> empty .)
    SWAP            reduce using rule 12 (list_dec -> empty .)
    FUNCTION_NAME   reduce using rule 12 (list_dec -> empty .)
    IDENT           reduce using rule 12 (list_dec -> empty .)
    DISPLAY         reduce using rule 12 (list_dec -> empty .)
    CHECK           reduce using rule 12 (list_dec -> empty .)
    FOR             reduce using rule 12 (list_dec -> empty .)
    UNTIL           reduce using rule 12 (list_dec -> empty .)
    REPEAT          reduce using rule 12 (list_dec -> empty .)
    INPUT           reduce using rule 12 (list_dec -> empty .)
    INT             reduce using rule 12 (list_dec -> empty .)
    FLT             reduce using rule 12 (list_dec -> empty .)
    BLN             reduce using rule 12 (list_dec -> empty .)
    CHR             reduce using rule 12 (list_dec -> empty .)
    STR             reduce using rule 12 (list_dec -> empty .)
    REVIVE          reduce using rule 12 (list_dec -> empty .)
    RBRACE          reduce using rule 12 (list_dec -> empty .)
    SHIFT           reduce using rule 12 (list_dec -> empty .)
    OTHERWISE       reduce using rule 12 (list_dec -> empty .)


state 61

    (13) list_dec -> LBRACKET . RBRACKET _2d_list

    RBRACKET        shift and go to state 110


state 62

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline . main_function unli_newline GHOST
    (6) main_function -> . MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    MAIN_CASPER     shift and go to state 112

    main_function                  shift and go to state 111

state 63

    (87) function_statements -> ret_type FUNCTION_NAME . LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail

    LPAREN          shift and go to state 113


state 64

    (17) global_statement_tail -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 17 (global_statement_tail -> COMMA IDENT global_statement_tail .)


state 65

    (18) global_statement_tail -> EQ global_value global_statement_tail2 .

    NEWLINE         reduce using rule 18 (global_statement_tail -> EQ global_value global_statement_tail2 .)


state 66

    (19) global_statement_tail2 -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 114


state 67

    (20) global_statement_tail2 -> empty .

    NEWLINE         reduce using rule 20 (global_statement_tail2 -> empty .)


state 68

    (32) expression -> factor factor_tail .

    COMMA           reduce using rule 32 (expression -> factor factor_tail .)
    NEWLINE         reduce using rule 32 (expression -> factor factor_tail .)
    RPAREN          reduce using rule 32 (expression -> factor factor_tail .)


state 69

    (64) factor_tail -> PLUS . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 115
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 70

    (65) factor_tail -> MINUS . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 116
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 71

    (66) factor_tail -> MULTIPLY . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 117
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 72

    (67) factor_tail -> DIVISION . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 118
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 73

    (68) factor_tail -> MODULO . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 119
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 74

    (69) factor_tail -> EXPONENT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 120
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 75

    (70) factor_tail -> GT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 121
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 76

    (71) factor_tail -> LT . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 122
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 77

    (72) factor_tail -> EQ_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 123
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 78

    (73) factor_tail -> GT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 124
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 79

    (74) factor_tail -> LT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 125
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 80

    (75) factor_tail -> NOT_EQ . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 126
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 81

    (76) factor_tail -> AND . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 127
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 82

    (77) factor_tail -> OR . factor factor_tail
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 128
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 83

    (78) factor_tail -> empty .

    COMMA           reduce using rule 78 (factor_tail -> empty .)
    NEWLINE         reduce using rule 78 (factor_tail -> empty .)
    RPAREN          reduce using rule 78 (factor_tail -> empty .)


state 84

    (23) list_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 129


state 85

    (24) list_element -> literal . element_tail
    (25) element_tail -> . COMMA list_element
    (26) element_tail -> . empty
    (398) empty -> .

    COMMA           shift and go to state 131
    RBRACKET        reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    element_tail                   shift and go to state 130
    empty                          shift and go to state 132

state 86

    (79) literal -> literal1 .

    COMMA           reduce using rule 79 (literal -> literal1 .)
    RBRACKET        reduce using rule 79 (literal -> literal1 .)
    RPAREN          reduce using rule 79 (literal -> literal1 .)


state 87

    (80) literal -> literal2 .

    COMMA           reduce using rule 80 (literal -> literal2 .)
    RBRACKET        reduce using rule 80 (literal -> literal2 .)
    RPAREN          reduce using rule 80 (literal -> literal2 .)


state 88

    (86) literal2 -> CHR_LIT .

    COMMA           reduce using rule 86 (literal2 -> CHR_LIT .)
    RBRACKET        reduce using rule 86 (literal2 -> CHR_LIT .)
    RPAREN          reduce using rule 86 (literal2 -> CHR_LIT .)


state 89

    (33) factor -> var_call postfix .

    PLUS            reduce using rule 33 (factor -> var_call postfix .)
    MINUS           reduce using rule 33 (factor -> var_call postfix .)
    MULTIPLY        reduce using rule 33 (factor -> var_call postfix .)
    DIVISION        reduce using rule 33 (factor -> var_call postfix .)
    MODULO          reduce using rule 33 (factor -> var_call postfix .)
    EXPONENT        reduce using rule 33 (factor -> var_call postfix .)
    GT              reduce using rule 33 (factor -> var_call postfix .)
    LT              reduce using rule 33 (factor -> var_call postfix .)
    EQ_EQ           reduce using rule 33 (factor -> var_call postfix .)
    GT_EQ           reduce using rule 33 (factor -> var_call postfix .)
    LT_EQ           reduce using rule 33 (factor -> var_call postfix .)
    NOT_EQ          reduce using rule 33 (factor -> var_call postfix .)
    AND             reduce using rule 33 (factor -> var_call postfix .)
    OR              reduce using rule 33 (factor -> var_call postfix .)
    COMMA           reduce using rule 33 (factor -> var_call postfix .)
    NEWLINE         reduce using rule 33 (factor -> var_call postfix .)
    RPAREN          reduce using rule 33 (factor -> var_call postfix .)


state 90

    (359) postfix -> empty .

    PLUS            reduce using rule 359 (postfix -> empty .)
    MINUS           reduce using rule 359 (postfix -> empty .)
    MULTIPLY        reduce using rule 359 (postfix -> empty .)
    DIVISION        reduce using rule 359 (postfix -> empty .)
    MODULO          reduce using rule 359 (postfix -> empty .)
    EXPONENT        reduce using rule 359 (postfix -> empty .)
    GT              reduce using rule 359 (postfix -> empty .)
    LT              reduce using rule 359 (postfix -> empty .)
    EQ_EQ           reduce using rule 359 (postfix -> empty .)
    GT_EQ           reduce using rule 359 (postfix -> empty .)
    LT_EQ           reduce using rule 359 (postfix -> empty .)
    NOT_EQ          reduce using rule 359 (postfix -> empty .)
    AND             reduce using rule 359 (postfix -> empty .)
    OR              reduce using rule 359 (postfix -> empty .)
    COMMA           reduce using rule 359 (postfix -> empty .)
    NEWLINE         reduce using rule 359 (postfix -> empty .)
    RPAREN          reduce using rule 359 (postfix -> empty .)
    SWAP            reduce using rule 359 (postfix -> empty .)
    FUNCTION_NAME   reduce using rule 359 (postfix -> empty .)
    IDENT           reduce using rule 359 (postfix -> empty .)
    DISPLAY         reduce using rule 359 (postfix -> empty .)
    CHECK           reduce using rule 359 (postfix -> empty .)
    FOR             reduce using rule 359 (postfix -> empty .)
    UNTIL           reduce using rule 359 (postfix -> empty .)
    REPEAT          reduce using rule 359 (postfix -> empty .)
    INPUT           reduce using rule 359 (postfix -> empty .)
    INT             reduce using rule 359 (postfix -> empty .)
    FLT             reduce using rule 359 (postfix -> empty .)
    BLN             reduce using rule 359 (postfix -> empty .)
    CHR             reduce using rule 359 (postfix -> empty .)
    STR             reduce using rule 359 (postfix -> empty .)
    REVIVE          reduce using rule 359 (postfix -> empty .)
    RBRACE          reduce using rule 359 (postfix -> empty .)
    SHIFT           reduce using rule 359 (postfix -> empty .)
    OTHERWISE       reduce using rule 359 (postfix -> empty .)
    SEMICOLON       reduce using rule 359 (postfix -> empty .)
    COLON           reduce using rule 359 (postfix -> empty .)


state 91

    (360) postfix -> postfix_op .

    PLUS            reduce using rule 360 (postfix -> postfix_op .)
    MINUS           reduce using rule 360 (postfix -> postfix_op .)
    MULTIPLY        reduce using rule 360 (postfix -> postfix_op .)
    DIVISION        reduce using rule 360 (postfix -> postfix_op .)
    MODULO          reduce using rule 360 (postfix -> postfix_op .)
    EXPONENT        reduce using rule 360 (postfix -> postfix_op .)
    GT              reduce using rule 360 (postfix -> postfix_op .)
    LT              reduce using rule 360 (postfix -> postfix_op .)
    EQ_EQ           reduce using rule 360 (postfix -> postfix_op .)
    GT_EQ           reduce using rule 360 (postfix -> postfix_op .)
    LT_EQ           reduce using rule 360 (postfix -> postfix_op .)
    NOT_EQ          reduce using rule 360 (postfix -> postfix_op .)
    AND             reduce using rule 360 (postfix -> postfix_op .)
    OR              reduce using rule 360 (postfix -> postfix_op .)
    COMMA           reduce using rule 360 (postfix -> postfix_op .)
    NEWLINE         reduce using rule 360 (postfix -> postfix_op .)
    RPAREN          reduce using rule 360 (postfix -> postfix_op .)
    SWAP            reduce using rule 360 (postfix -> postfix_op .)
    FUNCTION_NAME   reduce using rule 360 (postfix -> postfix_op .)
    IDENT           reduce using rule 360 (postfix -> postfix_op .)
    DISPLAY         reduce using rule 360 (postfix -> postfix_op .)
    CHECK           reduce using rule 360 (postfix -> postfix_op .)
    FOR             reduce using rule 360 (postfix -> postfix_op .)
    UNTIL           reduce using rule 360 (postfix -> postfix_op .)
    REPEAT          reduce using rule 360 (postfix -> postfix_op .)
    INPUT           reduce using rule 360 (postfix -> postfix_op .)
    INT             reduce using rule 360 (postfix -> postfix_op .)
    FLT             reduce using rule 360 (postfix -> postfix_op .)
    BLN             reduce using rule 360 (postfix -> postfix_op .)
    CHR             reduce using rule 360 (postfix -> postfix_op .)
    STR             reduce using rule 360 (postfix -> postfix_op .)
    REVIVE          reduce using rule 360 (postfix -> postfix_op .)
    RBRACE          reduce using rule 360 (postfix -> postfix_op .)
    SHIFT           reduce using rule 360 (postfix -> postfix_op .)
    OTHERWISE       reduce using rule 360 (postfix -> postfix_op .)
    SEMICOLON       reduce using rule 360 (postfix -> postfix_op .)
    COLON           reduce using rule 360 (postfix -> postfix_op .)


state 92

    (323) postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    SWAP            reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    FUNCTION_NAME   reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    IDENT           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    DISPLAY         reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    CHECK           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    FOR             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    UNTIL           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    REPEAT          reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    INPUT           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    INT             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    FLT             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    BLN             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    CHR             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    STR             reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    REVIVE          reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    RBRACE          reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    SHIFT           reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    OTHERWISE       reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    SEMICOLON       reduce using rule 323 (postfix_op -> PLUS_PLUS .)
    COLON           reduce using rule 323 (postfix_op -> PLUS_PLUS .)


state 93

    (324) postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    SWAP            reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    FUNCTION_NAME   reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    IDENT           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    DISPLAY         reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    CHECK           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    FOR             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    UNTIL           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    REPEAT          reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    INPUT           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    INT             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    FLT             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    BLN             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    CHR             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    STR             reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    REVIVE          reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    RBRACE          reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    SHIFT           reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    OTHERWISE       reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    SEMICOLON       reduce using rule 324 (postfix_op -> MINUS_MINUS .)
    COLON           reduce using rule 324 (postfix_op -> MINUS_MINUS .)


state 94

    (35) factor -> TILDE INT_LIT .

    PLUS            reduce using rule 35 (factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 35 (factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 35 (factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 35 (factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 35 (factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 35 (factor -> TILDE INT_LIT .)
    GT              reduce using rule 35 (factor -> TILDE INT_LIT .)
    LT              reduce using rule 35 (factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 35 (factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 35 (factor -> TILDE INT_LIT .)
    AND             reduce using rule 35 (factor -> TILDE INT_LIT .)
    OR              reduce using rule 35 (factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 35 (factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 35 (factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 35 (factor -> TILDE INT_LIT .)


state 95

    (36) factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 36 (factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 36 (factor -> TILDE FLT_LIT .)
    GT              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    LT              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 36 (factor -> TILDE FLT_LIT .)
    AND             reduce using rule 36 (factor -> TILDE FLT_LIT .)
    OR              reduce using rule 36 (factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 36 (factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 36 (factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 36 (factor -> TILDE FLT_LIT .)


state 96

    (43) factor_expression_factor -> LPAREN . factor_expression RPAREN
    (38) factor_expression -> . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression              shift and go to state 133
    factor_expression_factor       shift and go to state 98
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 97

    (37) factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 134


state 98

    (38) factor_expression -> factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 135
    empty                          shift and go to state 150

state 99

    (39) factor_expression_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 151
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 100

    (40) factor_expression_factor -> factor_expression1 .

    PLUS            reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MINUS           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MULTIPLY        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    DIVISION        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    MODULO          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    EXPONENT        reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    GT              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    LT              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    EQ_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    GT_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    LT_EQ           reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    NOT_EQ          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    AND             reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    OR              reduce using rule 40 (factor_expression_factor -> factor_expression1 .)
    RPAREN          reduce using rule 40 (factor_expression_factor -> factor_expression1 .)


state 101

    (41) factor_expression_factor -> TILDE . INT_LIT
    (42) factor_expression_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 152
    FLT_LIT         shift and go to state 153


state 102

    (59) factor_expression1 -> INT_LIT .

    PLUS            reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MINUS           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MULTIPLY        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    DIVISION        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    MODULO          reduce using rule 59 (factor_expression1 -> INT_LIT .)
    EXPONENT        reduce using rule 59 (factor_expression1 -> INT_LIT .)
    GT              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    LT              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    EQ_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    GT_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    LT_EQ           reduce using rule 59 (factor_expression1 -> INT_LIT .)
    NOT_EQ          reduce using rule 59 (factor_expression1 -> INT_LIT .)
    AND             reduce using rule 59 (factor_expression1 -> INT_LIT .)
    OR              reduce using rule 59 (factor_expression1 -> INT_LIT .)
    RPAREN          reduce using rule 59 (factor_expression1 -> INT_LIT .)


state 103

    (60) factor_expression1 -> FLT_LIT .

    PLUS            reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MINUS           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    DIVISION        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    MODULO          reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    EXPONENT        reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    GT              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    LT              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    GT_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    LT_EQ           reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    AND             reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    OR              reduce using rule 60 (factor_expression1 -> FLT_LIT .)
    RPAREN          reduce using rule 60 (factor_expression1 -> FLT_LIT .)


state 104

    (61) factor_expression1 -> DAY .

    PLUS            reduce using rule 61 (factor_expression1 -> DAY .)
    MINUS           reduce using rule 61 (factor_expression1 -> DAY .)
    MULTIPLY        reduce using rule 61 (factor_expression1 -> DAY .)
    DIVISION        reduce using rule 61 (factor_expression1 -> DAY .)
    MODULO          reduce using rule 61 (factor_expression1 -> DAY .)
    EXPONENT        reduce using rule 61 (factor_expression1 -> DAY .)
    GT              reduce using rule 61 (factor_expression1 -> DAY .)
    LT              reduce using rule 61 (factor_expression1 -> DAY .)
    EQ_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    GT_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    LT_EQ           reduce using rule 61 (factor_expression1 -> DAY .)
    NOT_EQ          reduce using rule 61 (factor_expression1 -> DAY .)
    AND             reduce using rule 61 (factor_expression1 -> DAY .)
    OR              reduce using rule 61 (factor_expression1 -> DAY .)
    RPAREN          reduce using rule 61 (factor_expression1 -> DAY .)


state 105

    (62) factor_expression1 -> NIGHT .

    PLUS            reduce using rule 62 (factor_expression1 -> NIGHT .)
    MINUS           reduce using rule 62 (factor_expression1 -> NIGHT .)
    MULTIPLY        reduce using rule 62 (factor_expression1 -> NIGHT .)
    DIVISION        reduce using rule 62 (factor_expression1 -> NIGHT .)
    MODULO          reduce using rule 62 (factor_expression1 -> NIGHT .)
    EXPONENT        reduce using rule 62 (factor_expression1 -> NIGHT .)
    GT              reduce using rule 62 (factor_expression1 -> NIGHT .)
    LT              reduce using rule 62 (factor_expression1 -> NIGHT .)
    EQ_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    GT_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    LT_EQ           reduce using rule 62 (factor_expression1 -> NIGHT .)
    NOT_EQ          reduce using rule 62 (factor_expression1 -> NIGHT .)
    AND             reduce using rule 62 (factor_expression1 -> NIGHT .)
    OR              reduce using rule 62 (factor_expression1 -> NIGHT .)
    RPAREN          reduce using rule 62 (factor_expression1 -> NIGHT .)


state 106

    (63) factor_expression1 -> STR_LIT .

    PLUS            reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MINUS           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MULTIPLY        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    DIVISION        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    MODULO          reduce using rule 63 (factor_expression1 -> STR_LIT .)
    EXPONENT        reduce using rule 63 (factor_expression1 -> STR_LIT .)
    GT              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    LT              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    EQ_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    GT_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    LT_EQ           reduce using rule 63 (factor_expression1 -> STR_LIT .)
    NOT_EQ          reduce using rule 63 (factor_expression1 -> STR_LIT .)
    AND             reduce using rule 63 (factor_expression1 -> STR_LIT .)
    OR              reduce using rule 63 (factor_expression1 -> STR_LIT .)
    RPAREN          reduce using rule 63 (factor_expression1 -> STR_LIT .)


state 107

    (352) var_call -> IDENT list_index .

    PLUS_PLUS       reduce using rule 352 (var_call -> IDENT list_index .)
    MINUS_MINUS     reduce using rule 352 (var_call -> IDENT list_index .)
    PLUS            reduce using rule 352 (var_call -> IDENT list_index .)
    MINUS           reduce using rule 352 (var_call -> IDENT list_index .)
    MULTIPLY        reduce using rule 352 (var_call -> IDENT list_index .)
    DIVISION        reduce using rule 352 (var_call -> IDENT list_index .)
    MODULO          reduce using rule 352 (var_call -> IDENT list_index .)
    EXPONENT        reduce using rule 352 (var_call -> IDENT list_index .)
    GT              reduce using rule 352 (var_call -> IDENT list_index .)
    LT              reduce using rule 352 (var_call -> IDENT list_index .)
    EQ_EQ           reduce using rule 352 (var_call -> IDENT list_index .)
    GT_EQ           reduce using rule 352 (var_call -> IDENT list_index .)
    LT_EQ           reduce using rule 352 (var_call -> IDENT list_index .)
    NOT_EQ          reduce using rule 352 (var_call -> IDENT list_index .)
    AND             reduce using rule 352 (var_call -> IDENT list_index .)
    OR              reduce using rule 352 (var_call -> IDENT list_index .)
    COMMA           reduce using rule 352 (var_call -> IDENT list_index .)
    NEWLINE         reduce using rule 352 (var_call -> IDENT list_index .)
    RPAREN          reduce using rule 352 (var_call -> IDENT list_index .)
    SWAP            reduce using rule 352 (var_call -> IDENT list_index .)
    FUNCTION_NAME   reduce using rule 352 (var_call -> IDENT list_index .)
    IDENT           reduce using rule 352 (var_call -> IDENT list_index .)
    DISPLAY         reduce using rule 352 (var_call -> IDENT list_index .)
    CHECK           reduce using rule 352 (var_call -> IDENT list_index .)
    FOR             reduce using rule 352 (var_call -> IDENT list_index .)
    UNTIL           reduce using rule 352 (var_call -> IDENT list_index .)
    REPEAT          reduce using rule 352 (var_call -> IDENT list_index .)
    INPUT           reduce using rule 352 (var_call -> IDENT list_index .)
    INT             reduce using rule 352 (var_call -> IDENT list_index .)
    FLT             reduce using rule 352 (var_call -> IDENT list_index .)
    BLN             reduce using rule 352 (var_call -> IDENT list_index .)
    CHR             reduce using rule 352 (var_call -> IDENT list_index .)
    STR             reduce using rule 352 (var_call -> IDENT list_index .)
    REVIVE          reduce using rule 352 (var_call -> IDENT list_index .)
    RBRACE          reduce using rule 352 (var_call -> IDENT list_index .)
    SHIFT           reduce using rule 352 (var_call -> IDENT list_index .)
    OTHERWISE       reduce using rule 352 (var_call -> IDENT list_index .)
    SEMICOLON       reduce using rule 352 (var_call -> IDENT list_index .)
    COLON           reduce using rule 352 (var_call -> IDENT list_index .)
    PLUS_EQ         reduce using rule 352 (var_call -> IDENT list_index .)
    MINUS_EQ        reduce using rule 352 (var_call -> IDENT list_index .)
    MUL_EQ          reduce using rule 352 (var_call -> IDENT list_index .)
    DIV_EQ          reduce using rule 352 (var_call -> IDENT list_index .)
    MOD_EQ          reduce using rule 352 (var_call -> IDENT list_index .)


state 108

    (353) list_index -> LBRACKET . index RBRACKET list_index2
    (357) index -> . INT_LIT
    (358) index -> . IDENT

    INT_LIT         shift and go to state 155
    IDENT           shift and go to state 156

    index                          shift and go to state 154

state 109

    (354) list_index -> empty .

    PLUS_PLUS       reduce using rule 354 (list_index -> empty .)
    MINUS_MINUS     reduce using rule 354 (list_index -> empty .)
    PLUS            reduce using rule 354 (list_index -> empty .)
    MINUS           reduce using rule 354 (list_index -> empty .)
    MULTIPLY        reduce using rule 354 (list_index -> empty .)
    DIVISION        reduce using rule 354 (list_index -> empty .)
    MODULO          reduce using rule 354 (list_index -> empty .)
    EXPONENT        reduce using rule 354 (list_index -> empty .)
    GT              reduce using rule 354 (list_index -> empty .)
    LT              reduce using rule 354 (list_index -> empty .)
    EQ_EQ           reduce using rule 354 (list_index -> empty .)
    GT_EQ           reduce using rule 354 (list_index -> empty .)
    LT_EQ           reduce using rule 354 (list_index -> empty .)
    NOT_EQ          reduce using rule 354 (list_index -> empty .)
    AND             reduce using rule 354 (list_index -> empty .)
    OR              reduce using rule 354 (list_index -> empty .)
    COMMA           reduce using rule 354 (list_index -> empty .)
    NEWLINE         reduce using rule 354 (list_index -> empty .)
    RPAREN          reduce using rule 354 (list_index -> empty .)
    SWAP            reduce using rule 354 (list_index -> empty .)
    FUNCTION_NAME   reduce using rule 354 (list_index -> empty .)
    IDENT           reduce using rule 354 (list_index -> empty .)
    DISPLAY         reduce using rule 354 (list_index -> empty .)
    CHECK           reduce using rule 354 (list_index -> empty .)
    FOR             reduce using rule 354 (list_index -> empty .)
    UNTIL           reduce using rule 354 (list_index -> empty .)
    REPEAT          reduce using rule 354 (list_index -> empty .)
    INPUT           reduce using rule 354 (list_index -> empty .)
    INT             reduce using rule 354 (list_index -> empty .)
    FLT             reduce using rule 354 (list_index -> empty .)
    BLN             reduce using rule 354 (list_index -> empty .)
    CHR             reduce using rule 354 (list_index -> empty .)
    STR             reduce using rule 354 (list_index -> empty .)
    REVIVE          reduce using rule 354 (list_index -> empty .)
    RBRACE          reduce using rule 354 (list_index -> empty .)
    SHIFT           reduce using rule 354 (list_index -> empty .)
    OTHERWISE       reduce using rule 354 (list_index -> empty .)
    SEMICOLON       reduce using rule 354 (list_index -> empty .)
    COLON           reduce using rule 354 (list_index -> empty .)
    PLUS_EQ         reduce using rule 354 (list_index -> empty .)
    MINUS_EQ        reduce using rule 354 (list_index -> empty .)
    MUL_EQ          reduce using rule 354 (list_index -> empty .)
    DIV_EQ          reduce using rule 354 (list_index -> empty .)
    MOD_EQ          reduce using rule 354 (list_index -> empty .)


state 110

    (13) list_dec -> LBRACKET RBRACKET . _2d_list
    (14) _2d_list -> . empty
    (15) _2d_list -> . LBRACKET RBRACKET
    (398) empty -> .

    LBRACKET        shift and go to state 157
    COMMA           reduce using rule 398 (empty -> .)
    EQ              reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    _2d_list                       shift and go to state 158
    empty                          shift and go to state 159

state 111

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function . unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 160

state 112

    (6) main_function -> MAIN_CASPER . LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 161


state 113

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN . parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail
    (103) parameters -> . data_type IDENT parameters_tail
    (104) parameters -> . empty
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR
    (398) empty -> .

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14
    RPAREN          reduce using rule 398 (empty -> .)

    parameters                     shift and go to state 162
    data_type                      shift and go to state 163
    empty                          shift and go to state 164

state 114

    (19) global_statement_tail2 -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (398) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 398 (empty -> .)

    global_statement_tail          shift and go to state 165
    empty                          shift and go to state 21

state 115

    (64) factor_tail -> PLUS factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 166
    empty                          shift and go to state 83

state 116

    (65) factor_tail -> MINUS factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 167
    empty                          shift and go to state 83

state 117

    (66) factor_tail -> MULTIPLY factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 168
    empty                          shift and go to state 83

state 118

    (67) factor_tail -> DIVISION factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 169
    empty                          shift and go to state 83

state 119

    (68) factor_tail -> MODULO factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 170
    empty                          shift and go to state 83

state 120

    (69) factor_tail -> EXPONENT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 171
    empty                          shift and go to state 83

state 121

    (70) factor_tail -> GT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 172
    empty                          shift and go to state 83

state 122

    (71) factor_tail -> LT factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 173
    empty                          shift and go to state 83

state 123

    (72) factor_tail -> EQ_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 174
    empty                          shift and go to state 83

state 124

    (73) factor_tail -> GT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 175
    empty                          shift and go to state 83

state 125

    (74) factor_tail -> LT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 176
    empty                          shift and go to state 83

state 126

    (75) factor_tail -> NOT_EQ factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 177
    empty                          shift and go to state 83

state 127

    (76) factor_tail -> AND factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 178
    empty                          shift and go to state 83

state 128

    (77) factor_tail -> OR factor . factor_tail
    (64) factor_tail -> . PLUS factor factor_tail
    (65) factor_tail -> . MINUS factor factor_tail
    (66) factor_tail -> . MULTIPLY factor factor_tail
    (67) factor_tail -> . DIVISION factor factor_tail
    (68) factor_tail -> . MODULO factor factor_tail
    (69) factor_tail -> . EXPONENT factor factor_tail
    (70) factor_tail -> . GT factor factor_tail
    (71) factor_tail -> . LT factor factor_tail
    (72) factor_tail -> . EQ_EQ factor factor_tail
    (73) factor_tail -> . GT_EQ factor factor_tail
    (74) factor_tail -> . LT_EQ factor factor_tail
    (75) factor_tail -> . NOT_EQ factor factor_tail
    (76) factor_tail -> . AND factor factor_tail
    (77) factor_tail -> . OR factor factor_tail
    (78) factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    factor_tail                    shift and go to state 179
    empty                          shift and go to state 83

state 129

    (23) list_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    NEWLINE         reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    SWAP            reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    FUNCTION_NAME   reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    IDENT           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    DISPLAY         reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    CHECK           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    FOR             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    UNTIL           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    REPEAT          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    INPUT           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    INT             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    FLT             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    BLN             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    CHR             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    STR             reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    REVIVE          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    RBRACE          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    SHIFT           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    OTHERWISE       reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)


state 130

    (24) list_element -> literal element_tail .

    RBRACKET        reduce using rule 24 (list_element -> literal element_tail .)
    RPAREN          reduce using rule 24 (list_element -> literal element_tail .)


state 131

    (25) element_tail -> COMMA . list_element
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 180
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 132

    (26) element_tail -> empty .

    RBRACKET        reduce using rule 26 (element_tail -> empty .)
    RPAREN          reduce using rule 26 (element_tail -> empty .)


state 133

    (43) factor_expression_factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 181


state 134

    (37) factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    COMMA           reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    NEWLINE         reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)
    RPAREN          reduce using rule 37 (factor -> LPAREN factor_expression RPAREN .)


state 135

    (38) factor_expression -> factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 38 (factor_expression -> factor_expression_factor factor_expression_tail .)


state 136

    (44) factor_expression_tail -> PLUS . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 182
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 137

    (45) factor_expression_tail -> MINUS . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 183
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 138

    (46) factor_expression_tail -> MULTIPLY . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 184
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 139

    (47) factor_expression_tail -> DIVISION . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 185
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 140

    (48) factor_expression_tail -> MODULO . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 186
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 141

    (49) factor_expression_tail -> EXPONENT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 187
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 142

    (50) factor_expression_tail -> GT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 188
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 143

    (51) factor_expression_tail -> LT . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 189
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 144

    (52) factor_expression_tail -> EQ_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 190
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 145

    (53) factor_expression_tail -> GT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 191
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 146

    (54) factor_expression_tail -> LT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 192
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 147

    (55) factor_expression_tail -> NOT_EQ . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 193
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 148

    (56) factor_expression_tail -> AND . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 194
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 149

    (57) factor_expression_tail -> OR . factor_expression_factor factor_expression_tail
    (39) factor_expression_factor -> . var_call postfix
    (40) factor_expression_factor -> . factor_expression1
    (41) factor_expression_factor -> . TILDE INT_LIT
    (42) factor_expression_factor -> . TILDE FLT_LIT
    (43) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (59) factor_expression1 -> . INT_LIT
    (60) factor_expression1 -> . FLT_LIT
    (61) factor_expression1 -> . DAY
    (62) factor_expression1 -> . NIGHT
    (63) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 101
    LPAREN          shift and go to state 96
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 102
    FLT_LIT         shift and go to state 103
    DAY             shift and go to state 104
    NIGHT           shift and go to state 105
    STR_LIT         shift and go to state 106

    factor_expression_factor       shift and go to state 195
    var_call                       shift and go to state 99
    factor_expression1             shift and go to state 100

state 150

    (58) factor_expression_tail -> empty .

    RPAREN          reduce using rule 58 (factor_expression_tail -> empty .)


state 151

    (39) factor_expression_factor -> var_call postfix .

    PLUS            reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MINUS           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    DIVISION        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    MODULO          reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    EXPONENT        reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    GT              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    LT              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    GT_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    LT_EQ           reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    AND             reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    OR              reduce using rule 39 (factor_expression_factor -> var_call postfix .)
    RPAREN          reduce using rule 39 (factor_expression_factor -> var_call postfix .)


state 152

    (41) factor_expression_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    GT              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    LT              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    AND             reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    OR              reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 41 (factor_expression_factor -> TILDE INT_LIT .)


state 153

    (42) factor_expression_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 42 (factor_expression_factor -> TILDE FLT_LIT .)


state 154

    (353) list_index -> LBRACKET index . RBRACKET list_index2

    RBRACKET        shift and go to state 196


state 155

    (357) index -> INT_LIT .

    RBRACKET        reduce using rule 357 (index -> INT_LIT .)


state 156

    (358) index -> IDENT .

    RBRACKET        reduce using rule 358 (index -> IDENT .)


state 157

    (15) _2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 197


state 158

    (13) list_dec -> LBRACKET RBRACKET _2d_list .

    COMMA           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    EQ              reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    NEWLINE         reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    SWAP            reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    FUNCTION_NAME   reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    IDENT           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    DISPLAY         reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    CHECK           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    FOR             reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    UNTIL           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    REPEAT          reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    INPUT           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    INT             reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    FLT             reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    BLN             reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    CHR             reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    STR             reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    REVIVE          reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    RBRACE          reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    SHIFT           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    OTHERWISE       reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)


state 159

    (14) _2d_list -> empty .

    COMMA           reduce using rule 14 (_2d_list -> empty .)
    EQ              reduce using rule 14 (_2d_list -> empty .)
    NEWLINE         reduce using rule 14 (_2d_list -> empty .)
    SWAP            reduce using rule 14 (_2d_list -> empty .)
    FUNCTION_NAME   reduce using rule 14 (_2d_list -> empty .)
    IDENT           reduce using rule 14 (_2d_list -> empty .)
    DISPLAY         reduce using rule 14 (_2d_list -> empty .)
    CHECK           reduce using rule 14 (_2d_list -> empty .)
    FOR             reduce using rule 14 (_2d_list -> empty .)
    UNTIL           reduce using rule 14 (_2d_list -> empty .)
    REPEAT          reduce using rule 14 (_2d_list -> empty .)
    INPUT           reduce using rule 14 (_2d_list -> empty .)
    INT             reduce using rule 14 (_2d_list -> empty .)
    FLT             reduce using rule 14 (_2d_list -> empty .)
    BLN             reduce using rule 14 (_2d_list -> empty .)
    CHR             reduce using rule 14 (_2d_list -> empty .)
    STR             reduce using rule 14 (_2d_list -> empty .)
    REVIVE          reduce using rule 14 (_2d_list -> empty .)
    RBRACE          reduce using rule 14 (_2d_list -> empty .)
    SHIFT           reduce using rule 14 (_2d_list -> empty .)
    OTHERWISE       reduce using rule 14 (_2d_list -> empty .)


state 160

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline . GHOST

    GHOST           shift and go to state 198


state 161

    (6) main_function -> MAIN_CASPER LPAREN . RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 199


state 162

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters . RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail

    RPAREN          shift and go to state 200


state 163

    (103) parameters -> data_type . IDENT parameters_tail

    IDENT           shift and go to state 201


state 164

    (104) parameters -> empty .

    RPAREN          reduce using rule 104 (parameters -> empty .)


state 165

    (19) global_statement_tail2 -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 19 (global_statement_tail2 -> COMMA IDENT global_statement_tail .)


state 166

    (64) factor_tail -> PLUS factor factor_tail .

    COMMA           reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)
    NEWLINE         reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)
    RPAREN          reduce using rule 64 (factor_tail -> PLUS factor factor_tail .)


state 167

    (65) factor_tail -> MINUS factor factor_tail .

    COMMA           reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)
    NEWLINE         reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)
    RPAREN          reduce using rule 65 (factor_tail -> MINUS factor factor_tail .)


state 168

    (66) factor_tail -> MULTIPLY factor factor_tail .

    COMMA           reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)
    NEWLINE         reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)
    RPAREN          reduce using rule 66 (factor_tail -> MULTIPLY factor factor_tail .)


state 169

    (67) factor_tail -> DIVISION factor factor_tail .

    COMMA           reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)
    NEWLINE         reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)
    RPAREN          reduce using rule 67 (factor_tail -> DIVISION factor factor_tail .)


state 170

    (68) factor_tail -> MODULO factor factor_tail .

    COMMA           reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)
    NEWLINE         reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)
    RPAREN          reduce using rule 68 (factor_tail -> MODULO factor factor_tail .)


state 171

    (69) factor_tail -> EXPONENT factor factor_tail .

    COMMA           reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)
    NEWLINE         reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)
    RPAREN          reduce using rule 69 (factor_tail -> EXPONENT factor factor_tail .)


state 172

    (70) factor_tail -> GT factor factor_tail .

    COMMA           reduce using rule 70 (factor_tail -> GT factor factor_tail .)
    NEWLINE         reduce using rule 70 (factor_tail -> GT factor factor_tail .)
    RPAREN          reduce using rule 70 (factor_tail -> GT factor factor_tail .)


state 173

    (71) factor_tail -> LT factor factor_tail .

    COMMA           reduce using rule 71 (factor_tail -> LT factor factor_tail .)
    NEWLINE         reduce using rule 71 (factor_tail -> LT factor factor_tail .)
    RPAREN          reduce using rule 71 (factor_tail -> LT factor factor_tail .)


state 174

    (72) factor_tail -> EQ_EQ factor factor_tail .

    COMMA           reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)
    NEWLINE         reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)
    RPAREN          reduce using rule 72 (factor_tail -> EQ_EQ factor factor_tail .)


state 175

    (73) factor_tail -> GT_EQ factor factor_tail .

    COMMA           reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)
    RPAREN          reduce using rule 73 (factor_tail -> GT_EQ factor factor_tail .)


state 176

    (74) factor_tail -> LT_EQ factor factor_tail .

    COMMA           reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)
    RPAREN          reduce using rule 74 (factor_tail -> LT_EQ factor factor_tail .)


state 177

    (75) factor_tail -> NOT_EQ factor factor_tail .

    COMMA           reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)
    RPAREN          reduce using rule 75 (factor_tail -> NOT_EQ factor factor_tail .)


state 178

    (76) factor_tail -> AND factor factor_tail .

    COMMA           reduce using rule 76 (factor_tail -> AND factor factor_tail .)
    NEWLINE         reduce using rule 76 (factor_tail -> AND factor factor_tail .)
    RPAREN          reduce using rule 76 (factor_tail -> AND factor factor_tail .)


state 179

    (77) factor_tail -> OR factor factor_tail .

    COMMA           reduce using rule 77 (factor_tail -> OR factor factor_tail .)
    NEWLINE         reduce using rule 77 (factor_tail -> OR factor factor_tail .)
    RPAREN          reduce using rule 77 (factor_tail -> OR factor factor_tail .)


state 180

    (25) element_tail -> COMMA list_element .

    RBRACKET        reduce using rule 25 (element_tail -> COMMA list_element .)
    RPAREN          reduce using rule 25 (element_tail -> COMMA list_element .)


state 181

    (43) factor_expression_factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    RPAREN          reduce using rule 43 (factor_expression_factor -> LPAREN factor_expression RPAREN .)


state 182

    (44) factor_expression_tail -> PLUS factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 202
    empty                          shift and go to state 150

state 183

    (45) factor_expression_tail -> MINUS factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 203
    empty                          shift and go to state 150

state 184

    (46) factor_expression_tail -> MULTIPLY factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 204
    empty                          shift and go to state 150

state 185

    (47) factor_expression_tail -> DIVISION factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 205
    empty                          shift and go to state 150

state 186

    (48) factor_expression_tail -> MODULO factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 206
    empty                          shift and go to state 150

state 187

    (49) factor_expression_tail -> EXPONENT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 207
    empty                          shift and go to state 150

state 188

    (50) factor_expression_tail -> GT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 208
    empty                          shift and go to state 150

state 189

    (51) factor_expression_tail -> LT factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 209
    empty                          shift and go to state 150

state 190

    (52) factor_expression_tail -> EQ_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 210
    empty                          shift and go to state 150

state 191

    (53) factor_expression_tail -> GT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 211
    empty                          shift and go to state 150

state 192

    (54) factor_expression_tail -> LT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 212
    empty                          shift and go to state 150

state 193

    (55) factor_expression_tail -> NOT_EQ factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 213
    empty                          shift and go to state 150

state 194

    (56) factor_expression_tail -> AND factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 214
    empty                          shift and go to state 150

state 195

    (57) factor_expression_tail -> OR factor_expression_factor . factor_expression_tail
    (44) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (45) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (46) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (47) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (48) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (49) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (50) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (51) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (52) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (53) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (54) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (55) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (56) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    MULTIPLY        shift and go to state 138
    DIVISION        shift and go to state 139
    MODULO          shift and go to state 140
    EXPONENT        shift and go to state 141
    GT              shift and go to state 142
    LT              shift and go to state 143
    EQ_EQ           shift and go to state 144
    GT_EQ           shift and go to state 145
    LT_EQ           shift and go to state 146
    NOT_EQ          shift and go to state 147
    AND             shift and go to state 148
    OR              shift and go to state 149
    RPAREN          reduce using rule 398 (empty -> .)

    factor_expression_tail         shift and go to state 215
    empty                          shift and go to state 150

state 196

    (353) list_index -> LBRACKET index RBRACKET . list_index2
    (355) list_index2 -> . LBRACKET index RBRACKET
    (356) list_index2 -> . empty
    (398) empty -> .

    LBRACKET        shift and go to state 216
    PLUS_PLUS       reduce using rule 398 (empty -> .)
    MINUS_MINUS     reduce using rule 398 (empty -> .)
    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SEMICOLON       reduce using rule 398 (empty -> .)
    COLON           reduce using rule 398 (empty -> .)
    PLUS_EQ         reduce using rule 398 (empty -> .)
    MINUS_EQ        reduce using rule 398 (empty -> .)
    MUL_EQ          reduce using rule 398 (empty -> .)
    DIV_EQ          reduce using rule 398 (empty -> .)
    MOD_EQ          reduce using rule 398 (empty -> .)

    list_index2                    shift and go to state 217
    empty                          shift and go to state 218

state 197

    (15) _2d_list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    SWAP            reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    FUNCTION_NAME   reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    IDENT           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    DISPLAY         reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    CHECK           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    FOR             reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    UNTIL           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    REPEAT          reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    INPUT           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    INT             reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    FLT             reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    BLN             reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    CHR             reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    STR             reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    REVIVE          reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    SHIFT           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    OTHERWISE       reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)


state 198

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .

    $end            reduce using rule 1 (program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .)


state 199

    (6) main_function -> MAIN_CASPER LPAREN RPAREN . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 219
    empty                          shift and go to state 17

state 200

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN . LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail

    LBRACE          shift and go to state 220


state 201

    (103) parameters -> data_type IDENT . parameters_tail
    (105) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (106) parameters_tail -> . empty
    (398) empty -> .

    COMMA           shift and go to state 222
    RPAREN          reduce using rule 398 (empty -> .)

    parameters_tail                shift and go to state 221
    empty                          shift and go to state 223

state 202

    (44) factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 44 (factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .)


state 203

    (45) factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 45 (factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .)


state 204

    (46) factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 46 (factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .)


state 205

    (47) factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 47 (factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .)


state 206

    (48) factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 48 (factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .)


state 207

    (49) factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 49 (factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .)


state 208

    (50) factor_expression_tail -> GT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 50 (factor_expression_tail -> GT factor_expression_factor factor_expression_tail .)


state 209

    (51) factor_expression_tail -> LT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 51 (factor_expression_tail -> LT factor_expression_factor factor_expression_tail .)


state 210

    (52) factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 52 (factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .)


state 211

    (53) factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 53 (factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .)


state 212

    (54) factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 54 (factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .)


state 213

    (55) factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 55 (factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .)


state 214

    (56) factor_expression_tail -> AND factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 56 (factor_expression_tail -> AND factor_expression_factor factor_expression_tail .)


state 215

    (57) factor_expression_tail -> OR factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 57 (factor_expression_tail -> OR factor_expression_factor factor_expression_tail .)


state 216

    (355) list_index2 -> LBRACKET . index RBRACKET
    (357) index -> . INT_LIT
    (358) index -> . IDENT

    INT_LIT         shift and go to state 155
    IDENT           shift and go to state 156

    index                          shift and go to state 224

state 217

    (353) list_index -> LBRACKET index RBRACKET list_index2 .

    PLUS_PLUS       reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_MINUS     reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS            reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MULTIPLY        reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIVISION        reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MODULO          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EXPONENT        reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT              reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT              reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EQ_EQ           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT_EQ           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT_EQ           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NOT_EQ          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    AND             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    OR              reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COMMA           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NEWLINE         reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RPAREN          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SWAP            reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    FUNCTION_NAME   reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    IDENT           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DISPLAY         reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    CHECK           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    FOR             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    UNTIL           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    REPEAT          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    INPUT           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    INT             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    FLT             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    BLN             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    CHR             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    STR             reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    REVIVE          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RBRACE          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SHIFT           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    OTHERWISE       reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SEMICOLON       reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COLON           reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS_EQ         reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_EQ        reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MUL_EQ          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIV_EQ          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MOD_EQ          reduce using rule 353 (list_index -> LBRACKET index RBRACKET list_index2 .)


state 218

    (356) list_index2 -> empty .

    PLUS_PLUS       reduce using rule 356 (list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 356 (list_index2 -> empty .)
    PLUS            reduce using rule 356 (list_index2 -> empty .)
    MINUS           reduce using rule 356 (list_index2 -> empty .)
    MULTIPLY        reduce using rule 356 (list_index2 -> empty .)
    DIVISION        reduce using rule 356 (list_index2 -> empty .)
    MODULO          reduce using rule 356 (list_index2 -> empty .)
    EXPONENT        reduce using rule 356 (list_index2 -> empty .)
    GT              reduce using rule 356 (list_index2 -> empty .)
    LT              reduce using rule 356 (list_index2 -> empty .)
    EQ_EQ           reduce using rule 356 (list_index2 -> empty .)
    GT_EQ           reduce using rule 356 (list_index2 -> empty .)
    LT_EQ           reduce using rule 356 (list_index2 -> empty .)
    NOT_EQ          reduce using rule 356 (list_index2 -> empty .)
    AND             reduce using rule 356 (list_index2 -> empty .)
    OR              reduce using rule 356 (list_index2 -> empty .)
    COMMA           reduce using rule 356 (list_index2 -> empty .)
    NEWLINE         reduce using rule 356 (list_index2 -> empty .)
    RPAREN          reduce using rule 356 (list_index2 -> empty .)
    SWAP            reduce using rule 356 (list_index2 -> empty .)
    FUNCTION_NAME   reduce using rule 356 (list_index2 -> empty .)
    IDENT           reduce using rule 356 (list_index2 -> empty .)
    DISPLAY         reduce using rule 356 (list_index2 -> empty .)
    CHECK           reduce using rule 356 (list_index2 -> empty .)
    FOR             reduce using rule 356 (list_index2 -> empty .)
    UNTIL           reduce using rule 356 (list_index2 -> empty .)
    REPEAT          reduce using rule 356 (list_index2 -> empty .)
    INPUT           reduce using rule 356 (list_index2 -> empty .)
    INT             reduce using rule 356 (list_index2 -> empty .)
    FLT             reduce using rule 356 (list_index2 -> empty .)
    BLN             reduce using rule 356 (list_index2 -> empty .)
    CHR             reduce using rule 356 (list_index2 -> empty .)
    STR             reduce using rule 356 (list_index2 -> empty .)
    REVIVE          reduce using rule 356 (list_index2 -> empty .)
    RBRACE          reduce using rule 356 (list_index2 -> empty .)
    SHIFT           reduce using rule 356 (list_index2 -> empty .)
    OTHERWISE       reduce using rule 356 (list_index2 -> empty .)
    SEMICOLON       reduce using rule 356 (list_index2 -> empty .)
    COLON           reduce using rule 356 (list_index2 -> empty .)
    PLUS_EQ         reduce using rule 356 (list_index2 -> empty .)
    MINUS_EQ        reduce using rule 356 (list_index2 -> empty .)
    MUL_EQ          reduce using rule 356 (list_index2 -> empty .)
    DIV_EQ          reduce using rule 356 (list_index2 -> empty .)
    MOD_EQ          reduce using rule 356 (list_index2 -> empty .)


state 219

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 225


state 220

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE . maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 226
    empty                          shift and go to state 17

state 221

    (103) parameters -> data_type IDENT parameters_tail .

    RPAREN          reduce using rule 103 (parameters -> data_type IDENT parameters_tail .)


state 222

    (105) parameters_tail -> COMMA . data_type IDENT parameters_tail
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    data_type                      shift and go to state 227

state 223

    (106) parameters_tail -> empty .

    RPAREN          reduce using rule 106 (parameters_tail -> empty .)


state 224

    (355) list_index2 -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 228


state 225

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 229
    empty                          shift and go to state 17

state 226

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline . statements maybe_newline revive unli_newline RBRACE function_statements_tail
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 230
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 227

    (105) parameters_tail -> COMMA data_type . IDENT parameters_tail

    IDENT           shift and go to state 234


state 228

    (355) list_index2 -> LBRACKET index RBRACKET .

    PLUS_PLUS       reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS            reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MODULO          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    GT              reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    LT              reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    EQ_EQ           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    AND             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    OR              reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    NEWLINE         reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    SWAP            reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    FUNCTION_NAME   reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    IDENT           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    DISPLAY         reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    CHECK           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    FOR             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    UNTIL           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    REPEAT          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    INPUT           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    INT             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    FLT             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    BLN             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    CHR             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    STR             reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    REVIVE          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    RBRACE          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    SHIFT           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    OTHERWISE       reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    COLON           reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS_EQ         reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 355 (list_index2 -> LBRACKET index RBRACKET .)


state 229

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 235
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 230

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements . maybe_newline revive unli_newline RBRACE function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    REVIVE          reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 236
    empty                          shift and go to state 17

state 231

    (142) statements -> empty .
    (152) local_dec -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 142 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 142 (statements -> empty .)
    NEWLINE         reduce using rule 142 (statements -> empty .)
    REVIVE          reduce using rule 142 (statements -> empty .)
    RBRACE          reduce using rule 142 (statements -> empty .)
    SHIFT           reduce using rule 142 (statements -> empty .)
    OTHERWISE       reduce using rule 142 (statements -> empty .)
    SWAP            reduce using rule 152 (local_dec -> empty .)
    FUNCTION_NAME   reduce using rule 152 (local_dec -> empty .)
    IDENT           reduce using rule 152 (local_dec -> empty .)
    DISPLAY         reduce using rule 152 (local_dec -> empty .)
    CHECK           reduce using rule 152 (local_dec -> empty .)
    FOR             reduce using rule 152 (local_dec -> empty .)
    UNTIL           reduce using rule 152 (local_dec -> empty .)
    REPEAT          reduce using rule 152 (local_dec -> empty .)
    INPUT           reduce using rule 152 (local_dec -> empty .)
    INT             reduce using rule 152 (local_dec -> empty .)
    FLT             reduce using rule 152 (local_dec -> empty .)
    BLN             reduce using rule 152 (local_dec -> empty .)
    CHR             reduce using rule 152 (local_dec -> empty .)
    STR             reduce using rule 152 (local_dec -> empty .)

  ! NEWLINE         [ reduce using rule 152 (local_dec -> empty .) ]
  ! REVIVE          [ reduce using rule 152 (local_dec -> empty .) ]
  ! RBRACE          [ reduce using rule 152 (local_dec -> empty .) ]
  ! SHIFT           [ reduce using rule 152 (local_dec -> empty .) ]
  ! OTHERWISE       [ reduce using rule 152 (local_dec -> empty .) ]


state 232

    (143) statements -> local_dec . maybe_newline statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 237
    empty                          shift and go to state 17

state 233

    (151) local_dec -> var_statement . local_dec_tail
    (153) local_dec_tail -> . empty
    (154) local_dec_tail -> . COMMA IDENT local_dec_tail
    (155) local_dec_tail -> . EQ local_value local_dec_tail2
    (398) empty -> .

    COMMA           shift and go to state 240
    EQ              shift and go to state 241
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_dec_tail                 shift and go to state 238
    empty                          shift and go to state 239

state 234

    (105) parameters_tail -> COMMA data_type IDENT . parameters_tail
    (105) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (106) parameters_tail -> . empty
    (398) empty -> .

    COMMA           shift and go to state 222
    RPAREN          reduce using rule 398 (empty -> .)

    parameters_tail                shift and go to state 242
    empty                          shift and go to state 223

state 235

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 243
    empty                          shift and go to state 17

state 236

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline . revive unli_newline RBRACE function_statements_tail
    (107) revive -> . REVIVE revive_value
    (108) revive -> . empty
    (398) empty -> .

    REVIVE          shift and go to state 245
    NEWLINE         reduce using rule 398 (empty -> .)

    revive                         shift and go to state 244
    empty                          shift and go to state 246

state 237

    (143) statements -> local_dec maybe_newline . statements_tail
    (144) statements_tail -> . switch_statement unli_newline statements
    (145) statements_tail -> . loop_statement unli_newline statements
    (146) statements_tail -> . function_call unli_newline statements
    (147) statements_tail -> . assignment_statement unli_newline statements
    (148) statements_tail -> . output_statement unli_newline statements
    (149) statements_tail -> . conditional_statement unli_newline statements
    (150) statements_tail -> . statements
    (222) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
    (259) loop_statement -> . for_loop
    (260) loop_statement -> . until_loop
    (261) loop_statement -> . repeat_until
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (336) assignment_statement -> . IDENT assign_tail
    (333) output_statement -> . DISPLAY value next_val
    (193) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (262) for_loop -> . FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (289) until_loop -> . UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
    (316) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SWAP            shift and go to state 255
    FUNCTION_NAME   shift and go to state 260
    IDENT           shift and go to state 256
    DISPLAY         shift and go to state 262
    CHECK           shift and go to state 263
    FOR             shift and go to state 264
    UNTIL           shift and go to state 265
    REPEAT          shift and go to state 266
    INPUT           shift and go to state 267
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! SWAP            [ reduce using rule 398 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 398 (empty -> .) ]
  ! IDENT           [ reduce using rule 398 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 398 (empty -> .) ]
  ! CHECK           [ reduce using rule 398 (empty -> .) ]
  ! FOR             [ reduce using rule 398 (empty -> .) ]
  ! UNTIL           [ reduce using rule 398 (empty -> .) ]
  ! REPEAT          [ reduce using rule 398 (empty -> .) ]
  ! INPUT           [ reduce using rule 398 (empty -> .) ]
  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    local_dec                      shift and go to state 232
    statements_tail                shift and go to state 247
    switch_statement               shift and go to state 248
    statements                     shift and go to state 249
    loop_statement                 shift and go to state 250
    function_call                  shift and go to state 251
    assignment_statement           shift and go to state 252
    output_statement               shift and go to state 253
    conditional_statement          shift and go to state 254
    for_loop                       shift and go to state 257
    until_loop                     shift and go to state 258
    repeat_until                   shift and go to state 259
    input_statement                shift and go to state 261
    empty                          shift and go to state 231
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 238

    (151) local_dec -> var_statement local_dec_tail .

    NEWLINE         reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    SWAP            reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    FUNCTION_NAME   reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    IDENT           reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    DISPLAY         reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    CHECK           reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    FOR             reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    UNTIL           reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    REPEAT          reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    INPUT           reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    INT             reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    FLT             reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    BLN             reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    CHR             reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    STR             reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    REVIVE          reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    RBRACE          reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    SHIFT           reduce using rule 151 (local_dec -> var_statement local_dec_tail .)
    OTHERWISE       reduce using rule 151 (local_dec -> var_statement local_dec_tail .)


state 239

    (153) local_dec_tail -> empty .

    NEWLINE         reduce using rule 153 (local_dec_tail -> empty .)
    SWAP            reduce using rule 153 (local_dec_tail -> empty .)
    FUNCTION_NAME   reduce using rule 153 (local_dec_tail -> empty .)
    IDENT           reduce using rule 153 (local_dec_tail -> empty .)
    DISPLAY         reduce using rule 153 (local_dec_tail -> empty .)
    CHECK           reduce using rule 153 (local_dec_tail -> empty .)
    FOR             reduce using rule 153 (local_dec_tail -> empty .)
    UNTIL           reduce using rule 153 (local_dec_tail -> empty .)
    REPEAT          reduce using rule 153 (local_dec_tail -> empty .)
    INPUT           reduce using rule 153 (local_dec_tail -> empty .)
    INT             reduce using rule 153 (local_dec_tail -> empty .)
    FLT             reduce using rule 153 (local_dec_tail -> empty .)
    BLN             reduce using rule 153 (local_dec_tail -> empty .)
    CHR             reduce using rule 153 (local_dec_tail -> empty .)
    STR             reduce using rule 153 (local_dec_tail -> empty .)
    REVIVE          reduce using rule 153 (local_dec_tail -> empty .)
    RBRACE          reduce using rule 153 (local_dec_tail -> empty .)
    SHIFT           reduce using rule 153 (local_dec_tail -> empty .)
    OTHERWISE       reduce using rule 153 (local_dec_tail -> empty .)


state 240

    (154) local_dec_tail -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 268


state 241

    (155) local_dec_tail -> EQ . local_value local_dec_tail2
    (158) local_value -> . local_value_value
    (159) local_value -> . list_value
    (160) local_value_value -> . local_type_cast
    (161) local_value_value -> . local_expression
    (162) local_value_value -> . function_call
    (23) list_value -> . LBRACKET list_element RBRACKET
    (189) local_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (190) local_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (191) local_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (192) local_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (163) local_expression -> . local_factor local_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    CONVERT_TO_INT  shift and go to state 275
    CONVERT_TO_FLT  shift and go to state 277
    CONVERT_TO_BLN  shift and go to state 278
    CONVERT_TO_STR  shift and go to state 279
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_value                    shift and go to state 269
    local_value_value              shift and go to state 270
    list_value                     shift and go to state 271
    local_type_cast                shift and go to state 272
    local_expression               shift and go to state 273
    function_call                  shift and go to state 274
    local_factor                   shift and go to state 280
    input_statement                shift and go to state 261
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 242

    (105) parameters_tail -> COMMA data_type IDENT parameters_tail .

    RPAREN          reduce using rule 105 (parameters_tail -> COMMA data_type IDENT parameters_tail .)


state 243

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 289


state 244

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive . unli_newline RBRACE function_statements_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 290

state 245

    (107) revive -> REVIVE . revive_value
    (109) revive_value -> . revive_type_cast
    (110) revive_value -> . revive_expression
    (111) revive_value -> . function_call
    (138) revive_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (139) revive_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (140) revive_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (141) revive_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (112) revive_expression -> . revive_factor revive_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 295
    CONVERT_TO_FLT  shift and go to state 297
    CONVERT_TO_BLN  shift and go to state 298
    CONVERT_TO_STR  shift and go to state 299
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_value                   shift and go to state 291
    revive_type_cast               shift and go to state 292
    revive_expression              shift and go to state 293
    function_call                  shift and go to state 294
    revive_factor                  shift and go to state 300
    input_statement                shift and go to state 261
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 246

    (108) revive -> empty .

    NEWLINE         reduce using rule 108 (revive -> empty .)


state 247

    (143) statements -> local_dec maybe_newline statements_tail .

    NEWLINE         reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    REVIVE          reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    RBRACE          reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    SHIFT           reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)
    OTHERWISE       reduce using rule 143 (statements -> local_dec maybe_newline statements_tail .)


state 248

    (144) statements_tail -> switch_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 309

state 249

    (150) statements_tail -> statements .

    NEWLINE         reduce using rule 150 (statements_tail -> statements .)
    REVIVE          reduce using rule 150 (statements_tail -> statements .)
    RBRACE          reduce using rule 150 (statements_tail -> statements .)
    SHIFT           reduce using rule 150 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 150 (statements_tail -> statements .)


state 250

    (145) statements_tail -> loop_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 310

state 251

    (146) statements_tail -> function_call . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 311

state 252

    (147) statements_tail -> assignment_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 312

state 253

    (148) statements_tail -> output_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 313

state 254

    (149) statements_tail -> conditional_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 314

state 255

    (222) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    LPAREN          shift and go to state 315


state 256

    (336) assignment_statement -> IDENT . assign_tail
    (337) assign_tail -> . DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (338) assign_tail -> . DOT PUSH LPAREN list_element RPAREN
    (339) assign_tail -> . assign_op value
    (340) assign_op -> . compound_op
    (341) assign_op -> . EQ
    (342) compound_op -> . PLUS_EQ
    (343) compound_op -> . MINUS_EQ
    (344) compound_op -> . MUL_EQ
    (345) compound_op -> . DIV_EQ
    (346) compound_op -> . MOD_EQ

    DOT             shift and go to state 317
    EQ              shift and go to state 320
    PLUS_EQ         shift and go to state 321
    MINUS_EQ        shift and go to state 322
    MUL_EQ          shift and go to state 323
    DIV_EQ          shift and go to state 324
    MOD_EQ          shift and go to state 325

    assign_tail                    shift and go to state 316
    assign_op                      shift and go to state 318
    compound_op                    shift and go to state 319

state 257

    (259) loop_statement -> for_loop .

    NEWLINE         reduce using rule 259 (loop_statement -> for_loop .)


state 258

    (260) loop_statement -> until_loop .

    NEWLINE         reduce using rule 260 (loop_statement -> until_loop .)


state 259

    (261) loop_statement -> repeat_until .

    NEWLINE         reduce using rule 261 (loop_statement -> repeat_until .)


state 260

    (325) function_call -> FUNCTION_NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 326


state 261

    (326) function_call -> input_statement .

    NEWLINE         reduce using rule 326 (function_call -> input_statement .)
    COMMA           reduce using rule 326 (function_call -> input_statement .)
    SWAP            reduce using rule 326 (function_call -> input_statement .)
    FUNCTION_NAME   reduce using rule 326 (function_call -> input_statement .)
    IDENT           reduce using rule 326 (function_call -> input_statement .)
    DISPLAY         reduce using rule 326 (function_call -> input_statement .)
    CHECK           reduce using rule 326 (function_call -> input_statement .)
    FOR             reduce using rule 326 (function_call -> input_statement .)
    UNTIL           reduce using rule 326 (function_call -> input_statement .)
    REPEAT          reduce using rule 326 (function_call -> input_statement .)
    INPUT           reduce using rule 326 (function_call -> input_statement .)
    INT             reduce using rule 326 (function_call -> input_statement .)
    FLT             reduce using rule 326 (function_call -> input_statement .)
    BLN             reduce using rule 326 (function_call -> input_statement .)
    CHR             reduce using rule 326 (function_call -> input_statement .)
    STR             reduce using rule 326 (function_call -> input_statement .)
    REVIVE          reduce using rule 326 (function_call -> input_statement .)
    RBRACE          reduce using rule 326 (function_call -> input_statement .)
    SHIFT           reduce using rule 326 (function_call -> input_statement .)
    OTHERWISE       reduce using rule 326 (function_call -> input_statement .)
    COLON           reduce using rule 326 (function_call -> input_statement .)
    RPAREN          reduce using rule 326 (function_call -> input_statement .)


state 262

    (333) output_statement -> DISPLAY . value next_val
    (361) value -> . type_cast
    (362) value -> . value_expression
    (363) value -> . function_call
    (390) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (391) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (392) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (393) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (364) value_expression -> . value_factor value_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 331
    CONVERT_TO_FLT  shift and go to state 333
    CONVERT_TO_BLN  shift and go to state 334
    CONVERT_TO_STR  shift and go to state 335
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value                          shift and go to state 327
    type_cast                      shift and go to state 328
    value_expression               shift and go to state 329
    function_call                  shift and go to state 330
    value_factor                   shift and go to state 336
    input_statement                shift and go to state 261
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 263

    (193) conditional_statement -> CHECK . LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 345


state 264

    (262) for_loop -> FOR . LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 346


state 265

    (289) until_loop -> UNTIL . LPAREN until_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 347


state 266

    (316) repeat_until -> REPEAT . LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN

    LBRACE          shift and go to state 348


state 267

    (397) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 349


state 268

    (154) local_dec_tail -> COMMA IDENT . local_dec_tail
    (153) local_dec_tail -> . empty
    (154) local_dec_tail -> . COMMA IDENT local_dec_tail
    (155) local_dec_tail -> . EQ local_value local_dec_tail2
    (398) empty -> .

    COMMA           shift and go to state 240
    EQ              shift and go to state 241
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_dec_tail                 shift and go to state 350
    empty                          shift and go to state 239

state 269

    (155) local_dec_tail -> EQ local_value . local_dec_tail2
    (156) local_dec_tail2 -> . COMMA IDENT local_dec_tail
    (157) local_dec_tail2 -> . empty
    (398) empty -> .

    COMMA           shift and go to state 352
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_dec_tail2                shift and go to state 351
    empty                          shift and go to state 353

state 270

    (158) local_value -> local_value_value .

    COMMA           reduce using rule 158 (local_value -> local_value_value .)
    NEWLINE         reduce using rule 158 (local_value -> local_value_value .)
    SWAP            reduce using rule 158 (local_value -> local_value_value .)
    FUNCTION_NAME   reduce using rule 158 (local_value -> local_value_value .)
    IDENT           reduce using rule 158 (local_value -> local_value_value .)
    DISPLAY         reduce using rule 158 (local_value -> local_value_value .)
    CHECK           reduce using rule 158 (local_value -> local_value_value .)
    FOR             reduce using rule 158 (local_value -> local_value_value .)
    UNTIL           reduce using rule 158 (local_value -> local_value_value .)
    REPEAT          reduce using rule 158 (local_value -> local_value_value .)
    INPUT           reduce using rule 158 (local_value -> local_value_value .)
    INT             reduce using rule 158 (local_value -> local_value_value .)
    FLT             reduce using rule 158 (local_value -> local_value_value .)
    BLN             reduce using rule 158 (local_value -> local_value_value .)
    CHR             reduce using rule 158 (local_value -> local_value_value .)
    STR             reduce using rule 158 (local_value -> local_value_value .)
    REVIVE          reduce using rule 158 (local_value -> local_value_value .)
    RBRACE          reduce using rule 158 (local_value -> local_value_value .)
    SHIFT           reduce using rule 158 (local_value -> local_value_value .)
    OTHERWISE       reduce using rule 158 (local_value -> local_value_value .)


state 271

    (159) local_value -> list_value .

    COMMA           reduce using rule 159 (local_value -> list_value .)
    NEWLINE         reduce using rule 159 (local_value -> list_value .)
    SWAP            reduce using rule 159 (local_value -> list_value .)
    FUNCTION_NAME   reduce using rule 159 (local_value -> list_value .)
    IDENT           reduce using rule 159 (local_value -> list_value .)
    DISPLAY         reduce using rule 159 (local_value -> list_value .)
    CHECK           reduce using rule 159 (local_value -> list_value .)
    FOR             reduce using rule 159 (local_value -> list_value .)
    UNTIL           reduce using rule 159 (local_value -> list_value .)
    REPEAT          reduce using rule 159 (local_value -> list_value .)
    INPUT           reduce using rule 159 (local_value -> list_value .)
    INT             reduce using rule 159 (local_value -> list_value .)
    FLT             reduce using rule 159 (local_value -> list_value .)
    BLN             reduce using rule 159 (local_value -> list_value .)
    CHR             reduce using rule 159 (local_value -> list_value .)
    STR             reduce using rule 159 (local_value -> list_value .)
    REVIVE          reduce using rule 159 (local_value -> list_value .)
    RBRACE          reduce using rule 159 (local_value -> list_value .)
    SHIFT           reduce using rule 159 (local_value -> list_value .)
    OTHERWISE       reduce using rule 159 (local_value -> list_value .)


state 272

    (160) local_value_value -> local_type_cast .

    COMMA           reduce using rule 160 (local_value_value -> local_type_cast .)
    NEWLINE         reduce using rule 160 (local_value_value -> local_type_cast .)
    SWAP            reduce using rule 160 (local_value_value -> local_type_cast .)
    FUNCTION_NAME   reduce using rule 160 (local_value_value -> local_type_cast .)
    IDENT           reduce using rule 160 (local_value_value -> local_type_cast .)
    DISPLAY         reduce using rule 160 (local_value_value -> local_type_cast .)
    CHECK           reduce using rule 160 (local_value_value -> local_type_cast .)
    FOR             reduce using rule 160 (local_value_value -> local_type_cast .)
    UNTIL           reduce using rule 160 (local_value_value -> local_type_cast .)
    REPEAT          reduce using rule 160 (local_value_value -> local_type_cast .)
    INPUT           reduce using rule 160 (local_value_value -> local_type_cast .)
    INT             reduce using rule 160 (local_value_value -> local_type_cast .)
    FLT             reduce using rule 160 (local_value_value -> local_type_cast .)
    BLN             reduce using rule 160 (local_value_value -> local_type_cast .)
    CHR             reduce using rule 160 (local_value_value -> local_type_cast .)
    STR             reduce using rule 160 (local_value_value -> local_type_cast .)
    REVIVE          reduce using rule 160 (local_value_value -> local_type_cast .)
    RBRACE          reduce using rule 160 (local_value_value -> local_type_cast .)
    SHIFT           reduce using rule 160 (local_value_value -> local_type_cast .)
    OTHERWISE       reduce using rule 160 (local_value_value -> local_type_cast .)


state 273

    (161) local_value_value -> local_expression .

    COMMA           reduce using rule 161 (local_value_value -> local_expression .)
    NEWLINE         reduce using rule 161 (local_value_value -> local_expression .)
    SWAP            reduce using rule 161 (local_value_value -> local_expression .)
    FUNCTION_NAME   reduce using rule 161 (local_value_value -> local_expression .)
    IDENT           reduce using rule 161 (local_value_value -> local_expression .)
    DISPLAY         reduce using rule 161 (local_value_value -> local_expression .)
    CHECK           reduce using rule 161 (local_value_value -> local_expression .)
    FOR             reduce using rule 161 (local_value_value -> local_expression .)
    UNTIL           reduce using rule 161 (local_value_value -> local_expression .)
    REPEAT          reduce using rule 161 (local_value_value -> local_expression .)
    INPUT           reduce using rule 161 (local_value_value -> local_expression .)
    INT             reduce using rule 161 (local_value_value -> local_expression .)
    FLT             reduce using rule 161 (local_value_value -> local_expression .)
    BLN             reduce using rule 161 (local_value_value -> local_expression .)
    CHR             reduce using rule 161 (local_value_value -> local_expression .)
    STR             reduce using rule 161 (local_value_value -> local_expression .)
    REVIVE          reduce using rule 161 (local_value_value -> local_expression .)
    RBRACE          reduce using rule 161 (local_value_value -> local_expression .)
    SHIFT           reduce using rule 161 (local_value_value -> local_expression .)
    OTHERWISE       reduce using rule 161 (local_value_value -> local_expression .)


state 274

    (162) local_value_value -> function_call .

    COMMA           reduce using rule 162 (local_value_value -> function_call .)
    NEWLINE         reduce using rule 162 (local_value_value -> function_call .)
    SWAP            reduce using rule 162 (local_value_value -> function_call .)
    FUNCTION_NAME   reduce using rule 162 (local_value_value -> function_call .)
    IDENT           reduce using rule 162 (local_value_value -> function_call .)
    DISPLAY         reduce using rule 162 (local_value_value -> function_call .)
    CHECK           reduce using rule 162 (local_value_value -> function_call .)
    FOR             reduce using rule 162 (local_value_value -> function_call .)
    UNTIL           reduce using rule 162 (local_value_value -> function_call .)
    REPEAT          reduce using rule 162 (local_value_value -> function_call .)
    INPUT           reduce using rule 162 (local_value_value -> function_call .)
    INT             reduce using rule 162 (local_value_value -> function_call .)
    FLT             reduce using rule 162 (local_value_value -> function_call .)
    BLN             reduce using rule 162 (local_value_value -> function_call .)
    CHR             reduce using rule 162 (local_value_value -> function_call .)
    STR             reduce using rule 162 (local_value_value -> function_call .)
    REVIVE          reduce using rule 162 (local_value_value -> function_call .)
    RBRACE          reduce using rule 162 (local_value_value -> function_call .)
    SHIFT           reduce using rule 162 (local_value_value -> function_call .)
    OTHERWISE       reduce using rule 162 (local_value_value -> function_call .)


state 275

    (189) local_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 354


state 276

    (168) local_factor -> LPAREN . local_factor RPAREN
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 355
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 277

    (190) local_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 356


state 278

    (191) local_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 357


state 279

    (192) local_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 358


state 280

    (163) local_expression -> local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 359
    empty                          shift and go to state 374

state 281

    (164) local_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 375
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 282

    (165) local_factor -> local_factor1 .

    PLUS            reduce using rule 165 (local_factor -> local_factor1 .)
    MINUS           reduce using rule 165 (local_factor -> local_factor1 .)
    MULTIPLY        reduce using rule 165 (local_factor -> local_factor1 .)
    DIVISION        reduce using rule 165 (local_factor -> local_factor1 .)
    MODULO          reduce using rule 165 (local_factor -> local_factor1 .)
    EXPONENT        reduce using rule 165 (local_factor -> local_factor1 .)
    GT              reduce using rule 165 (local_factor -> local_factor1 .)
    LT              reduce using rule 165 (local_factor -> local_factor1 .)
    EQ_EQ           reduce using rule 165 (local_factor -> local_factor1 .)
    GT_EQ           reduce using rule 165 (local_factor -> local_factor1 .)
    LT_EQ           reduce using rule 165 (local_factor -> local_factor1 .)
    NOT_EQ          reduce using rule 165 (local_factor -> local_factor1 .)
    AND             reduce using rule 165 (local_factor -> local_factor1 .)
    OR              reduce using rule 165 (local_factor -> local_factor1 .)
    COMMA           reduce using rule 165 (local_factor -> local_factor1 .)
    NEWLINE         reduce using rule 165 (local_factor -> local_factor1 .)
    SWAP            reduce using rule 165 (local_factor -> local_factor1 .)
    FUNCTION_NAME   reduce using rule 165 (local_factor -> local_factor1 .)
    IDENT           reduce using rule 165 (local_factor -> local_factor1 .)
    DISPLAY         reduce using rule 165 (local_factor -> local_factor1 .)
    CHECK           reduce using rule 165 (local_factor -> local_factor1 .)
    FOR             reduce using rule 165 (local_factor -> local_factor1 .)
    UNTIL           reduce using rule 165 (local_factor -> local_factor1 .)
    REPEAT          reduce using rule 165 (local_factor -> local_factor1 .)
    INPUT           reduce using rule 165 (local_factor -> local_factor1 .)
    INT             reduce using rule 165 (local_factor -> local_factor1 .)
    FLT             reduce using rule 165 (local_factor -> local_factor1 .)
    BLN             reduce using rule 165 (local_factor -> local_factor1 .)
    CHR             reduce using rule 165 (local_factor -> local_factor1 .)
    STR             reduce using rule 165 (local_factor -> local_factor1 .)
    REVIVE          reduce using rule 165 (local_factor -> local_factor1 .)
    RBRACE          reduce using rule 165 (local_factor -> local_factor1 .)
    SHIFT           reduce using rule 165 (local_factor -> local_factor1 .)
    OTHERWISE       reduce using rule 165 (local_factor -> local_factor1 .)
    RPAREN          reduce using rule 165 (local_factor -> local_factor1 .)


state 283

    (166) local_factor -> TILDE . INT_LIT
    (167) local_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 376
    FLT_LIT         shift and go to state 377


state 284

    (184) local_factor1 -> INT_LIT .

    PLUS            reduce using rule 184 (local_factor1 -> INT_LIT .)
    MINUS           reduce using rule 184 (local_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 184 (local_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 184 (local_factor1 -> INT_LIT .)
    MODULO          reduce using rule 184 (local_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 184 (local_factor1 -> INT_LIT .)
    GT              reduce using rule 184 (local_factor1 -> INT_LIT .)
    LT              reduce using rule 184 (local_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 184 (local_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 184 (local_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 184 (local_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 184 (local_factor1 -> INT_LIT .)
    AND             reduce using rule 184 (local_factor1 -> INT_LIT .)
    OR              reduce using rule 184 (local_factor1 -> INT_LIT .)
    COMMA           reduce using rule 184 (local_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 184 (local_factor1 -> INT_LIT .)
    SWAP            reduce using rule 184 (local_factor1 -> INT_LIT .)
    FUNCTION_NAME   reduce using rule 184 (local_factor1 -> INT_LIT .)
    IDENT           reduce using rule 184 (local_factor1 -> INT_LIT .)
    DISPLAY         reduce using rule 184 (local_factor1 -> INT_LIT .)
    CHECK           reduce using rule 184 (local_factor1 -> INT_LIT .)
    FOR             reduce using rule 184 (local_factor1 -> INT_LIT .)
    UNTIL           reduce using rule 184 (local_factor1 -> INT_LIT .)
    REPEAT          reduce using rule 184 (local_factor1 -> INT_LIT .)
    INPUT           reduce using rule 184 (local_factor1 -> INT_LIT .)
    INT             reduce using rule 184 (local_factor1 -> INT_LIT .)
    FLT             reduce using rule 184 (local_factor1 -> INT_LIT .)
    BLN             reduce using rule 184 (local_factor1 -> INT_LIT .)
    CHR             reduce using rule 184 (local_factor1 -> INT_LIT .)
    STR             reduce using rule 184 (local_factor1 -> INT_LIT .)
    REVIVE          reduce using rule 184 (local_factor1 -> INT_LIT .)
    RBRACE          reduce using rule 184 (local_factor1 -> INT_LIT .)
    SHIFT           reduce using rule 184 (local_factor1 -> INT_LIT .)
    OTHERWISE       reduce using rule 184 (local_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 184 (local_factor1 -> INT_LIT .)


state 285

    (185) local_factor1 -> FLT_LIT .

    PLUS            reduce using rule 185 (local_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 185 (local_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 185 (local_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 185 (local_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 185 (local_factor1 -> FLT_LIT .)
    GT              reduce using rule 185 (local_factor1 -> FLT_LIT .)
    LT              reduce using rule 185 (local_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 185 (local_factor1 -> FLT_LIT .)
    AND             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    OR              reduce using rule 185 (local_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 185 (local_factor1 -> FLT_LIT .)
    SWAP            reduce using rule 185 (local_factor1 -> FLT_LIT .)
    FUNCTION_NAME   reduce using rule 185 (local_factor1 -> FLT_LIT .)
    IDENT           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    DISPLAY         reduce using rule 185 (local_factor1 -> FLT_LIT .)
    CHECK           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    FOR             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    UNTIL           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    REPEAT          reduce using rule 185 (local_factor1 -> FLT_LIT .)
    INPUT           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    INT             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    FLT             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    BLN             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    CHR             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    STR             reduce using rule 185 (local_factor1 -> FLT_LIT .)
    REVIVE          reduce using rule 185 (local_factor1 -> FLT_LIT .)
    RBRACE          reduce using rule 185 (local_factor1 -> FLT_LIT .)
    SHIFT           reduce using rule 185 (local_factor1 -> FLT_LIT .)
    OTHERWISE       reduce using rule 185 (local_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 185 (local_factor1 -> FLT_LIT .)


state 286

    (186) local_factor1 -> DAY .

    PLUS            reduce using rule 186 (local_factor1 -> DAY .)
    MINUS           reduce using rule 186 (local_factor1 -> DAY .)
    MULTIPLY        reduce using rule 186 (local_factor1 -> DAY .)
    DIVISION        reduce using rule 186 (local_factor1 -> DAY .)
    MODULO          reduce using rule 186 (local_factor1 -> DAY .)
    EXPONENT        reduce using rule 186 (local_factor1 -> DAY .)
    GT              reduce using rule 186 (local_factor1 -> DAY .)
    LT              reduce using rule 186 (local_factor1 -> DAY .)
    EQ_EQ           reduce using rule 186 (local_factor1 -> DAY .)
    GT_EQ           reduce using rule 186 (local_factor1 -> DAY .)
    LT_EQ           reduce using rule 186 (local_factor1 -> DAY .)
    NOT_EQ          reduce using rule 186 (local_factor1 -> DAY .)
    AND             reduce using rule 186 (local_factor1 -> DAY .)
    OR              reduce using rule 186 (local_factor1 -> DAY .)
    COMMA           reduce using rule 186 (local_factor1 -> DAY .)
    NEWLINE         reduce using rule 186 (local_factor1 -> DAY .)
    SWAP            reduce using rule 186 (local_factor1 -> DAY .)
    FUNCTION_NAME   reduce using rule 186 (local_factor1 -> DAY .)
    IDENT           reduce using rule 186 (local_factor1 -> DAY .)
    DISPLAY         reduce using rule 186 (local_factor1 -> DAY .)
    CHECK           reduce using rule 186 (local_factor1 -> DAY .)
    FOR             reduce using rule 186 (local_factor1 -> DAY .)
    UNTIL           reduce using rule 186 (local_factor1 -> DAY .)
    REPEAT          reduce using rule 186 (local_factor1 -> DAY .)
    INPUT           reduce using rule 186 (local_factor1 -> DAY .)
    INT             reduce using rule 186 (local_factor1 -> DAY .)
    FLT             reduce using rule 186 (local_factor1 -> DAY .)
    BLN             reduce using rule 186 (local_factor1 -> DAY .)
    CHR             reduce using rule 186 (local_factor1 -> DAY .)
    STR             reduce using rule 186 (local_factor1 -> DAY .)
    REVIVE          reduce using rule 186 (local_factor1 -> DAY .)
    RBRACE          reduce using rule 186 (local_factor1 -> DAY .)
    SHIFT           reduce using rule 186 (local_factor1 -> DAY .)
    OTHERWISE       reduce using rule 186 (local_factor1 -> DAY .)
    RPAREN          reduce using rule 186 (local_factor1 -> DAY .)


state 287

    (187) local_factor1 -> NIGHT .

    PLUS            reduce using rule 187 (local_factor1 -> NIGHT .)
    MINUS           reduce using rule 187 (local_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 187 (local_factor1 -> NIGHT .)
    DIVISION        reduce using rule 187 (local_factor1 -> NIGHT .)
    MODULO          reduce using rule 187 (local_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 187 (local_factor1 -> NIGHT .)
    GT              reduce using rule 187 (local_factor1 -> NIGHT .)
    LT              reduce using rule 187 (local_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 187 (local_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 187 (local_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 187 (local_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 187 (local_factor1 -> NIGHT .)
    AND             reduce using rule 187 (local_factor1 -> NIGHT .)
    OR              reduce using rule 187 (local_factor1 -> NIGHT .)
    COMMA           reduce using rule 187 (local_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 187 (local_factor1 -> NIGHT .)
    SWAP            reduce using rule 187 (local_factor1 -> NIGHT .)
    FUNCTION_NAME   reduce using rule 187 (local_factor1 -> NIGHT .)
    IDENT           reduce using rule 187 (local_factor1 -> NIGHT .)
    DISPLAY         reduce using rule 187 (local_factor1 -> NIGHT .)
    CHECK           reduce using rule 187 (local_factor1 -> NIGHT .)
    FOR             reduce using rule 187 (local_factor1 -> NIGHT .)
    UNTIL           reduce using rule 187 (local_factor1 -> NIGHT .)
    REPEAT          reduce using rule 187 (local_factor1 -> NIGHT .)
    INPUT           reduce using rule 187 (local_factor1 -> NIGHT .)
    INT             reduce using rule 187 (local_factor1 -> NIGHT .)
    FLT             reduce using rule 187 (local_factor1 -> NIGHT .)
    BLN             reduce using rule 187 (local_factor1 -> NIGHT .)
    CHR             reduce using rule 187 (local_factor1 -> NIGHT .)
    STR             reduce using rule 187 (local_factor1 -> NIGHT .)
    REVIVE          reduce using rule 187 (local_factor1 -> NIGHT .)
    RBRACE          reduce using rule 187 (local_factor1 -> NIGHT .)
    SHIFT           reduce using rule 187 (local_factor1 -> NIGHT .)
    OTHERWISE       reduce using rule 187 (local_factor1 -> NIGHT .)
    RPAREN          reduce using rule 187 (local_factor1 -> NIGHT .)


state 288

    (188) local_factor1 -> STR_LIT .

    PLUS            reduce using rule 188 (local_factor1 -> STR_LIT .)
    MINUS           reduce using rule 188 (local_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 188 (local_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 188 (local_factor1 -> STR_LIT .)
    MODULO          reduce using rule 188 (local_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 188 (local_factor1 -> STR_LIT .)
    GT              reduce using rule 188 (local_factor1 -> STR_LIT .)
    LT              reduce using rule 188 (local_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 188 (local_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 188 (local_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 188 (local_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 188 (local_factor1 -> STR_LIT .)
    AND             reduce using rule 188 (local_factor1 -> STR_LIT .)
    OR              reduce using rule 188 (local_factor1 -> STR_LIT .)
    COMMA           reduce using rule 188 (local_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 188 (local_factor1 -> STR_LIT .)
    SWAP            reduce using rule 188 (local_factor1 -> STR_LIT .)
    FUNCTION_NAME   reduce using rule 188 (local_factor1 -> STR_LIT .)
    IDENT           reduce using rule 188 (local_factor1 -> STR_LIT .)
    DISPLAY         reduce using rule 188 (local_factor1 -> STR_LIT .)
    CHECK           reduce using rule 188 (local_factor1 -> STR_LIT .)
    FOR             reduce using rule 188 (local_factor1 -> STR_LIT .)
    UNTIL           reduce using rule 188 (local_factor1 -> STR_LIT .)
    REPEAT          reduce using rule 188 (local_factor1 -> STR_LIT .)
    INPUT           reduce using rule 188 (local_factor1 -> STR_LIT .)
    INT             reduce using rule 188 (local_factor1 -> STR_LIT .)
    FLT             reduce using rule 188 (local_factor1 -> STR_LIT .)
    BLN             reduce using rule 188 (local_factor1 -> STR_LIT .)
    CHR             reduce using rule 188 (local_factor1 -> STR_LIT .)
    STR             reduce using rule 188 (local_factor1 -> STR_LIT .)
    REVIVE          reduce using rule 188 (local_factor1 -> STR_LIT .)
    RBRACE          reduce using rule 188 (local_factor1 -> STR_LIT .)
    SHIFT           reduce using rule 188 (local_factor1 -> STR_LIT .)
    OTHERWISE       reduce using rule 188 (local_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 188 (local_factor1 -> STR_LIT .)


state 289

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 6 (main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)


state 290

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline . RBRACE function_statements_tail

    RBRACE          shift and go to state 378


state 291

    (107) revive -> REVIVE revive_value .

    NEWLINE         reduce using rule 107 (revive -> REVIVE revive_value .)


state 292

    (109) revive_value -> revive_type_cast .

    NEWLINE         reduce using rule 109 (revive_value -> revive_type_cast .)


state 293

    (110) revive_value -> revive_expression .

    NEWLINE         reduce using rule 110 (revive_value -> revive_expression .)


state 294

    (111) revive_value -> function_call .

    NEWLINE         reduce using rule 111 (revive_value -> function_call .)


state 295

    (138) revive_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 379


state 296

    (117) revive_factor -> LPAREN . revive_factor RPAREN
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 380
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 297

    (139) revive_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 381


state 298

    (140) revive_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 382


state 299

    (141) revive_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 383


state 300

    (112) revive_expression -> revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 384
    empty                          shift and go to state 399

state 301

    (113) revive_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 400
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 302

    (114) revive_factor -> revive_factor1 .

    PLUS            reduce using rule 114 (revive_factor -> revive_factor1 .)
    MINUS           reduce using rule 114 (revive_factor -> revive_factor1 .)
    MULTIPLY        reduce using rule 114 (revive_factor -> revive_factor1 .)
    DIVISION        reduce using rule 114 (revive_factor -> revive_factor1 .)
    MODULO          reduce using rule 114 (revive_factor -> revive_factor1 .)
    EXPONENT        reduce using rule 114 (revive_factor -> revive_factor1 .)
    GT              reduce using rule 114 (revive_factor -> revive_factor1 .)
    LT              reduce using rule 114 (revive_factor -> revive_factor1 .)
    EQ_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    GT_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    LT_EQ           reduce using rule 114 (revive_factor -> revive_factor1 .)
    NOT_EQ          reduce using rule 114 (revive_factor -> revive_factor1 .)
    AND             reduce using rule 114 (revive_factor -> revive_factor1 .)
    OR              reduce using rule 114 (revive_factor -> revive_factor1 .)
    NEWLINE         reduce using rule 114 (revive_factor -> revive_factor1 .)
    RPAREN          reduce using rule 114 (revive_factor -> revive_factor1 .)


state 303

    (115) revive_factor -> TILDE . INT_LIT
    (116) revive_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 401
    FLT_LIT         shift and go to state 402


state 304

    (133) revive_factor1 -> INT_LIT .

    PLUS            reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MINUS           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    MODULO          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 133 (revive_factor1 -> INT_LIT .)
    GT              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    LT              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 133 (revive_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 133 (revive_factor1 -> INT_LIT .)
    AND             reduce using rule 133 (revive_factor1 -> INT_LIT .)
    OR              reduce using rule 133 (revive_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 133 (revive_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 133 (revive_factor1 -> INT_LIT .)


state 305

    (134) revive_factor1 -> FLT_LIT .

    PLUS            reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    GT              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    LT              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    AND             reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    OR              reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 134 (revive_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 134 (revive_factor1 -> FLT_LIT .)


state 306

    (135) revive_factor1 -> DAY .

    PLUS            reduce using rule 135 (revive_factor1 -> DAY .)
    MINUS           reduce using rule 135 (revive_factor1 -> DAY .)
    MULTIPLY        reduce using rule 135 (revive_factor1 -> DAY .)
    DIVISION        reduce using rule 135 (revive_factor1 -> DAY .)
    MODULO          reduce using rule 135 (revive_factor1 -> DAY .)
    EXPONENT        reduce using rule 135 (revive_factor1 -> DAY .)
    GT              reduce using rule 135 (revive_factor1 -> DAY .)
    LT              reduce using rule 135 (revive_factor1 -> DAY .)
    EQ_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    GT_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    LT_EQ           reduce using rule 135 (revive_factor1 -> DAY .)
    NOT_EQ          reduce using rule 135 (revive_factor1 -> DAY .)
    AND             reduce using rule 135 (revive_factor1 -> DAY .)
    OR              reduce using rule 135 (revive_factor1 -> DAY .)
    NEWLINE         reduce using rule 135 (revive_factor1 -> DAY .)
    RPAREN          reduce using rule 135 (revive_factor1 -> DAY .)


state 307

    (136) revive_factor1 -> NIGHT .

    PLUS            reduce using rule 136 (revive_factor1 -> NIGHT .)
    MINUS           reduce using rule 136 (revive_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 136 (revive_factor1 -> NIGHT .)
    DIVISION        reduce using rule 136 (revive_factor1 -> NIGHT .)
    MODULO          reduce using rule 136 (revive_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 136 (revive_factor1 -> NIGHT .)
    GT              reduce using rule 136 (revive_factor1 -> NIGHT .)
    LT              reduce using rule 136 (revive_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 136 (revive_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 136 (revive_factor1 -> NIGHT .)
    AND             reduce using rule 136 (revive_factor1 -> NIGHT .)
    OR              reduce using rule 136 (revive_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 136 (revive_factor1 -> NIGHT .)
    RPAREN          reduce using rule 136 (revive_factor1 -> NIGHT .)


state 308

    (137) revive_factor1 -> STR_LIT .

    PLUS            reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MINUS           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    MODULO          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 137 (revive_factor1 -> STR_LIT .)
    GT              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    LT              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 137 (revive_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 137 (revive_factor1 -> STR_LIT .)
    AND             reduce using rule 137 (revive_factor1 -> STR_LIT .)
    OR              reduce using rule 137 (revive_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 137 (revive_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 137 (revive_factor1 -> STR_LIT .)


state 309

    (144) statements_tail -> switch_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 403
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 310

    (145) statements_tail -> loop_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 404
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 311

    (146) statements_tail -> function_call unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 405
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 312

    (147) statements_tail -> assignment_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 406
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 313

    (148) statements_tail -> output_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 407
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 314

    (149) statements_tail -> conditional_statement unli_newline . statements
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 408
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 315

    (222) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    IDENT           shift and go to state 409


state 316

    (336) assignment_statement -> IDENT assign_tail .

    NEWLINE         reduce using rule 336 (assignment_statement -> IDENT assign_tail .)


state 317

    (337) assign_tail -> DOT . SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (338) assign_tail -> DOT . PUSH LPAREN list_element RPAREN

    SPLICE          shift and go to state 410
    PUSH            shift and go to state 411


state 318

    (339) assign_tail -> assign_op . value
    (361) value -> . type_cast
    (362) value -> . value_expression
    (363) value -> . function_call
    (390) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (391) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (392) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (393) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (364) value_expression -> . value_factor value_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 331
    CONVERT_TO_FLT  shift and go to state 333
    CONVERT_TO_BLN  shift and go to state 334
    CONVERT_TO_STR  shift and go to state 335
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value                          shift and go to state 412
    type_cast                      shift and go to state 328
    value_expression               shift and go to state 329
    function_call                  shift and go to state 330
    value_factor                   shift and go to state 336
    input_statement                shift and go to state 261
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 319

    (340) assign_op -> compound_op .

    CONVERT_TO_INT  reduce using rule 340 (assign_op -> compound_op .)
    CONVERT_TO_FLT  reduce using rule 340 (assign_op -> compound_op .)
    CONVERT_TO_BLN  reduce using rule 340 (assign_op -> compound_op .)
    CONVERT_TO_STR  reduce using rule 340 (assign_op -> compound_op .)
    FUNCTION_NAME   reduce using rule 340 (assign_op -> compound_op .)
    TILDE           reduce using rule 340 (assign_op -> compound_op .)
    LPAREN          reduce using rule 340 (assign_op -> compound_op .)
    INPUT           reduce using rule 340 (assign_op -> compound_op .)
    IDENT           reduce using rule 340 (assign_op -> compound_op .)
    INT_LIT         reduce using rule 340 (assign_op -> compound_op .)
    FLT_LIT         reduce using rule 340 (assign_op -> compound_op .)
    DAY             reduce using rule 340 (assign_op -> compound_op .)
    NIGHT           reduce using rule 340 (assign_op -> compound_op .)
    STR_LIT         reduce using rule 340 (assign_op -> compound_op .)


state 320

    (341) assign_op -> EQ .

    CONVERT_TO_INT  reduce using rule 341 (assign_op -> EQ .)
    CONVERT_TO_FLT  reduce using rule 341 (assign_op -> EQ .)
    CONVERT_TO_BLN  reduce using rule 341 (assign_op -> EQ .)
    CONVERT_TO_STR  reduce using rule 341 (assign_op -> EQ .)
    FUNCTION_NAME   reduce using rule 341 (assign_op -> EQ .)
    TILDE           reduce using rule 341 (assign_op -> EQ .)
    LPAREN          reduce using rule 341 (assign_op -> EQ .)
    INPUT           reduce using rule 341 (assign_op -> EQ .)
    IDENT           reduce using rule 341 (assign_op -> EQ .)
    INT_LIT         reduce using rule 341 (assign_op -> EQ .)
    FLT_LIT         reduce using rule 341 (assign_op -> EQ .)
    DAY             reduce using rule 341 (assign_op -> EQ .)
    NIGHT           reduce using rule 341 (assign_op -> EQ .)
    STR_LIT         reduce using rule 341 (assign_op -> EQ .)


state 321

    (342) compound_op -> PLUS_EQ .

    CONVERT_TO_INT  reduce using rule 342 (compound_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 342 (compound_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 342 (compound_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 342 (compound_op -> PLUS_EQ .)
    FUNCTION_NAME   reduce using rule 342 (compound_op -> PLUS_EQ .)
    TILDE           reduce using rule 342 (compound_op -> PLUS_EQ .)
    LPAREN          reduce using rule 342 (compound_op -> PLUS_EQ .)
    INPUT           reduce using rule 342 (compound_op -> PLUS_EQ .)
    IDENT           reduce using rule 342 (compound_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 342 (compound_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 342 (compound_op -> PLUS_EQ .)
    DAY             reduce using rule 342 (compound_op -> PLUS_EQ .)
    NIGHT           reduce using rule 342 (compound_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 342 (compound_op -> PLUS_EQ .)


state 322

    (343) compound_op -> MINUS_EQ .

    CONVERT_TO_INT  reduce using rule 343 (compound_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 343 (compound_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 343 (compound_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 343 (compound_op -> MINUS_EQ .)
    FUNCTION_NAME   reduce using rule 343 (compound_op -> MINUS_EQ .)
    TILDE           reduce using rule 343 (compound_op -> MINUS_EQ .)
    LPAREN          reduce using rule 343 (compound_op -> MINUS_EQ .)
    INPUT           reduce using rule 343 (compound_op -> MINUS_EQ .)
    IDENT           reduce using rule 343 (compound_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 343 (compound_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 343 (compound_op -> MINUS_EQ .)
    DAY             reduce using rule 343 (compound_op -> MINUS_EQ .)
    NIGHT           reduce using rule 343 (compound_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 343 (compound_op -> MINUS_EQ .)


state 323

    (344) compound_op -> MUL_EQ .

    CONVERT_TO_INT  reduce using rule 344 (compound_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 344 (compound_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 344 (compound_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 344 (compound_op -> MUL_EQ .)
    FUNCTION_NAME   reduce using rule 344 (compound_op -> MUL_EQ .)
    TILDE           reduce using rule 344 (compound_op -> MUL_EQ .)
    LPAREN          reduce using rule 344 (compound_op -> MUL_EQ .)
    INPUT           reduce using rule 344 (compound_op -> MUL_EQ .)
    IDENT           reduce using rule 344 (compound_op -> MUL_EQ .)
    INT_LIT         reduce using rule 344 (compound_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 344 (compound_op -> MUL_EQ .)
    DAY             reduce using rule 344 (compound_op -> MUL_EQ .)
    NIGHT           reduce using rule 344 (compound_op -> MUL_EQ .)
    STR_LIT         reduce using rule 344 (compound_op -> MUL_EQ .)


state 324

    (345) compound_op -> DIV_EQ .

    CONVERT_TO_INT  reduce using rule 345 (compound_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 345 (compound_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 345 (compound_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 345 (compound_op -> DIV_EQ .)
    FUNCTION_NAME   reduce using rule 345 (compound_op -> DIV_EQ .)
    TILDE           reduce using rule 345 (compound_op -> DIV_EQ .)
    LPAREN          reduce using rule 345 (compound_op -> DIV_EQ .)
    INPUT           reduce using rule 345 (compound_op -> DIV_EQ .)
    IDENT           reduce using rule 345 (compound_op -> DIV_EQ .)
    INT_LIT         reduce using rule 345 (compound_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 345 (compound_op -> DIV_EQ .)
    DAY             reduce using rule 345 (compound_op -> DIV_EQ .)
    NIGHT           reduce using rule 345 (compound_op -> DIV_EQ .)
    STR_LIT         reduce using rule 345 (compound_op -> DIV_EQ .)


state 325

    (346) compound_op -> MOD_EQ .

    CONVERT_TO_INT  reduce using rule 346 (compound_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 346 (compound_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 346 (compound_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 346 (compound_op -> MOD_EQ .)
    FUNCTION_NAME   reduce using rule 346 (compound_op -> MOD_EQ .)
    TILDE           reduce using rule 346 (compound_op -> MOD_EQ .)
    LPAREN          reduce using rule 346 (compound_op -> MOD_EQ .)
    INPUT           reduce using rule 346 (compound_op -> MOD_EQ .)
    IDENT           reduce using rule 346 (compound_op -> MOD_EQ .)
    INT_LIT         reduce using rule 346 (compound_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 346 (compound_op -> MOD_EQ .)
    DAY             reduce using rule 346 (compound_op -> MOD_EQ .)
    NIGHT           reduce using rule 346 (compound_op -> MOD_EQ .)
    STR_LIT         reduce using rule 346 (compound_op -> MOD_EQ .)


state 326

    (325) function_call -> FUNCTION_NAME LPAREN . arguments RPAREN
    (327) arguments -> . empty
    (328) arguments -> . arg_value arg_tail
    (398) empty -> .
    (331) arg_value -> . literal
    (332) arg_value -> . var_call
    (79) literal -> . literal1
    (80) literal -> . literal2
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 398 (empty -> .)
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    arguments                      shift and go to state 413
    empty                          shift and go to state 414
    arg_value                      shift and go to state 415
    literal                        shift and go to state 416
    var_call                       shift and go to state 417
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 327

    (333) output_statement -> DISPLAY value . next_val
    (334) next_val -> . COMMA value next_val
    (335) next_val -> . empty
    (398) empty -> .

    COMMA           shift and go to state 419
    NEWLINE         reduce using rule 398 (empty -> .)

    next_val                       shift and go to state 418
    empty                          shift and go to state 420

state 328

    (361) value -> type_cast .

    COMMA           reduce using rule 361 (value -> type_cast .)
    NEWLINE         reduce using rule 361 (value -> type_cast .)
    RPAREN          reduce using rule 361 (value -> type_cast .)


state 329

    (362) value -> value_expression .

    COMMA           reduce using rule 362 (value -> value_expression .)
    NEWLINE         reduce using rule 362 (value -> value_expression .)
    RPAREN          reduce using rule 362 (value -> value_expression .)


state 330

    (363) value -> function_call .

    COMMA           reduce using rule 363 (value -> function_call .)
    NEWLINE         reduce using rule 363 (value -> function_call .)
    RPAREN          reduce using rule 363 (value -> function_call .)


state 331

    (390) type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 421


state 332

    (369) value_factor -> LPAREN . value_factor RPAREN
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 422
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 333

    (391) type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 423


state 334

    (392) type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 424


state 335

    (393) type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 425


state 336

    (364) value_expression -> value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 426
    empty                          shift and go to state 441

state 337

    (365) value_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 442
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 338

    (366) value_factor -> value_factor1 .

    PLUS            reduce using rule 366 (value_factor -> value_factor1 .)
    MINUS           reduce using rule 366 (value_factor -> value_factor1 .)
    MULTIPLY        reduce using rule 366 (value_factor -> value_factor1 .)
    DIVISION        reduce using rule 366 (value_factor -> value_factor1 .)
    MODULO          reduce using rule 366 (value_factor -> value_factor1 .)
    EXPONENT        reduce using rule 366 (value_factor -> value_factor1 .)
    GT              reduce using rule 366 (value_factor -> value_factor1 .)
    LT              reduce using rule 366 (value_factor -> value_factor1 .)
    EQ_EQ           reduce using rule 366 (value_factor -> value_factor1 .)
    GT_EQ           reduce using rule 366 (value_factor -> value_factor1 .)
    LT_EQ           reduce using rule 366 (value_factor -> value_factor1 .)
    NOT_EQ          reduce using rule 366 (value_factor -> value_factor1 .)
    AND             reduce using rule 366 (value_factor -> value_factor1 .)
    OR              reduce using rule 366 (value_factor -> value_factor1 .)
    COMMA           reduce using rule 366 (value_factor -> value_factor1 .)
    NEWLINE         reduce using rule 366 (value_factor -> value_factor1 .)
    RPAREN          reduce using rule 366 (value_factor -> value_factor1 .)


state 339

    (367) value_factor -> TILDE . INT_LIT
    (368) value_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 443
    FLT_LIT         shift and go to state 444


state 340

    (385) value_factor1 -> INT_LIT .

    PLUS            reduce using rule 385 (value_factor1 -> INT_LIT .)
    MINUS           reduce using rule 385 (value_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 385 (value_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 385 (value_factor1 -> INT_LIT .)
    MODULO          reduce using rule 385 (value_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 385 (value_factor1 -> INT_LIT .)
    GT              reduce using rule 385 (value_factor1 -> INT_LIT .)
    LT              reduce using rule 385 (value_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 385 (value_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 385 (value_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 385 (value_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 385 (value_factor1 -> INT_LIT .)
    AND             reduce using rule 385 (value_factor1 -> INT_LIT .)
    OR              reduce using rule 385 (value_factor1 -> INT_LIT .)
    COMMA           reduce using rule 385 (value_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 385 (value_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 385 (value_factor1 -> INT_LIT .)


state 341

    (386) value_factor1 -> FLT_LIT .

    PLUS            reduce using rule 386 (value_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 386 (value_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 386 (value_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 386 (value_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 386 (value_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 386 (value_factor1 -> FLT_LIT .)
    GT              reduce using rule 386 (value_factor1 -> FLT_LIT .)
    LT              reduce using rule 386 (value_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 386 (value_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 386 (value_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 386 (value_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 386 (value_factor1 -> FLT_LIT .)
    AND             reduce using rule 386 (value_factor1 -> FLT_LIT .)
    OR              reduce using rule 386 (value_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 386 (value_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 386 (value_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 386 (value_factor1 -> FLT_LIT .)


state 342

    (387) value_factor1 -> DAY .

    PLUS            reduce using rule 387 (value_factor1 -> DAY .)
    MINUS           reduce using rule 387 (value_factor1 -> DAY .)
    MULTIPLY        reduce using rule 387 (value_factor1 -> DAY .)
    DIVISION        reduce using rule 387 (value_factor1 -> DAY .)
    MODULO          reduce using rule 387 (value_factor1 -> DAY .)
    EXPONENT        reduce using rule 387 (value_factor1 -> DAY .)
    GT              reduce using rule 387 (value_factor1 -> DAY .)
    LT              reduce using rule 387 (value_factor1 -> DAY .)
    EQ_EQ           reduce using rule 387 (value_factor1 -> DAY .)
    GT_EQ           reduce using rule 387 (value_factor1 -> DAY .)
    LT_EQ           reduce using rule 387 (value_factor1 -> DAY .)
    NOT_EQ          reduce using rule 387 (value_factor1 -> DAY .)
    AND             reduce using rule 387 (value_factor1 -> DAY .)
    OR              reduce using rule 387 (value_factor1 -> DAY .)
    COMMA           reduce using rule 387 (value_factor1 -> DAY .)
    NEWLINE         reduce using rule 387 (value_factor1 -> DAY .)
    RPAREN          reduce using rule 387 (value_factor1 -> DAY .)


state 343

    (388) value_factor1 -> NIGHT .

    PLUS            reduce using rule 388 (value_factor1 -> NIGHT .)
    MINUS           reduce using rule 388 (value_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 388 (value_factor1 -> NIGHT .)
    DIVISION        reduce using rule 388 (value_factor1 -> NIGHT .)
    MODULO          reduce using rule 388 (value_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 388 (value_factor1 -> NIGHT .)
    GT              reduce using rule 388 (value_factor1 -> NIGHT .)
    LT              reduce using rule 388 (value_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 388 (value_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 388 (value_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 388 (value_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 388 (value_factor1 -> NIGHT .)
    AND             reduce using rule 388 (value_factor1 -> NIGHT .)
    OR              reduce using rule 388 (value_factor1 -> NIGHT .)
    COMMA           reduce using rule 388 (value_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 388 (value_factor1 -> NIGHT .)
    RPAREN          reduce using rule 388 (value_factor1 -> NIGHT .)


state 344

    (389) value_factor1 -> STR_LIT .

    PLUS            reduce using rule 389 (value_factor1 -> STR_LIT .)
    MINUS           reduce using rule 389 (value_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 389 (value_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 389 (value_factor1 -> STR_LIT .)
    MODULO          reduce using rule 389 (value_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 389 (value_factor1 -> STR_LIT .)
    GT              reduce using rule 389 (value_factor1 -> STR_LIT .)
    LT              reduce using rule 389 (value_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 389 (value_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 389 (value_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 389 (value_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 389 (value_factor1 -> STR_LIT .)
    AND             reduce using rule 389 (value_factor1 -> STR_LIT .)
    OR              reduce using rule 389 (value_factor1 -> STR_LIT .)
    COMMA           reduce using rule 389 (value_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 389 (value_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 389 (value_factor1 -> STR_LIT .)


state 345

    (193) conditional_statement -> CHECK LPAREN . condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (196) condition -> . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition                      shift and go to state 446
    condition_factor               shift and go to state 447
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 346

    (262) for_loop -> FOR LPAREN . control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (317) control_variable -> . INT IDENT EQ control_var_tail

    INT             shift and go to state 457

    control_variable               shift and go to state 456

state 347

    (289) until_loop -> UNTIL LPAREN . until_expression RPAREN LBRACE statements RBRACE
    (290) until_expression -> . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_expression               shift and go to state 459
    until_factor                   shift and go to state 460
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 348

    (316) repeat_until -> REPEAT LBRACE . statements RBRACE UNTIL LPAREN until_expression RPAREN
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 469
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 349

    (397) input_statement -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 470


state 350

    (154) local_dec_tail -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    SWAP            reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    FUNCTION_NAME   reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    IDENT           reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    DISPLAY         reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    CHECK           reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    FOR             reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    UNTIL           reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    REPEAT          reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    INPUT           reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    INT             reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    FLT             reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    BLN             reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    CHR             reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    STR             reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    REVIVE          reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    RBRACE          reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    SHIFT           reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)
    OTHERWISE       reduce using rule 154 (local_dec_tail -> COMMA IDENT local_dec_tail .)


state 351

    (155) local_dec_tail -> EQ local_value local_dec_tail2 .

    NEWLINE         reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    SWAP            reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    FUNCTION_NAME   reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    IDENT           reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    DISPLAY         reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    CHECK           reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    FOR             reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    UNTIL           reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    REPEAT          reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    INPUT           reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    INT             reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    FLT             reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    BLN             reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    CHR             reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    STR             reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    REVIVE          reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    RBRACE          reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    SHIFT           reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)
    OTHERWISE       reduce using rule 155 (local_dec_tail -> EQ local_value local_dec_tail2 .)


state 352

    (156) local_dec_tail2 -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 471


state 353

    (157) local_dec_tail2 -> empty .

    NEWLINE         reduce using rule 157 (local_dec_tail2 -> empty .)
    SWAP            reduce using rule 157 (local_dec_tail2 -> empty .)
    FUNCTION_NAME   reduce using rule 157 (local_dec_tail2 -> empty .)
    IDENT           reduce using rule 157 (local_dec_tail2 -> empty .)
    DISPLAY         reduce using rule 157 (local_dec_tail2 -> empty .)
    CHECK           reduce using rule 157 (local_dec_tail2 -> empty .)
    FOR             reduce using rule 157 (local_dec_tail2 -> empty .)
    UNTIL           reduce using rule 157 (local_dec_tail2 -> empty .)
    REPEAT          reduce using rule 157 (local_dec_tail2 -> empty .)
    INPUT           reduce using rule 157 (local_dec_tail2 -> empty .)
    INT             reduce using rule 157 (local_dec_tail2 -> empty .)
    FLT             reduce using rule 157 (local_dec_tail2 -> empty .)
    BLN             reduce using rule 157 (local_dec_tail2 -> empty .)
    CHR             reduce using rule 157 (local_dec_tail2 -> empty .)
    STR             reduce using rule 157 (local_dec_tail2 -> empty .)
    REVIVE          reduce using rule 157 (local_dec_tail2 -> empty .)
    RBRACE          reduce using rule 157 (local_dec_tail2 -> empty .)
    SHIFT           reduce using rule 157 (local_dec_tail2 -> empty .)
    OTHERWISE       reduce using rule 157 (local_dec_tail2 -> empty .)


state 354

    (189) local_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 472
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 355

    (168) local_factor -> LPAREN local_factor . RPAREN

    RPAREN          shift and go to state 476


state 356

    (190) local_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 477
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 357

    (191) local_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 478
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 358

    (192) local_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 479
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 359

    (163) local_expression -> local_factor local_factor_tail .

    COMMA           reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    NEWLINE         reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    SWAP            reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    IDENT           reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    DISPLAY         reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    CHECK           reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    FOR             reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    UNTIL           reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    REPEAT          reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    INPUT           reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    INT             reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    FLT             reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    BLN             reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    CHR             reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    STR             reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    REVIVE          reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    RBRACE          reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    SHIFT           reduce using rule 163 (local_expression -> local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 163 (local_expression -> local_factor local_factor_tail .)


state 360

    (169) local_factor_tail -> PLUS . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 480
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 361

    (170) local_factor_tail -> MINUS . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 481
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 362

    (171) local_factor_tail -> MULTIPLY . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 482
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 363

    (172) local_factor_tail -> DIVISION . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 483
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 364

    (173) local_factor_tail -> MODULO . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 484
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 365

    (174) local_factor_tail -> EXPONENT . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 485
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 366

    (175) local_factor_tail -> GT . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 486
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 367

    (176) local_factor_tail -> LT . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 487
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 368

    (177) local_factor_tail -> EQ_EQ . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 488
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 369

    (178) local_factor_tail -> GT_EQ . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 489
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 370

    (179) local_factor_tail -> LT_EQ . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 490
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 371

    (180) local_factor_tail -> NOT_EQ . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 491
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 372

    (181) local_factor_tail -> AND . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 492
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 373

    (182) local_factor_tail -> OR . local_factor local_factor_tail
    (164) local_factor -> . var_call postfix
    (165) local_factor -> . local_factor1
    (166) local_factor -> . TILDE INT_LIT
    (167) local_factor -> . TILDE FLT_LIT
    (168) local_factor -> . LPAREN local_factor RPAREN
    (352) var_call -> . IDENT list_index
    (184) local_factor1 -> . INT_LIT
    (185) local_factor1 -> . FLT_LIT
    (186) local_factor1 -> . DAY
    (187) local_factor1 -> . NIGHT
    (188) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 283
    LPAREN          shift and go to state 276
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 284
    FLT_LIT         shift and go to state 285
    DAY             shift and go to state 286
    NIGHT           shift and go to state 287
    STR_LIT         shift and go to state 288

    local_factor                   shift and go to state 493
    var_call                       shift and go to state 281
    local_factor1                  shift and go to state 282

state 374

    (183) local_factor_tail -> empty .

    COMMA           reduce using rule 183 (local_factor_tail -> empty .)
    NEWLINE         reduce using rule 183 (local_factor_tail -> empty .)
    SWAP            reduce using rule 183 (local_factor_tail -> empty .)
    FUNCTION_NAME   reduce using rule 183 (local_factor_tail -> empty .)
    IDENT           reduce using rule 183 (local_factor_tail -> empty .)
    DISPLAY         reduce using rule 183 (local_factor_tail -> empty .)
    CHECK           reduce using rule 183 (local_factor_tail -> empty .)
    FOR             reduce using rule 183 (local_factor_tail -> empty .)
    UNTIL           reduce using rule 183 (local_factor_tail -> empty .)
    REPEAT          reduce using rule 183 (local_factor_tail -> empty .)
    INPUT           reduce using rule 183 (local_factor_tail -> empty .)
    INT             reduce using rule 183 (local_factor_tail -> empty .)
    FLT             reduce using rule 183 (local_factor_tail -> empty .)
    BLN             reduce using rule 183 (local_factor_tail -> empty .)
    CHR             reduce using rule 183 (local_factor_tail -> empty .)
    STR             reduce using rule 183 (local_factor_tail -> empty .)
    REVIVE          reduce using rule 183 (local_factor_tail -> empty .)
    RBRACE          reduce using rule 183 (local_factor_tail -> empty .)
    SHIFT           reduce using rule 183 (local_factor_tail -> empty .)
    OTHERWISE       reduce using rule 183 (local_factor_tail -> empty .)


state 375

    (164) local_factor -> var_call postfix .

    PLUS            reduce using rule 164 (local_factor -> var_call postfix .)
    MINUS           reduce using rule 164 (local_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 164 (local_factor -> var_call postfix .)
    DIVISION        reduce using rule 164 (local_factor -> var_call postfix .)
    MODULO          reduce using rule 164 (local_factor -> var_call postfix .)
    EXPONENT        reduce using rule 164 (local_factor -> var_call postfix .)
    GT              reduce using rule 164 (local_factor -> var_call postfix .)
    LT              reduce using rule 164 (local_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 164 (local_factor -> var_call postfix .)
    GT_EQ           reduce using rule 164 (local_factor -> var_call postfix .)
    LT_EQ           reduce using rule 164 (local_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 164 (local_factor -> var_call postfix .)
    AND             reduce using rule 164 (local_factor -> var_call postfix .)
    OR              reduce using rule 164 (local_factor -> var_call postfix .)
    COMMA           reduce using rule 164 (local_factor -> var_call postfix .)
    NEWLINE         reduce using rule 164 (local_factor -> var_call postfix .)
    SWAP            reduce using rule 164 (local_factor -> var_call postfix .)
    FUNCTION_NAME   reduce using rule 164 (local_factor -> var_call postfix .)
    IDENT           reduce using rule 164 (local_factor -> var_call postfix .)
    DISPLAY         reduce using rule 164 (local_factor -> var_call postfix .)
    CHECK           reduce using rule 164 (local_factor -> var_call postfix .)
    FOR             reduce using rule 164 (local_factor -> var_call postfix .)
    UNTIL           reduce using rule 164 (local_factor -> var_call postfix .)
    REPEAT          reduce using rule 164 (local_factor -> var_call postfix .)
    INPUT           reduce using rule 164 (local_factor -> var_call postfix .)
    INT             reduce using rule 164 (local_factor -> var_call postfix .)
    FLT             reduce using rule 164 (local_factor -> var_call postfix .)
    BLN             reduce using rule 164 (local_factor -> var_call postfix .)
    CHR             reduce using rule 164 (local_factor -> var_call postfix .)
    STR             reduce using rule 164 (local_factor -> var_call postfix .)
    REVIVE          reduce using rule 164 (local_factor -> var_call postfix .)
    RBRACE          reduce using rule 164 (local_factor -> var_call postfix .)
    SHIFT           reduce using rule 164 (local_factor -> var_call postfix .)
    OTHERWISE       reduce using rule 164 (local_factor -> var_call postfix .)
    RPAREN          reduce using rule 164 (local_factor -> var_call postfix .)


state 376

    (166) local_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    GT              reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    LT              reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    AND             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    OR              reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    SWAP            reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    FUNCTION_NAME   reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    IDENT           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    DISPLAY         reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    CHECK           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    FOR             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    UNTIL           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    REPEAT          reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    INPUT           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    INT             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    FLT             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    BLN             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    CHR             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    STR             reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    REVIVE          reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    RBRACE          reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    SHIFT           reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    OTHERWISE       reduce using rule 166 (local_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 166 (local_factor -> TILDE INT_LIT .)


state 377

    (167) local_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    SWAP            reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    FUNCTION_NAME   reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    IDENT           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    DISPLAY         reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    CHECK           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    FOR             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    UNTIL           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    REPEAT          reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    INPUT           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    INT             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    FLT             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    BLN             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    CHR             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    STR             reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    REVIVE          reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    RBRACE          reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    SHIFT           reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    OTHERWISE       reduce using rule 167 (local_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 167 (local_factor -> TILDE FLT_LIT .)


state 378

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE . function_statements_tail
    (89) function_statements_tail -> . function_statements
    (90) function_statements_tail -> . empty
    (87) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail
    (88) function_statements -> . empty
    (398) empty -> .
    (91) ret_type -> . FUNCTION
    (92) ret_type -> . function_dtype
    (93) function_dtype -> . FUNCTION_INT
    (94) function_dtype -> . FUNCTION_FLT
    (95) function_dtype -> . FUNCTION_CHR
    (96) function_dtype -> . FUNCTION_BLN
    (97) function_dtype -> . FUNCTION_STR
    (98) function_dtype -> . FUNCTION_LIST_INT
    (99) function_dtype -> . FUNCTION_LIST_FLT
    (100) function_dtype -> . FUNCTION_LIST_CHR
    (101) function_dtype -> . FUNCTION_LIST_STR
    (102) function_dtype -> . FUNCTION_LIST_BLN

    NEWLINE         reduce using rule 398 (empty -> .)
    MAIN_CASPER     reduce using rule 398 (empty -> .)
    FUNCTION        shift and go to state 28
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    ret_type                       shift and go to state 26
    function_statements_tail       shift and go to state 494
    function_statements            shift and go to state 495
    empty                          shift and go to state 496
    function_dtype                 shift and go to state 29

state 379

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 497
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 380

    (117) revive_factor -> LPAREN revive_factor . RPAREN

    RPAREN          shift and go to state 498


state 381

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 499
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 382

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 500
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 383

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 501
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 384

    (112) revive_expression -> revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 112 (revive_expression -> revive_factor revive_factor_tail .)


state 385

    (118) revive_factor_tail -> PLUS . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 502
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 386

    (119) revive_factor_tail -> MINUS . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 503
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 387

    (120) revive_factor_tail -> MULTIPLY . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 504
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 388

    (121) revive_factor_tail -> DIVISION . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 505
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 389

    (122) revive_factor_tail -> MODULO . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 506
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 390

    (123) revive_factor_tail -> EXPONENT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 507
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 391

    (124) revive_factor_tail -> GT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 508
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 392

    (125) revive_factor_tail -> LT . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 509
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 393

    (126) revive_factor_tail -> EQ_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 510
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 394

    (127) revive_factor_tail -> GT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 511
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 395

    (128) revive_factor_tail -> LT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 512
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 396

    (129) revive_factor_tail -> NOT_EQ . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 513
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 397

    (130) revive_factor_tail -> AND . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 514
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 398

    (131) revive_factor_tail -> OR . revive_factor revive_factor_tail
    (113) revive_factor -> . var_call postfix
    (114) revive_factor -> . revive_factor1
    (115) revive_factor -> . TILDE INT_LIT
    (116) revive_factor -> . TILDE FLT_LIT
    (117) revive_factor -> . LPAREN revive_factor RPAREN
    (352) var_call -> . IDENT list_index
    (133) revive_factor1 -> . INT_LIT
    (134) revive_factor1 -> . FLT_LIT
    (135) revive_factor1 -> . DAY
    (136) revive_factor1 -> . NIGHT
    (137) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 303
    LPAREN          shift and go to state 296
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 304
    FLT_LIT         shift and go to state 305
    DAY             shift and go to state 306
    NIGHT           shift and go to state 307
    STR_LIT         shift and go to state 308

    revive_factor                  shift and go to state 515
    var_call                       shift and go to state 301
    revive_factor1                 shift and go to state 302

state 399

    (132) revive_factor_tail -> empty .

    NEWLINE         reduce using rule 132 (revive_factor_tail -> empty .)


state 400

    (113) revive_factor -> var_call postfix .

    PLUS            reduce using rule 113 (revive_factor -> var_call postfix .)
    MINUS           reduce using rule 113 (revive_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 113 (revive_factor -> var_call postfix .)
    DIVISION        reduce using rule 113 (revive_factor -> var_call postfix .)
    MODULO          reduce using rule 113 (revive_factor -> var_call postfix .)
    EXPONENT        reduce using rule 113 (revive_factor -> var_call postfix .)
    GT              reduce using rule 113 (revive_factor -> var_call postfix .)
    LT              reduce using rule 113 (revive_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    GT_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    LT_EQ           reduce using rule 113 (revive_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 113 (revive_factor -> var_call postfix .)
    AND             reduce using rule 113 (revive_factor -> var_call postfix .)
    OR              reduce using rule 113 (revive_factor -> var_call postfix .)
    NEWLINE         reduce using rule 113 (revive_factor -> var_call postfix .)
    RPAREN          reduce using rule 113 (revive_factor -> var_call postfix .)


state 401

    (115) revive_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    GT              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    LT              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    AND             reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    OR              reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 115 (revive_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 115 (revive_factor -> TILDE INT_LIT .)


state 402

    (116) revive_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 116 (revive_factor -> TILDE FLT_LIT .)


state 403

    (144) statements_tail -> switch_statement unli_newline statements .

    NEWLINE         reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    REVIVE          reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    RBRACE          reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    SHIFT           reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)
    OTHERWISE       reduce using rule 144 (statements_tail -> switch_statement unli_newline statements .)


state 404

    (145) statements_tail -> loop_statement unli_newline statements .

    NEWLINE         reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    REVIVE          reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    RBRACE          reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    SHIFT           reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)
    OTHERWISE       reduce using rule 145 (statements_tail -> loop_statement unli_newline statements .)


state 405

    (146) statements_tail -> function_call unli_newline statements .

    NEWLINE         reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    REVIVE          reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    RBRACE          reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    SHIFT           reduce using rule 146 (statements_tail -> function_call unli_newline statements .)
    OTHERWISE       reduce using rule 146 (statements_tail -> function_call unli_newline statements .)


state 406

    (147) statements_tail -> assignment_statement unli_newline statements .

    NEWLINE         reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    REVIVE          reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    RBRACE          reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    SHIFT           reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)
    OTHERWISE       reduce using rule 147 (statements_tail -> assignment_statement unli_newline statements .)


state 407

    (148) statements_tail -> output_statement unli_newline statements .

    NEWLINE         reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    REVIVE          reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    RBRACE          reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    SHIFT           reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)
    OTHERWISE       reduce using rule 148 (statements_tail -> output_statement unli_newline statements .)


state 408

    (149) statements_tail -> conditional_statement unli_newline statements .

    NEWLINE         reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    REVIVE          reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    RBRACE          reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    SHIFT           reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)
    OTHERWISE       reduce using rule 149 (statements_tail -> conditional_statement unli_newline statements .)


state 409

    (222) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    RPAREN          shift and go to state 516


state 410

    (337) assign_tail -> DOT SPLICE . LPAREN start COMMA deleteCount COMMA splice_items RPAREN

    LPAREN          shift and go to state 517


state 411

    (338) assign_tail -> DOT PUSH . LPAREN list_element RPAREN

    LPAREN          shift and go to state 518


state 412

    (339) assign_tail -> assign_op value .

    NEWLINE         reduce using rule 339 (assign_tail -> assign_op value .)


state 413

    (325) function_call -> FUNCTION_NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 519


state 414

    (327) arguments -> empty .

    RPAREN          reduce using rule 327 (arguments -> empty .)


state 415

    (328) arguments -> arg_value . arg_tail
    (329) arg_tail -> . COMMA arg_value arg_tail
    (330) arg_tail -> . empty
    (398) empty -> .

    COMMA           shift and go to state 521
    RPAREN          reduce using rule 398 (empty -> .)

    arg_tail                       shift and go to state 520
    empty                          shift and go to state 522

state 416

    (331) arg_value -> literal .

    COMMA           reduce using rule 331 (arg_value -> literal .)
    RPAREN          reduce using rule 331 (arg_value -> literal .)


state 417

    (332) arg_value -> var_call .

    COMMA           reduce using rule 332 (arg_value -> var_call .)
    RPAREN          reduce using rule 332 (arg_value -> var_call .)


state 418

    (333) output_statement -> DISPLAY value next_val .

    NEWLINE         reduce using rule 333 (output_statement -> DISPLAY value next_val .)


state 419

    (334) next_val -> COMMA . value next_val
    (361) value -> . type_cast
    (362) value -> . value_expression
    (363) value -> . function_call
    (390) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (391) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (392) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (393) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (364) value_expression -> . value_factor value_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 331
    CONVERT_TO_FLT  shift and go to state 333
    CONVERT_TO_BLN  shift and go to state 334
    CONVERT_TO_STR  shift and go to state 335
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value                          shift and go to state 523
    type_cast                      shift and go to state 328
    value_expression               shift and go to state 329
    function_call                  shift and go to state 330
    value_factor                   shift and go to state 336
    input_statement                shift and go to state 261
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 420

    (335) next_val -> empty .

    NEWLINE         reduce using rule 335 (next_val -> empty .)


state 421

    (390) type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 524
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 422

    (369) value_factor -> LPAREN value_factor . RPAREN

    RPAREN          shift and go to state 525


state 423

    (391) type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 526
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 424

    (392) type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 527
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 425

    (393) type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 528
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 426

    (364) value_expression -> value_factor value_factor_tail .

    COMMA           reduce using rule 364 (value_expression -> value_factor value_factor_tail .)
    NEWLINE         reduce using rule 364 (value_expression -> value_factor value_factor_tail .)
    RPAREN          reduce using rule 364 (value_expression -> value_factor value_factor_tail .)


state 427

    (370) value_factor_tail -> PLUS . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 529
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 428

    (371) value_factor_tail -> MINUS . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 530
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 429

    (372) value_factor_tail -> MULTIPLY . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 531
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 430

    (373) value_factor_tail -> DIVISION . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 532
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 431

    (374) value_factor_tail -> MODULO . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 533
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 432

    (375) value_factor_tail -> EXPONENT . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 534
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 433

    (376) value_factor_tail -> GT . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 535
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 434

    (377) value_factor_tail -> LT . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 536
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 435

    (378) value_factor_tail -> EQ_EQ . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 537
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 436

    (379) value_factor_tail -> GT_EQ . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 538
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 437

    (380) value_factor_tail -> LT_EQ . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 539
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 438

    (381) value_factor_tail -> NOT_EQ . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 540
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 439

    (382) value_factor_tail -> AND . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 541
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 440

    (383) value_factor_tail -> OR . value_factor value_factor_tail
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value_factor                   shift and go to state 542
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 441

    (384) value_factor_tail -> empty .

    COMMA           reduce using rule 384 (value_factor_tail -> empty .)
    NEWLINE         reduce using rule 384 (value_factor_tail -> empty .)
    RPAREN          reduce using rule 384 (value_factor_tail -> empty .)


state 442

    (365) value_factor -> var_call postfix .

    PLUS            reduce using rule 365 (value_factor -> var_call postfix .)
    MINUS           reduce using rule 365 (value_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 365 (value_factor -> var_call postfix .)
    DIVISION        reduce using rule 365 (value_factor -> var_call postfix .)
    MODULO          reduce using rule 365 (value_factor -> var_call postfix .)
    EXPONENT        reduce using rule 365 (value_factor -> var_call postfix .)
    GT              reduce using rule 365 (value_factor -> var_call postfix .)
    LT              reduce using rule 365 (value_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 365 (value_factor -> var_call postfix .)
    GT_EQ           reduce using rule 365 (value_factor -> var_call postfix .)
    LT_EQ           reduce using rule 365 (value_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 365 (value_factor -> var_call postfix .)
    AND             reduce using rule 365 (value_factor -> var_call postfix .)
    OR              reduce using rule 365 (value_factor -> var_call postfix .)
    COMMA           reduce using rule 365 (value_factor -> var_call postfix .)
    NEWLINE         reduce using rule 365 (value_factor -> var_call postfix .)
    RPAREN          reduce using rule 365 (value_factor -> var_call postfix .)


state 443

    (367) value_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    GT              reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    LT              reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    AND             reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    OR              reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 367 (value_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 367 (value_factor -> TILDE INT_LIT .)


state 444

    (368) value_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 368 (value_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 368 (value_factor -> TILDE FLT_LIT .)


state 445

    (201) condition_factor -> LPAREN . condition RPAREN
    (196) condition -> . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition                      shift and go to state 543
    condition_factor               shift and go to state 447
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 446

    (193) conditional_statement -> CHECK LPAREN condition . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 544


state 447

    (196) condition -> condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 545
    empty                          shift and go to state 560

state 448

    (197) condition_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 561
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 449

    (198) condition_factor -> condition1 .

    PLUS            reduce using rule 198 (condition_factor -> condition1 .)
    MINUS           reduce using rule 198 (condition_factor -> condition1 .)
    MULTIPLY        reduce using rule 198 (condition_factor -> condition1 .)
    DIVISION        reduce using rule 198 (condition_factor -> condition1 .)
    MODULO          reduce using rule 198 (condition_factor -> condition1 .)
    EXPONENT        reduce using rule 198 (condition_factor -> condition1 .)
    GT              reduce using rule 198 (condition_factor -> condition1 .)
    LT              reduce using rule 198 (condition_factor -> condition1 .)
    EQ_EQ           reduce using rule 198 (condition_factor -> condition1 .)
    GT_EQ           reduce using rule 198 (condition_factor -> condition1 .)
    LT_EQ           reduce using rule 198 (condition_factor -> condition1 .)
    NOT_EQ          reduce using rule 198 (condition_factor -> condition1 .)
    AND             reduce using rule 198 (condition_factor -> condition1 .)
    OR              reduce using rule 198 (condition_factor -> condition1 .)
    RPAREN          reduce using rule 198 (condition_factor -> condition1 .)


state 450

    (199) condition_factor -> TILDE . INT_LIT
    (200) condition_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 562
    FLT_LIT         shift and go to state 563


state 451

    (217) condition1 -> INT_LIT .

    PLUS            reduce using rule 217 (condition1 -> INT_LIT .)
    MINUS           reduce using rule 217 (condition1 -> INT_LIT .)
    MULTIPLY        reduce using rule 217 (condition1 -> INT_LIT .)
    DIVISION        reduce using rule 217 (condition1 -> INT_LIT .)
    MODULO          reduce using rule 217 (condition1 -> INT_LIT .)
    EXPONENT        reduce using rule 217 (condition1 -> INT_LIT .)
    GT              reduce using rule 217 (condition1 -> INT_LIT .)
    LT              reduce using rule 217 (condition1 -> INT_LIT .)
    EQ_EQ           reduce using rule 217 (condition1 -> INT_LIT .)
    GT_EQ           reduce using rule 217 (condition1 -> INT_LIT .)
    LT_EQ           reduce using rule 217 (condition1 -> INT_LIT .)
    NOT_EQ          reduce using rule 217 (condition1 -> INT_LIT .)
    AND             reduce using rule 217 (condition1 -> INT_LIT .)
    OR              reduce using rule 217 (condition1 -> INT_LIT .)
    RPAREN          reduce using rule 217 (condition1 -> INT_LIT .)


state 452

    (218) condition1 -> FLT_LIT .

    PLUS            reduce using rule 218 (condition1 -> FLT_LIT .)
    MINUS           reduce using rule 218 (condition1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 218 (condition1 -> FLT_LIT .)
    DIVISION        reduce using rule 218 (condition1 -> FLT_LIT .)
    MODULO          reduce using rule 218 (condition1 -> FLT_LIT .)
    EXPONENT        reduce using rule 218 (condition1 -> FLT_LIT .)
    GT              reduce using rule 218 (condition1 -> FLT_LIT .)
    LT              reduce using rule 218 (condition1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 218 (condition1 -> FLT_LIT .)
    GT_EQ           reduce using rule 218 (condition1 -> FLT_LIT .)
    LT_EQ           reduce using rule 218 (condition1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 218 (condition1 -> FLT_LIT .)
    AND             reduce using rule 218 (condition1 -> FLT_LIT .)
    OR              reduce using rule 218 (condition1 -> FLT_LIT .)
    RPAREN          reduce using rule 218 (condition1 -> FLT_LIT .)


state 453

    (219) condition1 -> DAY .

    PLUS            reduce using rule 219 (condition1 -> DAY .)
    MINUS           reduce using rule 219 (condition1 -> DAY .)
    MULTIPLY        reduce using rule 219 (condition1 -> DAY .)
    DIVISION        reduce using rule 219 (condition1 -> DAY .)
    MODULO          reduce using rule 219 (condition1 -> DAY .)
    EXPONENT        reduce using rule 219 (condition1 -> DAY .)
    GT              reduce using rule 219 (condition1 -> DAY .)
    LT              reduce using rule 219 (condition1 -> DAY .)
    EQ_EQ           reduce using rule 219 (condition1 -> DAY .)
    GT_EQ           reduce using rule 219 (condition1 -> DAY .)
    LT_EQ           reduce using rule 219 (condition1 -> DAY .)
    NOT_EQ          reduce using rule 219 (condition1 -> DAY .)
    AND             reduce using rule 219 (condition1 -> DAY .)
    OR              reduce using rule 219 (condition1 -> DAY .)
    RPAREN          reduce using rule 219 (condition1 -> DAY .)


state 454

    (220) condition1 -> NIGHT .

    PLUS            reduce using rule 220 (condition1 -> NIGHT .)
    MINUS           reduce using rule 220 (condition1 -> NIGHT .)
    MULTIPLY        reduce using rule 220 (condition1 -> NIGHT .)
    DIVISION        reduce using rule 220 (condition1 -> NIGHT .)
    MODULO          reduce using rule 220 (condition1 -> NIGHT .)
    EXPONENT        reduce using rule 220 (condition1 -> NIGHT .)
    GT              reduce using rule 220 (condition1 -> NIGHT .)
    LT              reduce using rule 220 (condition1 -> NIGHT .)
    EQ_EQ           reduce using rule 220 (condition1 -> NIGHT .)
    GT_EQ           reduce using rule 220 (condition1 -> NIGHT .)
    LT_EQ           reduce using rule 220 (condition1 -> NIGHT .)
    NOT_EQ          reduce using rule 220 (condition1 -> NIGHT .)
    AND             reduce using rule 220 (condition1 -> NIGHT .)
    OR              reduce using rule 220 (condition1 -> NIGHT .)
    RPAREN          reduce using rule 220 (condition1 -> NIGHT .)


state 455

    (221) condition1 -> STR_LIT .

    PLUS            reduce using rule 221 (condition1 -> STR_LIT .)
    MINUS           reduce using rule 221 (condition1 -> STR_LIT .)
    MULTIPLY        reduce using rule 221 (condition1 -> STR_LIT .)
    DIVISION        reduce using rule 221 (condition1 -> STR_LIT .)
    MODULO          reduce using rule 221 (condition1 -> STR_LIT .)
    EXPONENT        reduce using rule 221 (condition1 -> STR_LIT .)
    GT              reduce using rule 221 (condition1 -> STR_LIT .)
    LT              reduce using rule 221 (condition1 -> STR_LIT .)
    EQ_EQ           reduce using rule 221 (condition1 -> STR_LIT .)
    GT_EQ           reduce using rule 221 (condition1 -> STR_LIT .)
    LT_EQ           reduce using rule 221 (condition1 -> STR_LIT .)
    NOT_EQ          reduce using rule 221 (condition1 -> STR_LIT .)
    AND             reduce using rule 221 (condition1 -> STR_LIT .)
    OR              reduce using rule 221 (condition1 -> STR_LIT .)
    RPAREN          reduce using rule 221 (condition1 -> STR_LIT .)


state 456

    (262) for_loop -> FOR LPAREN control_variable . SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 564


state 457

    (317) control_variable -> INT . IDENT EQ control_var_tail

    IDENT           shift and go to state 565


state 458

    (295) until_factor -> LPAREN . until_factor RPAREN
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 566
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 459

    (289) until_loop -> UNTIL LPAREN until_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 567


state 460

    (290) until_expression -> until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 568
    empty                          shift and go to state 583

state 461

    (291) until_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 584
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 462

    (292) until_factor -> until_factor1 .

    PLUS            reduce using rule 292 (until_factor -> until_factor1 .)
    MINUS           reduce using rule 292 (until_factor -> until_factor1 .)
    MULTIPLY        reduce using rule 292 (until_factor -> until_factor1 .)
    DIVISION        reduce using rule 292 (until_factor -> until_factor1 .)
    MODULO          reduce using rule 292 (until_factor -> until_factor1 .)
    EXPONENT        reduce using rule 292 (until_factor -> until_factor1 .)
    GT              reduce using rule 292 (until_factor -> until_factor1 .)
    LT              reduce using rule 292 (until_factor -> until_factor1 .)
    EQ_EQ           reduce using rule 292 (until_factor -> until_factor1 .)
    GT_EQ           reduce using rule 292 (until_factor -> until_factor1 .)
    LT_EQ           reduce using rule 292 (until_factor -> until_factor1 .)
    NOT_EQ          reduce using rule 292 (until_factor -> until_factor1 .)
    AND             reduce using rule 292 (until_factor -> until_factor1 .)
    OR              reduce using rule 292 (until_factor -> until_factor1 .)
    RPAREN          reduce using rule 292 (until_factor -> until_factor1 .)


state 463

    (293) until_factor -> TILDE . INT_LIT
    (294) until_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 585
    FLT_LIT         shift and go to state 586


state 464

    (311) until_factor1 -> INT_LIT .

    PLUS            reduce using rule 311 (until_factor1 -> INT_LIT .)
    MINUS           reduce using rule 311 (until_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 311 (until_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 311 (until_factor1 -> INT_LIT .)
    MODULO          reduce using rule 311 (until_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 311 (until_factor1 -> INT_LIT .)
    GT              reduce using rule 311 (until_factor1 -> INT_LIT .)
    LT              reduce using rule 311 (until_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 311 (until_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 311 (until_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 311 (until_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 311 (until_factor1 -> INT_LIT .)
    AND             reduce using rule 311 (until_factor1 -> INT_LIT .)
    OR              reduce using rule 311 (until_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 311 (until_factor1 -> INT_LIT .)


state 465

    (312) until_factor1 -> FLT_LIT .

    PLUS            reduce using rule 312 (until_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 312 (until_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 312 (until_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 312 (until_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 312 (until_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 312 (until_factor1 -> FLT_LIT .)
    GT              reduce using rule 312 (until_factor1 -> FLT_LIT .)
    LT              reduce using rule 312 (until_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 312 (until_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 312 (until_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 312 (until_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 312 (until_factor1 -> FLT_LIT .)
    AND             reduce using rule 312 (until_factor1 -> FLT_LIT .)
    OR              reduce using rule 312 (until_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 312 (until_factor1 -> FLT_LIT .)


state 466

    (313) until_factor1 -> DAY .

    PLUS            reduce using rule 313 (until_factor1 -> DAY .)
    MINUS           reduce using rule 313 (until_factor1 -> DAY .)
    MULTIPLY        reduce using rule 313 (until_factor1 -> DAY .)
    DIVISION        reduce using rule 313 (until_factor1 -> DAY .)
    MODULO          reduce using rule 313 (until_factor1 -> DAY .)
    EXPONENT        reduce using rule 313 (until_factor1 -> DAY .)
    GT              reduce using rule 313 (until_factor1 -> DAY .)
    LT              reduce using rule 313 (until_factor1 -> DAY .)
    EQ_EQ           reduce using rule 313 (until_factor1 -> DAY .)
    GT_EQ           reduce using rule 313 (until_factor1 -> DAY .)
    LT_EQ           reduce using rule 313 (until_factor1 -> DAY .)
    NOT_EQ          reduce using rule 313 (until_factor1 -> DAY .)
    AND             reduce using rule 313 (until_factor1 -> DAY .)
    OR              reduce using rule 313 (until_factor1 -> DAY .)
    RPAREN          reduce using rule 313 (until_factor1 -> DAY .)


state 467

    (314) until_factor1 -> NIGHT .

    PLUS            reduce using rule 314 (until_factor1 -> NIGHT .)
    MINUS           reduce using rule 314 (until_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 314 (until_factor1 -> NIGHT .)
    DIVISION        reduce using rule 314 (until_factor1 -> NIGHT .)
    MODULO          reduce using rule 314 (until_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 314 (until_factor1 -> NIGHT .)
    GT              reduce using rule 314 (until_factor1 -> NIGHT .)
    LT              reduce using rule 314 (until_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 314 (until_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 314 (until_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 314 (until_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 314 (until_factor1 -> NIGHT .)
    AND             reduce using rule 314 (until_factor1 -> NIGHT .)
    OR              reduce using rule 314 (until_factor1 -> NIGHT .)
    RPAREN          reduce using rule 314 (until_factor1 -> NIGHT .)


state 468

    (315) until_factor1 -> STR_LIT .

    PLUS            reduce using rule 315 (until_factor1 -> STR_LIT .)
    MINUS           reduce using rule 315 (until_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 315 (until_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 315 (until_factor1 -> STR_LIT .)
    MODULO          reduce using rule 315 (until_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 315 (until_factor1 -> STR_LIT .)
    GT              reduce using rule 315 (until_factor1 -> STR_LIT .)
    LT              reduce using rule 315 (until_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 315 (until_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 315 (until_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 315 (until_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 315 (until_factor1 -> STR_LIT .)
    AND             reduce using rule 315 (until_factor1 -> STR_LIT .)
    OR              reduce using rule 315 (until_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 315 (until_factor1 -> STR_LIT .)


state 469

    (316) repeat_until -> REPEAT LBRACE statements . RBRACE UNTIL LPAREN until_expression RPAREN

    RBRACE          shift and go to state 587


state 470

    (397) input_statement -> INPUT LPAREN RPAREN .

    NEWLINE         reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    COMMA           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    SWAP            reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    FUNCTION_NAME   reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    IDENT           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    DISPLAY         reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    CHECK           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    UNTIL           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    REPEAT          reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    INT             reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    FLT             reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    BLN             reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    CHR             reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    STR             reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    REVIVE          reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    SHIFT           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    OTHERWISE       reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)
    COLON           reduce using rule 397 (input_statement -> INPUT LPAREN RPAREN .)


state 471

    (156) local_dec_tail2 -> COMMA IDENT . local_dec_tail
    (153) local_dec_tail -> . empty
    (154) local_dec_tail -> . COMMA IDENT local_dec_tail
    (155) local_dec_tail -> . EQ local_value local_dec_tail2
    (398) empty -> .

    COMMA           shift and go to state 240
    EQ              shift and go to state 241
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_dec_tail                 shift and go to state 588
    empty                          shift and go to state 239

state 472

    (189) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 589


state 473

    (394) typecast_value -> expression .

    RPAREN          reduce using rule 394 (typecast_value -> expression .)


state 474

    (395) typecast_value -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 590


state 475

    (396) typecast_value -> input_statement .

    RPAREN          reduce using rule 396 (typecast_value -> input_statement .)


state 476

    (168) local_factor -> LPAREN local_factor RPAREN .

    PLUS            reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    MINUS           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    MULTIPLY        reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    DIVISION        reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    MODULO          reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    EXPONENT        reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    GT              reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    LT              reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    EQ_EQ           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    GT_EQ           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    LT_EQ           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    NOT_EQ          reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    AND             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    OR              reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    COMMA           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    NEWLINE         reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    SWAP            reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    FUNCTION_NAME   reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    IDENT           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    DISPLAY         reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    CHECK           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    FOR             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    UNTIL           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    REPEAT          reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    INPUT           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    INT             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    FLT             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    BLN             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    CHR             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    STR             reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    REVIVE          reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    RBRACE          reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    SHIFT           reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    OTHERWISE       reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)
    RPAREN          reduce using rule 168 (local_factor -> LPAREN local_factor RPAREN .)


state 477

    (190) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 591


state 478

    (191) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 592


state 479

    (192) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 593


state 480

    (169) local_factor_tail -> PLUS local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 594
    empty                          shift and go to state 374

state 481

    (170) local_factor_tail -> MINUS local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 595
    empty                          shift and go to state 374

state 482

    (171) local_factor_tail -> MULTIPLY local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 596
    empty                          shift and go to state 374

state 483

    (172) local_factor_tail -> DIVISION local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 597
    empty                          shift and go to state 374

state 484

    (173) local_factor_tail -> MODULO local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 598
    empty                          shift and go to state 374

state 485

    (174) local_factor_tail -> EXPONENT local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 599
    empty                          shift and go to state 374

state 486

    (175) local_factor_tail -> GT local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 600
    empty                          shift and go to state 374

state 487

    (176) local_factor_tail -> LT local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 601
    empty                          shift and go to state 374

state 488

    (177) local_factor_tail -> EQ_EQ local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 602
    empty                          shift and go to state 374

state 489

    (178) local_factor_tail -> GT_EQ local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 603
    empty                          shift and go to state 374

state 490

    (179) local_factor_tail -> LT_EQ local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 604
    empty                          shift and go to state 374

state 491

    (180) local_factor_tail -> NOT_EQ local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 605
    empty                          shift and go to state 374

state 492

    (181) local_factor_tail -> AND local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 606
    empty                          shift and go to state 374

state 493

    (182) local_factor_tail -> OR local_factor . local_factor_tail
    (169) local_factor_tail -> . PLUS local_factor local_factor_tail
    (170) local_factor_tail -> . MINUS local_factor local_factor_tail
    (171) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (172) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (173) local_factor_tail -> . MODULO local_factor local_factor_tail
    (174) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (175) local_factor_tail -> . GT local_factor local_factor_tail
    (176) local_factor_tail -> . LT local_factor local_factor_tail
    (177) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (178) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (179) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (180) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (181) local_factor_tail -> . AND local_factor local_factor_tail
    (182) local_factor_tail -> . OR local_factor local_factor_tail
    (183) local_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 360
    MINUS           shift and go to state 361
    MULTIPLY        shift and go to state 362
    DIVISION        shift and go to state 363
    MODULO          shift and go to state 364
    EXPONENT        shift and go to state 365
    GT              shift and go to state 366
    LT              shift and go to state 367
    EQ_EQ           shift and go to state 368
    GT_EQ           shift and go to state 369
    LT_EQ           shift and go to state 370
    NOT_EQ          shift and go to state 371
    AND             shift and go to state 372
    OR              shift and go to state 373
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    REVIVE          reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    local_factor_tail              shift and go to state 607
    empty                          shift and go to state 374

state 494

    (87) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail .

    NEWLINE         reduce using rule 87 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail .)
    MAIN_CASPER     reduce using rule 87 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail .)


state 495

    (89) function_statements_tail -> function_statements .

    NEWLINE         reduce using rule 89 (function_statements_tail -> function_statements .)
    MAIN_CASPER     reduce using rule 89 (function_statements_tail -> function_statements .)


state 496

    (90) function_statements_tail -> empty .
    (88) function_statements -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 88 (function_statements -> empty .)
  ! reduce/reduce conflict for MAIN_CASPER resolved using rule 88 (function_statements -> empty .)
    NEWLINE         reduce using rule 88 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 88 (function_statements -> empty .)

  ! NEWLINE         [ reduce using rule 90 (function_statements_tail -> empty .) ]
  ! MAIN_CASPER     [ reduce using rule 90 (function_statements_tail -> empty .) ]


state 497

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 608


state 498

    (117) revive_factor -> LPAREN revive_factor RPAREN .

    PLUS            reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MINUS           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MULTIPLY        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    DIVISION        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    MODULO          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    EXPONENT        reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    EQ_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT_EQ           reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    NOT_EQ          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    AND             reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    OR              reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    NEWLINE         reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)
    RPAREN          reduce using rule 117 (revive_factor -> LPAREN revive_factor RPAREN .)


state 499

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 609


state 500

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 610


state 501

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 611


state 502

    (118) revive_factor_tail -> PLUS revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 612
    empty                          shift and go to state 399

state 503

    (119) revive_factor_tail -> MINUS revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 613
    empty                          shift and go to state 399

state 504

    (120) revive_factor_tail -> MULTIPLY revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 614
    empty                          shift and go to state 399

state 505

    (121) revive_factor_tail -> DIVISION revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 615
    empty                          shift and go to state 399

state 506

    (122) revive_factor_tail -> MODULO revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 616
    empty                          shift and go to state 399

state 507

    (123) revive_factor_tail -> EXPONENT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 617
    empty                          shift and go to state 399

state 508

    (124) revive_factor_tail -> GT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 618
    empty                          shift and go to state 399

state 509

    (125) revive_factor_tail -> LT revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 619
    empty                          shift and go to state 399

state 510

    (126) revive_factor_tail -> EQ_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 620
    empty                          shift and go to state 399

state 511

    (127) revive_factor_tail -> GT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 621
    empty                          shift and go to state 399

state 512

    (128) revive_factor_tail -> LT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 622
    empty                          shift and go to state 399

state 513

    (129) revive_factor_tail -> NOT_EQ revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 623
    empty                          shift and go to state 399

state 514

    (130) revive_factor_tail -> AND revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 624
    empty                          shift and go to state 399

state 515

    (131) revive_factor_tail -> OR revive_factor . revive_factor_tail
    (118) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (119) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (120) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (121) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (122) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (123) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (124) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (125) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (126) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (127) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (128) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (129) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (130) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (131) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (132) revive_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 385
    MINUS           shift and go to state 386
    MULTIPLY        shift and go to state 387
    DIVISION        shift and go to state 388
    MODULO          shift and go to state 389
    EXPONENT        shift and go to state 390
    GT              shift and go to state 391
    LT              shift and go to state 392
    EQ_EQ           shift and go to state 393
    GT_EQ           shift and go to state 394
    LT_EQ           shift and go to state 395
    NOT_EQ          shift and go to state 396
    AND             shift and go to state 397
    OR              shift and go to state 398
    NEWLINE         reduce using rule 398 (empty -> .)

    revive_factor_tail             shift and go to state 625
    empty                          shift and go to state 399

state 516

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE

    LBRACE          shift and go to state 626


state 517

    (337) assign_tail -> DOT SPLICE LPAREN . start COMMA deleteCount COMMA splice_items RPAREN
    (347) start -> . INT_LIT

    INT_LIT         shift and go to state 628

    start                          shift and go to state 627

state 518

    (338) assign_tail -> DOT PUSH LPAREN . list_element RPAREN
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    list_element                   shift and go to state 629
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 519

    (325) function_call -> FUNCTION_NAME LPAREN arguments RPAREN .

    NEWLINE         reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COMMA           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    SWAP            reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FUNCTION_NAME   reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    IDENT           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    DISPLAY         reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    CHECK           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FOR             reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    UNTIL           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    REPEAT          reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    INPUT           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    INT             reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    FLT             reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    BLN             reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    CHR             reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    STR             reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    REVIVE          reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    SHIFT           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    OTHERWISE       reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COLON           reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 325 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)


state 520

    (328) arguments -> arg_value arg_tail .

    RPAREN          reduce using rule 328 (arguments -> arg_value arg_tail .)


state 521

    (329) arg_tail -> COMMA . arg_value arg_tail
    (331) arg_value -> . literal
    (332) arg_value -> . var_call
    (79) literal -> . literal1
    (80) literal -> . literal2
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    arg_value                      shift and go to state 630
    literal                        shift and go to state 416
    var_call                       shift and go to state 417
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 522

    (330) arg_tail -> empty .

    RPAREN          reduce using rule 330 (arg_tail -> empty .)


state 523

    (334) next_val -> COMMA value . next_val
    (334) next_val -> . COMMA value next_val
    (335) next_val -> . empty
    (398) empty -> .

    COMMA           shift and go to state 419
    NEWLINE         reduce using rule 398 (empty -> .)

    next_val                       shift and go to state 631
    empty                          shift and go to state 420

state 524

    (390) type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 632


state 525

    (369) value_factor -> LPAREN value_factor RPAREN .

    PLUS            reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    MINUS           reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    MULTIPLY        reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    DIVISION        reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    MODULO          reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    EXPONENT        reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    GT              reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    LT              reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    EQ_EQ           reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    GT_EQ           reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    LT_EQ           reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    NOT_EQ          reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    AND             reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    OR              reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    COMMA           reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    NEWLINE         reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)
    RPAREN          reduce using rule 369 (value_factor -> LPAREN value_factor RPAREN .)


state 526

    (391) type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 633


state 527

    (392) type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 634


state 528

    (393) type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 635


state 529

    (370) value_factor_tail -> PLUS value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 636
    empty                          shift and go to state 441

state 530

    (371) value_factor_tail -> MINUS value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 637
    empty                          shift and go to state 441

state 531

    (372) value_factor_tail -> MULTIPLY value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 638
    empty                          shift and go to state 441

state 532

    (373) value_factor_tail -> DIVISION value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 639
    empty                          shift and go to state 441

state 533

    (374) value_factor_tail -> MODULO value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 640
    empty                          shift and go to state 441

state 534

    (375) value_factor_tail -> EXPONENT value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 641
    empty                          shift and go to state 441

state 535

    (376) value_factor_tail -> GT value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 642
    empty                          shift and go to state 441

state 536

    (377) value_factor_tail -> LT value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 643
    empty                          shift and go to state 441

state 537

    (378) value_factor_tail -> EQ_EQ value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 644
    empty                          shift and go to state 441

state 538

    (379) value_factor_tail -> GT_EQ value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 645
    empty                          shift and go to state 441

state 539

    (380) value_factor_tail -> LT_EQ value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 646
    empty                          shift and go to state 441

state 540

    (381) value_factor_tail -> NOT_EQ value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 647
    empty                          shift and go to state 441

state 541

    (382) value_factor_tail -> AND value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 648
    empty                          shift and go to state 441

state 542

    (383) value_factor_tail -> OR value_factor . value_factor_tail
    (370) value_factor_tail -> . PLUS value_factor value_factor_tail
    (371) value_factor_tail -> . MINUS value_factor value_factor_tail
    (372) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (373) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (374) value_factor_tail -> . MODULO value_factor value_factor_tail
    (375) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (376) value_factor_tail -> . GT value_factor value_factor_tail
    (377) value_factor_tail -> . LT value_factor value_factor_tail
    (378) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (379) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (380) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (381) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (382) value_factor_tail -> . AND value_factor value_factor_tail
    (383) value_factor_tail -> . OR value_factor value_factor_tail
    (384) value_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 427
    MINUS           shift and go to state 428
    MULTIPLY        shift and go to state 429
    DIVISION        shift and go to state 430
    MODULO          shift and go to state 431
    EXPONENT        shift and go to state 432
    GT              shift and go to state 433
    LT              shift and go to state 434
    EQ_EQ           shift and go to state 435
    GT_EQ           shift and go to state 436
    LT_EQ           shift and go to state 437
    NOT_EQ          shift and go to state 438
    AND             shift and go to state 439
    OR              shift and go to state 440
    COMMA           reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)

    value_factor_tail              shift and go to state 649
    empty                          shift and go to state 441

state 543

    (201) condition_factor -> LPAREN condition . RPAREN

    RPAREN          shift and go to state 650


state 544

    (193) conditional_statement -> CHECK LPAREN condition RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 651


state 545

    (196) condition -> condition_factor condition_tail .

    RPAREN          reduce using rule 196 (condition -> condition_factor condition_tail .)


state 546

    (202) condition_tail -> PLUS . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 652
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 547

    (203) condition_tail -> MINUS . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 653
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 548

    (204) condition_tail -> MULTIPLY . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 654
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 549

    (205) condition_tail -> DIVISION . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 655
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 550

    (206) condition_tail -> MODULO . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 656
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 551

    (207) condition_tail -> EXPONENT . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 657
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 552

    (208) condition_tail -> GT . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 658
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 553

    (209) condition_tail -> LT . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 659
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 554

    (210) condition_tail -> EQ_EQ . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 660
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 555

    (211) condition_tail -> GT_EQ . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 661
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 556

    (212) condition_tail -> LT_EQ . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 662
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 557

    (213) condition_tail -> NOT_EQ . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 663
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 558

    (214) condition_tail -> AND . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 664
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 559

    (215) condition_tail -> OR . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition_factor               shift and go to state 665
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 560

    (216) condition_tail -> empty .

    RPAREN          reduce using rule 216 (condition_tail -> empty .)


state 561

    (197) condition_factor -> var_call postfix .

    PLUS            reduce using rule 197 (condition_factor -> var_call postfix .)
    MINUS           reduce using rule 197 (condition_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 197 (condition_factor -> var_call postfix .)
    DIVISION        reduce using rule 197 (condition_factor -> var_call postfix .)
    MODULO          reduce using rule 197 (condition_factor -> var_call postfix .)
    EXPONENT        reduce using rule 197 (condition_factor -> var_call postfix .)
    GT              reduce using rule 197 (condition_factor -> var_call postfix .)
    LT              reduce using rule 197 (condition_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 197 (condition_factor -> var_call postfix .)
    GT_EQ           reduce using rule 197 (condition_factor -> var_call postfix .)
    LT_EQ           reduce using rule 197 (condition_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 197 (condition_factor -> var_call postfix .)
    AND             reduce using rule 197 (condition_factor -> var_call postfix .)
    OR              reduce using rule 197 (condition_factor -> var_call postfix .)
    RPAREN          reduce using rule 197 (condition_factor -> var_call postfix .)


state 562

    (199) condition_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    GT              reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    LT              reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    AND             reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    OR              reduce using rule 199 (condition_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 199 (condition_factor -> TILDE INT_LIT .)


state 563

    (200) condition_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 200 (condition_factor -> TILDE FLT_LIT .)


state 564

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON . for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (263) for_expression -> . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_expression                 shift and go to state 667
    for_factor                     shift and go to state 668
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 565

    (317) control_variable -> INT IDENT . EQ control_var_tail

    EQ              shift and go to state 677


state 566

    (295) until_factor -> LPAREN until_factor . RPAREN

    RPAREN          shift and go to state 678


state 567

    (289) until_loop -> UNTIL LPAREN until_expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 679


state 568

    (290) until_expression -> until_factor until_factor_tail .

    RPAREN          reduce using rule 290 (until_expression -> until_factor until_factor_tail .)


state 569

    (296) until_factor_tail -> PLUS . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 680
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 570

    (297) until_factor_tail -> MINUS . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 681
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 571

    (298) until_factor_tail -> MULTIPLY . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 682
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 572

    (299) until_factor_tail -> DIVISION . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 683
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 573

    (300) until_factor_tail -> MODULO . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 684
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 574

    (301) until_factor_tail -> EXPONENT . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 685
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 575

    (302) until_factor_tail -> GT . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 686
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 576

    (303) until_factor_tail -> LT . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 687
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 577

    (304) until_factor_tail -> EQ_EQ . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 688
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 578

    (305) until_factor_tail -> GT_EQ . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 689
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 579

    (306) until_factor_tail -> LT_EQ . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 690
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 580

    (307) until_factor_tail -> NOT_EQ . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 691
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 581

    (308) until_factor_tail -> AND . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 692
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 582

    (309) until_factor_tail -> OR . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_factor                   shift and go to state 693
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 583

    (310) until_factor_tail -> empty .

    RPAREN          reduce using rule 310 (until_factor_tail -> empty .)


state 584

    (291) until_factor -> var_call postfix .

    PLUS            reduce using rule 291 (until_factor -> var_call postfix .)
    MINUS           reduce using rule 291 (until_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 291 (until_factor -> var_call postfix .)
    DIVISION        reduce using rule 291 (until_factor -> var_call postfix .)
    MODULO          reduce using rule 291 (until_factor -> var_call postfix .)
    EXPONENT        reduce using rule 291 (until_factor -> var_call postfix .)
    GT              reduce using rule 291 (until_factor -> var_call postfix .)
    LT              reduce using rule 291 (until_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 291 (until_factor -> var_call postfix .)
    GT_EQ           reduce using rule 291 (until_factor -> var_call postfix .)
    LT_EQ           reduce using rule 291 (until_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 291 (until_factor -> var_call postfix .)
    AND             reduce using rule 291 (until_factor -> var_call postfix .)
    OR              reduce using rule 291 (until_factor -> var_call postfix .)
    RPAREN          reduce using rule 291 (until_factor -> var_call postfix .)


state 585

    (293) until_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    GT              reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    LT              reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    AND             reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    OR              reduce using rule 293 (until_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 293 (until_factor -> TILDE INT_LIT .)


state 586

    (294) until_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 294 (until_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 294 (until_factor -> TILDE FLT_LIT .)


state 587

    (316) repeat_until -> REPEAT LBRACE statements RBRACE . UNTIL LPAREN until_expression RPAREN

    UNTIL           shift and go to state 694


state 588

    (156) local_dec_tail2 -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    SWAP            reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    FUNCTION_NAME   reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    IDENT           reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    DISPLAY         reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    CHECK           reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    FOR             reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    UNTIL           reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    REPEAT          reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    INPUT           reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    INT             reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    FLT             reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    BLN             reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    CHR             reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    STR             reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    REVIVE          reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    RBRACE          reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    SHIFT           reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)
    OTHERWISE       reduce using rule 156 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)


state 589

    (189) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    INT             reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    STR             reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 189 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 590

    (395) typecast_value -> FUNCTION_NAME LPAREN . RPAREN

    RPAREN          shift and go to state 695


state 591

    (190) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    INT             reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    STR             reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 190 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 592

    (191) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    INT             reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    STR             reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 191 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 593

    (192) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    SWAP            reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FUNCTION_NAME   reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    IDENT           reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    DISPLAY         reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    CHECK           reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FOR             reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    UNTIL           reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    REPEAT          reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    INPUT           reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    INT             reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    FLT             reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    BLN             reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    CHR             reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    STR             reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    REVIVE          reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    SHIFT           reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    OTHERWISE       reduce using rule 192 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 594

    (169) local_factor_tail -> PLUS local_factor local_factor_tail .

    COMMA           reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    SWAP            reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    IDENT           reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    DISPLAY         reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    CHECK           reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    FOR             reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    UNTIL           reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    REPEAT          reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    INPUT           reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    INT             reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    FLT             reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    BLN             reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    CHR             reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    STR             reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    REVIVE          reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    RBRACE          reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    SHIFT           reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 169 (local_factor_tail -> PLUS local_factor local_factor_tail .)


state 595

    (170) local_factor_tail -> MINUS local_factor local_factor_tail .

    COMMA           reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    SWAP            reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    IDENT           reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    DISPLAY         reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    CHECK           reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    FOR             reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    UNTIL           reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    REPEAT          reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    INPUT           reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    INT             reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    FLT             reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    BLN             reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    CHR             reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    STR             reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    REVIVE          reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    RBRACE          reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    SHIFT           reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 170 (local_factor_tail -> MINUS local_factor local_factor_tail .)


state 596

    (171) local_factor_tail -> MULTIPLY local_factor local_factor_tail .

    COMMA           reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    NEWLINE         reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    SWAP            reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    IDENT           reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    DISPLAY         reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    CHECK           reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    FOR             reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    UNTIL           reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    REPEAT          reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    INPUT           reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    INT             reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    FLT             reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    BLN             reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    CHR             reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    STR             reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    REVIVE          reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    RBRACE          reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    SHIFT           reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 171 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)


state 597

    (172) local_factor_tail -> DIVISION local_factor local_factor_tail .

    COMMA           reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    NEWLINE         reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    SWAP            reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    IDENT           reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    DISPLAY         reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    CHECK           reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    FOR             reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    UNTIL           reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    REPEAT          reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    INPUT           reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    INT             reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    FLT             reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    BLN             reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    CHR             reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    STR             reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    REVIVE          reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    RBRACE          reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    SHIFT           reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 172 (local_factor_tail -> DIVISION local_factor local_factor_tail .)


state 598

    (173) local_factor_tail -> MODULO local_factor local_factor_tail .

    COMMA           reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    NEWLINE         reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    SWAP            reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    IDENT           reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    DISPLAY         reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    CHECK           reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    FOR             reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    UNTIL           reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    REPEAT          reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    INPUT           reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    INT             reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    FLT             reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    BLN             reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    CHR             reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    STR             reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    REVIVE          reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    RBRACE          reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    SHIFT           reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 173 (local_factor_tail -> MODULO local_factor local_factor_tail .)


state 599

    (174) local_factor_tail -> EXPONENT local_factor local_factor_tail .

    COMMA           reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    SWAP            reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    IDENT           reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    DISPLAY         reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    CHECK           reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    FOR             reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    UNTIL           reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    REPEAT          reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    INPUT           reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    INT             reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    FLT             reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    BLN             reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    CHR             reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    STR             reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    REVIVE          reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    RBRACE          reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    SHIFT           reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 174 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)


state 600

    (175) local_factor_tail -> GT local_factor local_factor_tail .

    COMMA           reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    SWAP            reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    IDENT           reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    DISPLAY         reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    CHECK           reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    FOR             reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    UNTIL           reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    REPEAT          reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    INPUT           reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    INT             reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    FLT             reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    BLN             reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    CHR             reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    STR             reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    REVIVE          reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    RBRACE          reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    SHIFT           reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 175 (local_factor_tail -> GT local_factor local_factor_tail .)


state 601

    (176) local_factor_tail -> LT local_factor local_factor_tail .

    COMMA           reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    SWAP            reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    IDENT           reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    DISPLAY         reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    CHECK           reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    FOR             reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    UNTIL           reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    REPEAT          reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    INPUT           reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    INT             reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    FLT             reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    BLN             reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    CHR             reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    STR             reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    REVIVE          reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    RBRACE          reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    SHIFT           reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 176 (local_factor_tail -> LT local_factor local_factor_tail .)


state 602

    (177) local_factor_tail -> EQ_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    INT             reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    STR             reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 177 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)


state 603

    (178) local_factor_tail -> GT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    INT             reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    STR             reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 178 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)


state 604

    (179) local_factor_tail -> LT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    INT             reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    STR             reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 179 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)


state 605

    (180) local_factor_tail -> NOT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    SWAP            reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    IDENT           reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    DISPLAY         reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    CHECK           reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    FOR             reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    UNTIL           reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    REPEAT          reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    INPUT           reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    INT             reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    FLT             reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    BLN             reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    CHR             reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    STR             reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    REVIVE          reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    RBRACE          reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    SHIFT           reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 180 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)


state 606

    (181) local_factor_tail -> AND local_factor local_factor_tail .

    COMMA           reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    NEWLINE         reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    SWAP            reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    IDENT           reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    DISPLAY         reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    CHECK           reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    FOR             reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    UNTIL           reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    REPEAT          reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    INPUT           reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    INT             reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    FLT             reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    BLN             reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    CHR             reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    STR             reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    REVIVE          reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    RBRACE          reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    SHIFT           reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 181 (local_factor_tail -> AND local_factor local_factor_tail .)


state 607

    (182) local_factor_tail -> OR local_factor local_factor_tail .

    COMMA           reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    NEWLINE         reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    SWAP            reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    FUNCTION_NAME   reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    IDENT           reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    DISPLAY         reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    CHECK           reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    FOR             reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    UNTIL           reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    REPEAT          reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    INPUT           reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    INT             reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    FLT             reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    BLN             reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    CHR             reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    STR             reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    REVIVE          reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    RBRACE          reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    SHIFT           reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)
    OTHERWISE       reduce using rule 182 (local_factor_tail -> OR local_factor local_factor_tail .)


state 608

    (138) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 138 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 609

    (139) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 139 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 610

    (140) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 140 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 611

    (141) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 141 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 612

    (118) revive_factor_tail -> PLUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 118 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)


state 613

    (119) revive_factor_tail -> MINUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 119 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)


state 614

    (120) revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 120 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)


state 615

    (121) revive_factor_tail -> DIVISION revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 121 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)


state 616

    (122) revive_factor_tail -> MODULO revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 122 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)


state 617

    (123) revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 123 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)


state 618

    (124) revive_factor_tail -> GT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 124 (revive_factor_tail -> GT revive_factor revive_factor_tail .)


state 619

    (125) revive_factor_tail -> LT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 125 (revive_factor_tail -> LT revive_factor revive_factor_tail .)


state 620

    (126) revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 126 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)


state 621

    (127) revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 127 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)


state 622

    (128) revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 128 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)


state 623

    (129) revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 129 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)


state 624

    (130) revive_factor_tail -> AND revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 130 (revive_factor_tail -> AND revive_factor revive_factor_tail .)


state 625

    (131) revive_factor_tail -> OR revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 131 (revive_factor_tail -> OR revive_factor revive_factor_tail .)


state 626

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . switch_condition OTHERWISE LBRACE statements RBRACE RBRACE
    (223) switch_condition -> . SHIFT switch_value COLON statements switchcond_tail

    SHIFT           shift and go to state 697

    switch_condition               shift and go to state 696

state 627

    (337) assign_tail -> DOT SPLICE LPAREN start . COMMA deleteCount COMMA splice_items RPAREN

    COMMA           shift and go to state 698


state 628

    (347) start -> INT_LIT .

    COMMA           reduce using rule 347 (start -> INT_LIT .)


state 629

    (338) assign_tail -> DOT PUSH LPAREN list_element . RPAREN

    RPAREN          shift and go to state 699


state 630

    (329) arg_tail -> COMMA arg_value . arg_tail
    (329) arg_tail -> . COMMA arg_value arg_tail
    (330) arg_tail -> . empty
    (398) empty -> .

    COMMA           shift and go to state 521
    RPAREN          reduce using rule 398 (empty -> .)

    arg_tail                       shift and go to state 700
    empty                          shift and go to state 522

state 631

    (334) next_val -> COMMA value next_val .

    NEWLINE         reduce using rule 334 (next_val -> COMMA value next_val .)


state 632

    (390) type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 390 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 390 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 390 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 633

    (391) type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 391 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 391 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 391 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 634

    (392) type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 392 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 392 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 392 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 635

    (393) type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 393 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 393 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 393 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 636

    (370) value_factor_tail -> PLUS value_factor value_factor_tail .

    COMMA           reduce using rule 370 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    NEWLINE         reduce using rule 370 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 370 (value_factor_tail -> PLUS value_factor value_factor_tail .)


state 637

    (371) value_factor_tail -> MINUS value_factor value_factor_tail .

    COMMA           reduce using rule 371 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    NEWLINE         reduce using rule 371 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 371 (value_factor_tail -> MINUS value_factor value_factor_tail .)


state 638

    (372) value_factor_tail -> MULTIPLY value_factor value_factor_tail .

    COMMA           reduce using rule 372 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    NEWLINE         reduce using rule 372 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    RPAREN          reduce using rule 372 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)


state 639

    (373) value_factor_tail -> DIVISION value_factor value_factor_tail .

    COMMA           reduce using rule 373 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    NEWLINE         reduce using rule 373 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    RPAREN          reduce using rule 373 (value_factor_tail -> DIVISION value_factor value_factor_tail .)


state 640

    (374) value_factor_tail -> MODULO value_factor value_factor_tail .

    COMMA           reduce using rule 374 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    NEWLINE         reduce using rule 374 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    RPAREN          reduce using rule 374 (value_factor_tail -> MODULO value_factor value_factor_tail .)


state 641

    (375) value_factor_tail -> EXPONENT value_factor value_factor_tail .

    COMMA           reduce using rule 375 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    NEWLINE         reduce using rule 375 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    RPAREN          reduce using rule 375 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)


state 642

    (376) value_factor_tail -> GT value_factor value_factor_tail .

    COMMA           reduce using rule 376 (value_factor_tail -> GT value_factor value_factor_tail .)
    NEWLINE         reduce using rule 376 (value_factor_tail -> GT value_factor value_factor_tail .)
    RPAREN          reduce using rule 376 (value_factor_tail -> GT value_factor value_factor_tail .)


state 643

    (377) value_factor_tail -> LT value_factor value_factor_tail .

    COMMA           reduce using rule 377 (value_factor_tail -> LT value_factor value_factor_tail .)
    NEWLINE         reduce using rule 377 (value_factor_tail -> LT value_factor value_factor_tail .)
    RPAREN          reduce using rule 377 (value_factor_tail -> LT value_factor value_factor_tail .)


state 644

    (378) value_factor_tail -> EQ_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 378 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 378 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 378 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)


state 645

    (379) value_factor_tail -> GT_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 379 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 379 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 379 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)


state 646

    (380) value_factor_tail -> LT_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 380 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 380 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 380 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)


state 647

    (381) value_factor_tail -> NOT_EQ value_factor value_factor_tail .

    COMMA           reduce using rule 381 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    NEWLINE         reduce using rule 381 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 381 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)


state 648

    (382) value_factor_tail -> AND value_factor value_factor_tail .

    COMMA           reduce using rule 382 (value_factor_tail -> AND value_factor value_factor_tail .)
    NEWLINE         reduce using rule 382 (value_factor_tail -> AND value_factor value_factor_tail .)
    RPAREN          reduce using rule 382 (value_factor_tail -> AND value_factor value_factor_tail .)


state 649

    (383) value_factor_tail -> OR value_factor value_factor_tail .

    COMMA           reduce using rule 383 (value_factor_tail -> OR value_factor value_factor_tail .)
    NEWLINE         reduce using rule 383 (value_factor_tail -> OR value_factor value_factor_tail .)
    RPAREN          reduce using rule 383 (value_factor_tail -> OR value_factor value_factor_tail .)


state 650

    (201) condition_factor -> LPAREN condition RPAREN .

    PLUS            reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    MINUS           reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    MULTIPLY        reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    DIVISION        reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    MODULO          reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    EXPONENT        reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    GT              reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    LT              reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    EQ_EQ           reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    GT_EQ           reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    LT_EQ           reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    NOT_EQ          reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    AND             reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    OR              reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)
    RPAREN          reduce using rule 201 (condition_factor -> LPAREN condition RPAREN .)


state 651

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 701
    empty                          shift and go to state 17

state 652

    (202) condition_tail -> PLUS condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 702
    empty                          shift and go to state 560

state 653

    (203) condition_tail -> MINUS condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 703
    empty                          shift and go to state 560

state 654

    (204) condition_tail -> MULTIPLY condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 704
    empty                          shift and go to state 560

state 655

    (205) condition_tail -> DIVISION condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 705
    empty                          shift and go to state 560

state 656

    (206) condition_tail -> MODULO condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 706
    empty                          shift and go to state 560

state 657

    (207) condition_tail -> EXPONENT condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 707
    empty                          shift and go to state 560

state 658

    (208) condition_tail -> GT condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 708
    empty                          shift and go to state 560

state 659

    (209) condition_tail -> LT condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 709
    empty                          shift and go to state 560

state 660

    (210) condition_tail -> EQ_EQ condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 710
    empty                          shift and go to state 560

state 661

    (211) condition_tail -> GT_EQ condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 711
    empty                          shift and go to state 560

state 662

    (212) condition_tail -> LT_EQ condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 712
    empty                          shift and go to state 560

state 663

    (213) condition_tail -> NOT_EQ condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 713
    empty                          shift and go to state 560

state 664

    (214) condition_tail -> AND condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 714
    empty                          shift and go to state 560

state 665

    (215) condition_tail -> OR condition_factor . condition_tail
    (202) condition_tail -> . PLUS condition_factor condition_tail
    (203) condition_tail -> . MINUS condition_factor condition_tail
    (204) condition_tail -> . MULTIPLY condition_factor condition_tail
    (205) condition_tail -> . DIVISION condition_factor condition_tail
    (206) condition_tail -> . MODULO condition_factor condition_tail
    (207) condition_tail -> . EXPONENT condition_factor condition_tail
    (208) condition_tail -> . GT condition_factor condition_tail
    (209) condition_tail -> . LT condition_factor condition_tail
    (210) condition_tail -> . EQ_EQ condition_factor condition_tail
    (211) condition_tail -> . GT_EQ condition_factor condition_tail
    (212) condition_tail -> . LT_EQ condition_factor condition_tail
    (213) condition_tail -> . NOT_EQ condition_factor condition_tail
    (214) condition_tail -> . AND condition_factor condition_tail
    (215) condition_tail -> . OR condition_factor condition_tail
    (216) condition_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 546
    MINUS           shift and go to state 547
    MULTIPLY        shift and go to state 548
    DIVISION        shift and go to state 549
    MODULO          shift and go to state 550
    EXPONENT        shift and go to state 551
    GT              shift and go to state 552
    LT              shift and go to state 553
    EQ_EQ           shift and go to state 554
    GT_EQ           shift and go to state 555
    LT_EQ           shift and go to state 556
    NOT_EQ          shift and go to state 557
    AND             shift and go to state 558
    OR              shift and go to state 559
    RPAREN          reduce using rule 398 (empty -> .)

    condition_tail                 shift and go to state 715
    empty                          shift and go to state 560

state 666

    (268) for_factor -> LPAREN . for_factor RPAREN
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 716
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 667

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression . SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 717


state 668

    (263) for_expression -> for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 718
    empty                          shift and go to state 733

state 669

    (264) for_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    SEMICOLON       reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 734
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 670

    (265) for_factor -> for_factor1 .

    PLUS            reduce using rule 265 (for_factor -> for_factor1 .)
    MINUS           reduce using rule 265 (for_factor -> for_factor1 .)
    MULTIPLY        reduce using rule 265 (for_factor -> for_factor1 .)
    DIVISION        reduce using rule 265 (for_factor -> for_factor1 .)
    MODULO          reduce using rule 265 (for_factor -> for_factor1 .)
    EXPONENT        reduce using rule 265 (for_factor -> for_factor1 .)
    GT              reduce using rule 265 (for_factor -> for_factor1 .)
    LT              reduce using rule 265 (for_factor -> for_factor1 .)
    EQ_EQ           reduce using rule 265 (for_factor -> for_factor1 .)
    GT_EQ           reduce using rule 265 (for_factor -> for_factor1 .)
    LT_EQ           reduce using rule 265 (for_factor -> for_factor1 .)
    NOT_EQ          reduce using rule 265 (for_factor -> for_factor1 .)
    AND             reduce using rule 265 (for_factor -> for_factor1 .)
    OR              reduce using rule 265 (for_factor -> for_factor1 .)
    SEMICOLON       reduce using rule 265 (for_factor -> for_factor1 .)
    RPAREN          reduce using rule 265 (for_factor -> for_factor1 .)


state 671

    (266) for_factor -> TILDE . INT_LIT
    (267) for_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 735
    FLT_LIT         shift and go to state 736


state 672

    (284) for_factor1 -> INT_LIT .

    PLUS            reduce using rule 284 (for_factor1 -> INT_LIT .)
    MINUS           reduce using rule 284 (for_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 284 (for_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 284 (for_factor1 -> INT_LIT .)
    MODULO          reduce using rule 284 (for_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 284 (for_factor1 -> INT_LIT .)
    GT              reduce using rule 284 (for_factor1 -> INT_LIT .)
    LT              reduce using rule 284 (for_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 284 (for_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 284 (for_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 284 (for_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 284 (for_factor1 -> INT_LIT .)
    AND             reduce using rule 284 (for_factor1 -> INT_LIT .)
    OR              reduce using rule 284 (for_factor1 -> INT_LIT .)
    SEMICOLON       reduce using rule 284 (for_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 284 (for_factor1 -> INT_LIT .)


state 673

    (285) for_factor1 -> FLT_LIT .

    PLUS            reduce using rule 285 (for_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 285 (for_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 285 (for_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 285 (for_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 285 (for_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 285 (for_factor1 -> FLT_LIT .)
    GT              reduce using rule 285 (for_factor1 -> FLT_LIT .)
    LT              reduce using rule 285 (for_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 285 (for_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 285 (for_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 285 (for_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 285 (for_factor1 -> FLT_LIT .)
    AND             reduce using rule 285 (for_factor1 -> FLT_LIT .)
    OR              reduce using rule 285 (for_factor1 -> FLT_LIT .)
    SEMICOLON       reduce using rule 285 (for_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 285 (for_factor1 -> FLT_LIT .)


state 674

    (286) for_factor1 -> DAY .

    PLUS            reduce using rule 286 (for_factor1 -> DAY .)
    MINUS           reduce using rule 286 (for_factor1 -> DAY .)
    MULTIPLY        reduce using rule 286 (for_factor1 -> DAY .)
    DIVISION        reduce using rule 286 (for_factor1 -> DAY .)
    MODULO          reduce using rule 286 (for_factor1 -> DAY .)
    EXPONENT        reduce using rule 286 (for_factor1 -> DAY .)
    GT              reduce using rule 286 (for_factor1 -> DAY .)
    LT              reduce using rule 286 (for_factor1 -> DAY .)
    EQ_EQ           reduce using rule 286 (for_factor1 -> DAY .)
    GT_EQ           reduce using rule 286 (for_factor1 -> DAY .)
    LT_EQ           reduce using rule 286 (for_factor1 -> DAY .)
    NOT_EQ          reduce using rule 286 (for_factor1 -> DAY .)
    AND             reduce using rule 286 (for_factor1 -> DAY .)
    OR              reduce using rule 286 (for_factor1 -> DAY .)
    SEMICOLON       reduce using rule 286 (for_factor1 -> DAY .)
    RPAREN          reduce using rule 286 (for_factor1 -> DAY .)


state 675

    (287) for_factor1 -> NIGHT .

    PLUS            reduce using rule 287 (for_factor1 -> NIGHT .)
    MINUS           reduce using rule 287 (for_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 287 (for_factor1 -> NIGHT .)
    DIVISION        reduce using rule 287 (for_factor1 -> NIGHT .)
    MODULO          reduce using rule 287 (for_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 287 (for_factor1 -> NIGHT .)
    GT              reduce using rule 287 (for_factor1 -> NIGHT .)
    LT              reduce using rule 287 (for_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 287 (for_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 287 (for_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 287 (for_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 287 (for_factor1 -> NIGHT .)
    AND             reduce using rule 287 (for_factor1 -> NIGHT .)
    OR              reduce using rule 287 (for_factor1 -> NIGHT .)
    SEMICOLON       reduce using rule 287 (for_factor1 -> NIGHT .)
    RPAREN          reduce using rule 287 (for_factor1 -> NIGHT .)


state 676

    (288) for_factor1 -> STR_LIT .

    PLUS            reduce using rule 288 (for_factor1 -> STR_LIT .)
    MINUS           reduce using rule 288 (for_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 288 (for_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 288 (for_factor1 -> STR_LIT .)
    MODULO          reduce using rule 288 (for_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 288 (for_factor1 -> STR_LIT .)
    GT              reduce using rule 288 (for_factor1 -> STR_LIT .)
    LT              reduce using rule 288 (for_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 288 (for_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 288 (for_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 288 (for_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 288 (for_factor1 -> STR_LIT .)
    AND             reduce using rule 288 (for_factor1 -> STR_LIT .)
    OR              reduce using rule 288 (for_factor1 -> STR_LIT .)
    SEMICOLON       reduce using rule 288 (for_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 288 (for_factor1 -> STR_LIT .)


state 677

    (317) control_variable -> INT IDENT EQ . control_var_tail
    (318) control_var_tail -> . INT_LIT
    (319) control_var_tail -> . var_call
    (352) var_call -> . IDENT list_index

    INT_LIT         shift and go to state 738
    IDENT           shift and go to state 55

    control_var_tail               shift and go to state 737
    var_call                       shift and go to state 739

state 678

    (295) until_factor -> LPAREN until_factor RPAREN .

    PLUS            reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    MINUS           reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    MULTIPLY        reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    DIVISION        reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    MODULO          reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    EXPONENT        reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    GT              reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    LT              reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    EQ_EQ           reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    GT_EQ           reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    LT_EQ           reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    NOT_EQ          reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    AND             reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    OR              reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)
    RPAREN          reduce using rule 295 (until_factor -> LPAREN until_factor RPAREN .)


state 679

    (289) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE . statements RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 740
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 680

    (296) until_factor_tail -> PLUS until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 741
    empty                          shift and go to state 583

state 681

    (297) until_factor_tail -> MINUS until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 742
    empty                          shift and go to state 583

state 682

    (298) until_factor_tail -> MULTIPLY until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 743
    empty                          shift and go to state 583

state 683

    (299) until_factor_tail -> DIVISION until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 744
    empty                          shift and go to state 583

state 684

    (300) until_factor_tail -> MODULO until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 745
    empty                          shift and go to state 583

state 685

    (301) until_factor_tail -> EXPONENT until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 746
    empty                          shift and go to state 583

state 686

    (302) until_factor_tail -> GT until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 747
    empty                          shift and go to state 583

state 687

    (303) until_factor_tail -> LT until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 748
    empty                          shift and go to state 583

state 688

    (304) until_factor_tail -> EQ_EQ until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 749
    empty                          shift and go to state 583

state 689

    (305) until_factor_tail -> GT_EQ until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 750
    empty                          shift and go to state 583

state 690

    (306) until_factor_tail -> LT_EQ until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 751
    empty                          shift and go to state 583

state 691

    (307) until_factor_tail -> NOT_EQ until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 752
    empty                          shift and go to state 583

state 692

    (308) until_factor_tail -> AND until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 753
    empty                          shift and go to state 583

state 693

    (309) until_factor_tail -> OR until_factor . until_factor_tail
    (296) until_factor_tail -> . PLUS until_factor until_factor_tail
    (297) until_factor_tail -> . MINUS until_factor until_factor_tail
    (298) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (299) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (300) until_factor_tail -> . MODULO until_factor until_factor_tail
    (301) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (302) until_factor_tail -> . GT until_factor until_factor_tail
    (303) until_factor_tail -> . LT until_factor until_factor_tail
    (304) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (305) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (306) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (307) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (308) until_factor_tail -> . AND until_factor until_factor_tail
    (309) until_factor_tail -> . OR until_factor until_factor_tail
    (310) until_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 569
    MINUS           shift and go to state 570
    MULTIPLY        shift and go to state 571
    DIVISION        shift and go to state 572
    MODULO          shift and go to state 573
    EXPONENT        shift and go to state 574
    GT              shift and go to state 575
    LT              shift and go to state 576
    EQ_EQ           shift and go to state 577
    GT_EQ           shift and go to state 578
    LT_EQ           shift and go to state 579
    NOT_EQ          shift and go to state 580
    AND             shift and go to state 581
    OR              shift and go to state 582
    RPAREN          reduce using rule 398 (empty -> .)

    until_factor_tail              shift and go to state 754
    empty                          shift and go to state 583

state 694

    (316) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL . LPAREN until_expression RPAREN

    LPAREN          shift and go to state 755


state 695

    (395) typecast_value -> FUNCTION_NAME LPAREN RPAREN .

    RPAREN          reduce using rule 395 (typecast_value -> FUNCTION_NAME LPAREN RPAREN .)


state 696

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition . OTHERWISE LBRACE statements RBRACE RBRACE

    OTHERWISE       shift and go to state 756


state 697

    (223) switch_condition -> SHIFT . switch_value COLON statements switchcond_tail
    (224) switch_value -> . switch_type_cast
    (225) switch_value -> . switch_expression
    (226) switch_value -> . function_call
    (253) switch_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (254) switch_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (255) switch_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (256) switch_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (227) switch_expression -> . switch_factor switch_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 761
    CONVERT_TO_FLT  shift and go to state 763
    CONVERT_TO_BLN  shift and go to state 764
    CONVERT_TO_STR  shift and go to state 765
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_value                   shift and go to state 757
    switch_type_cast               shift and go to state 758
    switch_expression              shift and go to state 759
    function_call                  shift and go to state 760
    switch_factor                  shift and go to state 766
    input_statement                shift and go to state 261
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 698

    (337) assign_tail -> DOT SPLICE LPAREN start COMMA . deleteCount COMMA splice_items RPAREN
    (348) deleteCount -> . empty
    (349) deleteCount -> . INT_LIT
    (398) empty -> .

    INT_LIT         shift and go to state 777
    COMMA           reduce using rule 398 (empty -> .)

    deleteCount                    shift and go to state 775
    empty                          shift and go to state 776

state 699

    (338) assign_tail -> DOT PUSH LPAREN list_element RPAREN .

    NEWLINE         reduce using rule 338 (assign_tail -> DOT PUSH LPAREN list_element RPAREN .)


state 700

    (329) arg_tail -> COMMA arg_value arg_tail .

    RPAREN          reduce using rule 329 (arg_tail -> COMMA arg_value arg_tail .)


state 701

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 778
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 702

    (202) condition_tail -> PLUS condition_factor condition_tail .

    RPAREN          reduce using rule 202 (condition_tail -> PLUS condition_factor condition_tail .)


state 703

    (203) condition_tail -> MINUS condition_factor condition_tail .

    RPAREN          reduce using rule 203 (condition_tail -> MINUS condition_factor condition_tail .)


state 704

    (204) condition_tail -> MULTIPLY condition_factor condition_tail .

    RPAREN          reduce using rule 204 (condition_tail -> MULTIPLY condition_factor condition_tail .)


state 705

    (205) condition_tail -> DIVISION condition_factor condition_tail .

    RPAREN          reduce using rule 205 (condition_tail -> DIVISION condition_factor condition_tail .)


state 706

    (206) condition_tail -> MODULO condition_factor condition_tail .

    RPAREN          reduce using rule 206 (condition_tail -> MODULO condition_factor condition_tail .)


state 707

    (207) condition_tail -> EXPONENT condition_factor condition_tail .

    RPAREN          reduce using rule 207 (condition_tail -> EXPONENT condition_factor condition_tail .)


state 708

    (208) condition_tail -> GT condition_factor condition_tail .

    RPAREN          reduce using rule 208 (condition_tail -> GT condition_factor condition_tail .)


state 709

    (209) condition_tail -> LT condition_factor condition_tail .

    RPAREN          reduce using rule 209 (condition_tail -> LT condition_factor condition_tail .)


state 710

    (210) condition_tail -> EQ_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 210 (condition_tail -> EQ_EQ condition_factor condition_tail .)


state 711

    (211) condition_tail -> GT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 211 (condition_tail -> GT_EQ condition_factor condition_tail .)


state 712

    (212) condition_tail -> LT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 212 (condition_tail -> LT_EQ condition_factor condition_tail .)


state 713

    (213) condition_tail -> NOT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 213 (condition_tail -> NOT_EQ condition_factor condition_tail .)


state 714

    (214) condition_tail -> AND condition_factor condition_tail .

    RPAREN          reduce using rule 214 (condition_tail -> AND condition_factor condition_tail .)


state 715

    (215) condition_tail -> OR condition_factor condition_tail .

    RPAREN          reduce using rule 215 (condition_tail -> OR condition_factor condition_tail .)


state 716

    (268) for_factor -> LPAREN for_factor . RPAREN

    RPAREN          shift and go to state 779


state 717

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON . update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (320) update -> . var_call update_tail
    (352) var_call -> . IDENT list_index

    IDENT           shift and go to state 55

    update                         shift and go to state 780
    var_call                       shift and go to state 781

state 718

    (263) for_expression -> for_factor for_factor_tail .

    SEMICOLON       reduce using rule 263 (for_expression -> for_factor for_factor_tail .)


state 719

    (269) for_factor_tail -> PLUS . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 782
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 720

    (270) for_factor_tail -> MINUS . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 783
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 721

    (271) for_factor_tail -> MULTIPLY . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 784
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 722

    (272) for_factor_tail -> DIVISION . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 785
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 723

    (273) for_factor_tail -> MODULO . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 786
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 724

    (274) for_factor_tail -> EXPONENT . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 787
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 725

    (275) for_factor_tail -> GT . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 788
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 726

    (276) for_factor_tail -> LT . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 789
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 727

    (277) for_factor_tail -> EQ_EQ . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 790
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 728

    (278) for_factor_tail -> GT_EQ . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 791
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 729

    (279) for_factor_tail -> LT_EQ . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 792
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 730

    (280) for_factor_tail -> NOT_EQ . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 793
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 731

    (281) for_factor_tail -> AND . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 794
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 732

    (282) for_factor_tail -> OR . for_factor for_factor_tail
    (264) for_factor -> . var_call postfix
    (265) for_factor -> . for_factor1
    (266) for_factor -> . TILDE INT_LIT
    (267) for_factor -> . TILDE FLT_LIT
    (268) for_factor -> . LPAREN for_factor RPAREN
    (352) var_call -> . IDENT list_index
    (284) for_factor1 -> . INT_LIT
    (285) for_factor1 -> . FLT_LIT
    (286) for_factor1 -> . DAY
    (287) for_factor1 -> . NIGHT
    (288) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 671
    LPAREN          shift and go to state 666
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 672
    FLT_LIT         shift and go to state 673
    DAY             shift and go to state 674
    NIGHT           shift and go to state 675
    STR_LIT         shift and go to state 676

    for_factor                     shift and go to state 795
    var_call                       shift and go to state 669
    for_factor1                    shift and go to state 670

state 733

    (283) for_factor_tail -> empty .

    SEMICOLON       reduce using rule 283 (for_factor_tail -> empty .)


state 734

    (264) for_factor -> var_call postfix .

    PLUS            reduce using rule 264 (for_factor -> var_call postfix .)
    MINUS           reduce using rule 264 (for_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 264 (for_factor -> var_call postfix .)
    DIVISION        reduce using rule 264 (for_factor -> var_call postfix .)
    MODULO          reduce using rule 264 (for_factor -> var_call postfix .)
    EXPONENT        reduce using rule 264 (for_factor -> var_call postfix .)
    GT              reduce using rule 264 (for_factor -> var_call postfix .)
    LT              reduce using rule 264 (for_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 264 (for_factor -> var_call postfix .)
    GT_EQ           reduce using rule 264 (for_factor -> var_call postfix .)
    LT_EQ           reduce using rule 264 (for_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 264 (for_factor -> var_call postfix .)
    AND             reduce using rule 264 (for_factor -> var_call postfix .)
    OR              reduce using rule 264 (for_factor -> var_call postfix .)
    SEMICOLON       reduce using rule 264 (for_factor -> var_call postfix .)
    RPAREN          reduce using rule 264 (for_factor -> var_call postfix .)


state 735

    (266) for_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    GT              reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    LT              reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    AND             reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    OR              reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    SEMICOLON       reduce using rule 266 (for_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 266 (for_factor -> TILDE INT_LIT .)


state 736

    (267) for_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    SEMICOLON       reduce using rule 267 (for_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 267 (for_factor -> TILDE FLT_LIT .)


state 737

    (317) control_variable -> INT IDENT EQ control_var_tail .

    SEMICOLON       reduce using rule 317 (control_variable -> INT IDENT EQ control_var_tail .)


state 738

    (318) control_var_tail -> INT_LIT .

    SEMICOLON       reduce using rule 318 (control_var_tail -> INT_LIT .)


state 739

    (319) control_var_tail -> var_call .

    SEMICOLON       reduce using rule 319 (control_var_tail -> var_call .)


state 740

    (289) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 796


state 741

    (296) until_factor_tail -> PLUS until_factor until_factor_tail .

    RPAREN          reduce using rule 296 (until_factor_tail -> PLUS until_factor until_factor_tail .)


state 742

    (297) until_factor_tail -> MINUS until_factor until_factor_tail .

    RPAREN          reduce using rule 297 (until_factor_tail -> MINUS until_factor until_factor_tail .)


state 743

    (298) until_factor_tail -> MULTIPLY until_factor until_factor_tail .

    RPAREN          reduce using rule 298 (until_factor_tail -> MULTIPLY until_factor until_factor_tail .)


state 744

    (299) until_factor_tail -> DIVISION until_factor until_factor_tail .

    RPAREN          reduce using rule 299 (until_factor_tail -> DIVISION until_factor until_factor_tail .)


state 745

    (300) until_factor_tail -> MODULO until_factor until_factor_tail .

    RPAREN          reduce using rule 300 (until_factor_tail -> MODULO until_factor until_factor_tail .)


state 746

    (301) until_factor_tail -> EXPONENT until_factor until_factor_tail .

    RPAREN          reduce using rule 301 (until_factor_tail -> EXPONENT until_factor until_factor_tail .)


state 747

    (302) until_factor_tail -> GT until_factor until_factor_tail .

    RPAREN          reduce using rule 302 (until_factor_tail -> GT until_factor until_factor_tail .)


state 748

    (303) until_factor_tail -> LT until_factor until_factor_tail .

    RPAREN          reduce using rule 303 (until_factor_tail -> LT until_factor until_factor_tail .)


state 749

    (304) until_factor_tail -> EQ_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 304 (until_factor_tail -> EQ_EQ until_factor until_factor_tail .)


state 750

    (305) until_factor_tail -> GT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 305 (until_factor_tail -> GT_EQ until_factor until_factor_tail .)


state 751

    (306) until_factor_tail -> LT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 306 (until_factor_tail -> LT_EQ until_factor until_factor_tail .)


state 752

    (307) until_factor_tail -> NOT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 307 (until_factor_tail -> NOT_EQ until_factor until_factor_tail .)


state 753

    (308) until_factor_tail -> AND until_factor until_factor_tail .

    RPAREN          reduce using rule 308 (until_factor_tail -> AND until_factor until_factor_tail .)


state 754

    (309) until_factor_tail -> OR until_factor until_factor_tail .

    RPAREN          reduce using rule 309 (until_factor_tail -> OR until_factor until_factor_tail .)


state 755

    (316) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN . until_expression RPAREN
    (290) until_expression -> . until_factor until_factor_tail
    (291) until_factor -> . var_call postfix
    (292) until_factor -> . until_factor1
    (293) until_factor -> . TILDE INT_LIT
    (294) until_factor -> . TILDE FLT_LIT
    (295) until_factor -> . LPAREN until_factor RPAREN
    (352) var_call -> . IDENT list_index
    (311) until_factor1 -> . INT_LIT
    (312) until_factor1 -> . FLT_LIT
    (313) until_factor1 -> . DAY
    (314) until_factor1 -> . NIGHT
    (315) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 463
    LPAREN          shift and go to state 458
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 464
    FLT_LIT         shift and go to state 465
    DAY             shift and go to state 466
    NIGHT           shift and go to state 467
    STR_LIT         shift and go to state 468

    until_expression               shift and go to state 797
    until_factor                   shift and go to state 460
    var_call                       shift and go to state 461
    until_factor1                  shift and go to state 462

state 756

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE . LBRACE statements RBRACE RBRACE

    LBRACE          shift and go to state 798


state 757

    (223) switch_condition -> SHIFT switch_value . COLON statements switchcond_tail

    COLON           shift and go to state 799


state 758

    (224) switch_value -> switch_type_cast .

    COLON           reduce using rule 224 (switch_value -> switch_type_cast .)


state 759

    (225) switch_value -> switch_expression .

    COLON           reduce using rule 225 (switch_value -> switch_expression .)


state 760

    (226) switch_value -> function_call .

    COLON           reduce using rule 226 (switch_value -> function_call .)


state 761

    (253) switch_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 800


state 762

    (232) switch_factor -> LPAREN . switch_factor RPAREN
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 801
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 763

    (254) switch_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 802


state 764

    (255) switch_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 803


state 765

    (256) switch_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 804


state 766

    (227) switch_expression -> switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 805
    empty                          shift and go to state 820

state 767

    (228) switch_factor -> var_call . postfix
    (359) postfix -> . empty
    (360) postfix -> . postfix_op
    (398) empty -> .
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 398 (empty -> .)
    MINUS           reduce using rule 398 (empty -> .)
    MULTIPLY        reduce using rule 398 (empty -> .)
    DIVISION        reduce using rule 398 (empty -> .)
    MODULO          reduce using rule 398 (empty -> .)
    EXPONENT        reduce using rule 398 (empty -> .)
    GT              reduce using rule 398 (empty -> .)
    LT              reduce using rule 398 (empty -> .)
    EQ_EQ           reduce using rule 398 (empty -> .)
    GT_EQ           reduce using rule 398 (empty -> .)
    LT_EQ           reduce using rule 398 (empty -> .)
    NOT_EQ          reduce using rule 398 (empty -> .)
    AND             reduce using rule 398 (empty -> .)
    OR              reduce using rule 398 (empty -> .)
    COLON           reduce using rule 398 (empty -> .)
    RPAREN          reduce using rule 398 (empty -> .)
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93

    postfix                        shift and go to state 821
    empty                          shift and go to state 90
    postfix_op                     shift and go to state 91

state 768

    (229) switch_factor -> switch_factor1 .

    PLUS            reduce using rule 229 (switch_factor -> switch_factor1 .)
    MINUS           reduce using rule 229 (switch_factor -> switch_factor1 .)
    MULTIPLY        reduce using rule 229 (switch_factor -> switch_factor1 .)
    DIVISION        reduce using rule 229 (switch_factor -> switch_factor1 .)
    MODULO          reduce using rule 229 (switch_factor -> switch_factor1 .)
    EXPONENT        reduce using rule 229 (switch_factor -> switch_factor1 .)
    GT              reduce using rule 229 (switch_factor -> switch_factor1 .)
    LT              reduce using rule 229 (switch_factor -> switch_factor1 .)
    EQ_EQ           reduce using rule 229 (switch_factor -> switch_factor1 .)
    GT_EQ           reduce using rule 229 (switch_factor -> switch_factor1 .)
    LT_EQ           reduce using rule 229 (switch_factor -> switch_factor1 .)
    NOT_EQ          reduce using rule 229 (switch_factor -> switch_factor1 .)
    AND             reduce using rule 229 (switch_factor -> switch_factor1 .)
    OR              reduce using rule 229 (switch_factor -> switch_factor1 .)
    COLON           reduce using rule 229 (switch_factor -> switch_factor1 .)
    RPAREN          reduce using rule 229 (switch_factor -> switch_factor1 .)


state 769

    (230) switch_factor -> TILDE . INT_LIT
    (231) switch_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 822
    FLT_LIT         shift and go to state 823


state 770

    (248) switch_factor1 -> INT_LIT .

    PLUS            reduce using rule 248 (switch_factor1 -> INT_LIT .)
    MINUS           reduce using rule 248 (switch_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 248 (switch_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 248 (switch_factor1 -> INT_LIT .)
    MODULO          reduce using rule 248 (switch_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 248 (switch_factor1 -> INT_LIT .)
    GT              reduce using rule 248 (switch_factor1 -> INT_LIT .)
    LT              reduce using rule 248 (switch_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 248 (switch_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 248 (switch_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 248 (switch_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 248 (switch_factor1 -> INT_LIT .)
    AND             reduce using rule 248 (switch_factor1 -> INT_LIT .)
    OR              reduce using rule 248 (switch_factor1 -> INT_LIT .)
    COLON           reduce using rule 248 (switch_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 248 (switch_factor1 -> INT_LIT .)


state 771

    (249) switch_factor1 -> FLT_LIT .

    PLUS            reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    GT              reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    LT              reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    AND             reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    OR              reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    COLON           reduce using rule 249 (switch_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 249 (switch_factor1 -> FLT_LIT .)


state 772

    (250) switch_factor1 -> DAY .

    PLUS            reduce using rule 250 (switch_factor1 -> DAY .)
    MINUS           reduce using rule 250 (switch_factor1 -> DAY .)
    MULTIPLY        reduce using rule 250 (switch_factor1 -> DAY .)
    DIVISION        reduce using rule 250 (switch_factor1 -> DAY .)
    MODULO          reduce using rule 250 (switch_factor1 -> DAY .)
    EXPONENT        reduce using rule 250 (switch_factor1 -> DAY .)
    GT              reduce using rule 250 (switch_factor1 -> DAY .)
    LT              reduce using rule 250 (switch_factor1 -> DAY .)
    EQ_EQ           reduce using rule 250 (switch_factor1 -> DAY .)
    GT_EQ           reduce using rule 250 (switch_factor1 -> DAY .)
    LT_EQ           reduce using rule 250 (switch_factor1 -> DAY .)
    NOT_EQ          reduce using rule 250 (switch_factor1 -> DAY .)
    AND             reduce using rule 250 (switch_factor1 -> DAY .)
    OR              reduce using rule 250 (switch_factor1 -> DAY .)
    COLON           reduce using rule 250 (switch_factor1 -> DAY .)
    RPAREN          reduce using rule 250 (switch_factor1 -> DAY .)


state 773

    (251) switch_factor1 -> NIGHT .

    PLUS            reduce using rule 251 (switch_factor1 -> NIGHT .)
    MINUS           reduce using rule 251 (switch_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 251 (switch_factor1 -> NIGHT .)
    DIVISION        reduce using rule 251 (switch_factor1 -> NIGHT .)
    MODULO          reduce using rule 251 (switch_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 251 (switch_factor1 -> NIGHT .)
    GT              reduce using rule 251 (switch_factor1 -> NIGHT .)
    LT              reduce using rule 251 (switch_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 251 (switch_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 251 (switch_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 251 (switch_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 251 (switch_factor1 -> NIGHT .)
    AND             reduce using rule 251 (switch_factor1 -> NIGHT .)
    OR              reduce using rule 251 (switch_factor1 -> NIGHT .)
    COLON           reduce using rule 251 (switch_factor1 -> NIGHT .)
    RPAREN          reduce using rule 251 (switch_factor1 -> NIGHT .)


state 774

    (252) switch_factor1 -> STR_LIT .

    PLUS            reduce using rule 252 (switch_factor1 -> STR_LIT .)
    MINUS           reduce using rule 252 (switch_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 252 (switch_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 252 (switch_factor1 -> STR_LIT .)
    MODULO          reduce using rule 252 (switch_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 252 (switch_factor1 -> STR_LIT .)
    GT              reduce using rule 252 (switch_factor1 -> STR_LIT .)
    LT              reduce using rule 252 (switch_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 252 (switch_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 252 (switch_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 252 (switch_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 252 (switch_factor1 -> STR_LIT .)
    AND             reduce using rule 252 (switch_factor1 -> STR_LIT .)
    OR              reduce using rule 252 (switch_factor1 -> STR_LIT .)
    COLON           reduce using rule 252 (switch_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 252 (switch_factor1 -> STR_LIT .)


state 775

    (337) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount . COMMA splice_items RPAREN

    COMMA           shift and go to state 824


state 776

    (348) deleteCount -> empty .

    COMMA           reduce using rule 348 (deleteCount -> empty .)


state 777

    (349) deleteCount -> INT_LIT .

    COMMA           reduce using rule 349 (deleteCount -> INT_LIT .)


state 778

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 825
    empty                          shift and go to state 17

state 779

    (268) for_factor -> LPAREN for_factor RPAREN .

    PLUS            reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    MINUS           reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    MULTIPLY        reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    DIVISION        reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    MODULO          reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    EXPONENT        reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    GT              reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    LT              reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    EQ_EQ           reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    GT_EQ           reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    LT_EQ           reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    NOT_EQ          reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    AND             reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    OR              reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    SEMICOLON       reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)
    RPAREN          reduce using rule 268 (for_factor -> LPAREN for_factor RPAREN .)


state 780

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 826


state 781

    (320) update -> var_call . update_tail
    (321) update_tail -> . postfix_op
    (322) update_tail -> . compound_op value
    (323) postfix_op -> . PLUS_PLUS
    (324) postfix_op -> . MINUS_MINUS
    (342) compound_op -> . PLUS_EQ
    (343) compound_op -> . MINUS_EQ
    (344) compound_op -> . MUL_EQ
    (345) compound_op -> . DIV_EQ
    (346) compound_op -> . MOD_EQ

    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    PLUS_EQ         shift and go to state 321
    MINUS_EQ        shift and go to state 322
    MUL_EQ          shift and go to state 323
    DIV_EQ          shift and go to state 324
    MOD_EQ          shift and go to state 325

    update_tail                    shift and go to state 827
    postfix_op                     shift and go to state 828
    compound_op                    shift and go to state 829

state 782

    (269) for_factor_tail -> PLUS for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 830
    empty                          shift and go to state 733

state 783

    (270) for_factor_tail -> MINUS for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 831
    empty                          shift and go to state 733

state 784

    (271) for_factor_tail -> MULTIPLY for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 832
    empty                          shift and go to state 733

state 785

    (272) for_factor_tail -> DIVISION for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 833
    empty                          shift and go to state 733

state 786

    (273) for_factor_tail -> MODULO for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 834
    empty                          shift and go to state 733

state 787

    (274) for_factor_tail -> EXPONENT for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 835
    empty                          shift and go to state 733

state 788

    (275) for_factor_tail -> GT for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 836
    empty                          shift and go to state 733

state 789

    (276) for_factor_tail -> LT for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 837
    empty                          shift and go to state 733

state 790

    (277) for_factor_tail -> EQ_EQ for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 838
    empty                          shift and go to state 733

state 791

    (278) for_factor_tail -> GT_EQ for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 839
    empty                          shift and go to state 733

state 792

    (279) for_factor_tail -> LT_EQ for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 840
    empty                          shift and go to state 733

state 793

    (280) for_factor_tail -> NOT_EQ for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 841
    empty                          shift and go to state 733

state 794

    (281) for_factor_tail -> AND for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 842
    empty                          shift and go to state 733

state 795

    (282) for_factor_tail -> OR for_factor . for_factor_tail
    (269) for_factor_tail -> . PLUS for_factor for_factor_tail
    (270) for_factor_tail -> . MINUS for_factor for_factor_tail
    (271) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (272) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (273) for_factor_tail -> . MODULO for_factor for_factor_tail
    (274) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (275) for_factor_tail -> . GT for_factor for_factor_tail
    (276) for_factor_tail -> . LT for_factor for_factor_tail
    (277) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (278) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (279) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (280) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (281) for_factor_tail -> . AND for_factor for_factor_tail
    (282) for_factor_tail -> . OR for_factor for_factor_tail
    (283) for_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 719
    MINUS           shift and go to state 720
    MULTIPLY        shift and go to state 721
    DIVISION        shift and go to state 722
    MODULO          shift and go to state 723
    EXPONENT        shift and go to state 724
    GT              shift and go to state 725
    LT              shift and go to state 726
    EQ_EQ           shift and go to state 727
    GT_EQ           shift and go to state 728
    LT_EQ           shift and go to state 729
    NOT_EQ          shift and go to state 730
    AND             shift and go to state 731
    OR              shift and go to state 732
    SEMICOLON       reduce using rule 398 (empty -> .)

    for_factor_tail                shift and go to state 843
    empty                          shift and go to state 733

state 796

    (289) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .

    NEWLINE         reduce using rule 289 (until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .)


state 797

    (316) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression . RPAREN

    RPAREN          shift and go to state 844


state 798

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE . statements RBRACE RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 845
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 799

    (223) switch_condition -> SHIFT switch_value COLON . statements switchcond_tail
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SHIFT           reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 846
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 800

    (253) switch_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 847
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 801

    (232) switch_factor -> LPAREN switch_factor . RPAREN

    RPAREN          shift and go to state 848


state 802

    (254) switch_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 849
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 803

    (255) switch_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 850
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 804

    (256) switch_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (394) typecast_value -> . expression
    (395) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (396) typecast_value -> . input_statement
    (32) expression -> . factor factor_tail
    (397) input_statement -> . INPUT LPAREN RPAREN
    (33) factor -> . var_call postfix
    (34) factor -> . literal1
    (35) factor -> . TILDE INT_LIT
    (36) factor -> . TILDE FLT_LIT
    (37) factor -> . LPAREN factor_expression RPAREN
    (352) var_call -> . IDENT list_index
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 474
    INPUT           shift and go to state 267
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    typecast_value                 shift and go to state 851
    expression                     shift and go to state 473
    input_statement                shift and go to state 475
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 805

    (227) switch_expression -> switch_factor switch_factor_tail .

    COLON           reduce using rule 227 (switch_expression -> switch_factor switch_factor_tail .)


state 806

    (233) switch_factor_tail -> PLUS . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 852
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 807

    (234) switch_factor_tail -> MINUS . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 853
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 808

    (235) switch_factor_tail -> MULTIPLY . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 854
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 809

    (236) switch_factor_tail -> DIVISION . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 855
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 810

    (237) switch_factor_tail -> MODULO . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 856
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 811

    (238) switch_factor_tail -> EXPONENT . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 857
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 812

    (239) switch_factor_tail -> GT . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 858
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 813

    (240) switch_factor_tail -> LT . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 859
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 814

    (241) switch_factor_tail -> EQ_EQ . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 860
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 815

    (242) switch_factor_tail -> GT_EQ . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 861
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 816

    (243) switch_factor_tail -> LT_EQ . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 862
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 817

    (244) switch_factor_tail -> NOT_EQ . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 863
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 818

    (245) switch_factor_tail -> AND . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 864
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 819

    (246) switch_factor_tail -> OR . switch_factor switch_factor_tail
    (228) switch_factor -> . var_call postfix
    (229) switch_factor -> . switch_factor1
    (230) switch_factor -> . TILDE INT_LIT
    (231) switch_factor -> . TILDE FLT_LIT
    (232) switch_factor -> . LPAREN switch_factor RPAREN
    (352) var_call -> . IDENT list_index
    (248) switch_factor1 -> . INT_LIT
    (249) switch_factor1 -> . FLT_LIT
    (250) switch_factor1 -> . DAY
    (251) switch_factor1 -> . NIGHT
    (252) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 769
    LPAREN          shift and go to state 762
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 770
    FLT_LIT         shift and go to state 771
    DAY             shift and go to state 772
    NIGHT           shift and go to state 773
    STR_LIT         shift and go to state 774

    switch_factor                  shift and go to state 865
    var_call                       shift and go to state 767
    switch_factor1                 shift and go to state 768

state 820

    (247) switch_factor_tail -> empty .

    COLON           reduce using rule 247 (switch_factor_tail -> empty .)


state 821

    (228) switch_factor -> var_call postfix .

    PLUS            reduce using rule 228 (switch_factor -> var_call postfix .)
    MINUS           reduce using rule 228 (switch_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 228 (switch_factor -> var_call postfix .)
    DIVISION        reduce using rule 228 (switch_factor -> var_call postfix .)
    MODULO          reduce using rule 228 (switch_factor -> var_call postfix .)
    EXPONENT        reduce using rule 228 (switch_factor -> var_call postfix .)
    GT              reduce using rule 228 (switch_factor -> var_call postfix .)
    LT              reduce using rule 228 (switch_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 228 (switch_factor -> var_call postfix .)
    GT_EQ           reduce using rule 228 (switch_factor -> var_call postfix .)
    LT_EQ           reduce using rule 228 (switch_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 228 (switch_factor -> var_call postfix .)
    AND             reduce using rule 228 (switch_factor -> var_call postfix .)
    OR              reduce using rule 228 (switch_factor -> var_call postfix .)
    COLON           reduce using rule 228 (switch_factor -> var_call postfix .)
    RPAREN          reduce using rule 228 (switch_factor -> var_call postfix .)


state 822

    (230) switch_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    GT              reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    LT              reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    AND             reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    OR              reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    COLON           reduce using rule 230 (switch_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 230 (switch_factor -> TILDE INT_LIT .)


state 823

    (231) switch_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    COLON           reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 231 (switch_factor -> TILDE FLT_LIT .)


state 824

    (337) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA . splice_items RPAREN
    (350) splice_items -> . empty
    (351) splice_items -> . list_element
    (398) empty -> .
    (24) list_element -> . literal element_tail
    (79) literal -> . literal1
    (80) literal -> . literal2
    (81) literal1 -> . INT_LIT
    (82) literal1 -> . FLT_LIT
    (83) literal1 -> . DAY
    (84) literal1 -> . NIGHT
    (85) literal1 -> . STR_LIT
    (86) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 398 (empty -> .)
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 88

    splice_items                   shift and go to state 866
    empty                          shift and go to state 867
    list_element                   shift and go to state 868
    literal                        shift and go to state 85
    literal1                       shift and go to state 86
    literal2                       shift and go to state 87

state 825

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RBRACE          shift and go to state 869


state 826

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 870


state 827

    (320) update -> var_call update_tail .

    RPAREN          reduce using rule 320 (update -> var_call update_tail .)


state 828

    (321) update_tail -> postfix_op .

    RPAREN          reduce using rule 321 (update_tail -> postfix_op .)


state 829

    (322) update_tail -> compound_op . value
    (361) value -> . type_cast
    (362) value -> . value_expression
    (363) value -> . function_call
    (390) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (391) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (392) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (393) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (364) value_expression -> . value_factor value_factor_tail
    (325) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (326) function_call -> . input_statement
    (365) value_factor -> . var_call postfix
    (366) value_factor -> . value_factor1
    (367) value_factor -> . TILDE INT_LIT
    (368) value_factor -> . TILDE FLT_LIT
    (369) value_factor -> . LPAREN value_factor RPAREN
    (397) input_statement -> . INPUT LPAREN RPAREN
    (352) var_call -> . IDENT list_index
    (385) value_factor1 -> . INT_LIT
    (386) value_factor1 -> . FLT_LIT
    (387) value_factor1 -> . DAY
    (388) value_factor1 -> . NIGHT
    (389) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 331
    CONVERT_TO_FLT  shift and go to state 333
    CONVERT_TO_BLN  shift and go to state 334
    CONVERT_TO_STR  shift and go to state 335
    FUNCTION_NAME   shift and go to state 260
    TILDE           shift and go to state 339
    LPAREN          shift and go to state 332
    INPUT           shift and go to state 267
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 340
    FLT_LIT         shift and go to state 341
    DAY             shift and go to state 342
    NIGHT           shift and go to state 343
    STR_LIT         shift and go to state 344

    value                          shift and go to state 871
    type_cast                      shift and go to state 328
    value_expression               shift and go to state 329
    function_call                  shift and go to state 330
    value_factor                   shift and go to state 336
    input_statement                shift and go to state 261
    var_call                       shift and go to state 337
    value_factor1                  shift and go to state 338

state 830

    (269) for_factor_tail -> PLUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 269 (for_factor_tail -> PLUS for_factor for_factor_tail .)


state 831

    (270) for_factor_tail -> MINUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 270 (for_factor_tail -> MINUS for_factor for_factor_tail .)


state 832

    (271) for_factor_tail -> MULTIPLY for_factor for_factor_tail .

    SEMICOLON       reduce using rule 271 (for_factor_tail -> MULTIPLY for_factor for_factor_tail .)


state 833

    (272) for_factor_tail -> DIVISION for_factor for_factor_tail .

    SEMICOLON       reduce using rule 272 (for_factor_tail -> DIVISION for_factor for_factor_tail .)


state 834

    (273) for_factor_tail -> MODULO for_factor for_factor_tail .

    SEMICOLON       reduce using rule 273 (for_factor_tail -> MODULO for_factor for_factor_tail .)


state 835

    (274) for_factor_tail -> EXPONENT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 274 (for_factor_tail -> EXPONENT for_factor for_factor_tail .)


state 836

    (275) for_factor_tail -> GT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 275 (for_factor_tail -> GT for_factor for_factor_tail .)


state 837

    (276) for_factor_tail -> LT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 276 (for_factor_tail -> LT for_factor for_factor_tail .)


state 838

    (277) for_factor_tail -> EQ_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 277 (for_factor_tail -> EQ_EQ for_factor for_factor_tail .)


state 839

    (278) for_factor_tail -> GT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 278 (for_factor_tail -> GT_EQ for_factor for_factor_tail .)


state 840

    (279) for_factor_tail -> LT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 279 (for_factor_tail -> LT_EQ for_factor for_factor_tail .)


state 841

    (280) for_factor_tail -> NOT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 280 (for_factor_tail -> NOT_EQ for_factor for_factor_tail .)


state 842

    (281) for_factor_tail -> AND for_factor for_factor_tail .

    SEMICOLON       reduce using rule 281 (for_factor_tail -> AND for_factor for_factor_tail .)


state 843

    (282) for_factor_tail -> OR for_factor for_factor_tail .

    SEMICOLON       reduce using rule 282 (for_factor_tail -> OR for_factor for_factor_tail .)


state 844

    (316) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .

    NEWLINE         reduce using rule 316 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .)


state 845

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements . RBRACE RBRACE

    RBRACE          shift and go to state 872


state 846

    (223) switch_condition -> SHIFT switch_value COLON statements . switchcond_tail
    (257) switchcond_tail -> . switch_condition
    (258) switchcond_tail -> . empty
    (223) switch_condition -> . SHIFT switch_value COLON statements switchcond_tail
    (398) empty -> .

    SHIFT           shift and go to state 697
    OTHERWISE       reduce using rule 398 (empty -> .)

    switchcond_tail                shift and go to state 873
    switch_condition               shift and go to state 874
    empty                          shift and go to state 875

state 847

    (253) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 876


state 848

    (232) switch_factor -> LPAREN switch_factor RPAREN .

    PLUS            reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    MINUS           reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    MULTIPLY        reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    DIVISION        reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    MODULO          reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    EXPONENT        reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT              reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT              reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    EQ_EQ           reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT_EQ           reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT_EQ           reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    NOT_EQ          reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    AND             reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    OR              reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    COLON           reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)
    RPAREN          reduce using rule 232 (switch_factor -> LPAREN switch_factor RPAREN .)


state 849

    (254) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 877


state 850

    (255) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 878


state 851

    (256) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 879


state 852

    (233) switch_factor_tail -> PLUS switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 880
    empty                          shift and go to state 820

state 853

    (234) switch_factor_tail -> MINUS switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 881
    empty                          shift and go to state 820

state 854

    (235) switch_factor_tail -> MULTIPLY switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 882
    empty                          shift and go to state 820

state 855

    (236) switch_factor_tail -> DIVISION switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 883
    empty                          shift and go to state 820

state 856

    (237) switch_factor_tail -> MODULO switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 884
    empty                          shift and go to state 820

state 857

    (238) switch_factor_tail -> EXPONENT switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 885
    empty                          shift and go to state 820

state 858

    (239) switch_factor_tail -> GT switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 886
    empty                          shift and go to state 820

state 859

    (240) switch_factor_tail -> LT switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 887
    empty                          shift and go to state 820

state 860

    (241) switch_factor_tail -> EQ_EQ switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 888
    empty                          shift and go to state 820

state 861

    (242) switch_factor_tail -> GT_EQ switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 889
    empty                          shift and go to state 820

state 862

    (243) switch_factor_tail -> LT_EQ switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 890
    empty                          shift and go to state 820

state 863

    (244) switch_factor_tail -> NOT_EQ switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 891
    empty                          shift and go to state 820

state 864

    (245) switch_factor_tail -> AND switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 892
    empty                          shift and go to state 820

state 865

    (246) switch_factor_tail -> OR switch_factor . switch_factor_tail
    (233) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (234) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (235) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (236) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (237) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (238) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (239) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (240) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (241) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (242) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (243) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (244) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (245) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (246) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (247) switch_factor_tail -> . empty
    (398) empty -> .

    PLUS            shift and go to state 806
    MINUS           shift and go to state 807
    MULTIPLY        shift and go to state 808
    DIVISION        shift and go to state 809
    MODULO          shift and go to state 810
    EXPONENT        shift and go to state 811
    GT              shift and go to state 812
    LT              shift and go to state 813
    EQ_EQ           shift and go to state 814
    GT_EQ           shift and go to state 815
    LT_EQ           shift and go to state 816
    NOT_EQ          shift and go to state 817
    AND             shift and go to state 818
    OR              shift and go to state 819
    COLON           reduce using rule 398 (empty -> .)

    switch_factor_tail             shift and go to state 893
    empty                          shift and go to state 820

state 866

    (337) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items . RPAREN

    RPAREN          shift and go to state 894


state 867

    (350) splice_items -> empty .

    RPAREN          reduce using rule 350 (splice_items -> empty .)


state 868

    (351) splice_items -> list_element .

    RPAREN          reduce using rule 351 (splice_items -> list_element .)


state 869

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    OTHERWISE_CHECK reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 895
    empty                          shift and go to state 17

state 870

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 896
    empty                          shift and go to state 17

state 871

    (322) update_tail -> compound_op value .

    RPAREN          reduce using rule 322 (update_tail -> compound_op value .)


state 872

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE . RBRACE

    RBRACE          shift and go to state 897


state 873

    (223) switch_condition -> SHIFT switch_value COLON statements switchcond_tail .

    OTHERWISE       reduce using rule 223 (switch_condition -> SHIFT switch_value COLON statements switchcond_tail .)


state 874

    (257) switchcond_tail -> switch_condition .

    OTHERWISE       reduce using rule 257 (switchcond_tail -> switch_condition .)


state 875

    (258) switchcond_tail -> empty .

    OTHERWISE       reduce using rule 258 (switchcond_tail -> empty .)


state 876

    (253) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 253 (switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 877

    (254) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 254 (switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 878

    (255) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COLON           reduce using rule 255 (switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 879

    (256) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COLON           reduce using rule 256 (switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 880

    (233) switch_factor_tail -> PLUS switch_factor switch_factor_tail .

    COLON           reduce using rule 233 (switch_factor_tail -> PLUS switch_factor switch_factor_tail .)


state 881

    (234) switch_factor_tail -> MINUS switch_factor switch_factor_tail .

    COLON           reduce using rule 234 (switch_factor_tail -> MINUS switch_factor switch_factor_tail .)


state 882

    (235) switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .

    COLON           reduce using rule 235 (switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .)


state 883

    (236) switch_factor_tail -> DIVISION switch_factor switch_factor_tail .

    COLON           reduce using rule 236 (switch_factor_tail -> DIVISION switch_factor switch_factor_tail .)


state 884

    (237) switch_factor_tail -> MODULO switch_factor switch_factor_tail .

    COLON           reduce using rule 237 (switch_factor_tail -> MODULO switch_factor switch_factor_tail .)


state 885

    (238) switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .

    COLON           reduce using rule 238 (switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .)


state 886

    (239) switch_factor_tail -> GT switch_factor switch_factor_tail .

    COLON           reduce using rule 239 (switch_factor_tail -> GT switch_factor switch_factor_tail .)


state 887

    (240) switch_factor_tail -> LT switch_factor switch_factor_tail .

    COLON           reduce using rule 240 (switch_factor_tail -> LT switch_factor switch_factor_tail .)


state 888

    (241) switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 241 (switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .)


state 889

    (242) switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 242 (switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .)


state 890

    (243) switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 243 (switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .)


state 891

    (244) switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 244 (switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .)


state 892

    (245) switch_factor_tail -> AND switch_factor switch_factor_tail .

    COLON           reduce using rule 245 (switch_factor_tail -> AND switch_factor switch_factor_tail .)


state 893

    (246) switch_factor_tail -> OR switch_factor switch_factor_tail .

    COLON           reduce using rule 246 (switch_factor_tail -> OR switch_factor switch_factor_tail .)


state 894

    (337) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .

    NEWLINE         reduce using rule 337 (assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .)


state 895

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (194) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (195) conditional_tail -> . empty
    (398) empty -> .

    OTHERWISE_CHECK shift and go to state 899
    NEWLINE         reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    conditional_tail               shift and go to state 898
    empty                          shift and go to state 900

state 896

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 901
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 897

    (222) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE .

    NEWLINE         reduce using rule 222 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE .)


state 898

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail . maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    OTHERWISE       reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 902
    empty                          shift and go to state 17

state 899

    (194) conditional_tail -> OTHERWISE_CHECK . LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail

    LPAREN          shift and go to state 903


state 900

    (195) conditional_tail -> empty .

    NEWLINE         reduce using rule 195 (conditional_tail -> empty .)
    OTHERWISE       reduce using rule 195 (conditional_tail -> empty .)


state 901

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 904
    empty                          shift and go to state 17

state 902

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline . OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    OTHERWISE       shift and go to state 905


state 903

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN . condition RPAREN LBRACE statements RBRACE conditional_tail
    (196) condition -> . condition_factor condition_tail
    (197) condition_factor -> . var_call postfix
    (198) condition_factor -> . condition1
    (199) condition_factor -> . TILDE INT_LIT
    (200) condition_factor -> . TILDE FLT_LIT
    (201) condition_factor -> . LPAREN condition RPAREN
    (352) var_call -> . IDENT list_index
    (217) condition1 -> . INT_LIT
    (218) condition1 -> . FLT_LIT
    (219) condition1 -> . DAY
    (220) condition1 -> . NIGHT
    (221) condition1 -> . STR_LIT

    TILDE           shift and go to state 450
    LPAREN          shift and go to state 445
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 451
    FLT_LIT         shift and go to state 452
    DAY             shift and go to state 453
    NIGHT           shift and go to state 454
    STR_LIT         shift and go to state 455

    condition                      shift and go to state 906
    condition_factor               shift and go to state 447
    var_call                       shift and go to state 448
    condition1                     shift and go to state 449

state 904

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 907


state 905

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 908
    empty                          shift and go to state 17

state 906

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN condition . RPAREN LBRACE statements RBRACE conditional_tail

    RPAREN          shift and go to state 909


state 907

    (262) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 262 (for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .)


state 908

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 910


state 909

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN . LBRACE statements RBRACE conditional_tail

    LBRACE          shift and go to state 911


state 910

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 398 (empty -> .)
    FLT             reduce using rule 398 (empty -> .)
    BLN             reduce using rule 398 (empty -> .)
    CHR             reduce using rule 398 (empty -> .)
    STR             reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)

  ! NEWLINE         [ reduce using rule 398 (empty -> .) ]

    maybe_newline                  shift and go to state 912
    empty                          shift and go to state 17

state 911

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE . statements RBRACE conditional_tail
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 398 (empty -> .)
    NEWLINE         reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 913
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 912

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (142) statements -> . empty
    (143) statements -> . local_dec maybe_newline statements_tail
    (398) empty -> .
    (151) local_dec -> . var_statement local_dec_tail
    (152) local_dec -> . empty
    (11) var_statement -> . data_type IDENT list_dec
    (27) data_type -> . INT
    (28) data_type -> . FLT
    (29) data_type -> . BLN
    (30) data_type -> . CHR
    (31) data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 398 (empty -> .)
    RBRACE          reduce using rule 398 (empty -> .)
    SWAP            reduce using rule 398 (empty -> .)
    FUNCTION_NAME   reduce using rule 398 (empty -> .)
    IDENT           reduce using rule 398 (empty -> .)
    DISPLAY         reduce using rule 398 (empty -> .)
    CHECK           reduce using rule 398 (empty -> .)
    FOR             reduce using rule 398 (empty -> .)
    UNTIL           reduce using rule 398 (empty -> .)
    REPEAT          reduce using rule 398 (empty -> .)
    INPUT           reduce using rule 398 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

  ! INT             [ reduce using rule 398 (empty -> .) ]
  ! FLT             [ reduce using rule 398 (empty -> .) ]
  ! BLN             [ reduce using rule 398 (empty -> .) ]
  ! CHR             [ reduce using rule 398 (empty -> .) ]
  ! STR             [ reduce using rule 398 (empty -> .) ]

    statements                     shift and go to state 914
    empty                          shift and go to state 231
    local_dec                      shift and go to state 232
    var_statement                  shift and go to state 233
    data_type                      shift and go to state 9

state 913

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements . RBRACE conditional_tail

    RBRACE          shift and go to state 915


state 914

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (398) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 398 (empty -> .)

    maybe_newline                  shift and go to state 916
    empty                          shift and go to state 17

state 915

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE . conditional_tail
    (194) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail
    (195) conditional_tail -> . empty
    (398) empty -> .

    OTHERWISE_CHECK shift and go to state 899
    NEWLINE         reduce using rule 398 (empty -> .)
    OTHERWISE       reduce using rule 398 (empty -> .)

    conditional_tail               shift and go to state 917
    empty                          shift and go to state 900

state 916

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 918


state 917

    (194) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .

    NEWLINE         reduce using rule 194 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)
    OTHERWISE       reduce using rule 194 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE statements RBRACE conditional_tail .)


state 918

    (193) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 193 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 18 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 220 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 225 resolved as shift
WARNING: shift/reduce conflict for INT in state 226 resolved as shift
WARNING: shift/reduce conflict for FLT in state 226 resolved as shift
WARNING: shift/reduce conflict for BLN in state 226 resolved as shift
WARNING: shift/reduce conflict for CHR in state 226 resolved as shift
WARNING: shift/reduce conflict for STR in state 226 resolved as shift
WARNING: shift/reduce conflict for INT in state 229 resolved as shift
WARNING: shift/reduce conflict for FLT in state 229 resolved as shift
WARNING: shift/reduce conflict for BLN in state 229 resolved as shift
WARNING: shift/reduce conflict for CHR in state 229 resolved as shift
WARNING: shift/reduce conflict for STR in state 229 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 230 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 232 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 237 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 237 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 237 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 237 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 237 resolved as shift
WARNING: shift/reduce conflict for FOR in state 237 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 237 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 237 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 237 resolved as shift
WARNING: shift/reduce conflict for INT in state 237 resolved as shift
WARNING: shift/reduce conflict for FLT in state 237 resolved as shift
WARNING: shift/reduce conflict for BLN in state 237 resolved as shift
WARNING: shift/reduce conflict for CHR in state 237 resolved as shift
WARNING: shift/reduce conflict for STR in state 237 resolved as shift
WARNING: shift/reduce conflict for INT in state 309 resolved as shift
WARNING: shift/reduce conflict for FLT in state 309 resolved as shift
WARNING: shift/reduce conflict for BLN in state 309 resolved as shift
WARNING: shift/reduce conflict for CHR in state 309 resolved as shift
WARNING: shift/reduce conflict for STR in state 309 resolved as shift
WARNING: shift/reduce conflict for INT in state 310 resolved as shift
WARNING: shift/reduce conflict for FLT in state 310 resolved as shift
WARNING: shift/reduce conflict for BLN in state 310 resolved as shift
WARNING: shift/reduce conflict for CHR in state 310 resolved as shift
WARNING: shift/reduce conflict for STR in state 310 resolved as shift
WARNING: shift/reduce conflict for INT in state 311 resolved as shift
WARNING: shift/reduce conflict for FLT in state 311 resolved as shift
WARNING: shift/reduce conflict for BLN in state 311 resolved as shift
WARNING: shift/reduce conflict for CHR in state 311 resolved as shift
WARNING: shift/reduce conflict for STR in state 311 resolved as shift
WARNING: shift/reduce conflict for INT in state 312 resolved as shift
WARNING: shift/reduce conflict for FLT in state 312 resolved as shift
WARNING: shift/reduce conflict for BLN in state 312 resolved as shift
WARNING: shift/reduce conflict for CHR in state 312 resolved as shift
WARNING: shift/reduce conflict for STR in state 312 resolved as shift
WARNING: shift/reduce conflict for INT in state 313 resolved as shift
WARNING: shift/reduce conflict for FLT in state 313 resolved as shift
WARNING: shift/reduce conflict for BLN in state 313 resolved as shift
WARNING: shift/reduce conflict for CHR in state 313 resolved as shift
WARNING: shift/reduce conflict for STR in state 313 resolved as shift
WARNING: shift/reduce conflict for INT in state 314 resolved as shift
WARNING: shift/reduce conflict for FLT in state 314 resolved as shift
WARNING: shift/reduce conflict for BLN in state 314 resolved as shift
WARNING: shift/reduce conflict for CHR in state 314 resolved as shift
WARNING: shift/reduce conflict for STR in state 314 resolved as shift
WARNING: shift/reduce conflict for INT in state 348 resolved as shift
WARNING: shift/reduce conflict for FLT in state 348 resolved as shift
WARNING: shift/reduce conflict for BLN in state 348 resolved as shift
WARNING: shift/reduce conflict for CHR in state 348 resolved as shift
WARNING: shift/reduce conflict for STR in state 348 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 651 resolved as shift
WARNING: shift/reduce conflict for INT in state 679 resolved as shift
WARNING: shift/reduce conflict for FLT in state 679 resolved as shift
WARNING: shift/reduce conflict for BLN in state 679 resolved as shift
WARNING: shift/reduce conflict for CHR in state 679 resolved as shift
WARNING: shift/reduce conflict for STR in state 679 resolved as shift
WARNING: shift/reduce conflict for INT in state 701 resolved as shift
WARNING: shift/reduce conflict for FLT in state 701 resolved as shift
WARNING: shift/reduce conflict for BLN in state 701 resolved as shift
WARNING: shift/reduce conflict for CHR in state 701 resolved as shift
WARNING: shift/reduce conflict for STR in state 701 resolved as shift
WARNING: shift/reduce conflict for INT in state 798 resolved as shift
WARNING: shift/reduce conflict for FLT in state 798 resolved as shift
WARNING: shift/reduce conflict for BLN in state 798 resolved as shift
WARNING: shift/reduce conflict for CHR in state 798 resolved as shift
WARNING: shift/reduce conflict for STR in state 798 resolved as shift
WARNING: shift/reduce conflict for INT in state 799 resolved as shift
WARNING: shift/reduce conflict for FLT in state 799 resolved as shift
WARNING: shift/reduce conflict for BLN in state 799 resolved as shift
WARNING: shift/reduce conflict for CHR in state 799 resolved as shift
WARNING: shift/reduce conflict for STR in state 799 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 869 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 870 resolved as shift
WARNING: shift/reduce conflict for INT in state 896 resolved as shift
WARNING: shift/reduce conflict for FLT in state 896 resolved as shift
WARNING: shift/reduce conflict for BLN in state 896 resolved as shift
WARNING: shift/reduce conflict for CHR in state 896 resolved as shift
WARNING: shift/reduce conflict for STR in state 896 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 910 resolved as shift
WARNING: shift/reduce conflict for INT in state 911 resolved as shift
WARNING: shift/reduce conflict for FLT in state 911 resolved as shift
WARNING: shift/reduce conflict for BLN in state 911 resolved as shift
WARNING: shift/reduce conflict for CHR in state 911 resolved as shift
WARNING: shift/reduce conflict for STR in state 911 resolved as shift
WARNING: shift/reduce conflict for INT in state 912 resolved as shift
WARNING: shift/reduce conflict for FLT in state 912 resolved as shift
WARNING: shift/reduce conflict for BLN in state 912 resolved as shift
WARNING: shift/reduce conflict for CHR in state 912 resolved as shift
WARNING: shift/reduce conflict for STR in state 912 resolved as shift
WARNING: reduce/reduce conflict in state 231 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 231
WARNING: reduce/reduce conflict in state 496 resolved using rule (function_statements -> empty)
WARNING: rejected rule (function_statements_tail -> empty) in state 496
WARNING: Rule (function_statements_tail -> empty) is never reduced
