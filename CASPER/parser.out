Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLN_LIT
    CARRIAGE_RETURN
    COMMENT
    DOUBLE_LT
    DOUBLE_SLASH
    EOF
    FUNCTION_LIST_BLN2D
    FUNCTION_LIST_CHR2D
    FUNCTION_LIST_FLT2D
    FUNCTION_LIST_INT2D
    FUNCTION_LIST_STR2D
    ILLEGAL
    IN
    LIST_BLN
    LIST_BLN2D
    LIST_CHR
    LIST_CHR2D
    LIST_FLT
    LIST_FLT2D
    LIST_INT
    LIST_INT2D
    LIST_STR
    LIST_STR2D
    MEASURE
    NOT
    POW
    SKIP
    STOP
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
Rule 2     maybe_newline -> empty
Rule 3     maybe_newline -> NEWLINE maybe_newline
Rule 4     unli_newline -> NEWLINE
Rule 5     unli_newline -> NEWLINE unli_newline
Rule 6     main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 7     global_dec -> global_statement unli_newline global_tail
Rule 8     global_dec -> empty
Rule 9     global_tail -> global_dec
Rule 10    global_statement -> var_statement global_statement_tail
Rule 11    var_statement -> data_type IDENT list_dec
Rule 12    list_dec -> empty
Rule 13    list_dec -> LBRACKET RBRACKET _2d_list
Rule 14    _2d_list -> empty
Rule 15    _2d_list -> LBRACKET RBRACKET
Rule 16    global_statement_tail -> empty
Rule 17    global_statement_tail -> COMMA IDENT global_statement_tail
Rule 18    global_statement_tail -> EQ global_value global_statement_tail2
Rule 19    global_statement_tail2 -> COMMA IDENT global_statement_tail
Rule 20    global_statement_tail2 -> empty
Rule 21    global_value -> expression
Rule 22    global_value -> list_value
Rule 23    list_value -> LBRACKET list_element RBRACKET
Rule 24    list_element -> literal element_tail
Rule 25    list_element -> list_value element_tail
Rule 26    element_tail -> COMMA list_element
Rule 27    element_tail -> empty
Rule 28    data_type -> INT
Rule 29    data_type -> FLT
Rule 30    data_type -> BLN
Rule 31    data_type -> CHR
Rule 32    data_type -> STR
Rule 33    expression -> factor factor_tail
Rule 34    factor -> var_call postfix
Rule 35    factor -> literal1
Rule 36    factor -> TILDE INT_LIT
Rule 37    factor -> TILDE FLT_LIT
Rule 38    factor -> LPAREN factor_expression RPAREN
Rule 39    factor_expression -> factor_expression_factor factor_expression_tail
Rule 40    factor_expression_factor -> factor_var_call factor_postfix
Rule 41    factor_expression_factor -> factor_expression1
Rule 42    factor_expression_factor -> TILDE INT_LIT
Rule 43    factor_expression_factor -> TILDE FLT_LIT
Rule 44    factor_expression_factor -> LPAREN factor_expression RPAREN
Rule 45    factor_var_call -> IDENT factor_list_index
Rule 46    factor_postfix_op -> PLUS_PLUS
Rule 47    factor_postfix_op -> MINUS_MINUS
Rule 48    factor_postfix -> empty
Rule 49    factor_postfix -> factor_postfix_op
Rule 50    factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2
Rule 51    factor_list_index -> empty
Rule 52    factor_list_index2 -> LBRACKET factor_index RBRACKET
Rule 53    factor_list_index2 -> empty
Rule 54    factor_index -> INT_LIT
Rule 55    factor_index -> IDENT
Rule 56    factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail
Rule 57    factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail
Rule 58    factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail
Rule 59    factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail
Rule 60    factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail
Rule 61    factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail
Rule 62    factor_expression_tail -> GT factor_expression_factor factor_expression_tail
Rule 63    factor_expression_tail -> LT factor_expression_factor factor_expression_tail
Rule 64    factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail
Rule 65    factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail
Rule 66    factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail
Rule 67    factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail
Rule 68    factor_expression_tail -> AND factor_expression_factor factor_expression_tail
Rule 69    factor_expression_tail -> OR factor_expression_factor factor_expression_tail
Rule 70    factor_expression_tail -> empty
Rule 71    factor_expression1 -> INT_LIT
Rule 72    factor_expression1 -> FLT_LIT
Rule 73    factor_expression1 -> DAY
Rule 74    factor_expression1 -> NIGHT
Rule 75    factor_expression1 -> STR_LIT
Rule 76    factor_tail -> PLUS factor factor_tail
Rule 77    factor_tail -> MINUS factor factor_tail
Rule 78    factor_tail -> MULTIPLY factor factor_tail
Rule 79    factor_tail -> DIVISION factor factor_tail
Rule 80    factor_tail -> MODULO factor factor_tail
Rule 81    factor_tail -> EXPONENT factor factor_tail
Rule 82    factor_tail -> GT factor factor_tail
Rule 83    factor_tail -> LT factor factor_tail
Rule 84    factor_tail -> EQ_EQ factor factor_tail
Rule 85    factor_tail -> GT_EQ factor factor_tail
Rule 86    factor_tail -> LT_EQ factor factor_tail
Rule 87    factor_tail -> NOT_EQ factor factor_tail
Rule 88    factor_tail -> AND factor factor_tail
Rule 89    factor_tail -> OR factor factor_tail
Rule 90    factor_tail -> empty
Rule 91    literal -> literal1
Rule 92    literal -> literal2
Rule 93    literal1 -> INT_LIT
Rule 94    literal1 -> FLT_LIT
Rule 95    literal1 -> DAY
Rule 96    literal1 -> NIGHT
Rule 97    literal1 -> STR_LIT
Rule 98    literal2 -> CHR_LIT
Rule 99    function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
Rule 100   function_statements -> empty
Rule 101   function_statements_tail -> function_statements
Rule 102   function_statements_tail -> empty
Rule 103   ret_type -> FUNCTION
Rule 104   ret_type -> function_dtype
Rule 105   function_dtype -> FUNCTION_INT
Rule 106   function_dtype -> FUNCTION_FLT
Rule 107   function_dtype -> FUNCTION_CHR
Rule 108   function_dtype -> FUNCTION_BLN
Rule 109   function_dtype -> FUNCTION_STR
Rule 110   function_dtype -> FUNCTION_LIST_INT
Rule 111   function_dtype -> FUNCTION_LIST_FLT
Rule 112   function_dtype -> FUNCTION_LIST_CHR
Rule 113   function_dtype -> FUNCTION_LIST_STR
Rule 114   function_dtype -> FUNCTION_LIST_BLN
Rule 115   parameters -> data_type IDENT parameters_tail
Rule 116   parameters -> empty
Rule 117   parameters_tail -> COMMA data_type IDENT parameters_tail
Rule 118   parameters_tail -> empty
Rule 119   revive -> REVIVE revive_value
Rule 120   revive -> empty
Rule 121   revive_value -> revive_type_cast
Rule 122   revive_value -> revive_expression
Rule 123   revive_value -> function_call
Rule 124   revive_expression -> revive_factor revive_factor_tail
Rule 125   revive_factor -> revive_var_call revive_postfix
Rule 126   revive_factor -> revive_factor1
Rule 127   revive_factor -> TILDE INT_LIT
Rule 128   revive_factor -> TILDE FLT_LIT
Rule 129   revive_factor -> LPAREN revive_factor RPAREN
Rule 130   revive_var_call -> IDENT revive_list_index
Rule 131   revive_postfix_op -> PLUS_PLUS
Rule 132   revive_postfix_op -> MINUS_MINUS
Rule 133   revive_postfix -> empty
Rule 134   revive_postfix -> revive_postfix_op
Rule 135   revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2
Rule 136   revive_list_index -> empty
Rule 137   revive_list_index2 -> LBRACKET revive_index RBRACKET
Rule 138   revive_list_index2 -> empty
Rule 139   revive_index -> INT_LIT
Rule 140   revive_index -> IDENT
Rule 141   revive_factor_tail -> PLUS revive_factor revive_factor_tail
Rule 142   revive_factor_tail -> MINUS revive_factor revive_factor_tail
Rule 143   revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail
Rule 144   revive_factor_tail -> DIVISION revive_factor revive_factor_tail
Rule 145   revive_factor_tail -> MODULO revive_factor revive_factor_tail
Rule 146   revive_factor_tail -> EXPONENT revive_factor revive_factor_tail
Rule 147   revive_factor_tail -> GT revive_factor revive_factor_tail
Rule 148   revive_factor_tail -> LT revive_factor revive_factor_tail
Rule 149   revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail
Rule 150   revive_factor_tail -> GT_EQ revive_factor revive_factor_tail
Rule 151   revive_factor_tail -> LT_EQ revive_factor revive_factor_tail
Rule 152   revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail
Rule 153   revive_factor_tail -> AND revive_factor revive_factor_tail
Rule 154   revive_factor_tail -> OR revive_factor revive_factor_tail
Rule 155   revive_factor_tail -> empty
Rule 156   revive_factor1 -> INT_LIT
Rule 157   revive_factor1 -> FLT_LIT
Rule 158   revive_factor1 -> DAY
Rule 159   revive_factor1 -> NIGHT
Rule 160   revive_factor1 -> STR_LIT
Rule 161   revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 162   revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 163   revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 164   revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 165   statements -> empty
Rule 166   statements -> local_dec maybe_newline statements_tail
Rule 167   statements_tail -> switch_statement unli_newline statements
Rule 168   statements_tail -> loop_statement unli_newline statements
Rule 169   statements_tail -> function_call unli_newline statements
Rule 170   statements_tail -> assignment_statement unli_newline statements
Rule 171   statements_tail -> output_statement unli_newline statements
Rule 172   statements_tail -> conditional_statement unli_newline statements
Rule 173   statements_tail -> statements
Rule 174   local_dec -> local_var_statement local_dec_tail unli_newline
Rule 175   local_dec -> empty
Rule 176   local_var_statement -> local_data_type IDENT local_list_dec
Rule 177   local_data_type -> INT
Rule 178   local_data_type -> FLT
Rule 179   local_data_type -> BLN
Rule 180   local_data_type -> CHR
Rule 181   local_data_type -> STR
Rule 182   local_list_dec -> empty
Rule 183   local_list_dec -> LBRACKET RBRACKET local_2d_list
Rule 184   local_2d_list -> empty
Rule 185   local_2d_list -> LBRACKET RBRACKET
Rule 186   local_dec_tail -> empty
Rule 187   local_dec_tail -> COMMA IDENT local_dec_tail
Rule 188   local_dec_tail -> EQ local_value local_dec_tail2
Rule 189   local_dec_tail2 -> COMMA IDENT local_dec_tail
Rule 190   local_dec_tail2 -> empty
Rule 191   local_value -> local_value_value
Rule 192   local_value -> list_value
Rule 193   local_value_value -> local_type_cast
Rule 194   local_value_value -> local_expression
Rule 195   local_value_value -> function_call
Rule 196   local_expression -> local_factor local_factor_tail
Rule 197   local_factor -> local_var_call local_postfix
Rule 198   local_factor -> local_factor1
Rule 199   local_factor -> TILDE INT_LIT
Rule 200   local_factor -> TILDE FLT_LIT
Rule 201   local_factor -> LPAREN local_factor RPAREN
Rule 202   local_var_call -> IDENT local_list_index
Rule 203   local_postfix_op -> PLUS_PLUS
Rule 204   local_postfix_op -> MINUS_MINUS
Rule 205   local_postfix -> empty
Rule 206   local_postfix -> local_postfix_op
Rule 207   local_list_index -> LBRACKET local_index RBRACKET local_list_index2
Rule 208   local_list_index -> empty
Rule 209   local_list_index2 -> LBRACKET local_index RBRACKET
Rule 210   local_list_index2 -> empty
Rule 211   local_index -> INT_LIT
Rule 212   local_index -> IDENT
Rule 213   local_factor_tail -> PLUS local_factor local_factor_tail
Rule 214   local_factor_tail -> MINUS local_factor local_factor_tail
Rule 215   local_factor_tail -> MULTIPLY local_factor local_factor_tail
Rule 216   local_factor_tail -> DIVISION local_factor local_factor_tail
Rule 217   local_factor_tail -> MODULO local_factor local_factor_tail
Rule 218   local_factor_tail -> EXPONENT local_factor local_factor_tail
Rule 219   local_factor_tail -> GT local_factor local_factor_tail
Rule 220   local_factor_tail -> LT local_factor local_factor_tail
Rule 221   local_factor_tail -> EQ_EQ local_factor local_factor_tail
Rule 222   local_factor_tail -> GT_EQ local_factor local_factor_tail
Rule 223   local_factor_tail -> LT_EQ local_factor local_factor_tail
Rule 224   local_factor_tail -> NOT_EQ local_factor local_factor_tail
Rule 225   local_factor_tail -> AND local_factor local_factor_tail
Rule 226   local_factor_tail -> OR local_factor local_factor_tail
Rule 227   local_factor_tail -> empty
Rule 228   local_factor1 -> INT_LIT
Rule 229   local_factor1 -> FLT_LIT
Rule 230   local_factor1 -> DAY
Rule 231   local_factor1 -> NIGHT
Rule 232   local_factor1 -> STR_LIT
Rule 233   local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 234   local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 235   local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 236   local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 237   conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
Rule 238   conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail
Rule 239   conditional_tail -> empty
Rule 240   condition -> condition_factor condition_tail
Rule 241   condition_factor -> condition_var_call condition_postfix
Rule 242   condition_factor -> condition1
Rule 243   condition_factor -> TILDE INT_LIT
Rule 244   condition_factor -> TILDE FLT_LIT
Rule 245   condition_factor -> LPAREN condition RPAREN
Rule 246   condition_var_call -> IDENT condition_list_index
Rule 247   condition_postfix_op -> PLUS_PLUS
Rule 248   condition_postfix_op -> MINUS_MINUS
Rule 249   condition_postfix -> empty
Rule 250   condition_postfix -> condition_postfix_op
Rule 251   condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2
Rule 252   condition_list_index -> empty
Rule 253   condition_list_index2 -> LBRACKET condition_index RBRACKET
Rule 254   condition_list_index2 -> empty
Rule 255   condition_index -> INT_LIT
Rule 256   condition_index -> IDENT
Rule 257   condition_tail -> PLUS condition_factor condition_tail
Rule 258   condition_tail -> MINUS condition_factor condition_tail
Rule 259   condition_tail -> MULTIPLY condition_factor condition_tail
Rule 260   condition_tail -> DIVISION condition_factor condition_tail
Rule 261   condition_tail -> MODULO condition_factor condition_tail
Rule 262   condition_tail -> EXPONENT condition_factor condition_tail
Rule 263   condition_tail -> GT condition_factor condition_tail
Rule 264   condition_tail -> LT condition_factor condition_tail
Rule 265   condition_tail -> EQ_EQ condition_factor condition_tail
Rule 266   condition_tail -> GT_EQ condition_factor condition_tail
Rule 267   condition_tail -> LT_EQ condition_factor condition_tail
Rule 268   condition_tail -> NOT_EQ condition_factor condition_tail
Rule 269   condition_tail -> AND condition_factor condition_tail
Rule 270   condition_tail -> OR condition_factor condition_tail
Rule 271   condition_tail -> empty
Rule 272   condition1 -> INT_LIT
Rule 273   condition1 -> FLT_LIT
Rule 274   condition1 -> DAY
Rule 275   condition1 -> NIGHT
Rule 276   condition1 -> STR_LIT
Rule 277   switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
Rule 278   switch_condition -> SHIFT switch_value COLON maybe_newline statements switchcond_tail
Rule 279   switch_value -> switch_type_cast
Rule 280   switch_value -> switch_expression
Rule 281   switch_value -> function_call
Rule 282   switch_expression -> switch_factor switch_factor_tail
Rule 283   switch_factor -> switch_var_call switch_postfix
Rule 284   switch_factor -> switch_factor1
Rule 285   switch_factor -> TILDE INT_LIT
Rule 286   switch_factor -> TILDE FLT_LIT
Rule 287   switch_factor -> LPAREN switch_factor RPAREN
Rule 288   switch_var_call -> IDENT switch_list_index
Rule 289   switch_postfix_op -> PLUS_PLUS
Rule 290   switch_postfix_op -> MINUS_MINUS
Rule 291   switch_postfix -> empty
Rule 292   switch_postfix -> switch_postfix_op
Rule 293   switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2
Rule 294   switch_list_index -> empty
Rule 295   switch_list_index2 -> LBRACKET switch_index RBRACKET
Rule 296   switch_list_index2 -> empty
Rule 297   switch_index -> INT_LIT
Rule 298   switch_index -> IDENT
Rule 299   switch_factor_tail -> PLUS switch_factor switch_factor_tail
Rule 300   switch_factor_tail -> MINUS switch_factor switch_factor_tail
Rule 301   switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail
Rule 302   switch_factor_tail -> DIVISION switch_factor switch_factor_tail
Rule 303   switch_factor_tail -> MODULO switch_factor switch_factor_tail
Rule 304   switch_factor_tail -> EXPONENT switch_factor switch_factor_tail
Rule 305   switch_factor_tail -> GT switch_factor switch_factor_tail
Rule 306   switch_factor_tail -> LT switch_factor switch_factor_tail
Rule 307   switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail
Rule 308   switch_factor_tail -> GT_EQ switch_factor switch_factor_tail
Rule 309   switch_factor_tail -> LT_EQ switch_factor switch_factor_tail
Rule 310   switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail
Rule 311   switch_factor_tail -> AND switch_factor switch_factor_tail
Rule 312   switch_factor_tail -> OR switch_factor switch_factor_tail
Rule 313   switch_factor_tail -> empty
Rule 314   switch_factor1 -> INT_LIT
Rule 315   switch_factor1 -> FLT_LIT
Rule 316   switch_factor1 -> DAY
Rule 317   switch_factor1 -> NIGHT
Rule 318   switch_factor1 -> STR_LIT
Rule 319   switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 320   switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 321   switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 322   switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 323   switchcond_tail -> switch_condition
Rule 324   switchcond_tail -> empty
Rule 325   loop_statement -> for_loop
Rule 326   loop_statement -> until_loop
Rule 327   loop_statement -> repeat_until
Rule 328   for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
Rule 329   for_expression -> for_factor for_factor_tail
Rule 330   for_factor -> for_var_call for_postfix
Rule 331   for_factor -> for_factor1
Rule 332   for_factor -> TILDE INT_LIT
Rule 333   for_factor -> TILDE FLT_LIT
Rule 334   for_factor -> LPAREN for_factor RPAREN
Rule 335   for_var_call -> IDENT for_list_index
Rule 336   for_postfix_op -> PLUS_PLUS
Rule 337   for_postfix_op -> MINUS_MINUS
Rule 338   for_postfix -> empty
Rule 339   for_postfix -> for_postfix_op
Rule 340   for_list_index -> LBRACKET for_index RBRACKET for_list_index2
Rule 341   for_list_index -> empty
Rule 342   for_list_index2 -> LBRACKET for_index RBRACKET
Rule 343   for_list_index2 -> empty
Rule 344   for_index -> INT_LIT
Rule 345   for_index -> IDENT
Rule 346   for_factor_tail -> PLUS for_factor for_factor_tail
Rule 347   for_factor_tail -> MINUS for_factor for_factor_tail
Rule 348   for_factor_tail -> MULTIPLY for_factor for_factor_tail
Rule 349   for_factor_tail -> DIVISION for_factor for_factor_tail
Rule 350   for_factor_tail -> MODULO for_factor for_factor_tail
Rule 351   for_factor_tail -> EXPONENT for_factor for_factor_tail
Rule 352   for_factor_tail -> GT for_factor for_factor_tail
Rule 353   for_factor_tail -> LT for_factor for_factor_tail
Rule 354   for_factor_tail -> EQ_EQ for_factor for_factor_tail
Rule 355   for_factor_tail -> GT_EQ for_factor for_factor_tail
Rule 356   for_factor_tail -> LT_EQ for_factor for_factor_tail
Rule 357   for_factor_tail -> NOT_EQ for_factor for_factor_tail
Rule 358   for_factor_tail -> AND for_factor for_factor_tail
Rule 359   for_factor_tail -> OR for_factor for_factor_tail
Rule 360   for_factor_tail -> empty
Rule 361   for_factor1 -> INT_LIT
Rule 362   for_factor1 -> FLT_LIT
Rule 363   for_factor1 -> DAY
Rule 364   for_factor1 -> NIGHT
Rule 365   for_factor1 -> STR_LIT
Rule 366   until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
Rule 367   until_expression -> until_factor until_factor_tail
Rule 368   until_factor -> until_var_call until_postfix
Rule 369   until_factor -> until_factor1
Rule 370   until_factor -> TILDE INT_LIT
Rule 371   until_factor -> TILDE FLT_LIT
Rule 372   until_factor -> LPAREN until_factor RPAREN
Rule 373   until_var_call -> IDENT until_list_index
Rule 374   until_postfix_op -> PLUS_PLUS
Rule 375   until_postfix_op -> MINUS_MINUS
Rule 376   until_postfix -> empty
Rule 377   until_postfix -> until_postfix_op
Rule 378   until_list_index -> LBRACKET until_index RBRACKET until_list_index2
Rule 379   until_list_index -> empty
Rule 380   until_list_index2 -> LBRACKET until_index RBRACKET
Rule 381   until_list_index2 -> empty
Rule 382   until_index -> INT_LIT
Rule 383   until_index -> IDENT
Rule 384   until_factor_tail -> PLUS until_factor until_factor_tail
Rule 385   until_factor_tail -> MINUS until_factor until_factor_tail
Rule 386   until_factor_tail -> MULTIPLY until_factor until_factor_tail
Rule 387   until_factor_tail -> DIVISION until_factor until_factor_tail
Rule 388   until_factor_tail -> MODULO until_factor until_factor_tail
Rule 389   until_factor_tail -> EXPONENT until_factor until_factor_tail
Rule 390   until_factor_tail -> GT until_factor until_factor_tail
Rule 391   until_factor_tail -> LT until_factor until_factor_tail
Rule 392   until_factor_tail -> EQ_EQ until_factor until_factor_tail
Rule 393   until_factor_tail -> GT_EQ until_factor until_factor_tail
Rule 394   until_factor_tail -> LT_EQ until_factor until_factor_tail
Rule 395   until_factor_tail -> NOT_EQ until_factor until_factor_tail
Rule 396   until_factor_tail -> AND until_factor until_factor_tail
Rule 397   until_factor_tail -> OR until_factor until_factor_tail
Rule 398   until_factor_tail -> empty
Rule 399   until_factor1 -> INT_LIT
Rule 400   until_factor1 -> FLT_LIT
Rule 401   until_factor1 -> DAY
Rule 402   until_factor1 -> NIGHT
Rule 403   until_factor1 -> STR_LIT
Rule 404   repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
Rule 405   control_variable -> INT IDENT EQ control_var_tail
Rule 406   control_var_tail -> INT_LIT
Rule 407   control_var_tail -> var_call
Rule 408   update -> var_call update_tail
Rule 409   update_tail -> postfix_op
Rule 410   update_tail -> compound_op value
Rule 411   postfix_op -> PLUS_PLUS
Rule 412   postfix_op -> MINUS_MINUS
Rule 413   function_call -> FUNCTION_NAME LPAREN arguments RPAREN
Rule 414   function_call -> input_statement
Rule 415   arguments -> empty
Rule 416   arguments -> arg_value arg_tail
Rule 417   arg_tail -> COMMA arg_value arg_tail
Rule 418   arg_tail -> empty
Rule 419   arg_value -> literal
Rule 420   arg_value -> var_call
Rule 421   output_statement -> DISPLAY output_value next_val
Rule 422   output_value -> output_type_cast
Rule 423   output_value -> output_expression
Rule 424   output_value -> function_call
Rule 425   output_expression -> output_factor output_factor_tail
Rule 426   output_factor -> output_var_call output_postfix
Rule 427   output_factor -> output_factor1
Rule 428   output_factor -> TILDE INT_LIT
Rule 429   output_factor -> TILDE FLT_LIT
Rule 430   output_factor -> LPAREN output_factor RPAREN
Rule 431   output_var_call -> IDENT output_list_index
Rule 432   output_postfix_op -> PLUS_PLUS
Rule 433   output_postfix_op -> MINUS_MINUS
Rule 434   output_postfix -> empty
Rule 435   output_postfix -> output_postfix_op
Rule 436   output_list_index -> LBRACKET output_index RBRACKET output_list_index2
Rule 437   output_list_index -> empty
Rule 438   output_list_index2 -> LBRACKET output_index RBRACKET
Rule 439   output_list_index2 -> empty
Rule 440   output_index -> INT_LIT
Rule 441   output_index -> IDENT
Rule 442   output_factor_tail -> PLUS output_factor output_factor_tail
Rule 443   output_factor_tail -> MINUS output_factor output_factor_tail
Rule 444   output_factor_tail -> MULTIPLY output_factor output_factor_tail
Rule 445   output_factor_tail -> DIVISION output_factor output_factor_tail
Rule 446   output_factor_tail -> MODULO output_factor output_factor_tail
Rule 447   output_factor_tail -> EXPONENT output_factor output_factor_tail
Rule 448   output_factor_tail -> GT output_factor output_factor_tail
Rule 449   output_factor_tail -> LT output_factor output_factor_tail
Rule 450   output_factor_tail -> EQ_EQ output_factor output_factor_tail
Rule 451   output_factor_tail -> GT_EQ output_factor output_factor_tail
Rule 452   output_factor_tail -> LT_EQ output_factor output_factor_tail
Rule 453   output_factor_tail -> NOT_EQ output_factor output_factor_tail
Rule 454   output_factor_tail -> AND output_factor output_factor_tail
Rule 455   output_factor_tail -> OR output_factor output_factor_tail
Rule 456   output_factor_tail -> empty
Rule 457   output_factor1 -> INT_LIT
Rule 458   output_factor1 -> FLT_LIT
Rule 459   output_factor1 -> DAY
Rule 460   output_factor1 -> NIGHT
Rule 461   output_factor1 -> STR_LIT
Rule 462   output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 463   output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 464   output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 465   output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 466   next_val -> COMMA value next_val
Rule 467   next_val -> empty
Rule 468   assignment_statement -> IDENT assign_tail
Rule 469   assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
Rule 470   assign_tail -> DOT PUSH LPAREN list_element RPAREN
Rule 471   assign_tail -> assign_op value
Rule 472   assign_op -> compound_op
Rule 473   assign_op -> EQ
Rule 474   compound_op -> PLUS_EQ
Rule 475   compound_op -> MINUS_EQ
Rule 476   compound_op -> MUL_EQ
Rule 477   compound_op -> DIV_EQ
Rule 478   compound_op -> MOD_EQ
Rule 479   start -> INT_LIT
Rule 480   deleteCount -> empty
Rule 481   deleteCount -> INT_LIT
Rule 482   splice_items -> empty
Rule 483   splice_items -> list_element
Rule 484   var_call -> IDENT list_index
Rule 485   list_index -> LBRACKET index RBRACKET list_index2
Rule 486   list_index -> empty
Rule 487   list_index2 -> LBRACKET index RBRACKET
Rule 488   list_index2 -> empty
Rule 489   index -> INT_LIT
Rule 490   index -> IDENT
Rule 491   postfix -> empty
Rule 492   postfix -> postfix_op
Rule 493   value -> type_cast
Rule 494   value -> value_expression
Rule 495   value -> function_call
Rule 496   value_expression -> value_factor value_factor_tail
Rule 497   value_factor -> value_var_call value_postfix
Rule 498   value_factor -> value_factor1
Rule 499   value_factor -> TILDE INT_LIT
Rule 500   value_factor -> TILDE FLT_LIT
Rule 501   value_factor -> LPAREN value_factor RPAREN
Rule 502   value_var_call -> IDENT value_list_index
Rule 503   value_postfix_op -> PLUS_PLUS
Rule 504   value_postfix_op -> MINUS_MINUS
Rule 505   value_postfix -> empty
Rule 506   value_postfix -> value_postfix_op
Rule 507   value_list_index -> LBRACKET value_index RBRACKET value_list_index2
Rule 508   value_list_index -> empty
Rule 509   value_list_index2 -> LBRACKET value_index RBRACKET
Rule 510   value_list_index2 -> empty
Rule 511   value_index -> INT_LIT
Rule 512   value_index -> IDENT
Rule 513   value_factor_tail -> PLUS value_factor value_factor_tail
Rule 514   value_factor_tail -> MINUS value_factor value_factor_tail
Rule 515   value_factor_tail -> MULTIPLY value_factor value_factor_tail
Rule 516   value_factor_tail -> DIVISION value_factor value_factor_tail
Rule 517   value_factor_tail -> MODULO value_factor value_factor_tail
Rule 518   value_factor_tail -> EXPONENT value_factor value_factor_tail
Rule 519   value_factor_tail -> GT value_factor value_factor_tail
Rule 520   value_factor_tail -> LT value_factor value_factor_tail
Rule 521   value_factor_tail -> EQ_EQ value_factor value_factor_tail
Rule 522   value_factor_tail -> GT_EQ value_factor value_factor_tail
Rule 523   value_factor_tail -> LT_EQ value_factor value_factor_tail
Rule 524   value_factor_tail -> NOT_EQ value_factor value_factor_tail
Rule 525   value_factor_tail -> AND value_factor value_factor_tail
Rule 526   value_factor_tail -> OR value_factor value_factor_tail
Rule 527   value_factor_tail -> empty
Rule 528   value_factor1 -> INT_LIT
Rule 529   value_factor1 -> FLT_LIT
Rule 530   value_factor1 -> DAY
Rule 531   value_factor1 -> NIGHT
Rule 532   value_factor1 -> STR_LIT
Rule 533   type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN
Rule 534   type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN
Rule 535   type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN
Rule 536   type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN
Rule 537   typecast_value -> typecast_expression
Rule 538   typecast_value -> FUNCTION_NAME LPAREN RPAREN
Rule 539   typecast_value -> input_statement
Rule 540   typecast_expression -> typecast_factor typecast_factor_tail
Rule 541   typecast_factor -> var_call postfix
Rule 542   typecast_factor -> typecast_factor1
Rule 543   typecast_factor -> TILDE INT_LIT
Rule 544   typecast_factor -> TILDE FLT_LIT
Rule 545   typecast_factor -> LPAREN typecast_factor RPAREN
Rule 546   typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail
Rule 547   typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail
Rule 548   typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail
Rule 549   typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail
Rule 550   typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail
Rule 551   typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail
Rule 552   typecast_factor_tail -> GT typecast_factor typecast_factor_tail
Rule 553   typecast_factor_tail -> LT typecast_factor typecast_factor_tail
Rule 554   typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail
Rule 555   typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail
Rule 556   typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail
Rule 557   typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail
Rule 558   typecast_factor_tail -> AND typecast_factor typecast_factor_tail
Rule 559   typecast_factor_tail -> OR typecast_factor typecast_factor_tail
Rule 560   typecast_factor_tail -> empty
Rule 561   typecast_factor1 -> INT_LIT
Rule 562   typecast_factor1 -> FLT_LIT
Rule 563   typecast_factor1 -> DAY
Rule 564   typecast_factor1 -> NIGHT
Rule 565   typecast_factor1 -> STR_LIT
Rule 566   input_statement -> INPUT LPAREN RPAREN
Rule 567   empty -> <empty>

Terminals, with rules where they appear

AND                  : 68 88 153 225 269 311 358 396 454 525 558
BIRTH                : 1
BLN                  : 30 179
BLN_LIT              : 
CARRIAGE_RETURN      : 
CHECK                : 237
CHR                  : 31 180
CHR_LIT              : 98
COLON                : 278
COMMA                : 17 19 26 117 187 189 417 466 469 469
COMMENT              : 
CONVERT_TO_BLN       : 163 235 321 464 535
CONVERT_TO_FLT       : 162 234 320 463 534
CONVERT_TO_INT       : 161 233 319 462 533
CONVERT_TO_STR       : 164 236 322 465 536
DAY                  : 73 95 158 230 274 316 363 401 459 530 563
DISPLAY              : 421
DIVISION             : 59 79 144 216 260 302 349 387 445 516 549
DIV_EQ               : 477
DOT                  : 469 470
DOUBLE_LT            : 
DOUBLE_SLASH         : 
EOF                  : 
EQ                   : 18 188 405 473
EQ_EQ                : 64 84 149 221 265 307 354 392 450 521 554
EXPONENT             : 61 81 146 218 262 304 351 389 447 518 551
FLT                  : 29 178
FLT_LIT              : 37 43 72 94 128 157 200 229 244 273 286 315 333 362 371 400 429 458 500 529 544 562
FOR                  : 328
FUNCTION             : 103
FUNCTION_BLN         : 108
FUNCTION_CHR         : 107
FUNCTION_FLT         : 106
FUNCTION_INT         : 105
FUNCTION_LIST_BLN    : 114
FUNCTION_LIST_BLN2D  : 
FUNCTION_LIST_CHR    : 112
FUNCTION_LIST_CHR2D  : 
FUNCTION_LIST_FLT    : 111
FUNCTION_LIST_FLT2D  : 
FUNCTION_LIST_INT    : 110
FUNCTION_LIST_INT2D  : 
FUNCTION_LIST_STR    : 113
FUNCTION_LIST_STR2D  : 
FUNCTION_NAME        : 99 413 538
FUNCTION_STR         : 109
GHOST                : 1
GT                   : 62 82 147 219 263 305 352 390 448 519 552
GT_EQ                : 65 85 150 222 266 308 355 393 451 522 555
IDENT                : 11 17 19 45 55 115 117 130 140 176 187 189 202 212 246 256 277 288 298 335 345 373 383 405 431 441 468 484 490 502 512
ILLEGAL              : 
IN                   : 
INPUT                : 566
INT                  : 28 177 405
INT_LIT              : 36 42 54 71 93 127 139 156 199 211 228 243 255 272 285 297 314 332 344 361 370 382 399 406 428 440 457 479 481 489 499 511 528 543 561
LBRACE               : 6 99 237 237 238 277 277 328 366 404
LBRACKET             : 13 15 23 50 52 135 137 183 185 207 209 251 253 293 295 340 342 378 380 436 438 485 487 507 509
LIST_BLN             : 
LIST_BLN2D           : 
LIST_CHR             : 
LIST_CHR2D           : 
LIST_FLT             : 
LIST_FLT2D           : 
LIST_INT             : 
LIST_INT2D           : 
LIST_STR             : 
LIST_STR2D           : 
LPAREN               : 6 38 44 99 129 161 162 163 164 201 233 234 235 236 237 238 245 277 287 319 320 321 322 328 334 366 372 404 413 430 462 463 464 465 469 470 501 533 534 535 536 538 545 566
LT                   : 63 83 148 220 264 306 353 391 449 520 553
LT_EQ                : 66 86 151 223 267 309 356 394 452 523 556
MAIN_CASPER          : 6
MEASURE              : 
MINUS                : 57 77 142 214 258 300 347 385 443 514 547
MINUS_EQ             : 475
MINUS_MINUS          : 47 132 204 248 290 337 375 412 433 504
MODULO               : 60 80 145 217 261 303 350 388 446 517 550
MOD_EQ               : 478
MULTIPLY             : 58 78 143 215 259 301 348 386 444 515 548
MUL_EQ               : 476
NEWLINE              : 3 4 5
NIGHT                : 74 96 159 231 275 317 364 402 460 531 564
NOT                  : 
NOT_EQ               : 67 87 152 224 268 310 357 395 453 524 557
OR                   : 69 89 154 226 270 312 359 397 455 526 559
OTHERWISE            : 237 277
OTHERWISE_CHECK      : 238
PLUS                 : 56 76 141 213 257 299 346 384 442 513 546
PLUS_EQ              : 474
PLUS_PLUS            : 46 131 203 247 289 336 374 411 432 503
POW                  : 
PUSH                 : 470
RBRACE               : 6 99 237 237 238 277 277 328 366 404
RBRACKET             : 13 15 23 50 52 135 137 183 185 207 209 251 253 293 295 340 342 378 380 436 438 485 487 507 509
REPEAT               : 404
REVIVE               : 119
RPAREN               : 6 38 44 99 129 161 162 163 164 201 233 234 235 236 237 238 245 277 287 319 320 321 322 328 334 366 372 404 413 430 462 463 464 465 469 470 501 533 534 535 536 538 545 566
SEMICOLON            : 328 328
SHIFT                : 278
SKIP                 : 
SPLICE               : 469
STOP                 : 
STR                  : 32 181
STR_LIT              : 75 97 160 232 276 318 365 403 461 532 565
SWAP                 : 277
TILDE                : 36 37 42 43 127 128 199 200 243 244 285 286 332 333 370 371 428 429 499 500 543 544
TYPE                 : 
UNTIL                : 366 404
error                : 

Nonterminals, with rules where they appear

_2d_list             : 13
arg_tail             : 416 417
arg_value            : 416 417
arguments            : 413
assign_op            : 471
assign_tail          : 468
assignment_statement : 170
compound_op          : 410 472
condition            : 237 238 245
condition1           : 242
condition_factor     : 240 257 258 259 260 261 262 263 264 265 266 267 268 269 270
condition_index      : 251 253
condition_list_index : 246
condition_list_index2 : 251
condition_postfix    : 241
condition_postfix_op : 250
condition_tail       : 240 257 258 259 260 261 262 263 264 265 266 267 268 269 270
condition_var_call   : 241
conditional_statement : 172
conditional_tail     : 237 238
control_var_tail     : 405
control_variable     : 328
data_type            : 11 115 117
deleteCount          : 469
element_tail         : 24 25
empty                : 2 8 12 14 16 20 27 48 51 53 70 90 100 102 116 118 120 133 136 138 155 165 175 182 184 186 190 205 208 210 227 239 249 252 254 271 291 294 296 313 324 338 341 343 360 376 379 381 398 415 418 434 437 439 456 467 480 482 486 488 491 505 508 510 527 560
expression           : 21
factor               : 33 76 77 78 79 80 81 82 83 84 85 86 87 88 89
factor_expression    : 38 44
factor_expression1   : 41
factor_expression_factor : 39 56 57 58 59 60 61 62 63 64 65 66 67 68 69
factor_expression_tail : 39 56 57 58 59 60 61 62 63 64 65 66 67 68 69
factor_index         : 50 52
factor_list_index    : 45
factor_list_index2   : 50
factor_postfix       : 40
factor_postfix_op    : 49
factor_tail          : 33 76 77 78 79 80 81 82 83 84 85 86 87 88 89
factor_var_call      : 40
for_expression       : 328
for_factor           : 329 334 346 347 348 349 350 351 352 353 354 355 356 357 358 359
for_factor1          : 331
for_factor_tail      : 329 346 347 348 349 350 351 352 353 354 355 356 357 358 359
for_index            : 340 342
for_list_index       : 335
for_list_index2      : 340
for_loop             : 325
for_postfix          : 330
for_postfix_op       : 339
for_var_call         : 330
function_call        : 123 169 195 281 424 495
function_dtype       : 104
function_statements  : 1 101
function_statements_tail : 99
global_dec           : 1 9
global_statement     : 7
global_statement_tail : 10 17 19
global_statement_tail2 : 18
global_tail          : 7
global_value         : 18
index                : 485 487
input_statement      : 414 539
list_dec             : 11
list_element         : 23 26 470 483
list_index           : 484
list_index2          : 485
list_value           : 22 25 192
literal              : 24 419
literal1             : 35 91
literal2             : 92
local_2d_list        : 183
local_data_type      : 176
local_dec            : 166
local_dec_tail       : 174 187 189
local_dec_tail2      : 188
local_expression     : 194
local_factor         : 196 201 213 214 215 216 217 218 219 220 221 222 223 224 225 226
local_factor1        : 198
local_factor_tail    : 196 213 214 215 216 217 218 219 220 221 222 223 224 225 226
local_index          : 207 209
local_list_dec       : 176
local_list_index     : 202
local_list_index2    : 207
local_postfix        : 197
local_postfix_op     : 206
local_type_cast      : 193
local_value          : 188
local_value_value    : 191
local_var_call       : 197
local_var_statement  : 174
loop_statement       : 168
main_function        : 1
maybe_newline        : 1 1 3 6 6 6 99 99 99 166 237 237 237 237 237 237 237 238 238 238 277 277 277 277 277 277 278 328 328
next_val             : 421 466
output_expression    : 423
output_factor        : 425 430 442 443 444 445 446 447 448 449 450 451 452 453 454 455
output_factor1       : 427
output_factor_tail   : 425 442 443 444 445 446 447 448 449 450 451 452 453 454 455
output_index         : 436 438
output_list_index    : 431
output_list_index2   : 436
output_postfix       : 426
output_postfix_op    : 435
output_statement     : 171
output_type_cast     : 422
output_value         : 421
output_var_call      : 426
parameters           : 99
parameters_tail      : 115 117
postfix              : 34 541
postfix_op           : 409 492
program              : 0
repeat_until         : 327
ret_type             : 99
revive               : 99
revive_expression    : 122
revive_factor        : 124 129 141 142 143 144 145 146 147 148 149 150 151 152 153 154
revive_factor1       : 126
revive_factor_tail   : 124 141 142 143 144 145 146 147 148 149 150 151 152 153 154
revive_index         : 135 137
revive_list_index    : 130
revive_list_index2   : 135
revive_postfix       : 125
revive_postfix_op    : 134
revive_type_cast     : 121
revive_value         : 119
revive_var_call      : 125
splice_items         : 469
start                : 469
statements           : 6 99 167 168 169 170 171 172 173 237 237 238 277 278 328 366 404
statements_tail      : 166
switch_condition     : 277 323
switch_expression    : 280
switch_factor        : 282 287 299 300 301 302 303 304 305 306 307 308 309 310 311 312
switch_factor1       : 284
switch_factor_tail   : 282 299 300 301 302 303 304 305 306 307 308 309 310 311 312
switch_index         : 293 295
switch_list_index    : 288
switch_list_index2   : 293
switch_postfix       : 283
switch_postfix_op    : 292
switch_statement     : 167
switch_type_cast     : 279
switch_value         : 278
switch_var_call      : 283
switchcond_tail      : 278
type_cast            : 493
typecast_expression  : 537
typecast_factor      : 540 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559
typecast_factor1     : 542
typecast_factor_tail : 540 546 547 548 549 550 551 552 553 554 555 556 557 558 559
typecast_value       : 161 162 163 164 233 234 235 236 319 320 321 322 462 463 464 465 533 534 535 536
unli_newline         : 1 1 5 7 99 167 168 169 170 171 172 174
until_expression     : 366 404
until_factor         : 367 372 384 385 386 387 388 389 390 391 392 393 394 395 396 397
until_factor1        : 369
until_factor_tail    : 367 384 385 386 387 388 389 390 391 392 393 394 395 396 397
until_index          : 378 380
until_list_index     : 373
until_list_index2    : 378
until_loop           : 326
until_postfix        : 368
until_postfix_op     : 377
until_var_call       : 368
update               : 328
update_tail          : 408
value                : 410 466 471
value_expression     : 494
value_factor         : 496 501 513 514 515 516 517 518 519 520 521 522 523 524 525 526
value_factor1        : 498
value_factor_tail    : 496 513 514 515 516 517 518 519 520 521 522 523 524 525 526
value_index          : 507 509
value_list_index     : 502
value_list_index2    : 507
value_postfix        : 497
value_postfix_op     : 506
value_var_call       : 497
var_call             : 34 407 408 420 541
var_statement        : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST

    BIRTH           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> BIRTH . unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 3

state 3

    (1) program -> BIRTH unli_newline . global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (567) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (28) data_type -> . INT
    (29) data_type -> . FLT
    (30) data_type -> . BLN
    (31) data_type -> . CHR
    (32) data_type -> . STR

    NEWLINE         reduce using rule 567 (empty -> .)
    FUNCTION        reduce using rule 567 (empty -> .)
    FUNCTION_INT    reduce using rule 567 (empty -> .)
    FUNCTION_FLT    reduce using rule 567 (empty -> .)
    FUNCTION_CHR    reduce using rule 567 (empty -> .)
    FUNCTION_BLN    reduce using rule 567 (empty -> .)
    FUNCTION_STR    reduce using rule 567 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 567 (empty -> .)
    MAIN_CASPER     reduce using rule 567 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_dec                     shift and go to state 5
    global_statement               shift and go to state 6
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 4

    (4) unli_newline -> NEWLINE .
    (5) unli_newline -> NEWLINE . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    INT             reduce using rule 4 (unli_newline -> NEWLINE .)
    FLT             reduce using rule 4 (unli_newline -> NEWLINE .)
    BLN             reduce using rule 4 (unli_newline -> NEWLINE .)
    CHR             reduce using rule 4 (unli_newline -> NEWLINE .)
    STR             reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION        reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_INT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_FLT    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_CHR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_BLN    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_STR    reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_INT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_FLT reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_CHR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_STR reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_LIST_BLN reduce using rule 4 (unli_newline -> NEWLINE .)
    MAIN_CASPER     reduce using rule 4 (unli_newline -> NEWLINE .)
    GHOST           reduce using rule 4 (unli_newline -> NEWLINE .)
    SWAP            reduce using rule 4 (unli_newline -> NEWLINE .)
    FUNCTION_NAME   reduce using rule 4 (unli_newline -> NEWLINE .)
    IDENT           reduce using rule 4 (unli_newline -> NEWLINE .)
    DISPLAY         reduce using rule 4 (unli_newline -> NEWLINE .)
    CHECK           reduce using rule 4 (unli_newline -> NEWLINE .)
    FOR             reduce using rule 4 (unli_newline -> NEWLINE .)
    UNTIL           reduce using rule 4 (unli_newline -> NEWLINE .)
    REPEAT          reduce using rule 4 (unli_newline -> NEWLINE .)
    INPUT           reduce using rule 4 (unli_newline -> NEWLINE .)
    REVIVE          reduce using rule 4 (unli_newline -> NEWLINE .)
    RBRACE          reduce using rule 4 (unli_newline -> NEWLINE .)
    SHIFT           reduce using rule 4 (unli_newline -> NEWLINE .)
    OTHERWISE       reduce using rule 4 (unli_newline -> NEWLINE .)
    NEWLINE         shift and go to state 4

  ! NEWLINE         [ reduce using rule 4 (unli_newline -> NEWLINE .) ]

    unli_newline                   shift and go to state 15

state 5

    (1) program -> BIRTH unli_newline global_dec . maybe_newline function_statements maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 567 (empty -> .)
    FUNCTION_INT    reduce using rule 567 (empty -> .)
    FUNCTION_FLT    reduce using rule 567 (empty -> .)
    FUNCTION_CHR    reduce using rule 567 (empty -> .)
    FUNCTION_BLN    reduce using rule 567 (empty -> .)
    FUNCTION_STR    reduce using rule 567 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 567 (empty -> .)
    MAIN_CASPER     reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 16
    empty                          shift and go to state 17

state 6

    (7) global_dec -> global_statement . unli_newline global_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 19

state 7

    (8) global_dec -> empty .

    NEWLINE         reduce using rule 8 (global_dec -> empty .)
    FUNCTION        reduce using rule 8 (global_dec -> empty .)
    FUNCTION_INT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_FLT    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_CHR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_BLN    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_STR    reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_INT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_FLT reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_CHR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_STR reduce using rule 8 (global_dec -> empty .)
    FUNCTION_LIST_BLN reduce using rule 8 (global_dec -> empty .)
    MAIN_CASPER     reduce using rule 8 (global_dec -> empty .)


state 8

    (10) global_statement -> var_statement . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (567) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 567 (empty -> .)

    global_statement_tail          shift and go to state 20
    empty                          shift and go to state 21

state 9

    (11) var_statement -> data_type . IDENT list_dec

    IDENT           shift and go to state 24


state 10

    (28) data_type -> INT .

    IDENT           reduce using rule 28 (data_type -> INT .)


state 11

    (29) data_type -> FLT .

    IDENT           reduce using rule 29 (data_type -> FLT .)


state 12

    (30) data_type -> BLN .

    IDENT           reduce using rule 30 (data_type -> BLN .)


state 13

    (31) data_type -> CHR .

    IDENT           reduce using rule 31 (data_type -> CHR .)


state 14

    (32) data_type -> STR .

    IDENT           reduce using rule 32 (data_type -> STR .)


state 15

    (5) unli_newline -> NEWLINE unli_newline .

    INT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FLT             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    BLN             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    STR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    NEWLINE         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION        reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_INT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_FLT    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_CHR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_BLN    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_STR    reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_INT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_FLT reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_CHR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_STR reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_LIST_BLN reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    MAIN_CASPER     reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    GHOST           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SWAP            reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FUNCTION_NAME   reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    IDENT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    DISPLAY         reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    CHECK           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    FOR             reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    UNTIL           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REPEAT          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    INPUT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    REVIVE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    RBRACE          reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    SHIFT           reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)
    OTHERWISE       reduce using rule 5 (unli_newline -> NEWLINE unli_newline .)


state 16

    (1) program -> BIRTH unli_newline global_dec maybe_newline . function_statements maybe_newline main_function unli_newline GHOST
    (99) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (100) function_statements -> . empty
    (103) ret_type -> . FUNCTION
    (104) ret_type -> . function_dtype
    (567) empty -> .
    (105) function_dtype -> . FUNCTION_INT
    (106) function_dtype -> . FUNCTION_FLT
    (107) function_dtype -> . FUNCTION_CHR
    (108) function_dtype -> . FUNCTION_BLN
    (109) function_dtype -> . FUNCTION_STR
    (110) function_dtype -> . FUNCTION_LIST_INT
    (111) function_dtype -> . FUNCTION_LIST_FLT
    (112) function_dtype -> . FUNCTION_LIST_CHR
    (113) function_dtype -> . FUNCTION_LIST_STR
    (114) function_dtype -> . FUNCTION_LIST_BLN

    FUNCTION        shift and go to state 28
    NEWLINE         reduce using rule 567 (empty -> .)
    MAIN_CASPER     reduce using rule 567 (empty -> .)
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    function_statements            shift and go to state 25
    ret_type                       shift and go to state 26
    empty                          shift and go to state 27
    function_dtype                 shift and go to state 29

state 17

    (2) maybe_newline -> empty .

    FUNCTION        reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_INT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_FLT    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_CHR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_BLN    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_STR    reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_INT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_FLT reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_CHR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_STR reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_LIST_BLN reduce using rule 2 (maybe_newline -> empty .)
    NEWLINE         reduce using rule 2 (maybe_newline -> empty .)
    MAIN_CASPER     reduce using rule 2 (maybe_newline -> empty .)
    LBRACE          reduce using rule 2 (maybe_newline -> empty .)
    INT             reduce using rule 2 (maybe_newline -> empty .)
    FLT             reduce using rule 2 (maybe_newline -> empty .)
    BLN             reduce using rule 2 (maybe_newline -> empty .)
    CHR             reduce using rule 2 (maybe_newline -> empty .)
    STR             reduce using rule 2 (maybe_newline -> empty .)
    REVIVE          reduce using rule 2 (maybe_newline -> empty .)
    RBRACE          reduce using rule 2 (maybe_newline -> empty .)
    SWAP            reduce using rule 2 (maybe_newline -> empty .)
    FUNCTION_NAME   reduce using rule 2 (maybe_newline -> empty .)
    IDENT           reduce using rule 2 (maybe_newline -> empty .)
    DISPLAY         reduce using rule 2 (maybe_newline -> empty .)
    CHECK           reduce using rule 2 (maybe_newline -> empty .)
    FOR             reduce using rule 2 (maybe_newline -> empty .)
    UNTIL           reduce using rule 2 (maybe_newline -> empty .)
    REPEAT          reduce using rule 2 (maybe_newline -> empty .)
    INPUT           reduce using rule 2 (maybe_newline -> empty .)
    SHIFT           reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE       reduce using rule 2 (maybe_newline -> empty .)
    OTHERWISE_CHECK reduce using rule 2 (maybe_newline -> empty .)


state 18

    (3) maybe_newline -> NEWLINE . maybe_newline
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    FUNCTION        reduce using rule 567 (empty -> .)
    FUNCTION_INT    reduce using rule 567 (empty -> .)
    FUNCTION_FLT    reduce using rule 567 (empty -> .)
    FUNCTION_CHR    reduce using rule 567 (empty -> .)
    FUNCTION_BLN    reduce using rule 567 (empty -> .)
    FUNCTION_STR    reduce using rule 567 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 567 (empty -> .)
    MAIN_CASPER     reduce using rule 567 (empty -> .)
    LBRACE          reduce using rule 567 (empty -> .)
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    OTHERWISE_CHECK reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 40
    empty                          shift and go to state 17

state 19

    (7) global_dec -> global_statement unli_newline . global_tail
    (9) global_tail -> . global_dec
    (7) global_dec -> . global_statement unli_newline global_tail
    (8) global_dec -> . empty
    (10) global_statement -> . var_statement global_statement_tail
    (567) empty -> .
    (11) var_statement -> . data_type IDENT list_dec
    (28) data_type -> . INT
    (29) data_type -> . FLT
    (30) data_type -> . BLN
    (31) data_type -> . CHR
    (32) data_type -> . STR

    NEWLINE         reduce using rule 567 (empty -> .)
    FUNCTION        reduce using rule 567 (empty -> .)
    FUNCTION_INT    reduce using rule 567 (empty -> .)
    FUNCTION_FLT    reduce using rule 567 (empty -> .)
    FUNCTION_CHR    reduce using rule 567 (empty -> .)
    FUNCTION_BLN    reduce using rule 567 (empty -> .)
    FUNCTION_STR    reduce using rule 567 (empty -> .)
    FUNCTION_LIST_INT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_FLT reduce using rule 567 (empty -> .)
    FUNCTION_LIST_CHR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_STR reduce using rule 567 (empty -> .)
    FUNCTION_LIST_BLN reduce using rule 567 (empty -> .)
    MAIN_CASPER     reduce using rule 567 (empty -> .)
    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    global_statement               shift and go to state 6
    global_tail                    shift and go to state 41
    global_dec                     shift and go to state 42
    empty                          shift and go to state 7
    var_statement                  shift and go to state 8
    data_type                      shift and go to state 9

state 20

    (10) global_statement -> var_statement global_statement_tail .

    NEWLINE         reduce using rule 10 (global_statement -> var_statement global_statement_tail .)


state 21

    (16) global_statement_tail -> empty .

    NEWLINE         reduce using rule 16 (global_statement_tail -> empty .)


state 22

    (17) global_statement_tail -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 43


state 23

    (18) global_statement_tail -> EQ . global_value global_statement_tail2
    (21) global_value -> . expression
    (22) global_value -> . list_value
    (33) expression -> . factor factor_tail
    (23) list_value -> . LBRACKET list_element RBRACKET
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    global_value                   shift and go to state 44
    expression                     shift and go to state 45
    list_value                     shift and go to state 46
    factor                         shift and go to state 47
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 24

    (11) var_statement -> data_type IDENT . list_dec
    (12) list_dec -> . empty
    (13) list_dec -> . LBRACKET RBRACKET _2d_list
    (567) empty -> .

    LBRACKET        shift and go to state 61
    COMMA           reduce using rule 567 (empty -> .)
    EQ              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    list_dec                       shift and go to state 59
    empty                          shift and go to state 60

state 25

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements . maybe_newline main_function unli_newline GHOST
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    MAIN_CASPER     reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 62
    empty                          shift and go to state 17

state 26

    (99) function_statements -> ret_type . FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    FUNCTION_NAME   shift and go to state 63


state 27

    (100) function_statements -> empty .

    NEWLINE         reduce using rule 100 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 100 (function_statements -> empty .)


state 28

    (103) ret_type -> FUNCTION .

    FUNCTION_NAME   reduce using rule 103 (ret_type -> FUNCTION .)


state 29

    (104) ret_type -> function_dtype .

    FUNCTION_NAME   reduce using rule 104 (ret_type -> function_dtype .)


state 30

    (105) function_dtype -> FUNCTION_INT .

    FUNCTION_NAME   reduce using rule 105 (function_dtype -> FUNCTION_INT .)


state 31

    (106) function_dtype -> FUNCTION_FLT .

    FUNCTION_NAME   reduce using rule 106 (function_dtype -> FUNCTION_FLT .)


state 32

    (107) function_dtype -> FUNCTION_CHR .

    FUNCTION_NAME   reduce using rule 107 (function_dtype -> FUNCTION_CHR .)


state 33

    (108) function_dtype -> FUNCTION_BLN .

    FUNCTION_NAME   reduce using rule 108 (function_dtype -> FUNCTION_BLN .)


state 34

    (109) function_dtype -> FUNCTION_STR .

    FUNCTION_NAME   reduce using rule 109 (function_dtype -> FUNCTION_STR .)


state 35

    (110) function_dtype -> FUNCTION_LIST_INT .

    FUNCTION_NAME   reduce using rule 110 (function_dtype -> FUNCTION_LIST_INT .)


state 36

    (111) function_dtype -> FUNCTION_LIST_FLT .

    FUNCTION_NAME   reduce using rule 111 (function_dtype -> FUNCTION_LIST_FLT .)


state 37

    (112) function_dtype -> FUNCTION_LIST_CHR .

    FUNCTION_NAME   reduce using rule 112 (function_dtype -> FUNCTION_LIST_CHR .)


state 38

    (113) function_dtype -> FUNCTION_LIST_STR .

    FUNCTION_NAME   reduce using rule 113 (function_dtype -> FUNCTION_LIST_STR .)


state 39

    (114) function_dtype -> FUNCTION_LIST_BLN .

    FUNCTION_NAME   reduce using rule 114 (function_dtype -> FUNCTION_LIST_BLN .)


state 40

    (3) maybe_newline -> NEWLINE maybe_newline .

    FUNCTION        reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_INT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_FLT    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_CHR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_BLN    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_STR    reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_INT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_FLT reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_CHR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_STR reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_LIST_BLN reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    NEWLINE         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    MAIN_CASPER     reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    LBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FLT             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    BLN             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    STR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REVIVE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    RBRACE          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SWAP            reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FUNCTION_NAME   reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    IDENT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    DISPLAY         reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    CHECK           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    FOR             reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    UNTIL           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    REPEAT          reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    INPUT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    SHIFT           reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE       reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)
    OTHERWISE_CHECK reduce using rule 3 (maybe_newline -> NEWLINE maybe_newline .)


state 41

    (7) global_dec -> global_statement unli_newline global_tail .

    NEWLINE         reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION        reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_INT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_FLT    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_CHR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_BLN    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_STR    reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_INT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_FLT reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_CHR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_STR reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    FUNCTION_LIST_BLN reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)
    MAIN_CASPER     reduce using rule 7 (global_dec -> global_statement unli_newline global_tail .)


state 42

    (9) global_tail -> global_dec .

    NEWLINE         reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION        reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_INT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_FLT    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_CHR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_BLN    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_STR    reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_INT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_FLT reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_CHR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_STR reduce using rule 9 (global_tail -> global_dec .)
    FUNCTION_LIST_BLN reduce using rule 9 (global_tail -> global_dec .)
    MAIN_CASPER     reduce using rule 9 (global_tail -> global_dec .)


state 43

    (17) global_statement_tail -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (567) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 567 (empty -> .)

    global_statement_tail          shift and go to state 64
    empty                          shift and go to state 21

state 44

    (18) global_statement_tail -> EQ global_value . global_statement_tail2
    (19) global_statement_tail2 -> . COMMA IDENT global_statement_tail
    (20) global_statement_tail2 -> . empty
    (567) empty -> .

    COMMA           shift and go to state 66
    NEWLINE         reduce using rule 567 (empty -> .)

    global_statement_tail2         shift and go to state 65
    empty                          shift and go to state 67

state 45

    (21) global_value -> expression .

    COMMA           reduce using rule 21 (global_value -> expression .)
    NEWLINE         reduce using rule 21 (global_value -> expression .)


state 46

    (22) global_value -> list_value .

    COMMA           reduce using rule 22 (global_value -> list_value .)
    NEWLINE         reduce using rule 22 (global_value -> list_value .)


state 47

    (33) expression -> factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 68
    empty                          shift and go to state 83

state 48

    (23) list_value -> LBRACKET . list_element RBRACKET
    (24) list_element -> . literal element_tail
    (25) list_element -> . list_value element_tail
    (91) literal -> . literal1
    (92) literal -> . literal2
    (23) list_value -> . LBRACKET list_element RBRACKET
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT
    (98) literal2 -> . CHR_LIT

    LBRACKET        shift and go to state 48
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 89

    list_element                   shift and go to state 84
    literal                        shift and go to state 85
    list_value                     shift and go to state 86
    literal1                       shift and go to state 87
    literal2                       shift and go to state 88

state 49

    (34) factor -> var_call . postfix
    (491) postfix -> . empty
    (492) postfix -> . postfix_op
    (567) empty -> .
    (411) postfix_op -> . PLUS_PLUS
    (412) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 93
    MINUS_MINUS     shift and go to state 94

    postfix                        shift and go to state 90
    empty                          shift and go to state 91
    postfix_op                     shift and go to state 92

state 50

    (35) factor -> literal1 .

    PLUS            reduce using rule 35 (factor -> literal1 .)
    MINUS           reduce using rule 35 (factor -> literal1 .)
    MULTIPLY        reduce using rule 35 (factor -> literal1 .)
    DIVISION        reduce using rule 35 (factor -> literal1 .)
    MODULO          reduce using rule 35 (factor -> literal1 .)
    EXPONENT        reduce using rule 35 (factor -> literal1 .)
    GT              reduce using rule 35 (factor -> literal1 .)
    LT              reduce using rule 35 (factor -> literal1 .)
    EQ_EQ           reduce using rule 35 (factor -> literal1 .)
    GT_EQ           reduce using rule 35 (factor -> literal1 .)
    LT_EQ           reduce using rule 35 (factor -> literal1 .)
    NOT_EQ          reduce using rule 35 (factor -> literal1 .)
    AND             reduce using rule 35 (factor -> literal1 .)
    OR              reduce using rule 35 (factor -> literal1 .)
    COMMA           reduce using rule 35 (factor -> literal1 .)
    NEWLINE         reduce using rule 35 (factor -> literal1 .)


state 51

    (36) factor -> TILDE . INT_LIT
    (37) factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 95
    FLT_LIT         shift and go to state 96


state 52

    (93) literal1 -> INT_LIT .

    PLUS            reduce using rule 93 (literal1 -> INT_LIT .)
    MINUS           reduce using rule 93 (literal1 -> INT_LIT .)
    MULTIPLY        reduce using rule 93 (literal1 -> INT_LIT .)
    DIVISION        reduce using rule 93 (literal1 -> INT_LIT .)
    MODULO          reduce using rule 93 (literal1 -> INT_LIT .)
    EXPONENT        reduce using rule 93 (literal1 -> INT_LIT .)
    GT              reduce using rule 93 (literal1 -> INT_LIT .)
    LT              reduce using rule 93 (literal1 -> INT_LIT .)
    EQ_EQ           reduce using rule 93 (literal1 -> INT_LIT .)
    GT_EQ           reduce using rule 93 (literal1 -> INT_LIT .)
    LT_EQ           reduce using rule 93 (literal1 -> INT_LIT .)
    NOT_EQ          reduce using rule 93 (literal1 -> INT_LIT .)
    AND             reduce using rule 93 (literal1 -> INT_LIT .)
    OR              reduce using rule 93 (literal1 -> INT_LIT .)
    COMMA           reduce using rule 93 (literal1 -> INT_LIT .)
    NEWLINE         reduce using rule 93 (literal1 -> INT_LIT .)
    RBRACKET        reduce using rule 93 (literal1 -> INT_LIT .)
    RPAREN          reduce using rule 93 (literal1 -> INT_LIT .)


state 53

    (94) literal1 -> FLT_LIT .

    PLUS            reduce using rule 94 (literal1 -> FLT_LIT .)
    MINUS           reduce using rule 94 (literal1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 94 (literal1 -> FLT_LIT .)
    DIVISION        reduce using rule 94 (literal1 -> FLT_LIT .)
    MODULO          reduce using rule 94 (literal1 -> FLT_LIT .)
    EXPONENT        reduce using rule 94 (literal1 -> FLT_LIT .)
    GT              reduce using rule 94 (literal1 -> FLT_LIT .)
    LT              reduce using rule 94 (literal1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 94 (literal1 -> FLT_LIT .)
    GT_EQ           reduce using rule 94 (literal1 -> FLT_LIT .)
    LT_EQ           reduce using rule 94 (literal1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 94 (literal1 -> FLT_LIT .)
    AND             reduce using rule 94 (literal1 -> FLT_LIT .)
    OR              reduce using rule 94 (literal1 -> FLT_LIT .)
    COMMA           reduce using rule 94 (literal1 -> FLT_LIT .)
    NEWLINE         reduce using rule 94 (literal1 -> FLT_LIT .)
    RBRACKET        reduce using rule 94 (literal1 -> FLT_LIT .)
    RPAREN          reduce using rule 94 (literal1 -> FLT_LIT .)


state 54

    (38) factor -> LPAREN . factor_expression RPAREN
    (39) factor_expression -> . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression              shift and go to state 98
    factor_expression_factor       shift and go to state 99
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 55

    (484) var_call -> IDENT . list_index
    (485) list_index -> . LBRACKET index RBRACKET list_index2
    (486) list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 110
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    SEMICOLON       reduce using rule 567 (empty -> .)
    PLUS_EQ         reduce using rule 567 (empty -> .)
    MINUS_EQ        reduce using rule 567 (empty -> .)
    MUL_EQ          reduce using rule 567 (empty -> .)
    DIV_EQ          reduce using rule 567 (empty -> .)
    MOD_EQ          reduce using rule 567 (empty -> .)

    list_index                     shift and go to state 109
    empty                          shift and go to state 111

state 56

    (95) literal1 -> DAY .

    PLUS            reduce using rule 95 (literal1 -> DAY .)
    MINUS           reduce using rule 95 (literal1 -> DAY .)
    MULTIPLY        reduce using rule 95 (literal1 -> DAY .)
    DIVISION        reduce using rule 95 (literal1 -> DAY .)
    MODULO          reduce using rule 95 (literal1 -> DAY .)
    EXPONENT        reduce using rule 95 (literal1 -> DAY .)
    GT              reduce using rule 95 (literal1 -> DAY .)
    LT              reduce using rule 95 (literal1 -> DAY .)
    EQ_EQ           reduce using rule 95 (literal1 -> DAY .)
    GT_EQ           reduce using rule 95 (literal1 -> DAY .)
    LT_EQ           reduce using rule 95 (literal1 -> DAY .)
    NOT_EQ          reduce using rule 95 (literal1 -> DAY .)
    AND             reduce using rule 95 (literal1 -> DAY .)
    OR              reduce using rule 95 (literal1 -> DAY .)
    COMMA           reduce using rule 95 (literal1 -> DAY .)
    NEWLINE         reduce using rule 95 (literal1 -> DAY .)
    RBRACKET        reduce using rule 95 (literal1 -> DAY .)
    RPAREN          reduce using rule 95 (literal1 -> DAY .)


state 57

    (96) literal1 -> NIGHT .

    PLUS            reduce using rule 96 (literal1 -> NIGHT .)
    MINUS           reduce using rule 96 (literal1 -> NIGHT .)
    MULTIPLY        reduce using rule 96 (literal1 -> NIGHT .)
    DIVISION        reduce using rule 96 (literal1 -> NIGHT .)
    MODULO          reduce using rule 96 (literal1 -> NIGHT .)
    EXPONENT        reduce using rule 96 (literal1 -> NIGHT .)
    GT              reduce using rule 96 (literal1 -> NIGHT .)
    LT              reduce using rule 96 (literal1 -> NIGHT .)
    EQ_EQ           reduce using rule 96 (literal1 -> NIGHT .)
    GT_EQ           reduce using rule 96 (literal1 -> NIGHT .)
    LT_EQ           reduce using rule 96 (literal1 -> NIGHT .)
    NOT_EQ          reduce using rule 96 (literal1 -> NIGHT .)
    AND             reduce using rule 96 (literal1 -> NIGHT .)
    OR              reduce using rule 96 (literal1 -> NIGHT .)
    COMMA           reduce using rule 96 (literal1 -> NIGHT .)
    NEWLINE         reduce using rule 96 (literal1 -> NIGHT .)
    RBRACKET        reduce using rule 96 (literal1 -> NIGHT .)
    RPAREN          reduce using rule 96 (literal1 -> NIGHT .)


state 58

    (97) literal1 -> STR_LIT .

    PLUS            reduce using rule 97 (literal1 -> STR_LIT .)
    MINUS           reduce using rule 97 (literal1 -> STR_LIT .)
    MULTIPLY        reduce using rule 97 (literal1 -> STR_LIT .)
    DIVISION        reduce using rule 97 (literal1 -> STR_LIT .)
    MODULO          reduce using rule 97 (literal1 -> STR_LIT .)
    EXPONENT        reduce using rule 97 (literal1 -> STR_LIT .)
    GT              reduce using rule 97 (literal1 -> STR_LIT .)
    LT              reduce using rule 97 (literal1 -> STR_LIT .)
    EQ_EQ           reduce using rule 97 (literal1 -> STR_LIT .)
    GT_EQ           reduce using rule 97 (literal1 -> STR_LIT .)
    LT_EQ           reduce using rule 97 (literal1 -> STR_LIT .)
    NOT_EQ          reduce using rule 97 (literal1 -> STR_LIT .)
    AND             reduce using rule 97 (literal1 -> STR_LIT .)
    OR              reduce using rule 97 (literal1 -> STR_LIT .)
    COMMA           reduce using rule 97 (literal1 -> STR_LIT .)
    NEWLINE         reduce using rule 97 (literal1 -> STR_LIT .)
    RBRACKET        reduce using rule 97 (literal1 -> STR_LIT .)
    RPAREN          reduce using rule 97 (literal1 -> STR_LIT .)


state 59

    (11) var_statement -> data_type IDENT list_dec .

    COMMA           reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    EQ              reduce using rule 11 (var_statement -> data_type IDENT list_dec .)
    NEWLINE         reduce using rule 11 (var_statement -> data_type IDENT list_dec .)


state 60

    (12) list_dec -> empty .

    COMMA           reduce using rule 12 (list_dec -> empty .)
    EQ              reduce using rule 12 (list_dec -> empty .)
    NEWLINE         reduce using rule 12 (list_dec -> empty .)


state 61

    (13) list_dec -> LBRACKET . RBRACKET _2d_list

    RBRACKET        shift and go to state 112


state 62

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline . main_function unli_newline GHOST
    (6) main_function -> . MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    MAIN_CASPER     shift and go to state 114

    main_function                  shift and go to state 113

state 63

    (99) function_statements -> ret_type FUNCTION_NAME . LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    LPAREN          shift and go to state 115


state 64

    (17) global_statement_tail -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 17 (global_statement_tail -> COMMA IDENT global_statement_tail .)


state 65

    (18) global_statement_tail -> EQ global_value global_statement_tail2 .

    NEWLINE         reduce using rule 18 (global_statement_tail -> EQ global_value global_statement_tail2 .)


state 66

    (19) global_statement_tail2 -> COMMA . IDENT global_statement_tail

    IDENT           shift and go to state 116


state 67

    (20) global_statement_tail2 -> empty .

    NEWLINE         reduce using rule 20 (global_statement_tail2 -> empty .)


state 68

    (33) expression -> factor factor_tail .

    COMMA           reduce using rule 33 (expression -> factor factor_tail .)
    NEWLINE         reduce using rule 33 (expression -> factor factor_tail .)


state 69

    (76) factor_tail -> PLUS . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 117
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 70

    (77) factor_tail -> MINUS . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 118
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 71

    (78) factor_tail -> MULTIPLY . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 119
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 72

    (79) factor_tail -> DIVISION . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 120
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 73

    (80) factor_tail -> MODULO . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 121
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 74

    (81) factor_tail -> EXPONENT . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 122
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 75

    (82) factor_tail -> GT . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 123
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 76

    (83) factor_tail -> LT . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 124
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 77

    (84) factor_tail -> EQ_EQ . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 125
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 78

    (85) factor_tail -> GT_EQ . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 126
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 79

    (86) factor_tail -> LT_EQ . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 127
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 80

    (87) factor_tail -> NOT_EQ . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 128
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 81

    (88) factor_tail -> AND . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 129
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 82

    (89) factor_tail -> OR . factor factor_tail
    (34) factor -> . var_call postfix
    (35) factor -> . literal1
    (36) factor -> . TILDE INT_LIT
    (37) factor -> . TILDE FLT_LIT
    (38) factor -> . LPAREN factor_expression RPAREN
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT

    TILDE           shift and go to state 51
    LPAREN          shift and go to state 54
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58

    factor                         shift and go to state 130
    var_call                       shift and go to state 49
    literal1                       shift and go to state 50

state 83

    (90) factor_tail -> empty .

    COMMA           reduce using rule 90 (factor_tail -> empty .)
    NEWLINE         reduce using rule 90 (factor_tail -> empty .)


state 84

    (23) list_value -> LBRACKET list_element . RBRACKET

    RBRACKET        shift and go to state 131


state 85

    (24) list_element -> literal . element_tail
    (26) element_tail -> . COMMA list_element
    (27) element_tail -> . empty
    (567) empty -> .

    COMMA           shift and go to state 133
    RBRACKET        reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    element_tail                   shift and go to state 132
    empty                          shift and go to state 134

state 86

    (25) list_element -> list_value . element_tail
    (26) element_tail -> . COMMA list_element
    (27) element_tail -> . empty
    (567) empty -> .

    COMMA           shift and go to state 133
    RBRACKET        reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    element_tail                   shift and go to state 135
    empty                          shift and go to state 134

state 87

    (91) literal -> literal1 .

    COMMA           reduce using rule 91 (literal -> literal1 .)
    RBRACKET        reduce using rule 91 (literal -> literal1 .)
    RPAREN          reduce using rule 91 (literal -> literal1 .)


state 88

    (92) literal -> literal2 .

    COMMA           reduce using rule 92 (literal -> literal2 .)
    RBRACKET        reduce using rule 92 (literal -> literal2 .)
    RPAREN          reduce using rule 92 (literal -> literal2 .)


state 89

    (98) literal2 -> CHR_LIT .

    COMMA           reduce using rule 98 (literal2 -> CHR_LIT .)
    RBRACKET        reduce using rule 98 (literal2 -> CHR_LIT .)
    RPAREN          reduce using rule 98 (literal2 -> CHR_LIT .)


state 90

    (34) factor -> var_call postfix .

    PLUS            reduce using rule 34 (factor -> var_call postfix .)
    MINUS           reduce using rule 34 (factor -> var_call postfix .)
    MULTIPLY        reduce using rule 34 (factor -> var_call postfix .)
    DIVISION        reduce using rule 34 (factor -> var_call postfix .)
    MODULO          reduce using rule 34 (factor -> var_call postfix .)
    EXPONENT        reduce using rule 34 (factor -> var_call postfix .)
    GT              reduce using rule 34 (factor -> var_call postfix .)
    LT              reduce using rule 34 (factor -> var_call postfix .)
    EQ_EQ           reduce using rule 34 (factor -> var_call postfix .)
    GT_EQ           reduce using rule 34 (factor -> var_call postfix .)
    LT_EQ           reduce using rule 34 (factor -> var_call postfix .)
    NOT_EQ          reduce using rule 34 (factor -> var_call postfix .)
    AND             reduce using rule 34 (factor -> var_call postfix .)
    OR              reduce using rule 34 (factor -> var_call postfix .)
    COMMA           reduce using rule 34 (factor -> var_call postfix .)
    NEWLINE         reduce using rule 34 (factor -> var_call postfix .)


state 91

    (491) postfix -> empty .

    PLUS            reduce using rule 491 (postfix -> empty .)
    MINUS           reduce using rule 491 (postfix -> empty .)
    MULTIPLY        reduce using rule 491 (postfix -> empty .)
    DIVISION        reduce using rule 491 (postfix -> empty .)
    MODULO          reduce using rule 491 (postfix -> empty .)
    EXPONENT        reduce using rule 491 (postfix -> empty .)
    GT              reduce using rule 491 (postfix -> empty .)
    LT              reduce using rule 491 (postfix -> empty .)
    EQ_EQ           reduce using rule 491 (postfix -> empty .)
    GT_EQ           reduce using rule 491 (postfix -> empty .)
    LT_EQ           reduce using rule 491 (postfix -> empty .)
    NOT_EQ          reduce using rule 491 (postfix -> empty .)
    AND             reduce using rule 491 (postfix -> empty .)
    OR              reduce using rule 491 (postfix -> empty .)
    COMMA           reduce using rule 491 (postfix -> empty .)
    NEWLINE         reduce using rule 491 (postfix -> empty .)
    RPAREN          reduce using rule 491 (postfix -> empty .)


state 92

    (492) postfix -> postfix_op .

    PLUS            reduce using rule 492 (postfix -> postfix_op .)
    MINUS           reduce using rule 492 (postfix -> postfix_op .)
    MULTIPLY        reduce using rule 492 (postfix -> postfix_op .)
    DIVISION        reduce using rule 492 (postfix -> postfix_op .)
    MODULO          reduce using rule 492 (postfix -> postfix_op .)
    EXPONENT        reduce using rule 492 (postfix -> postfix_op .)
    GT              reduce using rule 492 (postfix -> postfix_op .)
    LT              reduce using rule 492 (postfix -> postfix_op .)
    EQ_EQ           reduce using rule 492 (postfix -> postfix_op .)
    GT_EQ           reduce using rule 492 (postfix -> postfix_op .)
    LT_EQ           reduce using rule 492 (postfix -> postfix_op .)
    NOT_EQ          reduce using rule 492 (postfix -> postfix_op .)
    AND             reduce using rule 492 (postfix -> postfix_op .)
    OR              reduce using rule 492 (postfix -> postfix_op .)
    COMMA           reduce using rule 492 (postfix -> postfix_op .)
    NEWLINE         reduce using rule 492 (postfix -> postfix_op .)
    RPAREN          reduce using rule 492 (postfix -> postfix_op .)


state 93

    (411) postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 411 (postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 411 (postfix_op -> PLUS_PLUS .)


state 94

    (412) postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 412 (postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 412 (postfix_op -> MINUS_MINUS .)


state 95

    (36) factor -> TILDE INT_LIT .

    PLUS            reduce using rule 36 (factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 36 (factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 36 (factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 36 (factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 36 (factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 36 (factor -> TILDE INT_LIT .)
    GT              reduce using rule 36 (factor -> TILDE INT_LIT .)
    LT              reduce using rule 36 (factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 36 (factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 36 (factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 36 (factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 36 (factor -> TILDE INT_LIT .)
    AND             reduce using rule 36 (factor -> TILDE INT_LIT .)
    OR              reduce using rule 36 (factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 36 (factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 36 (factor -> TILDE INT_LIT .)


state 96

    (37) factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 37 (factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 37 (factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 37 (factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 37 (factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 37 (factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 37 (factor -> TILDE FLT_LIT .)
    GT              reduce using rule 37 (factor -> TILDE FLT_LIT .)
    LT              reduce using rule 37 (factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 37 (factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 37 (factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 37 (factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 37 (factor -> TILDE FLT_LIT .)
    AND             reduce using rule 37 (factor -> TILDE FLT_LIT .)
    OR              reduce using rule 37 (factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 37 (factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 37 (factor -> TILDE FLT_LIT .)


state 97

    (44) factor_expression_factor -> LPAREN . factor_expression RPAREN
    (39) factor_expression -> . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression              shift and go to state 136
    factor_expression_factor       shift and go to state 99
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 98

    (38) factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 137


state 99

    (39) factor_expression -> factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 138
    empty                          shift and go to state 153

state 100

    (40) factor_expression_factor -> factor_var_call . factor_postfix
    (48) factor_postfix -> . empty
    (49) factor_postfix -> . factor_postfix_op
    (567) empty -> .
    (46) factor_postfix_op -> . PLUS_PLUS
    (47) factor_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 157
    MINUS_MINUS     shift and go to state 158

    factor_postfix                 shift and go to state 154
    empty                          shift and go to state 155
    factor_postfix_op              shift and go to state 156

state 101

    (41) factor_expression_factor -> factor_expression1 .

    PLUS            reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    MINUS           reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    MULTIPLY        reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    DIVISION        reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    MODULO          reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    EXPONENT        reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    GT              reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    LT              reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    EQ_EQ           reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    GT_EQ           reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    LT_EQ           reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    NOT_EQ          reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    AND             reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    OR              reduce using rule 41 (factor_expression_factor -> factor_expression1 .)
    RPAREN          reduce using rule 41 (factor_expression_factor -> factor_expression1 .)


state 102

    (42) factor_expression_factor -> TILDE . INT_LIT
    (43) factor_expression_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 159
    FLT_LIT         shift and go to state 160


state 103

    (71) factor_expression1 -> INT_LIT .

    PLUS            reduce using rule 71 (factor_expression1 -> INT_LIT .)
    MINUS           reduce using rule 71 (factor_expression1 -> INT_LIT .)
    MULTIPLY        reduce using rule 71 (factor_expression1 -> INT_LIT .)
    DIVISION        reduce using rule 71 (factor_expression1 -> INT_LIT .)
    MODULO          reduce using rule 71 (factor_expression1 -> INT_LIT .)
    EXPONENT        reduce using rule 71 (factor_expression1 -> INT_LIT .)
    GT              reduce using rule 71 (factor_expression1 -> INT_LIT .)
    LT              reduce using rule 71 (factor_expression1 -> INT_LIT .)
    EQ_EQ           reduce using rule 71 (factor_expression1 -> INT_LIT .)
    GT_EQ           reduce using rule 71 (factor_expression1 -> INT_LIT .)
    LT_EQ           reduce using rule 71 (factor_expression1 -> INT_LIT .)
    NOT_EQ          reduce using rule 71 (factor_expression1 -> INT_LIT .)
    AND             reduce using rule 71 (factor_expression1 -> INT_LIT .)
    OR              reduce using rule 71 (factor_expression1 -> INT_LIT .)
    RPAREN          reduce using rule 71 (factor_expression1 -> INT_LIT .)


state 104

    (72) factor_expression1 -> FLT_LIT .

    PLUS            reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    MINUS           reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    DIVISION        reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    MODULO          reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    EXPONENT        reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    GT              reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    LT              reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    GT_EQ           reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    LT_EQ           reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    AND             reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    OR              reduce using rule 72 (factor_expression1 -> FLT_LIT .)
    RPAREN          reduce using rule 72 (factor_expression1 -> FLT_LIT .)


state 105

    (45) factor_var_call -> IDENT . factor_list_index
    (50) factor_list_index -> . LBRACKET factor_index RBRACKET factor_list_index2
    (51) factor_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 162
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    factor_list_index              shift and go to state 161
    empty                          shift and go to state 163

state 106

    (73) factor_expression1 -> DAY .

    PLUS            reduce using rule 73 (factor_expression1 -> DAY .)
    MINUS           reduce using rule 73 (factor_expression1 -> DAY .)
    MULTIPLY        reduce using rule 73 (factor_expression1 -> DAY .)
    DIVISION        reduce using rule 73 (factor_expression1 -> DAY .)
    MODULO          reduce using rule 73 (factor_expression1 -> DAY .)
    EXPONENT        reduce using rule 73 (factor_expression1 -> DAY .)
    GT              reduce using rule 73 (factor_expression1 -> DAY .)
    LT              reduce using rule 73 (factor_expression1 -> DAY .)
    EQ_EQ           reduce using rule 73 (factor_expression1 -> DAY .)
    GT_EQ           reduce using rule 73 (factor_expression1 -> DAY .)
    LT_EQ           reduce using rule 73 (factor_expression1 -> DAY .)
    NOT_EQ          reduce using rule 73 (factor_expression1 -> DAY .)
    AND             reduce using rule 73 (factor_expression1 -> DAY .)
    OR              reduce using rule 73 (factor_expression1 -> DAY .)
    RPAREN          reduce using rule 73 (factor_expression1 -> DAY .)


state 107

    (74) factor_expression1 -> NIGHT .

    PLUS            reduce using rule 74 (factor_expression1 -> NIGHT .)
    MINUS           reduce using rule 74 (factor_expression1 -> NIGHT .)
    MULTIPLY        reduce using rule 74 (factor_expression1 -> NIGHT .)
    DIVISION        reduce using rule 74 (factor_expression1 -> NIGHT .)
    MODULO          reduce using rule 74 (factor_expression1 -> NIGHT .)
    EXPONENT        reduce using rule 74 (factor_expression1 -> NIGHT .)
    GT              reduce using rule 74 (factor_expression1 -> NIGHT .)
    LT              reduce using rule 74 (factor_expression1 -> NIGHT .)
    EQ_EQ           reduce using rule 74 (factor_expression1 -> NIGHT .)
    GT_EQ           reduce using rule 74 (factor_expression1 -> NIGHT .)
    LT_EQ           reduce using rule 74 (factor_expression1 -> NIGHT .)
    NOT_EQ          reduce using rule 74 (factor_expression1 -> NIGHT .)
    AND             reduce using rule 74 (factor_expression1 -> NIGHT .)
    OR              reduce using rule 74 (factor_expression1 -> NIGHT .)
    RPAREN          reduce using rule 74 (factor_expression1 -> NIGHT .)


state 108

    (75) factor_expression1 -> STR_LIT .

    PLUS            reduce using rule 75 (factor_expression1 -> STR_LIT .)
    MINUS           reduce using rule 75 (factor_expression1 -> STR_LIT .)
    MULTIPLY        reduce using rule 75 (factor_expression1 -> STR_LIT .)
    DIVISION        reduce using rule 75 (factor_expression1 -> STR_LIT .)
    MODULO          reduce using rule 75 (factor_expression1 -> STR_LIT .)
    EXPONENT        reduce using rule 75 (factor_expression1 -> STR_LIT .)
    GT              reduce using rule 75 (factor_expression1 -> STR_LIT .)
    LT              reduce using rule 75 (factor_expression1 -> STR_LIT .)
    EQ_EQ           reduce using rule 75 (factor_expression1 -> STR_LIT .)
    GT_EQ           reduce using rule 75 (factor_expression1 -> STR_LIT .)
    LT_EQ           reduce using rule 75 (factor_expression1 -> STR_LIT .)
    NOT_EQ          reduce using rule 75 (factor_expression1 -> STR_LIT .)
    AND             reduce using rule 75 (factor_expression1 -> STR_LIT .)
    OR              reduce using rule 75 (factor_expression1 -> STR_LIT .)
    RPAREN          reduce using rule 75 (factor_expression1 -> STR_LIT .)


state 109

    (484) var_call -> IDENT list_index .

    PLUS_PLUS       reduce using rule 484 (var_call -> IDENT list_index .)
    MINUS_MINUS     reduce using rule 484 (var_call -> IDENT list_index .)
    PLUS            reduce using rule 484 (var_call -> IDENT list_index .)
    MINUS           reduce using rule 484 (var_call -> IDENT list_index .)
    MULTIPLY        reduce using rule 484 (var_call -> IDENT list_index .)
    DIVISION        reduce using rule 484 (var_call -> IDENT list_index .)
    MODULO          reduce using rule 484 (var_call -> IDENT list_index .)
    EXPONENT        reduce using rule 484 (var_call -> IDENT list_index .)
    GT              reduce using rule 484 (var_call -> IDENT list_index .)
    LT              reduce using rule 484 (var_call -> IDENT list_index .)
    EQ_EQ           reduce using rule 484 (var_call -> IDENT list_index .)
    GT_EQ           reduce using rule 484 (var_call -> IDENT list_index .)
    LT_EQ           reduce using rule 484 (var_call -> IDENT list_index .)
    NOT_EQ          reduce using rule 484 (var_call -> IDENT list_index .)
    AND             reduce using rule 484 (var_call -> IDENT list_index .)
    OR              reduce using rule 484 (var_call -> IDENT list_index .)
    COMMA           reduce using rule 484 (var_call -> IDENT list_index .)
    NEWLINE         reduce using rule 484 (var_call -> IDENT list_index .)
    RPAREN          reduce using rule 484 (var_call -> IDENT list_index .)
    SEMICOLON       reduce using rule 484 (var_call -> IDENT list_index .)
    PLUS_EQ         reduce using rule 484 (var_call -> IDENT list_index .)
    MINUS_EQ        reduce using rule 484 (var_call -> IDENT list_index .)
    MUL_EQ          reduce using rule 484 (var_call -> IDENT list_index .)
    DIV_EQ          reduce using rule 484 (var_call -> IDENT list_index .)
    MOD_EQ          reduce using rule 484 (var_call -> IDENT list_index .)


state 110

    (485) list_index -> LBRACKET . index RBRACKET list_index2
    (489) index -> . INT_LIT
    (490) index -> . IDENT

    INT_LIT         shift and go to state 165
    IDENT           shift and go to state 166

    index                          shift and go to state 164

state 111

    (486) list_index -> empty .

    PLUS_PLUS       reduce using rule 486 (list_index -> empty .)
    MINUS_MINUS     reduce using rule 486 (list_index -> empty .)
    PLUS            reduce using rule 486 (list_index -> empty .)
    MINUS           reduce using rule 486 (list_index -> empty .)
    MULTIPLY        reduce using rule 486 (list_index -> empty .)
    DIVISION        reduce using rule 486 (list_index -> empty .)
    MODULO          reduce using rule 486 (list_index -> empty .)
    EXPONENT        reduce using rule 486 (list_index -> empty .)
    GT              reduce using rule 486 (list_index -> empty .)
    LT              reduce using rule 486 (list_index -> empty .)
    EQ_EQ           reduce using rule 486 (list_index -> empty .)
    GT_EQ           reduce using rule 486 (list_index -> empty .)
    LT_EQ           reduce using rule 486 (list_index -> empty .)
    NOT_EQ          reduce using rule 486 (list_index -> empty .)
    AND             reduce using rule 486 (list_index -> empty .)
    OR              reduce using rule 486 (list_index -> empty .)
    COMMA           reduce using rule 486 (list_index -> empty .)
    NEWLINE         reduce using rule 486 (list_index -> empty .)
    RPAREN          reduce using rule 486 (list_index -> empty .)
    SEMICOLON       reduce using rule 486 (list_index -> empty .)
    PLUS_EQ         reduce using rule 486 (list_index -> empty .)
    MINUS_EQ        reduce using rule 486 (list_index -> empty .)
    MUL_EQ          reduce using rule 486 (list_index -> empty .)
    DIV_EQ          reduce using rule 486 (list_index -> empty .)
    MOD_EQ          reduce using rule 486 (list_index -> empty .)


state 112

    (13) list_dec -> LBRACKET RBRACKET . _2d_list
    (14) _2d_list -> . empty
    (15) _2d_list -> . LBRACKET RBRACKET
    (567) empty -> .

    LBRACKET        shift and go to state 167
    COMMA           reduce using rule 567 (empty -> .)
    EQ              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    _2d_list                       shift and go to state 168
    empty                          shift and go to state 169

state 113

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function . unli_newline GHOST
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 170

state 114

    (6) main_function -> MAIN_CASPER . LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 171


state 115

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN . parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (115) parameters -> . data_type IDENT parameters_tail
    (116) parameters -> . empty
    (28) data_type -> . INT
    (29) data_type -> . FLT
    (30) data_type -> . BLN
    (31) data_type -> . CHR
    (32) data_type -> . STR
    (567) empty -> .

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14
    RPAREN          reduce using rule 567 (empty -> .)

    parameters                     shift and go to state 172
    data_type                      shift and go to state 173
    empty                          shift and go to state 174

state 116

    (19) global_statement_tail2 -> COMMA IDENT . global_statement_tail
    (16) global_statement_tail -> . empty
    (17) global_statement_tail -> . COMMA IDENT global_statement_tail
    (18) global_statement_tail -> . EQ global_value global_statement_tail2
    (567) empty -> .

    COMMA           shift and go to state 22
    EQ              shift and go to state 23
    NEWLINE         reduce using rule 567 (empty -> .)

    global_statement_tail          shift and go to state 175
    empty                          shift and go to state 21

state 117

    (76) factor_tail -> PLUS factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 176
    empty                          shift and go to state 83

state 118

    (77) factor_tail -> MINUS factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 177
    empty                          shift and go to state 83

state 119

    (78) factor_tail -> MULTIPLY factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 178
    empty                          shift and go to state 83

state 120

    (79) factor_tail -> DIVISION factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 179
    empty                          shift and go to state 83

state 121

    (80) factor_tail -> MODULO factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 180
    empty                          shift and go to state 83

state 122

    (81) factor_tail -> EXPONENT factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 181
    empty                          shift and go to state 83

state 123

    (82) factor_tail -> GT factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 182
    empty                          shift and go to state 83

state 124

    (83) factor_tail -> LT factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 183
    empty                          shift and go to state 83

state 125

    (84) factor_tail -> EQ_EQ factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 184
    empty                          shift and go to state 83

state 126

    (85) factor_tail -> GT_EQ factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 185
    empty                          shift and go to state 83

state 127

    (86) factor_tail -> LT_EQ factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 186
    empty                          shift and go to state 83

state 128

    (87) factor_tail -> NOT_EQ factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 187
    empty                          shift and go to state 83

state 129

    (88) factor_tail -> AND factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 188
    empty                          shift and go to state 83

state 130

    (89) factor_tail -> OR factor . factor_tail
    (76) factor_tail -> . PLUS factor factor_tail
    (77) factor_tail -> . MINUS factor factor_tail
    (78) factor_tail -> . MULTIPLY factor factor_tail
    (79) factor_tail -> . DIVISION factor factor_tail
    (80) factor_tail -> . MODULO factor factor_tail
    (81) factor_tail -> . EXPONENT factor factor_tail
    (82) factor_tail -> . GT factor factor_tail
    (83) factor_tail -> . LT factor factor_tail
    (84) factor_tail -> . EQ_EQ factor factor_tail
    (85) factor_tail -> . GT_EQ factor factor_tail
    (86) factor_tail -> . LT_EQ factor factor_tail
    (87) factor_tail -> . NOT_EQ factor factor_tail
    (88) factor_tail -> . AND factor factor_tail
    (89) factor_tail -> . OR factor factor_tail
    (90) factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    MULTIPLY        shift and go to state 71
    DIVISION        shift and go to state 72
    MODULO          shift and go to state 73
    EXPONENT        shift and go to state 74
    GT              shift and go to state 75
    LT              shift and go to state 76
    EQ_EQ           shift and go to state 77
    GT_EQ           shift and go to state 78
    LT_EQ           shift and go to state 79
    NOT_EQ          shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    factor_tail                    shift and go to state 189
    empty                          shift and go to state 83

state 131

    (23) list_value -> LBRACKET list_element RBRACKET .

    COMMA           reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    NEWLINE         reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    RBRACKET        reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)
    RPAREN          reduce using rule 23 (list_value -> LBRACKET list_element RBRACKET .)


state 132

    (24) list_element -> literal element_tail .

    RBRACKET        reduce using rule 24 (list_element -> literal element_tail .)
    RPAREN          reduce using rule 24 (list_element -> literal element_tail .)


state 133

    (26) element_tail -> COMMA . list_element
    (24) list_element -> . literal element_tail
    (25) list_element -> . list_value element_tail
    (91) literal -> . literal1
    (92) literal -> . literal2
    (23) list_value -> . LBRACKET list_element RBRACKET
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT
    (98) literal2 -> . CHR_LIT

    LBRACKET        shift and go to state 48
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 89

    list_element                   shift and go to state 190
    literal                        shift and go to state 85
    list_value                     shift and go to state 86
    literal1                       shift and go to state 87
    literal2                       shift and go to state 88

state 134

    (27) element_tail -> empty .

    RBRACKET        reduce using rule 27 (element_tail -> empty .)
    RPAREN          reduce using rule 27 (element_tail -> empty .)


state 135

    (25) list_element -> list_value element_tail .

    RBRACKET        reduce using rule 25 (list_element -> list_value element_tail .)
    RPAREN          reduce using rule 25 (list_element -> list_value element_tail .)


state 136

    (44) factor_expression_factor -> LPAREN factor_expression . RPAREN

    RPAREN          shift and go to state 191


state 137

    (38) factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    COMMA           reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)
    NEWLINE         reduce using rule 38 (factor -> LPAREN factor_expression RPAREN .)


state 138

    (39) factor_expression -> factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 39 (factor_expression -> factor_expression_factor factor_expression_tail .)


state 139

    (56) factor_expression_tail -> PLUS . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 192
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 140

    (57) factor_expression_tail -> MINUS . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 193
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 141

    (58) factor_expression_tail -> MULTIPLY . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 194
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 142

    (59) factor_expression_tail -> DIVISION . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 195
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 143

    (60) factor_expression_tail -> MODULO . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 196
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 144

    (61) factor_expression_tail -> EXPONENT . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 197
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 145

    (62) factor_expression_tail -> GT . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 198
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 146

    (63) factor_expression_tail -> LT . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 199
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 147

    (64) factor_expression_tail -> EQ_EQ . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 200
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 148

    (65) factor_expression_tail -> GT_EQ . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 201
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 149

    (66) factor_expression_tail -> LT_EQ . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 202
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 150

    (67) factor_expression_tail -> NOT_EQ . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 203
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 151

    (68) factor_expression_tail -> AND . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 204
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 152

    (69) factor_expression_tail -> OR . factor_expression_factor factor_expression_tail
    (40) factor_expression_factor -> . factor_var_call factor_postfix
    (41) factor_expression_factor -> . factor_expression1
    (42) factor_expression_factor -> . TILDE INT_LIT
    (43) factor_expression_factor -> . TILDE FLT_LIT
    (44) factor_expression_factor -> . LPAREN factor_expression RPAREN
    (45) factor_var_call -> . IDENT factor_list_index
    (71) factor_expression1 -> . INT_LIT
    (72) factor_expression1 -> . FLT_LIT
    (73) factor_expression1 -> . DAY
    (74) factor_expression1 -> . NIGHT
    (75) factor_expression1 -> . STR_LIT

    TILDE           shift and go to state 102
    LPAREN          shift and go to state 97
    IDENT           shift and go to state 105
    INT_LIT         shift and go to state 103
    FLT_LIT         shift and go to state 104
    DAY             shift and go to state 106
    NIGHT           shift and go to state 107
    STR_LIT         shift and go to state 108

    factor_expression_factor       shift and go to state 205
    factor_var_call                shift and go to state 100
    factor_expression1             shift and go to state 101

state 153

    (70) factor_expression_tail -> empty .

    RPAREN          reduce using rule 70 (factor_expression_tail -> empty .)


state 154

    (40) factor_expression_factor -> factor_var_call factor_postfix .

    PLUS            reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    MINUS           reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    MULTIPLY        reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    DIVISION        reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    MODULO          reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    EXPONENT        reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    GT              reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    LT              reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    EQ_EQ           reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    GT_EQ           reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    LT_EQ           reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    NOT_EQ          reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    AND             reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    OR              reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)
    RPAREN          reduce using rule 40 (factor_expression_factor -> factor_var_call factor_postfix .)


state 155

    (48) factor_postfix -> empty .

    PLUS            reduce using rule 48 (factor_postfix -> empty .)
    MINUS           reduce using rule 48 (factor_postfix -> empty .)
    MULTIPLY        reduce using rule 48 (factor_postfix -> empty .)
    DIVISION        reduce using rule 48 (factor_postfix -> empty .)
    MODULO          reduce using rule 48 (factor_postfix -> empty .)
    EXPONENT        reduce using rule 48 (factor_postfix -> empty .)
    GT              reduce using rule 48 (factor_postfix -> empty .)
    LT              reduce using rule 48 (factor_postfix -> empty .)
    EQ_EQ           reduce using rule 48 (factor_postfix -> empty .)
    GT_EQ           reduce using rule 48 (factor_postfix -> empty .)
    LT_EQ           reduce using rule 48 (factor_postfix -> empty .)
    NOT_EQ          reduce using rule 48 (factor_postfix -> empty .)
    AND             reduce using rule 48 (factor_postfix -> empty .)
    OR              reduce using rule 48 (factor_postfix -> empty .)
    RPAREN          reduce using rule 48 (factor_postfix -> empty .)


state 156

    (49) factor_postfix -> factor_postfix_op .

    PLUS            reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    MINUS           reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    MULTIPLY        reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    DIVISION        reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    MODULO          reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    EXPONENT        reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    GT              reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    LT              reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    EQ_EQ           reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    GT_EQ           reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    LT_EQ           reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    NOT_EQ          reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    AND             reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    OR              reduce using rule 49 (factor_postfix -> factor_postfix_op .)
    RPAREN          reduce using rule 49 (factor_postfix -> factor_postfix_op .)


state 157

    (46) factor_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 46 (factor_postfix_op -> PLUS_PLUS .)


state 158

    (47) factor_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 47 (factor_postfix_op -> MINUS_MINUS .)


state 159

    (42) factor_expression_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    GT              reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    LT              reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    AND             reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    OR              reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 42 (factor_expression_factor -> TILDE INT_LIT .)


state 160

    (43) factor_expression_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 43 (factor_expression_factor -> TILDE FLT_LIT .)


state 161

    (45) factor_var_call -> IDENT factor_list_index .

    PLUS_PLUS       reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    MINUS_MINUS     reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    PLUS            reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    MINUS           reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    MULTIPLY        reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    DIVISION        reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    MODULO          reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    EXPONENT        reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    GT              reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    LT              reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    EQ_EQ           reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    GT_EQ           reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    LT_EQ           reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    NOT_EQ          reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    AND             reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    OR              reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)
    RPAREN          reduce using rule 45 (factor_var_call -> IDENT factor_list_index .)


state 162

    (50) factor_list_index -> LBRACKET . factor_index RBRACKET factor_list_index2
    (54) factor_index -> . INT_LIT
    (55) factor_index -> . IDENT

    INT_LIT         shift and go to state 207
    IDENT           shift and go to state 208

    factor_index                   shift and go to state 206

state 163

    (51) factor_list_index -> empty .

    PLUS_PLUS       reduce using rule 51 (factor_list_index -> empty .)
    MINUS_MINUS     reduce using rule 51 (factor_list_index -> empty .)
    PLUS            reduce using rule 51 (factor_list_index -> empty .)
    MINUS           reduce using rule 51 (factor_list_index -> empty .)
    MULTIPLY        reduce using rule 51 (factor_list_index -> empty .)
    DIVISION        reduce using rule 51 (factor_list_index -> empty .)
    MODULO          reduce using rule 51 (factor_list_index -> empty .)
    EXPONENT        reduce using rule 51 (factor_list_index -> empty .)
    GT              reduce using rule 51 (factor_list_index -> empty .)
    LT              reduce using rule 51 (factor_list_index -> empty .)
    EQ_EQ           reduce using rule 51 (factor_list_index -> empty .)
    GT_EQ           reduce using rule 51 (factor_list_index -> empty .)
    LT_EQ           reduce using rule 51 (factor_list_index -> empty .)
    NOT_EQ          reduce using rule 51 (factor_list_index -> empty .)
    AND             reduce using rule 51 (factor_list_index -> empty .)
    OR              reduce using rule 51 (factor_list_index -> empty .)
    RPAREN          reduce using rule 51 (factor_list_index -> empty .)


state 164

    (485) list_index -> LBRACKET index . RBRACKET list_index2

    RBRACKET        shift and go to state 209


state 165

    (489) index -> INT_LIT .

    RBRACKET        reduce using rule 489 (index -> INT_LIT .)


state 166

    (490) index -> IDENT .

    RBRACKET        reduce using rule 490 (index -> IDENT .)


state 167

    (15) _2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 210


state 168

    (13) list_dec -> LBRACKET RBRACKET _2d_list .

    COMMA           reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    EQ              reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)
    NEWLINE         reduce using rule 13 (list_dec -> LBRACKET RBRACKET _2d_list .)


state 169

    (14) _2d_list -> empty .

    COMMA           reduce using rule 14 (_2d_list -> empty .)
    EQ              reduce using rule 14 (_2d_list -> empty .)
    NEWLINE         reduce using rule 14 (_2d_list -> empty .)


state 170

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline . GHOST

    GHOST           shift and go to state 211


state 171

    (6) main_function -> MAIN_CASPER LPAREN . RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 212


state 172

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters . RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    RPAREN          shift and go to state 213


state 173

    (115) parameters -> data_type . IDENT parameters_tail

    IDENT           shift and go to state 214


state 174

    (116) parameters -> empty .

    RPAREN          reduce using rule 116 (parameters -> empty .)


state 175

    (19) global_statement_tail2 -> COMMA IDENT global_statement_tail .

    NEWLINE         reduce using rule 19 (global_statement_tail2 -> COMMA IDENT global_statement_tail .)


state 176

    (76) factor_tail -> PLUS factor factor_tail .

    COMMA           reduce using rule 76 (factor_tail -> PLUS factor factor_tail .)
    NEWLINE         reduce using rule 76 (factor_tail -> PLUS factor factor_tail .)


state 177

    (77) factor_tail -> MINUS factor factor_tail .

    COMMA           reduce using rule 77 (factor_tail -> MINUS factor factor_tail .)
    NEWLINE         reduce using rule 77 (factor_tail -> MINUS factor factor_tail .)


state 178

    (78) factor_tail -> MULTIPLY factor factor_tail .

    COMMA           reduce using rule 78 (factor_tail -> MULTIPLY factor factor_tail .)
    NEWLINE         reduce using rule 78 (factor_tail -> MULTIPLY factor factor_tail .)


state 179

    (79) factor_tail -> DIVISION factor factor_tail .

    COMMA           reduce using rule 79 (factor_tail -> DIVISION factor factor_tail .)
    NEWLINE         reduce using rule 79 (factor_tail -> DIVISION factor factor_tail .)


state 180

    (80) factor_tail -> MODULO factor factor_tail .

    COMMA           reduce using rule 80 (factor_tail -> MODULO factor factor_tail .)
    NEWLINE         reduce using rule 80 (factor_tail -> MODULO factor factor_tail .)


state 181

    (81) factor_tail -> EXPONENT factor factor_tail .

    COMMA           reduce using rule 81 (factor_tail -> EXPONENT factor factor_tail .)
    NEWLINE         reduce using rule 81 (factor_tail -> EXPONENT factor factor_tail .)


state 182

    (82) factor_tail -> GT factor factor_tail .

    COMMA           reduce using rule 82 (factor_tail -> GT factor factor_tail .)
    NEWLINE         reduce using rule 82 (factor_tail -> GT factor factor_tail .)


state 183

    (83) factor_tail -> LT factor factor_tail .

    COMMA           reduce using rule 83 (factor_tail -> LT factor factor_tail .)
    NEWLINE         reduce using rule 83 (factor_tail -> LT factor factor_tail .)


state 184

    (84) factor_tail -> EQ_EQ factor factor_tail .

    COMMA           reduce using rule 84 (factor_tail -> EQ_EQ factor factor_tail .)
    NEWLINE         reduce using rule 84 (factor_tail -> EQ_EQ factor factor_tail .)


state 185

    (85) factor_tail -> GT_EQ factor factor_tail .

    COMMA           reduce using rule 85 (factor_tail -> GT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 85 (factor_tail -> GT_EQ factor factor_tail .)


state 186

    (86) factor_tail -> LT_EQ factor factor_tail .

    COMMA           reduce using rule 86 (factor_tail -> LT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 86 (factor_tail -> LT_EQ factor factor_tail .)


state 187

    (87) factor_tail -> NOT_EQ factor factor_tail .

    COMMA           reduce using rule 87 (factor_tail -> NOT_EQ factor factor_tail .)
    NEWLINE         reduce using rule 87 (factor_tail -> NOT_EQ factor factor_tail .)


state 188

    (88) factor_tail -> AND factor factor_tail .

    COMMA           reduce using rule 88 (factor_tail -> AND factor factor_tail .)
    NEWLINE         reduce using rule 88 (factor_tail -> AND factor factor_tail .)


state 189

    (89) factor_tail -> OR factor factor_tail .

    COMMA           reduce using rule 89 (factor_tail -> OR factor factor_tail .)
    NEWLINE         reduce using rule 89 (factor_tail -> OR factor factor_tail .)


state 190

    (26) element_tail -> COMMA list_element .

    RBRACKET        reduce using rule 26 (element_tail -> COMMA list_element .)
    RPAREN          reduce using rule 26 (element_tail -> COMMA list_element .)


state 191

    (44) factor_expression_factor -> LPAREN factor_expression RPAREN .

    PLUS            reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MINUS           reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MULTIPLY        reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    DIVISION        reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    MODULO          reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EXPONENT        reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT              reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT              reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    EQ_EQ           reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    GT_EQ           reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    LT_EQ           reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    NOT_EQ          reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    AND             reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    OR              reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)
    RPAREN          reduce using rule 44 (factor_expression_factor -> LPAREN factor_expression RPAREN .)


state 192

    (56) factor_expression_tail -> PLUS factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 215
    empty                          shift and go to state 153

state 193

    (57) factor_expression_tail -> MINUS factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 216
    empty                          shift and go to state 153

state 194

    (58) factor_expression_tail -> MULTIPLY factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 217
    empty                          shift and go to state 153

state 195

    (59) factor_expression_tail -> DIVISION factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 218
    empty                          shift and go to state 153

state 196

    (60) factor_expression_tail -> MODULO factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 219
    empty                          shift and go to state 153

state 197

    (61) factor_expression_tail -> EXPONENT factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 220
    empty                          shift and go to state 153

state 198

    (62) factor_expression_tail -> GT factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 221
    empty                          shift and go to state 153

state 199

    (63) factor_expression_tail -> LT factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 222
    empty                          shift and go to state 153

state 200

    (64) factor_expression_tail -> EQ_EQ factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 223
    empty                          shift and go to state 153

state 201

    (65) factor_expression_tail -> GT_EQ factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 224
    empty                          shift and go to state 153

state 202

    (66) factor_expression_tail -> LT_EQ factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 225
    empty                          shift and go to state 153

state 203

    (67) factor_expression_tail -> NOT_EQ factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 226
    empty                          shift and go to state 153

state 204

    (68) factor_expression_tail -> AND factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 227
    empty                          shift and go to state 153

state 205

    (69) factor_expression_tail -> OR factor_expression_factor . factor_expression_tail
    (56) factor_expression_tail -> . PLUS factor_expression_factor factor_expression_tail
    (57) factor_expression_tail -> . MINUS factor_expression_factor factor_expression_tail
    (58) factor_expression_tail -> . MULTIPLY factor_expression_factor factor_expression_tail
    (59) factor_expression_tail -> . DIVISION factor_expression_factor factor_expression_tail
    (60) factor_expression_tail -> . MODULO factor_expression_factor factor_expression_tail
    (61) factor_expression_tail -> . EXPONENT factor_expression_factor factor_expression_tail
    (62) factor_expression_tail -> . GT factor_expression_factor factor_expression_tail
    (63) factor_expression_tail -> . LT factor_expression_factor factor_expression_tail
    (64) factor_expression_tail -> . EQ_EQ factor_expression_factor factor_expression_tail
    (65) factor_expression_tail -> . GT_EQ factor_expression_factor factor_expression_tail
    (66) factor_expression_tail -> . LT_EQ factor_expression_factor factor_expression_tail
    (67) factor_expression_tail -> . NOT_EQ factor_expression_factor factor_expression_tail
    (68) factor_expression_tail -> . AND factor_expression_factor factor_expression_tail
    (69) factor_expression_tail -> . OR factor_expression_factor factor_expression_tail
    (70) factor_expression_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 139
    MINUS           shift and go to state 140
    MULTIPLY        shift and go to state 141
    DIVISION        shift and go to state 142
    MODULO          shift and go to state 143
    EXPONENT        shift and go to state 144
    GT              shift and go to state 145
    LT              shift and go to state 146
    EQ_EQ           shift and go to state 147
    GT_EQ           shift and go to state 148
    LT_EQ           shift and go to state 149
    NOT_EQ          shift and go to state 150
    AND             shift and go to state 151
    OR              shift and go to state 152
    RPAREN          reduce using rule 567 (empty -> .)

    factor_expression_tail         shift and go to state 228
    empty                          shift and go to state 153

state 206

    (50) factor_list_index -> LBRACKET factor_index . RBRACKET factor_list_index2

    RBRACKET        shift and go to state 229


state 207

    (54) factor_index -> INT_LIT .

    RBRACKET        reduce using rule 54 (factor_index -> INT_LIT .)


state 208

    (55) factor_index -> IDENT .

    RBRACKET        reduce using rule 55 (factor_index -> IDENT .)


state 209

    (485) list_index -> LBRACKET index RBRACKET . list_index2
    (487) list_index2 -> . LBRACKET index RBRACKET
    (488) list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 230
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    SEMICOLON       reduce using rule 567 (empty -> .)
    PLUS_EQ         reduce using rule 567 (empty -> .)
    MINUS_EQ        reduce using rule 567 (empty -> .)
    MUL_EQ          reduce using rule 567 (empty -> .)
    DIV_EQ          reduce using rule 567 (empty -> .)
    MOD_EQ          reduce using rule 567 (empty -> .)

    list_index2                    shift and go to state 231
    empty                          shift and go to state 232

state 210

    (15) _2d_list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 15 (_2d_list -> LBRACKET RBRACKET .)


state 211

    (1) program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .

    $end            reduce using rule 1 (program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST .)


state 212

    (6) main_function -> MAIN_CASPER LPAREN RPAREN . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 233
    empty                          shift and go to state 17

state 213

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN . LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail

    LBRACE          shift and go to state 234


state 214

    (115) parameters -> data_type IDENT . parameters_tail
    (117) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (118) parameters_tail -> . empty
    (567) empty -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 567 (empty -> .)

    parameters_tail                shift and go to state 235
    empty                          shift and go to state 237

state 215

    (56) factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 56 (factor_expression_tail -> PLUS factor_expression_factor factor_expression_tail .)


state 216

    (57) factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 57 (factor_expression_tail -> MINUS factor_expression_factor factor_expression_tail .)


state 217

    (58) factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 58 (factor_expression_tail -> MULTIPLY factor_expression_factor factor_expression_tail .)


state 218

    (59) factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 59 (factor_expression_tail -> DIVISION factor_expression_factor factor_expression_tail .)


state 219

    (60) factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 60 (factor_expression_tail -> MODULO factor_expression_factor factor_expression_tail .)


state 220

    (61) factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 61 (factor_expression_tail -> EXPONENT factor_expression_factor factor_expression_tail .)


state 221

    (62) factor_expression_tail -> GT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 62 (factor_expression_tail -> GT factor_expression_factor factor_expression_tail .)


state 222

    (63) factor_expression_tail -> LT factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 63 (factor_expression_tail -> LT factor_expression_factor factor_expression_tail .)


state 223

    (64) factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 64 (factor_expression_tail -> EQ_EQ factor_expression_factor factor_expression_tail .)


state 224

    (65) factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 65 (factor_expression_tail -> GT_EQ factor_expression_factor factor_expression_tail .)


state 225

    (66) factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 66 (factor_expression_tail -> LT_EQ factor_expression_factor factor_expression_tail .)


state 226

    (67) factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 67 (factor_expression_tail -> NOT_EQ factor_expression_factor factor_expression_tail .)


state 227

    (68) factor_expression_tail -> AND factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 68 (factor_expression_tail -> AND factor_expression_factor factor_expression_tail .)


state 228

    (69) factor_expression_tail -> OR factor_expression_factor factor_expression_tail .

    RPAREN          reduce using rule 69 (factor_expression_tail -> OR factor_expression_factor factor_expression_tail .)


state 229

    (50) factor_list_index -> LBRACKET factor_index RBRACKET . factor_list_index2
    (52) factor_list_index2 -> . LBRACKET factor_index RBRACKET
    (53) factor_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 238
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    factor_list_index2             shift and go to state 239
    empty                          shift and go to state 240

state 230

    (487) list_index2 -> LBRACKET . index RBRACKET
    (489) index -> . INT_LIT
    (490) index -> . IDENT

    INT_LIT         shift and go to state 165
    IDENT           shift and go to state 166

    index                          shift and go to state 241

state 231

    (485) list_index -> LBRACKET index RBRACKET list_index2 .

    PLUS_PLUS       reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_MINUS     reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS            reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS           reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MULTIPLY        reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIVISION        reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MODULO          reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EXPONENT        reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT              reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT              reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    EQ_EQ           reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    GT_EQ           reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    LT_EQ           reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NOT_EQ          reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    AND             reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    OR              reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    COMMA           reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    NEWLINE         reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    RPAREN          reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    SEMICOLON       reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    PLUS_EQ         reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MINUS_EQ        reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MUL_EQ          reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    DIV_EQ          reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)
    MOD_EQ          reduce using rule 485 (list_index -> LBRACKET index RBRACKET list_index2 .)


state 232

    (488) list_index2 -> empty .

    PLUS_PLUS       reduce using rule 488 (list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 488 (list_index2 -> empty .)
    PLUS            reduce using rule 488 (list_index2 -> empty .)
    MINUS           reduce using rule 488 (list_index2 -> empty .)
    MULTIPLY        reduce using rule 488 (list_index2 -> empty .)
    DIVISION        reduce using rule 488 (list_index2 -> empty .)
    MODULO          reduce using rule 488 (list_index2 -> empty .)
    EXPONENT        reduce using rule 488 (list_index2 -> empty .)
    GT              reduce using rule 488 (list_index2 -> empty .)
    LT              reduce using rule 488 (list_index2 -> empty .)
    EQ_EQ           reduce using rule 488 (list_index2 -> empty .)
    GT_EQ           reduce using rule 488 (list_index2 -> empty .)
    LT_EQ           reduce using rule 488 (list_index2 -> empty .)
    NOT_EQ          reduce using rule 488 (list_index2 -> empty .)
    AND             reduce using rule 488 (list_index2 -> empty .)
    OR              reduce using rule 488 (list_index2 -> empty .)
    COMMA           reduce using rule 488 (list_index2 -> empty .)
    NEWLINE         reduce using rule 488 (list_index2 -> empty .)
    RPAREN          reduce using rule 488 (list_index2 -> empty .)
    SEMICOLON       reduce using rule 488 (list_index2 -> empty .)
    PLUS_EQ         reduce using rule 488 (list_index2 -> empty .)
    MINUS_EQ        reduce using rule 488 (list_index2 -> empty .)
    MUL_EQ          reduce using rule 488 (list_index2 -> empty .)
    DIV_EQ          reduce using rule 488 (list_index2 -> empty .)
    MOD_EQ          reduce using rule 488 (list_index2 -> empty .)


state 233

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 242


state 234

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE . maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 243
    empty                          shift and go to state 17

state 235

    (115) parameters -> data_type IDENT parameters_tail .

    RPAREN          reduce using rule 115 (parameters -> data_type IDENT parameters_tail .)


state 236

    (117) parameters_tail -> COMMA . data_type IDENT parameters_tail
    (28) data_type -> . INT
    (29) data_type -> . FLT
    (30) data_type -> . BLN
    (31) data_type -> . CHR
    (32) data_type -> . STR

    INT             shift and go to state 10
    FLT             shift and go to state 11
    BLN             shift and go to state 12
    CHR             shift and go to state 13
    STR             shift and go to state 14

    data_type                      shift and go to state 244

state 237

    (118) parameters_tail -> empty .

    RPAREN          reduce using rule 118 (parameters_tail -> empty .)


state 238

    (52) factor_list_index2 -> LBRACKET . factor_index RBRACKET
    (54) factor_index -> . INT_LIT
    (55) factor_index -> . IDENT

    INT_LIT         shift and go to state 207
    IDENT           shift and go to state 208

    factor_index                   shift and go to state 245

state 239

    (50) factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .

    PLUS_PLUS       reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    MINUS_MINUS     reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    PLUS            reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    MINUS           reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    MULTIPLY        reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    DIVISION        reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    MODULO          reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    EXPONENT        reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    GT              reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    LT              reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    EQ_EQ           reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    GT_EQ           reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    LT_EQ           reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    NOT_EQ          reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    AND             reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    OR              reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)
    RPAREN          reduce using rule 50 (factor_list_index -> LBRACKET factor_index RBRACKET factor_list_index2 .)


state 240

    (53) factor_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 53 (factor_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 53 (factor_list_index2 -> empty .)
    PLUS            reduce using rule 53 (factor_list_index2 -> empty .)
    MINUS           reduce using rule 53 (factor_list_index2 -> empty .)
    MULTIPLY        reduce using rule 53 (factor_list_index2 -> empty .)
    DIVISION        reduce using rule 53 (factor_list_index2 -> empty .)
    MODULO          reduce using rule 53 (factor_list_index2 -> empty .)
    EXPONENT        reduce using rule 53 (factor_list_index2 -> empty .)
    GT              reduce using rule 53 (factor_list_index2 -> empty .)
    LT              reduce using rule 53 (factor_list_index2 -> empty .)
    EQ_EQ           reduce using rule 53 (factor_list_index2 -> empty .)
    GT_EQ           reduce using rule 53 (factor_list_index2 -> empty .)
    LT_EQ           reduce using rule 53 (factor_list_index2 -> empty .)
    NOT_EQ          reduce using rule 53 (factor_list_index2 -> empty .)
    AND             reduce using rule 53 (factor_list_index2 -> empty .)
    OR              reduce using rule 53 (factor_list_index2 -> empty .)
    RPAREN          reduce using rule 53 (factor_list_index2 -> empty .)


state 241

    (487) list_index2 -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 246


state 242

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 247
    empty                          shift and go to state 17

state 243

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline . statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 248
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 244

    (117) parameters_tail -> COMMA data_type . IDENT parameters_tail

    IDENT           shift and go to state 258


state 245

    (52) factor_list_index2 -> LBRACKET factor_index . RBRACKET

    RBRACKET        shift and go to state 259


state 246

    (487) list_index2 -> LBRACKET index RBRACKET .

    PLUS_PLUS       reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_MINUS     reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS            reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MULTIPLY        reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    DIVISION        reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MODULO          reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    EXPONENT        reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    GT              reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    LT              reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    EQ_EQ           reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    GT_EQ           reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    LT_EQ           reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    NOT_EQ          reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    AND             reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    OR              reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    NEWLINE         reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    PLUS_EQ         reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MINUS_EQ        reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MUL_EQ          reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    DIV_EQ          reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)
    MOD_EQ          reduce using rule 487 (list_index2 -> LBRACKET index RBRACKET .)


state 247

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 260
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 248

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements . maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 261
    empty                          shift and go to state 17

state 249

    (165) statements -> empty .
    (175) local_dec -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 165 (statements -> empty .)
  ! reduce/reduce conflict for REVIVE resolved using rule 165 (statements -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 165 (statements -> empty .)
  ! reduce/reduce conflict for SHIFT resolved using rule 165 (statements -> empty .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 165 (statements -> empty .)
    NEWLINE         reduce using rule 165 (statements -> empty .)
    REVIVE          reduce using rule 165 (statements -> empty .)
    RBRACE          reduce using rule 165 (statements -> empty .)
    SHIFT           reduce using rule 165 (statements -> empty .)
    OTHERWISE       reduce using rule 165 (statements -> empty .)
    SWAP            reduce using rule 175 (local_dec -> empty .)
    FUNCTION_NAME   reduce using rule 175 (local_dec -> empty .)
    IDENT           reduce using rule 175 (local_dec -> empty .)
    DISPLAY         reduce using rule 175 (local_dec -> empty .)
    CHECK           reduce using rule 175 (local_dec -> empty .)
    FOR             reduce using rule 175 (local_dec -> empty .)
    UNTIL           reduce using rule 175 (local_dec -> empty .)
    REPEAT          reduce using rule 175 (local_dec -> empty .)
    INPUT           reduce using rule 175 (local_dec -> empty .)
    INT             reduce using rule 175 (local_dec -> empty .)
    FLT             reduce using rule 175 (local_dec -> empty .)
    BLN             reduce using rule 175 (local_dec -> empty .)
    CHR             reduce using rule 175 (local_dec -> empty .)
    STR             reduce using rule 175 (local_dec -> empty .)

  ! NEWLINE         [ reduce using rule 175 (local_dec -> empty .) ]
  ! REVIVE          [ reduce using rule 175 (local_dec -> empty .) ]
  ! RBRACE          [ reduce using rule 175 (local_dec -> empty .) ]
  ! SHIFT           [ reduce using rule 175 (local_dec -> empty .) ]
  ! OTHERWISE       [ reduce using rule 175 (local_dec -> empty .) ]


state 250

    (166) statements -> local_dec . maybe_newline statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 262
    empty                          shift and go to state 17

state 251

    (174) local_dec -> local_var_statement . local_dec_tail unli_newline
    (186) local_dec_tail -> . empty
    (187) local_dec_tail -> . COMMA IDENT local_dec_tail
    (188) local_dec_tail -> . EQ local_value local_dec_tail2
    (567) empty -> .

    COMMA           shift and go to state 265
    EQ              shift and go to state 266
    NEWLINE         reduce using rule 567 (empty -> .)

    local_dec_tail                 shift and go to state 263
    empty                          shift and go to state 264

state 252

    (176) local_var_statement -> local_data_type . IDENT local_list_dec

    IDENT           shift and go to state 267


state 253

    (177) local_data_type -> INT .

    IDENT           reduce using rule 177 (local_data_type -> INT .)


state 254

    (178) local_data_type -> FLT .

    IDENT           reduce using rule 178 (local_data_type -> FLT .)


state 255

    (179) local_data_type -> BLN .

    IDENT           reduce using rule 179 (local_data_type -> BLN .)


state 256

    (180) local_data_type -> CHR .

    IDENT           reduce using rule 180 (local_data_type -> CHR .)


state 257

    (181) local_data_type -> STR .

    IDENT           reduce using rule 181 (local_data_type -> STR .)


state 258

    (117) parameters_tail -> COMMA data_type IDENT . parameters_tail
    (117) parameters_tail -> . COMMA data_type IDENT parameters_tail
    (118) parameters_tail -> . empty
    (567) empty -> .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 567 (empty -> .)

    parameters_tail                shift and go to state 268
    empty                          shift and go to state 237

state 259

    (52) factor_list_index2 -> LBRACKET factor_index RBRACKET .

    PLUS_PLUS       reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    MINUS_MINUS     reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    PLUS            reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    MINUS           reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    MULTIPLY        reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    DIVISION        reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    MODULO          reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    EXPONENT        reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    GT              reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    LT              reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    EQ_EQ           reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    GT_EQ           reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    LT_EQ           reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    NOT_EQ          reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    AND             reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    OR              reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)
    RPAREN          reduce using rule 52 (factor_list_index2 -> LBRACKET factor_index RBRACKET .)


state 260

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 269
    empty                          shift and go to state 17

state 261

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline . revive maybe_newline RBRACE unli_newline function_statements_tail
    (119) revive -> . REVIVE revive_value
    (120) revive -> . empty
    (567) empty -> .

    REVIVE          shift and go to state 271
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive                         shift and go to state 270
    empty                          shift and go to state 272

state 262

    (166) statements -> local_dec maybe_newline . statements_tail
    (167) statements_tail -> . switch_statement unli_newline statements
    (168) statements_tail -> . loop_statement unli_newline statements
    (169) statements_tail -> . function_call unli_newline statements
    (170) statements_tail -> . assignment_statement unli_newline statements
    (171) statements_tail -> . output_statement unli_newline statements
    (172) statements_tail -> . conditional_statement unli_newline statements
    (173) statements_tail -> . statements
    (277) switch_statement -> . SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (325) loop_statement -> . for_loop
    (326) loop_statement -> . until_loop
    (327) loop_statement -> . repeat_until
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (468) assignment_statement -> . IDENT assign_tail
    (421) output_statement -> . DISPLAY output_value next_val
    (237) conditional_statement -> . CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (328) for_loop -> . FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (366) until_loop -> . UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE
    (404) repeat_until -> . REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for FUNCTION_NAME resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for DISPLAY resolved as shift
  ! shift/reduce conflict for CHECK resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SWAP            shift and go to state 281
    FUNCTION_NAME   shift and go to state 286
    IDENT           shift and go to state 282
    DISPLAY         shift and go to state 288
    CHECK           shift and go to state 289
    FOR             shift and go to state 290
    UNTIL           shift and go to state 291
    REPEAT          shift and go to state 292
    INPUT           shift and go to state 293
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! SWAP            [ reduce using rule 567 (empty -> .) ]
  ! FUNCTION_NAME   [ reduce using rule 567 (empty -> .) ]
  ! IDENT           [ reduce using rule 567 (empty -> .) ]
  ! DISPLAY         [ reduce using rule 567 (empty -> .) ]
  ! CHECK           [ reduce using rule 567 (empty -> .) ]
  ! FOR             [ reduce using rule 567 (empty -> .) ]
  ! UNTIL           [ reduce using rule 567 (empty -> .) ]
  ! REPEAT          [ reduce using rule 567 (empty -> .) ]
  ! INPUT           [ reduce using rule 567 (empty -> .) ]
  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    local_dec                      shift and go to state 250
    statements_tail                shift and go to state 273
    switch_statement               shift and go to state 274
    statements                     shift and go to state 275
    loop_statement                 shift and go to state 276
    function_call                  shift and go to state 277
    assignment_statement           shift and go to state 278
    output_statement               shift and go to state 279
    conditional_statement          shift and go to state 280
    for_loop                       shift and go to state 283
    until_loop                     shift and go to state 284
    repeat_until                   shift and go to state 285
    input_statement                shift and go to state 287
    empty                          shift and go to state 249
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 263

    (174) local_dec -> local_var_statement local_dec_tail . unli_newline
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 294

state 264

    (186) local_dec_tail -> empty .

    NEWLINE         reduce using rule 186 (local_dec_tail -> empty .)


state 265

    (187) local_dec_tail -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 295


state 266

    (188) local_dec_tail -> EQ . local_value local_dec_tail2
    (191) local_value -> . local_value_value
    (192) local_value -> . list_value
    (193) local_value_value -> . local_type_cast
    (194) local_value_value -> . local_expression
    (195) local_value_value -> . function_call
    (23) list_value -> . LBRACKET list_element RBRACKET
    (233) local_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (234) local_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (235) local_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (236) local_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (196) local_expression -> . local_factor local_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    LBRACKET        shift and go to state 48
    CONVERT_TO_INT  shift and go to state 302
    CONVERT_TO_FLT  shift and go to state 304
    CONVERT_TO_BLN  shift and go to state 305
    CONVERT_TO_STR  shift and go to state 306
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    INPUT           shift and go to state 293
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_value                    shift and go to state 296
    local_value_value              shift and go to state 297
    list_value                     shift and go to state 298
    local_type_cast                shift and go to state 299
    local_expression               shift and go to state 300
    function_call                  shift and go to state 301
    local_factor                   shift and go to state 307
    input_statement                shift and go to state 287
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 267

    (176) local_var_statement -> local_data_type IDENT . local_list_dec
    (182) local_list_dec -> . empty
    (183) local_list_dec -> . LBRACKET RBRACKET local_2d_list
    (567) empty -> .

    LBRACKET        shift and go to state 319
    COMMA           reduce using rule 567 (empty -> .)
    EQ              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_list_dec                 shift and go to state 317
    empty                          shift and go to state 318

state 268

    (117) parameters_tail -> COMMA data_type IDENT parameters_tail .

    RPAREN          reduce using rule 117 (parameters_tail -> COMMA data_type IDENT parameters_tail .)


state 269

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 320


state 270

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive . maybe_newline RBRACE unli_newline function_statements_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 321
    empty                          shift and go to state 17

state 271

    (119) revive -> REVIVE . revive_value
    (121) revive_value -> . revive_type_cast
    (122) revive_value -> . revive_expression
    (123) revive_value -> . function_call
    (161) revive_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (162) revive_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (163) revive_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (164) revive_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (124) revive_expression -> . revive_factor revive_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 326
    CONVERT_TO_FLT  shift and go to state 328
    CONVERT_TO_BLN  shift and go to state 329
    CONVERT_TO_STR  shift and go to state 330
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    INPUT           shift and go to state 293
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_value                   shift and go to state 322
    revive_type_cast               shift and go to state 323
    revive_expression              shift and go to state 324
    function_call                  shift and go to state 325
    revive_factor                  shift and go to state 331
    input_statement                shift and go to state 287
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 272

    (120) revive -> empty .

    NEWLINE         reduce using rule 120 (revive -> empty .)
    RBRACE          reduce using rule 120 (revive -> empty .)


state 273

    (166) statements -> local_dec maybe_newline statements_tail .

    NEWLINE         reduce using rule 166 (statements -> local_dec maybe_newline statements_tail .)
    REVIVE          reduce using rule 166 (statements -> local_dec maybe_newline statements_tail .)
    RBRACE          reduce using rule 166 (statements -> local_dec maybe_newline statements_tail .)
    SHIFT           reduce using rule 166 (statements -> local_dec maybe_newline statements_tail .)
    OTHERWISE       reduce using rule 166 (statements -> local_dec maybe_newline statements_tail .)


state 274

    (167) statements_tail -> switch_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 341

state 275

    (173) statements_tail -> statements .

    NEWLINE         reduce using rule 173 (statements_tail -> statements .)
    REVIVE          reduce using rule 173 (statements_tail -> statements .)
    RBRACE          reduce using rule 173 (statements_tail -> statements .)
    SHIFT           reduce using rule 173 (statements_tail -> statements .)
    OTHERWISE       reduce using rule 173 (statements_tail -> statements .)


state 276

    (168) statements_tail -> loop_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 342

state 277

    (169) statements_tail -> function_call . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 343

state 278

    (170) statements_tail -> assignment_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 344

state 279

    (171) statements_tail -> output_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 345

state 280

    (172) statements_tail -> conditional_statement . unli_newline statements
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 346

state 281

    (277) switch_statement -> SWAP . LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    LPAREN          shift and go to state 347


state 282

    (468) assignment_statement -> IDENT . assign_tail
    (469) assign_tail -> . DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (470) assign_tail -> . DOT PUSH LPAREN list_element RPAREN
    (471) assign_tail -> . assign_op value
    (472) assign_op -> . compound_op
    (473) assign_op -> . EQ
    (474) compound_op -> . PLUS_EQ
    (475) compound_op -> . MINUS_EQ
    (476) compound_op -> . MUL_EQ
    (477) compound_op -> . DIV_EQ
    (478) compound_op -> . MOD_EQ

    DOT             shift and go to state 349
    EQ              shift and go to state 352
    PLUS_EQ         shift and go to state 353
    MINUS_EQ        shift and go to state 354
    MUL_EQ          shift and go to state 355
    DIV_EQ          shift and go to state 356
    MOD_EQ          shift and go to state 357

    assign_tail                    shift and go to state 348
    assign_op                      shift and go to state 350
    compound_op                    shift and go to state 351

state 283

    (325) loop_statement -> for_loop .

    NEWLINE         reduce using rule 325 (loop_statement -> for_loop .)


state 284

    (326) loop_statement -> until_loop .

    NEWLINE         reduce using rule 326 (loop_statement -> until_loop .)


state 285

    (327) loop_statement -> repeat_until .

    NEWLINE         reduce using rule 327 (loop_statement -> repeat_until .)


state 286

    (413) function_call -> FUNCTION_NAME . LPAREN arguments RPAREN

    LPAREN          shift and go to state 358


state 287

    (414) function_call -> input_statement .

    NEWLINE         reduce using rule 414 (function_call -> input_statement .)
    COMMA           reduce using rule 414 (function_call -> input_statement .)
    RBRACE          reduce using rule 414 (function_call -> input_statement .)
    COLON           reduce using rule 414 (function_call -> input_statement .)
    RPAREN          reduce using rule 414 (function_call -> input_statement .)


state 288

    (421) output_statement -> DISPLAY . output_value next_val
    (422) output_value -> . output_type_cast
    (423) output_value -> . output_expression
    (424) output_value -> . function_call
    (462) output_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (463) output_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (464) output_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (465) output_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (425) output_expression -> . output_factor output_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 363
    CONVERT_TO_FLT  shift and go to state 365
    CONVERT_TO_BLN  shift and go to state 366
    CONVERT_TO_STR  shift and go to state 367
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    INPUT           shift and go to state 293
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_value                   shift and go to state 359
    output_type_cast               shift and go to state 360
    output_expression              shift and go to state 361
    function_call                  shift and go to state 362
    output_factor                  shift and go to state 368
    input_statement                shift and go to state 287
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 289

    (237) conditional_statement -> CHECK . LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 378


state 290

    (328) for_loop -> FOR . LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    LPAREN          shift and go to state 379


state 291

    (366) until_loop -> UNTIL . LPAREN until_expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 380


state 292

    (404) repeat_until -> REPEAT . LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN

    LBRACE          shift and go to state 381


state 293

    (566) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 382


state 294

    (174) local_dec -> local_var_statement local_dec_tail unli_newline .

    NEWLINE         reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    SWAP            reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    FUNCTION_NAME   reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    IDENT           reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    DISPLAY         reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    CHECK           reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    FOR             reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    UNTIL           reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    REPEAT          reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    INPUT           reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    INT             reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    FLT             reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    BLN             reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    CHR             reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    STR             reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    REVIVE          reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    RBRACE          reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    SHIFT           reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)
    OTHERWISE       reduce using rule 174 (local_dec -> local_var_statement local_dec_tail unli_newline .)


state 295

    (187) local_dec_tail -> COMMA IDENT . local_dec_tail
    (186) local_dec_tail -> . empty
    (187) local_dec_tail -> . COMMA IDENT local_dec_tail
    (188) local_dec_tail -> . EQ local_value local_dec_tail2
    (567) empty -> .

    COMMA           shift and go to state 265
    EQ              shift and go to state 266
    NEWLINE         reduce using rule 567 (empty -> .)

    local_dec_tail                 shift and go to state 383
    empty                          shift and go to state 264

state 296

    (188) local_dec_tail -> EQ local_value . local_dec_tail2
    (189) local_dec_tail2 -> . COMMA IDENT local_dec_tail
    (190) local_dec_tail2 -> . empty
    (567) empty -> .

    COMMA           shift and go to state 385
    NEWLINE         reduce using rule 567 (empty -> .)

    local_dec_tail2                shift and go to state 384
    empty                          shift and go to state 386

state 297

    (191) local_value -> local_value_value .

    COMMA           reduce using rule 191 (local_value -> local_value_value .)
    NEWLINE         reduce using rule 191 (local_value -> local_value_value .)


state 298

    (192) local_value -> list_value .

    COMMA           reduce using rule 192 (local_value -> list_value .)
    NEWLINE         reduce using rule 192 (local_value -> list_value .)


state 299

    (193) local_value_value -> local_type_cast .

    COMMA           reduce using rule 193 (local_value_value -> local_type_cast .)
    NEWLINE         reduce using rule 193 (local_value_value -> local_type_cast .)


state 300

    (194) local_value_value -> local_expression .

    COMMA           reduce using rule 194 (local_value_value -> local_expression .)
    NEWLINE         reduce using rule 194 (local_value_value -> local_expression .)


state 301

    (195) local_value_value -> function_call .

    COMMA           reduce using rule 195 (local_value_value -> function_call .)
    NEWLINE         reduce using rule 195 (local_value_value -> function_call .)


state 302

    (233) local_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 387


state 303

    (201) local_factor -> LPAREN . local_factor RPAREN
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 388
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 304

    (234) local_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 389


state 305

    (235) local_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 390


state 306

    (236) local_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 391


state 307

    (196) local_expression -> local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 392
    empty                          shift and go to state 407

state 308

    (197) local_factor -> local_var_call . local_postfix
    (205) local_postfix -> . empty
    (206) local_postfix -> . local_postfix_op
    (567) empty -> .
    (203) local_postfix_op -> . PLUS_PLUS
    (204) local_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 411
    MINUS_MINUS     shift and go to state 412

    local_postfix                  shift and go to state 408
    empty                          shift and go to state 409
    local_postfix_op               shift and go to state 410

state 309

    (198) local_factor -> local_factor1 .

    PLUS            reduce using rule 198 (local_factor -> local_factor1 .)
    MINUS           reduce using rule 198 (local_factor -> local_factor1 .)
    MULTIPLY        reduce using rule 198 (local_factor -> local_factor1 .)
    DIVISION        reduce using rule 198 (local_factor -> local_factor1 .)
    MODULO          reduce using rule 198 (local_factor -> local_factor1 .)
    EXPONENT        reduce using rule 198 (local_factor -> local_factor1 .)
    GT              reduce using rule 198 (local_factor -> local_factor1 .)
    LT              reduce using rule 198 (local_factor -> local_factor1 .)
    EQ_EQ           reduce using rule 198 (local_factor -> local_factor1 .)
    GT_EQ           reduce using rule 198 (local_factor -> local_factor1 .)
    LT_EQ           reduce using rule 198 (local_factor -> local_factor1 .)
    NOT_EQ          reduce using rule 198 (local_factor -> local_factor1 .)
    AND             reduce using rule 198 (local_factor -> local_factor1 .)
    OR              reduce using rule 198 (local_factor -> local_factor1 .)
    COMMA           reduce using rule 198 (local_factor -> local_factor1 .)
    NEWLINE         reduce using rule 198 (local_factor -> local_factor1 .)
    RPAREN          reduce using rule 198 (local_factor -> local_factor1 .)


state 310

    (199) local_factor -> TILDE . INT_LIT
    (200) local_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 413
    FLT_LIT         shift and go to state 414


state 311

    (228) local_factor1 -> INT_LIT .

    PLUS            reduce using rule 228 (local_factor1 -> INT_LIT .)
    MINUS           reduce using rule 228 (local_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 228 (local_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 228 (local_factor1 -> INT_LIT .)
    MODULO          reduce using rule 228 (local_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 228 (local_factor1 -> INT_LIT .)
    GT              reduce using rule 228 (local_factor1 -> INT_LIT .)
    LT              reduce using rule 228 (local_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 228 (local_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 228 (local_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 228 (local_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 228 (local_factor1 -> INT_LIT .)
    AND             reduce using rule 228 (local_factor1 -> INT_LIT .)
    OR              reduce using rule 228 (local_factor1 -> INT_LIT .)
    COMMA           reduce using rule 228 (local_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 228 (local_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 228 (local_factor1 -> INT_LIT .)


state 312

    (229) local_factor1 -> FLT_LIT .

    PLUS            reduce using rule 229 (local_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 229 (local_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 229 (local_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 229 (local_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 229 (local_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 229 (local_factor1 -> FLT_LIT .)
    GT              reduce using rule 229 (local_factor1 -> FLT_LIT .)
    LT              reduce using rule 229 (local_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 229 (local_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 229 (local_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 229 (local_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 229 (local_factor1 -> FLT_LIT .)
    AND             reduce using rule 229 (local_factor1 -> FLT_LIT .)
    OR              reduce using rule 229 (local_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 229 (local_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 229 (local_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 229 (local_factor1 -> FLT_LIT .)


state 313

    (202) local_var_call -> IDENT . local_list_index
    (207) local_list_index -> . LBRACKET local_index RBRACKET local_list_index2
    (208) local_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 416
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    local_list_index               shift and go to state 415
    empty                          shift and go to state 417

state 314

    (230) local_factor1 -> DAY .

    PLUS            reduce using rule 230 (local_factor1 -> DAY .)
    MINUS           reduce using rule 230 (local_factor1 -> DAY .)
    MULTIPLY        reduce using rule 230 (local_factor1 -> DAY .)
    DIVISION        reduce using rule 230 (local_factor1 -> DAY .)
    MODULO          reduce using rule 230 (local_factor1 -> DAY .)
    EXPONENT        reduce using rule 230 (local_factor1 -> DAY .)
    GT              reduce using rule 230 (local_factor1 -> DAY .)
    LT              reduce using rule 230 (local_factor1 -> DAY .)
    EQ_EQ           reduce using rule 230 (local_factor1 -> DAY .)
    GT_EQ           reduce using rule 230 (local_factor1 -> DAY .)
    LT_EQ           reduce using rule 230 (local_factor1 -> DAY .)
    NOT_EQ          reduce using rule 230 (local_factor1 -> DAY .)
    AND             reduce using rule 230 (local_factor1 -> DAY .)
    OR              reduce using rule 230 (local_factor1 -> DAY .)
    COMMA           reduce using rule 230 (local_factor1 -> DAY .)
    NEWLINE         reduce using rule 230 (local_factor1 -> DAY .)
    RPAREN          reduce using rule 230 (local_factor1 -> DAY .)


state 315

    (231) local_factor1 -> NIGHT .

    PLUS            reduce using rule 231 (local_factor1 -> NIGHT .)
    MINUS           reduce using rule 231 (local_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 231 (local_factor1 -> NIGHT .)
    DIVISION        reduce using rule 231 (local_factor1 -> NIGHT .)
    MODULO          reduce using rule 231 (local_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 231 (local_factor1 -> NIGHT .)
    GT              reduce using rule 231 (local_factor1 -> NIGHT .)
    LT              reduce using rule 231 (local_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 231 (local_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 231 (local_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 231 (local_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 231 (local_factor1 -> NIGHT .)
    AND             reduce using rule 231 (local_factor1 -> NIGHT .)
    OR              reduce using rule 231 (local_factor1 -> NIGHT .)
    COMMA           reduce using rule 231 (local_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 231 (local_factor1 -> NIGHT .)
    RPAREN          reduce using rule 231 (local_factor1 -> NIGHT .)


state 316

    (232) local_factor1 -> STR_LIT .

    PLUS            reduce using rule 232 (local_factor1 -> STR_LIT .)
    MINUS           reduce using rule 232 (local_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 232 (local_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 232 (local_factor1 -> STR_LIT .)
    MODULO          reduce using rule 232 (local_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 232 (local_factor1 -> STR_LIT .)
    GT              reduce using rule 232 (local_factor1 -> STR_LIT .)
    LT              reduce using rule 232 (local_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 232 (local_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 232 (local_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 232 (local_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 232 (local_factor1 -> STR_LIT .)
    AND             reduce using rule 232 (local_factor1 -> STR_LIT .)
    OR              reduce using rule 232 (local_factor1 -> STR_LIT .)
    COMMA           reduce using rule 232 (local_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 232 (local_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 232 (local_factor1 -> STR_LIT .)


state 317

    (176) local_var_statement -> local_data_type IDENT local_list_dec .

    COMMA           reduce using rule 176 (local_var_statement -> local_data_type IDENT local_list_dec .)
    EQ              reduce using rule 176 (local_var_statement -> local_data_type IDENT local_list_dec .)
    NEWLINE         reduce using rule 176 (local_var_statement -> local_data_type IDENT local_list_dec .)


state 318

    (182) local_list_dec -> empty .

    COMMA           reduce using rule 182 (local_list_dec -> empty .)
    EQ              reduce using rule 182 (local_list_dec -> empty .)
    NEWLINE         reduce using rule 182 (local_list_dec -> empty .)


state 319

    (183) local_list_dec -> LBRACKET . RBRACKET local_2d_list

    RBRACKET        shift and go to state 418


state 320

    (6) main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 6 (main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)


state 321

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline . RBRACE unli_newline function_statements_tail

    RBRACE          shift and go to state 419


state 322

    (119) revive -> REVIVE revive_value .

    NEWLINE         reduce using rule 119 (revive -> REVIVE revive_value .)
    RBRACE          reduce using rule 119 (revive -> REVIVE revive_value .)


state 323

    (121) revive_value -> revive_type_cast .

    NEWLINE         reduce using rule 121 (revive_value -> revive_type_cast .)
    RBRACE          reduce using rule 121 (revive_value -> revive_type_cast .)


state 324

    (122) revive_value -> revive_expression .

    NEWLINE         reduce using rule 122 (revive_value -> revive_expression .)
    RBRACE          reduce using rule 122 (revive_value -> revive_expression .)


state 325

    (123) revive_value -> function_call .

    NEWLINE         reduce using rule 123 (revive_value -> function_call .)
    RBRACE          reduce using rule 123 (revive_value -> function_call .)


state 326

    (161) revive_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 420


state 327

    (129) revive_factor -> LPAREN . revive_factor RPAREN
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 421
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 328

    (162) revive_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 422


state 329

    (163) revive_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 423


state 330

    (164) revive_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 424


state 331

    (124) revive_expression -> revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 425
    empty                          shift and go to state 440

state 332

    (125) revive_factor -> revive_var_call . revive_postfix
    (133) revive_postfix -> . empty
    (134) revive_postfix -> . revive_postfix_op
    (567) empty -> .
    (131) revive_postfix_op -> . PLUS_PLUS
    (132) revive_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 444
    MINUS_MINUS     shift and go to state 445

    revive_postfix                 shift and go to state 441
    empty                          shift and go to state 442
    revive_postfix_op              shift and go to state 443

state 333

    (126) revive_factor -> revive_factor1 .

    PLUS            reduce using rule 126 (revive_factor -> revive_factor1 .)
    MINUS           reduce using rule 126 (revive_factor -> revive_factor1 .)
    MULTIPLY        reduce using rule 126 (revive_factor -> revive_factor1 .)
    DIVISION        reduce using rule 126 (revive_factor -> revive_factor1 .)
    MODULO          reduce using rule 126 (revive_factor -> revive_factor1 .)
    EXPONENT        reduce using rule 126 (revive_factor -> revive_factor1 .)
    GT              reduce using rule 126 (revive_factor -> revive_factor1 .)
    LT              reduce using rule 126 (revive_factor -> revive_factor1 .)
    EQ_EQ           reduce using rule 126 (revive_factor -> revive_factor1 .)
    GT_EQ           reduce using rule 126 (revive_factor -> revive_factor1 .)
    LT_EQ           reduce using rule 126 (revive_factor -> revive_factor1 .)
    NOT_EQ          reduce using rule 126 (revive_factor -> revive_factor1 .)
    AND             reduce using rule 126 (revive_factor -> revive_factor1 .)
    OR              reduce using rule 126 (revive_factor -> revive_factor1 .)
    NEWLINE         reduce using rule 126 (revive_factor -> revive_factor1 .)
    RBRACE          reduce using rule 126 (revive_factor -> revive_factor1 .)
    RPAREN          reduce using rule 126 (revive_factor -> revive_factor1 .)


state 334

    (127) revive_factor -> TILDE . INT_LIT
    (128) revive_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 446
    FLT_LIT         shift and go to state 447


state 335

    (156) revive_factor1 -> INT_LIT .

    PLUS            reduce using rule 156 (revive_factor1 -> INT_LIT .)
    MINUS           reduce using rule 156 (revive_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 156 (revive_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 156 (revive_factor1 -> INT_LIT .)
    MODULO          reduce using rule 156 (revive_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 156 (revive_factor1 -> INT_LIT .)
    GT              reduce using rule 156 (revive_factor1 -> INT_LIT .)
    LT              reduce using rule 156 (revive_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 156 (revive_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 156 (revive_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 156 (revive_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 156 (revive_factor1 -> INT_LIT .)
    AND             reduce using rule 156 (revive_factor1 -> INT_LIT .)
    OR              reduce using rule 156 (revive_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 156 (revive_factor1 -> INT_LIT .)
    RBRACE          reduce using rule 156 (revive_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 156 (revive_factor1 -> INT_LIT .)


state 336

    (157) revive_factor1 -> FLT_LIT .

    PLUS            reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    GT              reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    LT              reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    AND             reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    OR              reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    RBRACE          reduce using rule 157 (revive_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 157 (revive_factor1 -> FLT_LIT .)


state 337

    (130) revive_var_call -> IDENT . revive_list_index
    (135) revive_list_index -> . LBRACKET revive_index RBRACKET revive_list_index2
    (136) revive_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 449
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    revive_list_index              shift and go to state 448
    empty                          shift and go to state 450

state 338

    (158) revive_factor1 -> DAY .

    PLUS            reduce using rule 158 (revive_factor1 -> DAY .)
    MINUS           reduce using rule 158 (revive_factor1 -> DAY .)
    MULTIPLY        reduce using rule 158 (revive_factor1 -> DAY .)
    DIVISION        reduce using rule 158 (revive_factor1 -> DAY .)
    MODULO          reduce using rule 158 (revive_factor1 -> DAY .)
    EXPONENT        reduce using rule 158 (revive_factor1 -> DAY .)
    GT              reduce using rule 158 (revive_factor1 -> DAY .)
    LT              reduce using rule 158 (revive_factor1 -> DAY .)
    EQ_EQ           reduce using rule 158 (revive_factor1 -> DAY .)
    GT_EQ           reduce using rule 158 (revive_factor1 -> DAY .)
    LT_EQ           reduce using rule 158 (revive_factor1 -> DAY .)
    NOT_EQ          reduce using rule 158 (revive_factor1 -> DAY .)
    AND             reduce using rule 158 (revive_factor1 -> DAY .)
    OR              reduce using rule 158 (revive_factor1 -> DAY .)
    NEWLINE         reduce using rule 158 (revive_factor1 -> DAY .)
    RBRACE          reduce using rule 158 (revive_factor1 -> DAY .)
    RPAREN          reduce using rule 158 (revive_factor1 -> DAY .)


state 339

    (159) revive_factor1 -> NIGHT .

    PLUS            reduce using rule 159 (revive_factor1 -> NIGHT .)
    MINUS           reduce using rule 159 (revive_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 159 (revive_factor1 -> NIGHT .)
    DIVISION        reduce using rule 159 (revive_factor1 -> NIGHT .)
    MODULO          reduce using rule 159 (revive_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 159 (revive_factor1 -> NIGHT .)
    GT              reduce using rule 159 (revive_factor1 -> NIGHT .)
    LT              reduce using rule 159 (revive_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 159 (revive_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 159 (revive_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 159 (revive_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 159 (revive_factor1 -> NIGHT .)
    AND             reduce using rule 159 (revive_factor1 -> NIGHT .)
    OR              reduce using rule 159 (revive_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 159 (revive_factor1 -> NIGHT .)
    RBRACE          reduce using rule 159 (revive_factor1 -> NIGHT .)
    RPAREN          reduce using rule 159 (revive_factor1 -> NIGHT .)


state 340

    (160) revive_factor1 -> STR_LIT .

    PLUS            reduce using rule 160 (revive_factor1 -> STR_LIT .)
    MINUS           reduce using rule 160 (revive_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 160 (revive_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 160 (revive_factor1 -> STR_LIT .)
    MODULO          reduce using rule 160 (revive_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 160 (revive_factor1 -> STR_LIT .)
    GT              reduce using rule 160 (revive_factor1 -> STR_LIT .)
    LT              reduce using rule 160 (revive_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 160 (revive_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 160 (revive_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 160 (revive_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 160 (revive_factor1 -> STR_LIT .)
    AND             reduce using rule 160 (revive_factor1 -> STR_LIT .)
    OR              reduce using rule 160 (revive_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 160 (revive_factor1 -> STR_LIT .)
    RBRACE          reduce using rule 160 (revive_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 160 (revive_factor1 -> STR_LIT .)


state 341

    (167) statements_tail -> switch_statement unli_newline . statements
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 451
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 342

    (168) statements_tail -> loop_statement unli_newline . statements
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 452
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 343

    (169) statements_tail -> function_call unli_newline . statements
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 453
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 344

    (170) statements_tail -> assignment_statement unli_newline . statements
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 454
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 345

    (171) statements_tail -> output_statement unli_newline . statements
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 455
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 346

    (172) statements_tail -> conditional_statement unli_newline . statements
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    REVIVE          reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 456
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 347

    (277) switch_statement -> SWAP LPAREN . IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    IDENT           shift and go to state 457


state 348

    (468) assignment_statement -> IDENT assign_tail .

    NEWLINE         reduce using rule 468 (assignment_statement -> IDENT assign_tail .)


state 349

    (469) assign_tail -> DOT . SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN
    (470) assign_tail -> DOT . PUSH LPAREN list_element RPAREN

    SPLICE          shift and go to state 458
    PUSH            shift and go to state 459


state 350

    (471) assign_tail -> assign_op . value
    (493) value -> . type_cast
    (494) value -> . value_expression
    (495) value -> . function_call
    (533) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (534) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (535) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (536) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (496) value_expression -> . value_factor value_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 464
    CONVERT_TO_FLT  shift and go to state 466
    CONVERT_TO_BLN  shift and go to state 467
    CONVERT_TO_STR  shift and go to state 468
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    INPUT           shift and go to state 293
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value                          shift and go to state 460
    type_cast                      shift and go to state 461
    value_expression               shift and go to state 462
    function_call                  shift and go to state 463
    value_factor                   shift and go to state 469
    input_statement                shift and go to state 287
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 351

    (472) assign_op -> compound_op .

    CONVERT_TO_INT  reduce using rule 472 (assign_op -> compound_op .)
    CONVERT_TO_FLT  reduce using rule 472 (assign_op -> compound_op .)
    CONVERT_TO_BLN  reduce using rule 472 (assign_op -> compound_op .)
    CONVERT_TO_STR  reduce using rule 472 (assign_op -> compound_op .)
    FUNCTION_NAME   reduce using rule 472 (assign_op -> compound_op .)
    TILDE           reduce using rule 472 (assign_op -> compound_op .)
    LPAREN          reduce using rule 472 (assign_op -> compound_op .)
    INPUT           reduce using rule 472 (assign_op -> compound_op .)
    IDENT           reduce using rule 472 (assign_op -> compound_op .)
    INT_LIT         reduce using rule 472 (assign_op -> compound_op .)
    FLT_LIT         reduce using rule 472 (assign_op -> compound_op .)
    DAY             reduce using rule 472 (assign_op -> compound_op .)
    NIGHT           reduce using rule 472 (assign_op -> compound_op .)
    STR_LIT         reduce using rule 472 (assign_op -> compound_op .)


state 352

    (473) assign_op -> EQ .

    CONVERT_TO_INT  reduce using rule 473 (assign_op -> EQ .)
    CONVERT_TO_FLT  reduce using rule 473 (assign_op -> EQ .)
    CONVERT_TO_BLN  reduce using rule 473 (assign_op -> EQ .)
    CONVERT_TO_STR  reduce using rule 473 (assign_op -> EQ .)
    FUNCTION_NAME   reduce using rule 473 (assign_op -> EQ .)
    TILDE           reduce using rule 473 (assign_op -> EQ .)
    LPAREN          reduce using rule 473 (assign_op -> EQ .)
    INPUT           reduce using rule 473 (assign_op -> EQ .)
    IDENT           reduce using rule 473 (assign_op -> EQ .)
    INT_LIT         reduce using rule 473 (assign_op -> EQ .)
    FLT_LIT         reduce using rule 473 (assign_op -> EQ .)
    DAY             reduce using rule 473 (assign_op -> EQ .)
    NIGHT           reduce using rule 473 (assign_op -> EQ .)
    STR_LIT         reduce using rule 473 (assign_op -> EQ .)


state 353

    (474) compound_op -> PLUS_EQ .

    CONVERT_TO_INT  reduce using rule 474 (compound_op -> PLUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 474 (compound_op -> PLUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 474 (compound_op -> PLUS_EQ .)
    CONVERT_TO_STR  reduce using rule 474 (compound_op -> PLUS_EQ .)
    FUNCTION_NAME   reduce using rule 474 (compound_op -> PLUS_EQ .)
    TILDE           reduce using rule 474 (compound_op -> PLUS_EQ .)
    LPAREN          reduce using rule 474 (compound_op -> PLUS_EQ .)
    INPUT           reduce using rule 474 (compound_op -> PLUS_EQ .)
    IDENT           reduce using rule 474 (compound_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 474 (compound_op -> PLUS_EQ .)
    FLT_LIT         reduce using rule 474 (compound_op -> PLUS_EQ .)
    DAY             reduce using rule 474 (compound_op -> PLUS_EQ .)
    NIGHT           reduce using rule 474 (compound_op -> PLUS_EQ .)
    STR_LIT         reduce using rule 474 (compound_op -> PLUS_EQ .)


state 354

    (475) compound_op -> MINUS_EQ .

    CONVERT_TO_INT  reduce using rule 475 (compound_op -> MINUS_EQ .)
    CONVERT_TO_FLT  reduce using rule 475 (compound_op -> MINUS_EQ .)
    CONVERT_TO_BLN  reduce using rule 475 (compound_op -> MINUS_EQ .)
    CONVERT_TO_STR  reduce using rule 475 (compound_op -> MINUS_EQ .)
    FUNCTION_NAME   reduce using rule 475 (compound_op -> MINUS_EQ .)
    TILDE           reduce using rule 475 (compound_op -> MINUS_EQ .)
    LPAREN          reduce using rule 475 (compound_op -> MINUS_EQ .)
    INPUT           reduce using rule 475 (compound_op -> MINUS_EQ .)
    IDENT           reduce using rule 475 (compound_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 475 (compound_op -> MINUS_EQ .)
    FLT_LIT         reduce using rule 475 (compound_op -> MINUS_EQ .)
    DAY             reduce using rule 475 (compound_op -> MINUS_EQ .)
    NIGHT           reduce using rule 475 (compound_op -> MINUS_EQ .)
    STR_LIT         reduce using rule 475 (compound_op -> MINUS_EQ .)


state 355

    (476) compound_op -> MUL_EQ .

    CONVERT_TO_INT  reduce using rule 476 (compound_op -> MUL_EQ .)
    CONVERT_TO_FLT  reduce using rule 476 (compound_op -> MUL_EQ .)
    CONVERT_TO_BLN  reduce using rule 476 (compound_op -> MUL_EQ .)
    CONVERT_TO_STR  reduce using rule 476 (compound_op -> MUL_EQ .)
    FUNCTION_NAME   reduce using rule 476 (compound_op -> MUL_EQ .)
    TILDE           reduce using rule 476 (compound_op -> MUL_EQ .)
    LPAREN          reduce using rule 476 (compound_op -> MUL_EQ .)
    INPUT           reduce using rule 476 (compound_op -> MUL_EQ .)
    IDENT           reduce using rule 476 (compound_op -> MUL_EQ .)
    INT_LIT         reduce using rule 476 (compound_op -> MUL_EQ .)
    FLT_LIT         reduce using rule 476 (compound_op -> MUL_EQ .)
    DAY             reduce using rule 476 (compound_op -> MUL_EQ .)
    NIGHT           reduce using rule 476 (compound_op -> MUL_EQ .)
    STR_LIT         reduce using rule 476 (compound_op -> MUL_EQ .)


state 356

    (477) compound_op -> DIV_EQ .

    CONVERT_TO_INT  reduce using rule 477 (compound_op -> DIV_EQ .)
    CONVERT_TO_FLT  reduce using rule 477 (compound_op -> DIV_EQ .)
    CONVERT_TO_BLN  reduce using rule 477 (compound_op -> DIV_EQ .)
    CONVERT_TO_STR  reduce using rule 477 (compound_op -> DIV_EQ .)
    FUNCTION_NAME   reduce using rule 477 (compound_op -> DIV_EQ .)
    TILDE           reduce using rule 477 (compound_op -> DIV_EQ .)
    LPAREN          reduce using rule 477 (compound_op -> DIV_EQ .)
    INPUT           reduce using rule 477 (compound_op -> DIV_EQ .)
    IDENT           reduce using rule 477 (compound_op -> DIV_EQ .)
    INT_LIT         reduce using rule 477 (compound_op -> DIV_EQ .)
    FLT_LIT         reduce using rule 477 (compound_op -> DIV_EQ .)
    DAY             reduce using rule 477 (compound_op -> DIV_EQ .)
    NIGHT           reduce using rule 477 (compound_op -> DIV_EQ .)
    STR_LIT         reduce using rule 477 (compound_op -> DIV_EQ .)


state 357

    (478) compound_op -> MOD_EQ .

    CONVERT_TO_INT  reduce using rule 478 (compound_op -> MOD_EQ .)
    CONVERT_TO_FLT  reduce using rule 478 (compound_op -> MOD_EQ .)
    CONVERT_TO_BLN  reduce using rule 478 (compound_op -> MOD_EQ .)
    CONVERT_TO_STR  reduce using rule 478 (compound_op -> MOD_EQ .)
    FUNCTION_NAME   reduce using rule 478 (compound_op -> MOD_EQ .)
    TILDE           reduce using rule 478 (compound_op -> MOD_EQ .)
    LPAREN          reduce using rule 478 (compound_op -> MOD_EQ .)
    INPUT           reduce using rule 478 (compound_op -> MOD_EQ .)
    IDENT           reduce using rule 478 (compound_op -> MOD_EQ .)
    INT_LIT         reduce using rule 478 (compound_op -> MOD_EQ .)
    FLT_LIT         reduce using rule 478 (compound_op -> MOD_EQ .)
    DAY             reduce using rule 478 (compound_op -> MOD_EQ .)
    NIGHT           reduce using rule 478 (compound_op -> MOD_EQ .)
    STR_LIT         reduce using rule 478 (compound_op -> MOD_EQ .)


state 358

    (413) function_call -> FUNCTION_NAME LPAREN . arguments RPAREN
    (415) arguments -> . empty
    (416) arguments -> . arg_value arg_tail
    (567) empty -> .
    (419) arg_value -> . literal
    (420) arg_value -> . var_call
    (91) literal -> . literal1
    (92) literal -> . literal2
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT
    (98) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 567 (empty -> .)
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 89

    arguments                      shift and go to state 479
    empty                          shift and go to state 480
    arg_value                      shift and go to state 481
    literal                        shift and go to state 482
    var_call                       shift and go to state 483
    literal1                       shift and go to state 87
    literal2                       shift and go to state 88

state 359

    (421) output_statement -> DISPLAY output_value . next_val
    (466) next_val -> . COMMA value next_val
    (467) next_val -> . empty
    (567) empty -> .

    COMMA           shift and go to state 485
    NEWLINE         reduce using rule 567 (empty -> .)

    next_val                       shift and go to state 484
    empty                          shift and go to state 486

state 360

    (422) output_value -> output_type_cast .

    COMMA           reduce using rule 422 (output_value -> output_type_cast .)
    NEWLINE         reduce using rule 422 (output_value -> output_type_cast .)


state 361

    (423) output_value -> output_expression .

    COMMA           reduce using rule 423 (output_value -> output_expression .)
    NEWLINE         reduce using rule 423 (output_value -> output_expression .)


state 362

    (424) output_value -> function_call .

    COMMA           reduce using rule 424 (output_value -> function_call .)
    NEWLINE         reduce using rule 424 (output_value -> function_call .)


state 363

    (462) output_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 487


state 364

    (430) output_factor -> LPAREN . output_factor RPAREN
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 488
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 365

    (463) output_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 489


state 366

    (464) output_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 490


state 367

    (465) output_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 491


state 368

    (425) output_expression -> output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 492
    empty                          shift and go to state 507

state 369

    (426) output_factor -> output_var_call . output_postfix
    (434) output_postfix -> . empty
    (435) output_postfix -> . output_postfix_op
    (567) empty -> .
    (432) output_postfix_op -> . PLUS_PLUS
    (433) output_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 511
    MINUS_MINUS     shift and go to state 512

    output_postfix                 shift and go to state 508
    empty                          shift and go to state 509
    output_postfix_op              shift and go to state 510

state 370

    (427) output_factor -> output_factor1 .

    PLUS            reduce using rule 427 (output_factor -> output_factor1 .)
    MINUS           reduce using rule 427 (output_factor -> output_factor1 .)
    MULTIPLY        reduce using rule 427 (output_factor -> output_factor1 .)
    DIVISION        reduce using rule 427 (output_factor -> output_factor1 .)
    MODULO          reduce using rule 427 (output_factor -> output_factor1 .)
    EXPONENT        reduce using rule 427 (output_factor -> output_factor1 .)
    GT              reduce using rule 427 (output_factor -> output_factor1 .)
    LT              reduce using rule 427 (output_factor -> output_factor1 .)
    EQ_EQ           reduce using rule 427 (output_factor -> output_factor1 .)
    GT_EQ           reduce using rule 427 (output_factor -> output_factor1 .)
    LT_EQ           reduce using rule 427 (output_factor -> output_factor1 .)
    NOT_EQ          reduce using rule 427 (output_factor -> output_factor1 .)
    AND             reduce using rule 427 (output_factor -> output_factor1 .)
    OR              reduce using rule 427 (output_factor -> output_factor1 .)
    COMMA           reduce using rule 427 (output_factor -> output_factor1 .)
    NEWLINE         reduce using rule 427 (output_factor -> output_factor1 .)
    RPAREN          reduce using rule 427 (output_factor -> output_factor1 .)


state 371

    (428) output_factor -> TILDE . INT_LIT
    (429) output_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 513
    FLT_LIT         shift and go to state 514


state 372

    (457) output_factor1 -> INT_LIT .

    PLUS            reduce using rule 457 (output_factor1 -> INT_LIT .)
    MINUS           reduce using rule 457 (output_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 457 (output_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 457 (output_factor1 -> INT_LIT .)
    MODULO          reduce using rule 457 (output_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 457 (output_factor1 -> INT_LIT .)
    GT              reduce using rule 457 (output_factor1 -> INT_LIT .)
    LT              reduce using rule 457 (output_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 457 (output_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 457 (output_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 457 (output_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 457 (output_factor1 -> INT_LIT .)
    AND             reduce using rule 457 (output_factor1 -> INT_LIT .)
    OR              reduce using rule 457 (output_factor1 -> INT_LIT .)
    COMMA           reduce using rule 457 (output_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 457 (output_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 457 (output_factor1 -> INT_LIT .)


state 373

    (458) output_factor1 -> FLT_LIT .

    PLUS            reduce using rule 458 (output_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 458 (output_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 458 (output_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 458 (output_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 458 (output_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 458 (output_factor1 -> FLT_LIT .)
    GT              reduce using rule 458 (output_factor1 -> FLT_LIT .)
    LT              reduce using rule 458 (output_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 458 (output_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 458 (output_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 458 (output_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 458 (output_factor1 -> FLT_LIT .)
    AND             reduce using rule 458 (output_factor1 -> FLT_LIT .)
    OR              reduce using rule 458 (output_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 458 (output_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 458 (output_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 458 (output_factor1 -> FLT_LIT .)


state 374

    (431) output_var_call -> IDENT . output_list_index
    (436) output_list_index -> . LBRACKET output_index RBRACKET output_list_index2
    (437) output_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 516
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    output_list_index              shift and go to state 515
    empty                          shift and go to state 517

state 375

    (459) output_factor1 -> DAY .

    PLUS            reduce using rule 459 (output_factor1 -> DAY .)
    MINUS           reduce using rule 459 (output_factor1 -> DAY .)
    MULTIPLY        reduce using rule 459 (output_factor1 -> DAY .)
    DIVISION        reduce using rule 459 (output_factor1 -> DAY .)
    MODULO          reduce using rule 459 (output_factor1 -> DAY .)
    EXPONENT        reduce using rule 459 (output_factor1 -> DAY .)
    GT              reduce using rule 459 (output_factor1 -> DAY .)
    LT              reduce using rule 459 (output_factor1 -> DAY .)
    EQ_EQ           reduce using rule 459 (output_factor1 -> DAY .)
    GT_EQ           reduce using rule 459 (output_factor1 -> DAY .)
    LT_EQ           reduce using rule 459 (output_factor1 -> DAY .)
    NOT_EQ          reduce using rule 459 (output_factor1 -> DAY .)
    AND             reduce using rule 459 (output_factor1 -> DAY .)
    OR              reduce using rule 459 (output_factor1 -> DAY .)
    COMMA           reduce using rule 459 (output_factor1 -> DAY .)
    NEWLINE         reduce using rule 459 (output_factor1 -> DAY .)
    RPAREN          reduce using rule 459 (output_factor1 -> DAY .)


state 376

    (460) output_factor1 -> NIGHT .

    PLUS            reduce using rule 460 (output_factor1 -> NIGHT .)
    MINUS           reduce using rule 460 (output_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 460 (output_factor1 -> NIGHT .)
    DIVISION        reduce using rule 460 (output_factor1 -> NIGHT .)
    MODULO          reduce using rule 460 (output_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 460 (output_factor1 -> NIGHT .)
    GT              reduce using rule 460 (output_factor1 -> NIGHT .)
    LT              reduce using rule 460 (output_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 460 (output_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 460 (output_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 460 (output_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 460 (output_factor1 -> NIGHT .)
    AND             reduce using rule 460 (output_factor1 -> NIGHT .)
    OR              reduce using rule 460 (output_factor1 -> NIGHT .)
    COMMA           reduce using rule 460 (output_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 460 (output_factor1 -> NIGHT .)
    RPAREN          reduce using rule 460 (output_factor1 -> NIGHT .)


state 377

    (461) output_factor1 -> STR_LIT .

    PLUS            reduce using rule 461 (output_factor1 -> STR_LIT .)
    MINUS           reduce using rule 461 (output_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 461 (output_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 461 (output_factor1 -> STR_LIT .)
    MODULO          reduce using rule 461 (output_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 461 (output_factor1 -> STR_LIT .)
    GT              reduce using rule 461 (output_factor1 -> STR_LIT .)
    LT              reduce using rule 461 (output_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 461 (output_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 461 (output_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 461 (output_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 461 (output_factor1 -> STR_LIT .)
    AND             reduce using rule 461 (output_factor1 -> STR_LIT .)
    OR              reduce using rule 461 (output_factor1 -> STR_LIT .)
    COMMA           reduce using rule 461 (output_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 461 (output_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 461 (output_factor1 -> STR_LIT .)


state 378

    (237) conditional_statement -> CHECK LPAREN . condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (240) condition -> . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition                      shift and go to state 519
    condition_factor               shift and go to state 520
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 379

    (328) for_loop -> FOR LPAREN . control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (405) control_variable -> . INT IDENT EQ control_var_tail

    INT             shift and go to state 531

    control_variable               shift and go to state 530

state 380

    (366) until_loop -> UNTIL LPAREN . until_expression RPAREN LBRACE statements RBRACE
    (367) until_expression -> . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_expression               shift and go to state 533
    until_factor                   shift and go to state 534
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 381

    (404) repeat_until -> REPEAT LBRACE . statements RBRACE UNTIL LPAREN until_expression RPAREN
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 544
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 382

    (566) input_statement -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 545


state 383

    (187) local_dec_tail -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 187 (local_dec_tail -> COMMA IDENT local_dec_tail .)


state 384

    (188) local_dec_tail -> EQ local_value local_dec_tail2 .

    NEWLINE         reduce using rule 188 (local_dec_tail -> EQ local_value local_dec_tail2 .)


state 385

    (189) local_dec_tail2 -> COMMA . IDENT local_dec_tail

    IDENT           shift and go to state 546


state 386

    (190) local_dec_tail2 -> empty .

    NEWLINE         reduce using rule 190 (local_dec_tail2 -> empty .)


state 387

    (233) local_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 548
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 388

    (201) local_factor -> LPAREN local_factor . RPAREN

    RPAREN          shift and go to state 561


state 389

    (234) local_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 562
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 390

    (235) local_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 563
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 391

    (236) local_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 564
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 392

    (196) local_expression -> local_factor local_factor_tail .

    COMMA           reduce using rule 196 (local_expression -> local_factor local_factor_tail .)
    NEWLINE         reduce using rule 196 (local_expression -> local_factor local_factor_tail .)


state 393

    (213) local_factor_tail -> PLUS . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 565
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 394

    (214) local_factor_tail -> MINUS . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 566
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 395

    (215) local_factor_tail -> MULTIPLY . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 567
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 396

    (216) local_factor_tail -> DIVISION . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 568
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 397

    (217) local_factor_tail -> MODULO . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 569
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 398

    (218) local_factor_tail -> EXPONENT . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 570
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 399

    (219) local_factor_tail -> GT . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 571
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 400

    (220) local_factor_tail -> LT . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 572
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 401

    (221) local_factor_tail -> EQ_EQ . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 573
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 402

    (222) local_factor_tail -> GT_EQ . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 574
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 403

    (223) local_factor_tail -> LT_EQ . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 575
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 404

    (224) local_factor_tail -> NOT_EQ . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 576
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 405

    (225) local_factor_tail -> AND . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 577
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 406

    (226) local_factor_tail -> OR . local_factor local_factor_tail
    (197) local_factor -> . local_var_call local_postfix
    (198) local_factor -> . local_factor1
    (199) local_factor -> . TILDE INT_LIT
    (200) local_factor -> . TILDE FLT_LIT
    (201) local_factor -> . LPAREN local_factor RPAREN
    (202) local_var_call -> . IDENT local_list_index
    (228) local_factor1 -> . INT_LIT
    (229) local_factor1 -> . FLT_LIT
    (230) local_factor1 -> . DAY
    (231) local_factor1 -> . NIGHT
    (232) local_factor1 -> . STR_LIT

    TILDE           shift and go to state 310
    LPAREN          shift and go to state 303
    IDENT           shift and go to state 313
    INT_LIT         shift and go to state 311
    FLT_LIT         shift and go to state 312
    DAY             shift and go to state 314
    NIGHT           shift and go to state 315
    STR_LIT         shift and go to state 316

    local_factor                   shift and go to state 578
    local_var_call                 shift and go to state 308
    local_factor1                  shift and go to state 309

state 407

    (227) local_factor_tail -> empty .

    COMMA           reduce using rule 227 (local_factor_tail -> empty .)
    NEWLINE         reduce using rule 227 (local_factor_tail -> empty .)


state 408

    (197) local_factor -> local_var_call local_postfix .

    PLUS            reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    MINUS           reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    MULTIPLY        reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    DIVISION        reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    MODULO          reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    EXPONENT        reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    GT              reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    LT              reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    EQ_EQ           reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    GT_EQ           reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    LT_EQ           reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    NOT_EQ          reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    AND             reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    OR              reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    COMMA           reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    NEWLINE         reduce using rule 197 (local_factor -> local_var_call local_postfix .)
    RPAREN          reduce using rule 197 (local_factor -> local_var_call local_postfix .)


state 409

    (205) local_postfix -> empty .

    PLUS            reduce using rule 205 (local_postfix -> empty .)
    MINUS           reduce using rule 205 (local_postfix -> empty .)
    MULTIPLY        reduce using rule 205 (local_postfix -> empty .)
    DIVISION        reduce using rule 205 (local_postfix -> empty .)
    MODULO          reduce using rule 205 (local_postfix -> empty .)
    EXPONENT        reduce using rule 205 (local_postfix -> empty .)
    GT              reduce using rule 205 (local_postfix -> empty .)
    LT              reduce using rule 205 (local_postfix -> empty .)
    EQ_EQ           reduce using rule 205 (local_postfix -> empty .)
    GT_EQ           reduce using rule 205 (local_postfix -> empty .)
    LT_EQ           reduce using rule 205 (local_postfix -> empty .)
    NOT_EQ          reduce using rule 205 (local_postfix -> empty .)
    AND             reduce using rule 205 (local_postfix -> empty .)
    OR              reduce using rule 205 (local_postfix -> empty .)
    COMMA           reduce using rule 205 (local_postfix -> empty .)
    NEWLINE         reduce using rule 205 (local_postfix -> empty .)
    RPAREN          reduce using rule 205 (local_postfix -> empty .)


state 410

    (206) local_postfix -> local_postfix_op .

    PLUS            reduce using rule 206 (local_postfix -> local_postfix_op .)
    MINUS           reduce using rule 206 (local_postfix -> local_postfix_op .)
    MULTIPLY        reduce using rule 206 (local_postfix -> local_postfix_op .)
    DIVISION        reduce using rule 206 (local_postfix -> local_postfix_op .)
    MODULO          reduce using rule 206 (local_postfix -> local_postfix_op .)
    EXPONENT        reduce using rule 206 (local_postfix -> local_postfix_op .)
    GT              reduce using rule 206 (local_postfix -> local_postfix_op .)
    LT              reduce using rule 206 (local_postfix -> local_postfix_op .)
    EQ_EQ           reduce using rule 206 (local_postfix -> local_postfix_op .)
    GT_EQ           reduce using rule 206 (local_postfix -> local_postfix_op .)
    LT_EQ           reduce using rule 206 (local_postfix -> local_postfix_op .)
    NOT_EQ          reduce using rule 206 (local_postfix -> local_postfix_op .)
    AND             reduce using rule 206 (local_postfix -> local_postfix_op .)
    OR              reduce using rule 206 (local_postfix -> local_postfix_op .)
    COMMA           reduce using rule 206 (local_postfix -> local_postfix_op .)
    NEWLINE         reduce using rule 206 (local_postfix -> local_postfix_op .)
    RPAREN          reduce using rule 206 (local_postfix -> local_postfix_op .)


state 411

    (203) local_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 203 (local_postfix_op -> PLUS_PLUS .)


state 412

    (204) local_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 204 (local_postfix_op -> MINUS_MINUS .)


state 413

    (199) local_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    GT              reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    LT              reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    AND             reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    OR              reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 199 (local_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 199 (local_factor -> TILDE INT_LIT .)


state 414

    (200) local_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 200 (local_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 200 (local_factor -> TILDE FLT_LIT .)


state 415

    (202) local_var_call -> IDENT local_list_index .

    PLUS_PLUS       reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    MINUS_MINUS     reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    PLUS            reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    MINUS           reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    MULTIPLY        reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    DIVISION        reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    MODULO          reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    EXPONENT        reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    GT              reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    LT              reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    EQ_EQ           reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    GT_EQ           reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    LT_EQ           reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    NOT_EQ          reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    AND             reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    OR              reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    COMMA           reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    NEWLINE         reduce using rule 202 (local_var_call -> IDENT local_list_index .)
    RPAREN          reduce using rule 202 (local_var_call -> IDENT local_list_index .)


state 416

    (207) local_list_index -> LBRACKET . local_index RBRACKET local_list_index2
    (211) local_index -> . INT_LIT
    (212) local_index -> . IDENT

    INT_LIT         shift and go to state 580
    IDENT           shift and go to state 581

    local_index                    shift and go to state 579

state 417

    (208) local_list_index -> empty .

    PLUS_PLUS       reduce using rule 208 (local_list_index -> empty .)
    MINUS_MINUS     reduce using rule 208 (local_list_index -> empty .)
    PLUS            reduce using rule 208 (local_list_index -> empty .)
    MINUS           reduce using rule 208 (local_list_index -> empty .)
    MULTIPLY        reduce using rule 208 (local_list_index -> empty .)
    DIVISION        reduce using rule 208 (local_list_index -> empty .)
    MODULO          reduce using rule 208 (local_list_index -> empty .)
    EXPONENT        reduce using rule 208 (local_list_index -> empty .)
    GT              reduce using rule 208 (local_list_index -> empty .)
    LT              reduce using rule 208 (local_list_index -> empty .)
    EQ_EQ           reduce using rule 208 (local_list_index -> empty .)
    GT_EQ           reduce using rule 208 (local_list_index -> empty .)
    LT_EQ           reduce using rule 208 (local_list_index -> empty .)
    NOT_EQ          reduce using rule 208 (local_list_index -> empty .)
    AND             reduce using rule 208 (local_list_index -> empty .)
    OR              reduce using rule 208 (local_list_index -> empty .)
    COMMA           reduce using rule 208 (local_list_index -> empty .)
    NEWLINE         reduce using rule 208 (local_list_index -> empty .)
    RPAREN          reduce using rule 208 (local_list_index -> empty .)


state 418

    (183) local_list_dec -> LBRACKET RBRACKET . local_2d_list
    (184) local_2d_list -> . empty
    (185) local_2d_list -> . LBRACKET RBRACKET
    (567) empty -> .

    LBRACKET        shift and go to state 582
    COMMA           reduce using rule 567 (empty -> .)
    EQ              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_2d_list                  shift and go to state 583
    empty                          shift and go to state 584

state 419

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE . unli_newline function_statements_tail
    (4) unli_newline -> . NEWLINE
    (5) unli_newline -> . NEWLINE unli_newline

    NEWLINE         shift and go to state 4

    unli_newline                   shift and go to state 585

state 420

    (161) revive_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 586
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 421

    (129) revive_factor -> LPAREN revive_factor . RPAREN

    RPAREN          shift and go to state 587


state 422

    (162) revive_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 588
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 423

    (163) revive_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 589
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 424

    (164) revive_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 590
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 425

    (124) revive_expression -> revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 124 (revive_expression -> revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 124 (revive_expression -> revive_factor revive_factor_tail .)


state 426

    (141) revive_factor_tail -> PLUS . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 591
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 427

    (142) revive_factor_tail -> MINUS . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 592
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 428

    (143) revive_factor_tail -> MULTIPLY . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 593
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 429

    (144) revive_factor_tail -> DIVISION . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 594
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 430

    (145) revive_factor_tail -> MODULO . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 595
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 431

    (146) revive_factor_tail -> EXPONENT . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 596
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 432

    (147) revive_factor_tail -> GT . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 597
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 433

    (148) revive_factor_tail -> LT . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 598
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 434

    (149) revive_factor_tail -> EQ_EQ . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 599
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 435

    (150) revive_factor_tail -> GT_EQ . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 600
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 436

    (151) revive_factor_tail -> LT_EQ . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 601
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 437

    (152) revive_factor_tail -> NOT_EQ . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 602
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 438

    (153) revive_factor_tail -> AND . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 603
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 439

    (154) revive_factor_tail -> OR . revive_factor revive_factor_tail
    (125) revive_factor -> . revive_var_call revive_postfix
    (126) revive_factor -> . revive_factor1
    (127) revive_factor -> . TILDE INT_LIT
    (128) revive_factor -> . TILDE FLT_LIT
    (129) revive_factor -> . LPAREN revive_factor RPAREN
    (130) revive_var_call -> . IDENT revive_list_index
    (156) revive_factor1 -> . INT_LIT
    (157) revive_factor1 -> . FLT_LIT
    (158) revive_factor1 -> . DAY
    (159) revive_factor1 -> . NIGHT
    (160) revive_factor1 -> . STR_LIT

    TILDE           shift and go to state 334
    LPAREN          shift and go to state 327
    IDENT           shift and go to state 337
    INT_LIT         shift and go to state 335
    FLT_LIT         shift and go to state 336
    DAY             shift and go to state 338
    NIGHT           shift and go to state 339
    STR_LIT         shift and go to state 340

    revive_factor                  shift and go to state 604
    revive_var_call                shift and go to state 332
    revive_factor1                 shift and go to state 333

state 440

    (155) revive_factor_tail -> empty .

    NEWLINE         reduce using rule 155 (revive_factor_tail -> empty .)
    RBRACE          reduce using rule 155 (revive_factor_tail -> empty .)


state 441

    (125) revive_factor -> revive_var_call revive_postfix .

    PLUS            reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    MINUS           reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    MULTIPLY        reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    DIVISION        reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    MODULO          reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    EXPONENT        reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    GT              reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    LT              reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    EQ_EQ           reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    GT_EQ           reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    LT_EQ           reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    NOT_EQ          reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    AND             reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    OR              reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    NEWLINE         reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    RBRACE          reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)
    RPAREN          reduce using rule 125 (revive_factor -> revive_var_call revive_postfix .)


state 442

    (133) revive_postfix -> empty .

    PLUS            reduce using rule 133 (revive_postfix -> empty .)
    MINUS           reduce using rule 133 (revive_postfix -> empty .)
    MULTIPLY        reduce using rule 133 (revive_postfix -> empty .)
    DIVISION        reduce using rule 133 (revive_postfix -> empty .)
    MODULO          reduce using rule 133 (revive_postfix -> empty .)
    EXPONENT        reduce using rule 133 (revive_postfix -> empty .)
    GT              reduce using rule 133 (revive_postfix -> empty .)
    LT              reduce using rule 133 (revive_postfix -> empty .)
    EQ_EQ           reduce using rule 133 (revive_postfix -> empty .)
    GT_EQ           reduce using rule 133 (revive_postfix -> empty .)
    LT_EQ           reduce using rule 133 (revive_postfix -> empty .)
    NOT_EQ          reduce using rule 133 (revive_postfix -> empty .)
    AND             reduce using rule 133 (revive_postfix -> empty .)
    OR              reduce using rule 133 (revive_postfix -> empty .)
    NEWLINE         reduce using rule 133 (revive_postfix -> empty .)
    RBRACE          reduce using rule 133 (revive_postfix -> empty .)
    RPAREN          reduce using rule 133 (revive_postfix -> empty .)


state 443

    (134) revive_postfix -> revive_postfix_op .

    PLUS            reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    MINUS           reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    MULTIPLY        reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    DIVISION        reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    MODULO          reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    EXPONENT        reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    GT              reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    LT              reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    EQ_EQ           reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    GT_EQ           reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    LT_EQ           reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    NOT_EQ          reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    AND             reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    OR              reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    NEWLINE         reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    RBRACE          reduce using rule 134 (revive_postfix -> revive_postfix_op .)
    RPAREN          reduce using rule 134 (revive_postfix -> revive_postfix_op .)


state 444

    (131) revive_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    RBRACE          reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 131 (revive_postfix_op -> PLUS_PLUS .)


state 445

    (132) revive_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    RBRACE          reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 132 (revive_postfix_op -> MINUS_MINUS .)


state 446

    (127) revive_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    GT              reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    LT              reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    AND             reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    OR              reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    RBRACE          reduce using rule 127 (revive_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 127 (revive_factor -> TILDE INT_LIT .)


state 447

    (128) revive_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    RBRACE          reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 128 (revive_factor -> TILDE FLT_LIT .)


state 448

    (130) revive_var_call -> IDENT revive_list_index .

    PLUS_PLUS       reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    MINUS_MINUS     reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    PLUS            reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    MINUS           reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    MULTIPLY        reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    DIVISION        reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    MODULO          reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    EXPONENT        reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    GT              reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    LT              reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    EQ_EQ           reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    GT_EQ           reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    LT_EQ           reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    NOT_EQ          reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    AND             reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    OR              reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    NEWLINE         reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    RBRACE          reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)
    RPAREN          reduce using rule 130 (revive_var_call -> IDENT revive_list_index .)


state 449

    (135) revive_list_index -> LBRACKET . revive_index RBRACKET revive_list_index2
    (139) revive_index -> . INT_LIT
    (140) revive_index -> . IDENT

    INT_LIT         shift and go to state 606
    IDENT           shift and go to state 607

    revive_index                   shift and go to state 605

state 450

    (136) revive_list_index -> empty .

    PLUS_PLUS       reduce using rule 136 (revive_list_index -> empty .)
    MINUS_MINUS     reduce using rule 136 (revive_list_index -> empty .)
    PLUS            reduce using rule 136 (revive_list_index -> empty .)
    MINUS           reduce using rule 136 (revive_list_index -> empty .)
    MULTIPLY        reduce using rule 136 (revive_list_index -> empty .)
    DIVISION        reduce using rule 136 (revive_list_index -> empty .)
    MODULO          reduce using rule 136 (revive_list_index -> empty .)
    EXPONENT        reduce using rule 136 (revive_list_index -> empty .)
    GT              reduce using rule 136 (revive_list_index -> empty .)
    LT              reduce using rule 136 (revive_list_index -> empty .)
    EQ_EQ           reduce using rule 136 (revive_list_index -> empty .)
    GT_EQ           reduce using rule 136 (revive_list_index -> empty .)
    LT_EQ           reduce using rule 136 (revive_list_index -> empty .)
    NOT_EQ          reduce using rule 136 (revive_list_index -> empty .)
    AND             reduce using rule 136 (revive_list_index -> empty .)
    OR              reduce using rule 136 (revive_list_index -> empty .)
    NEWLINE         reduce using rule 136 (revive_list_index -> empty .)
    RBRACE          reduce using rule 136 (revive_list_index -> empty .)
    RPAREN          reduce using rule 136 (revive_list_index -> empty .)


state 451

    (167) statements_tail -> switch_statement unli_newline statements .

    NEWLINE         reduce using rule 167 (statements_tail -> switch_statement unli_newline statements .)
    REVIVE          reduce using rule 167 (statements_tail -> switch_statement unli_newline statements .)
    RBRACE          reduce using rule 167 (statements_tail -> switch_statement unli_newline statements .)
    SHIFT           reduce using rule 167 (statements_tail -> switch_statement unli_newline statements .)
    OTHERWISE       reduce using rule 167 (statements_tail -> switch_statement unli_newline statements .)


state 452

    (168) statements_tail -> loop_statement unli_newline statements .

    NEWLINE         reduce using rule 168 (statements_tail -> loop_statement unli_newline statements .)
    REVIVE          reduce using rule 168 (statements_tail -> loop_statement unli_newline statements .)
    RBRACE          reduce using rule 168 (statements_tail -> loop_statement unli_newline statements .)
    SHIFT           reduce using rule 168 (statements_tail -> loop_statement unli_newline statements .)
    OTHERWISE       reduce using rule 168 (statements_tail -> loop_statement unli_newline statements .)


state 453

    (169) statements_tail -> function_call unli_newline statements .

    NEWLINE         reduce using rule 169 (statements_tail -> function_call unli_newline statements .)
    REVIVE          reduce using rule 169 (statements_tail -> function_call unli_newline statements .)
    RBRACE          reduce using rule 169 (statements_tail -> function_call unli_newline statements .)
    SHIFT           reduce using rule 169 (statements_tail -> function_call unli_newline statements .)
    OTHERWISE       reduce using rule 169 (statements_tail -> function_call unli_newline statements .)


state 454

    (170) statements_tail -> assignment_statement unli_newline statements .

    NEWLINE         reduce using rule 170 (statements_tail -> assignment_statement unli_newline statements .)
    REVIVE          reduce using rule 170 (statements_tail -> assignment_statement unli_newline statements .)
    RBRACE          reduce using rule 170 (statements_tail -> assignment_statement unli_newline statements .)
    SHIFT           reduce using rule 170 (statements_tail -> assignment_statement unli_newline statements .)
    OTHERWISE       reduce using rule 170 (statements_tail -> assignment_statement unli_newline statements .)


state 455

    (171) statements_tail -> output_statement unli_newline statements .

    NEWLINE         reduce using rule 171 (statements_tail -> output_statement unli_newline statements .)
    REVIVE          reduce using rule 171 (statements_tail -> output_statement unli_newline statements .)
    RBRACE          reduce using rule 171 (statements_tail -> output_statement unli_newline statements .)
    SHIFT           reduce using rule 171 (statements_tail -> output_statement unli_newline statements .)
    OTHERWISE       reduce using rule 171 (statements_tail -> output_statement unli_newline statements .)


state 456

    (172) statements_tail -> conditional_statement unli_newline statements .

    NEWLINE         reduce using rule 172 (statements_tail -> conditional_statement unli_newline statements .)
    REVIVE          reduce using rule 172 (statements_tail -> conditional_statement unli_newline statements .)
    RBRACE          reduce using rule 172 (statements_tail -> conditional_statement unli_newline statements .)
    SHIFT           reduce using rule 172 (statements_tail -> conditional_statement unli_newline statements .)
    OTHERWISE       reduce using rule 172 (statements_tail -> conditional_statement unli_newline statements .)


state 457

    (277) switch_statement -> SWAP LPAREN IDENT . RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    RPAREN          shift and go to state 608


state 458

    (469) assign_tail -> DOT SPLICE . LPAREN start COMMA deleteCount COMMA splice_items RPAREN

    LPAREN          shift and go to state 609


state 459

    (470) assign_tail -> DOT PUSH . LPAREN list_element RPAREN

    LPAREN          shift and go to state 610


state 460

    (471) assign_tail -> assign_op value .

    NEWLINE         reduce using rule 471 (assign_tail -> assign_op value .)


state 461

    (493) value -> type_cast .

    NEWLINE         reduce using rule 493 (value -> type_cast .)
    COMMA           reduce using rule 493 (value -> type_cast .)
    RPAREN          reduce using rule 493 (value -> type_cast .)


state 462

    (494) value -> value_expression .

    NEWLINE         reduce using rule 494 (value -> value_expression .)
    COMMA           reduce using rule 494 (value -> value_expression .)
    RPAREN          reduce using rule 494 (value -> value_expression .)


state 463

    (495) value -> function_call .

    NEWLINE         reduce using rule 495 (value -> function_call .)
    COMMA           reduce using rule 495 (value -> function_call .)
    RPAREN          reduce using rule 495 (value -> function_call .)


state 464

    (533) type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 611


state 465

    (501) value_factor -> LPAREN . value_factor RPAREN
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 612
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 466

    (534) type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 613


state 467

    (535) type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 614


state 468

    (536) type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 615


state 469

    (496) value_expression -> value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 616
    empty                          shift and go to state 631

state 470

    (497) value_factor -> value_var_call . value_postfix
    (505) value_postfix -> . empty
    (506) value_postfix -> . value_postfix_op
    (567) empty -> .
    (503) value_postfix_op -> . PLUS_PLUS
    (504) value_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 635
    MINUS_MINUS     shift and go to state 636

    value_postfix                  shift and go to state 632
    empty                          shift and go to state 633
    value_postfix_op               shift and go to state 634

state 471

    (498) value_factor -> value_factor1 .

    PLUS            reduce using rule 498 (value_factor -> value_factor1 .)
    MINUS           reduce using rule 498 (value_factor -> value_factor1 .)
    MULTIPLY        reduce using rule 498 (value_factor -> value_factor1 .)
    DIVISION        reduce using rule 498 (value_factor -> value_factor1 .)
    MODULO          reduce using rule 498 (value_factor -> value_factor1 .)
    EXPONENT        reduce using rule 498 (value_factor -> value_factor1 .)
    GT              reduce using rule 498 (value_factor -> value_factor1 .)
    LT              reduce using rule 498 (value_factor -> value_factor1 .)
    EQ_EQ           reduce using rule 498 (value_factor -> value_factor1 .)
    GT_EQ           reduce using rule 498 (value_factor -> value_factor1 .)
    LT_EQ           reduce using rule 498 (value_factor -> value_factor1 .)
    NOT_EQ          reduce using rule 498 (value_factor -> value_factor1 .)
    AND             reduce using rule 498 (value_factor -> value_factor1 .)
    OR              reduce using rule 498 (value_factor -> value_factor1 .)
    NEWLINE         reduce using rule 498 (value_factor -> value_factor1 .)
    RPAREN          reduce using rule 498 (value_factor -> value_factor1 .)
    COMMA           reduce using rule 498 (value_factor -> value_factor1 .)


state 472

    (499) value_factor -> TILDE . INT_LIT
    (500) value_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 637
    FLT_LIT         shift and go to state 638


state 473

    (528) value_factor1 -> INT_LIT .

    PLUS            reduce using rule 528 (value_factor1 -> INT_LIT .)
    MINUS           reduce using rule 528 (value_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 528 (value_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 528 (value_factor1 -> INT_LIT .)
    MODULO          reduce using rule 528 (value_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 528 (value_factor1 -> INT_LIT .)
    GT              reduce using rule 528 (value_factor1 -> INT_LIT .)
    LT              reduce using rule 528 (value_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 528 (value_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 528 (value_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 528 (value_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 528 (value_factor1 -> INT_LIT .)
    AND             reduce using rule 528 (value_factor1 -> INT_LIT .)
    OR              reduce using rule 528 (value_factor1 -> INT_LIT .)
    NEWLINE         reduce using rule 528 (value_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 528 (value_factor1 -> INT_LIT .)
    COMMA           reduce using rule 528 (value_factor1 -> INT_LIT .)


state 474

    (529) value_factor1 -> FLT_LIT .

    PLUS            reduce using rule 529 (value_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 529 (value_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 529 (value_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 529 (value_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 529 (value_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 529 (value_factor1 -> FLT_LIT .)
    GT              reduce using rule 529 (value_factor1 -> FLT_LIT .)
    LT              reduce using rule 529 (value_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 529 (value_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 529 (value_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 529 (value_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 529 (value_factor1 -> FLT_LIT .)
    AND             reduce using rule 529 (value_factor1 -> FLT_LIT .)
    OR              reduce using rule 529 (value_factor1 -> FLT_LIT .)
    NEWLINE         reduce using rule 529 (value_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 529 (value_factor1 -> FLT_LIT .)
    COMMA           reduce using rule 529 (value_factor1 -> FLT_LIT .)


state 475

    (502) value_var_call -> IDENT . value_list_index
    (507) value_list_index -> . LBRACKET value_index RBRACKET value_list_index2
    (508) value_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 640
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)

    value_list_index               shift and go to state 639
    empty                          shift and go to state 641

state 476

    (530) value_factor1 -> DAY .

    PLUS            reduce using rule 530 (value_factor1 -> DAY .)
    MINUS           reduce using rule 530 (value_factor1 -> DAY .)
    MULTIPLY        reduce using rule 530 (value_factor1 -> DAY .)
    DIVISION        reduce using rule 530 (value_factor1 -> DAY .)
    MODULO          reduce using rule 530 (value_factor1 -> DAY .)
    EXPONENT        reduce using rule 530 (value_factor1 -> DAY .)
    GT              reduce using rule 530 (value_factor1 -> DAY .)
    LT              reduce using rule 530 (value_factor1 -> DAY .)
    EQ_EQ           reduce using rule 530 (value_factor1 -> DAY .)
    GT_EQ           reduce using rule 530 (value_factor1 -> DAY .)
    LT_EQ           reduce using rule 530 (value_factor1 -> DAY .)
    NOT_EQ          reduce using rule 530 (value_factor1 -> DAY .)
    AND             reduce using rule 530 (value_factor1 -> DAY .)
    OR              reduce using rule 530 (value_factor1 -> DAY .)
    NEWLINE         reduce using rule 530 (value_factor1 -> DAY .)
    RPAREN          reduce using rule 530 (value_factor1 -> DAY .)
    COMMA           reduce using rule 530 (value_factor1 -> DAY .)


state 477

    (531) value_factor1 -> NIGHT .

    PLUS            reduce using rule 531 (value_factor1 -> NIGHT .)
    MINUS           reduce using rule 531 (value_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 531 (value_factor1 -> NIGHT .)
    DIVISION        reduce using rule 531 (value_factor1 -> NIGHT .)
    MODULO          reduce using rule 531 (value_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 531 (value_factor1 -> NIGHT .)
    GT              reduce using rule 531 (value_factor1 -> NIGHT .)
    LT              reduce using rule 531 (value_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 531 (value_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 531 (value_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 531 (value_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 531 (value_factor1 -> NIGHT .)
    AND             reduce using rule 531 (value_factor1 -> NIGHT .)
    OR              reduce using rule 531 (value_factor1 -> NIGHT .)
    NEWLINE         reduce using rule 531 (value_factor1 -> NIGHT .)
    RPAREN          reduce using rule 531 (value_factor1 -> NIGHT .)
    COMMA           reduce using rule 531 (value_factor1 -> NIGHT .)


state 478

    (532) value_factor1 -> STR_LIT .

    PLUS            reduce using rule 532 (value_factor1 -> STR_LIT .)
    MINUS           reduce using rule 532 (value_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 532 (value_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 532 (value_factor1 -> STR_LIT .)
    MODULO          reduce using rule 532 (value_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 532 (value_factor1 -> STR_LIT .)
    GT              reduce using rule 532 (value_factor1 -> STR_LIT .)
    LT              reduce using rule 532 (value_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 532 (value_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 532 (value_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 532 (value_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 532 (value_factor1 -> STR_LIT .)
    AND             reduce using rule 532 (value_factor1 -> STR_LIT .)
    OR              reduce using rule 532 (value_factor1 -> STR_LIT .)
    NEWLINE         reduce using rule 532 (value_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 532 (value_factor1 -> STR_LIT .)
    COMMA           reduce using rule 532 (value_factor1 -> STR_LIT .)


state 479

    (413) function_call -> FUNCTION_NAME LPAREN arguments . RPAREN

    RPAREN          shift and go to state 642


state 480

    (415) arguments -> empty .

    RPAREN          reduce using rule 415 (arguments -> empty .)


state 481

    (416) arguments -> arg_value . arg_tail
    (417) arg_tail -> . COMMA arg_value arg_tail
    (418) arg_tail -> . empty
    (567) empty -> .

    COMMA           shift and go to state 644
    RPAREN          reduce using rule 567 (empty -> .)

    arg_tail                       shift and go to state 643
    empty                          shift and go to state 645

state 482

    (419) arg_value -> literal .

    COMMA           reduce using rule 419 (arg_value -> literal .)
    RPAREN          reduce using rule 419 (arg_value -> literal .)


state 483

    (420) arg_value -> var_call .

    COMMA           reduce using rule 420 (arg_value -> var_call .)
    RPAREN          reduce using rule 420 (arg_value -> var_call .)


state 484

    (421) output_statement -> DISPLAY output_value next_val .

    NEWLINE         reduce using rule 421 (output_statement -> DISPLAY output_value next_val .)


state 485

    (466) next_val -> COMMA . value next_val
    (493) value -> . type_cast
    (494) value -> . value_expression
    (495) value -> . function_call
    (533) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (534) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (535) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (536) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (496) value_expression -> . value_factor value_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 464
    CONVERT_TO_FLT  shift and go to state 466
    CONVERT_TO_BLN  shift and go to state 467
    CONVERT_TO_STR  shift and go to state 468
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    INPUT           shift and go to state 293
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value                          shift and go to state 646
    type_cast                      shift and go to state 461
    value_expression               shift and go to state 462
    function_call                  shift and go to state 463
    value_factor                   shift and go to state 469
    input_statement                shift and go to state 287
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 486

    (467) next_val -> empty .

    NEWLINE         reduce using rule 467 (next_val -> empty .)


state 487

    (462) output_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 647
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 488

    (430) output_factor -> LPAREN output_factor . RPAREN

    RPAREN          shift and go to state 648


state 489

    (463) output_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 649
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 490

    (464) output_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 650
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 491

    (465) output_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 651
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 492

    (425) output_expression -> output_factor output_factor_tail .

    COMMA           reduce using rule 425 (output_expression -> output_factor output_factor_tail .)
    NEWLINE         reduce using rule 425 (output_expression -> output_factor output_factor_tail .)


state 493

    (442) output_factor_tail -> PLUS . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 652
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 494

    (443) output_factor_tail -> MINUS . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 653
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 495

    (444) output_factor_tail -> MULTIPLY . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 654
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 496

    (445) output_factor_tail -> DIVISION . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 655
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 497

    (446) output_factor_tail -> MODULO . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 656
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 498

    (447) output_factor_tail -> EXPONENT . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 657
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 499

    (448) output_factor_tail -> GT . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 658
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 500

    (449) output_factor_tail -> LT . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 659
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 501

    (450) output_factor_tail -> EQ_EQ . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 660
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 502

    (451) output_factor_tail -> GT_EQ . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 661
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 503

    (452) output_factor_tail -> LT_EQ . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 662
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 504

    (453) output_factor_tail -> NOT_EQ . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 663
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 505

    (454) output_factor_tail -> AND . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 664
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 506

    (455) output_factor_tail -> OR . output_factor output_factor_tail
    (426) output_factor -> . output_var_call output_postfix
    (427) output_factor -> . output_factor1
    (428) output_factor -> . TILDE INT_LIT
    (429) output_factor -> . TILDE FLT_LIT
    (430) output_factor -> . LPAREN output_factor RPAREN
    (431) output_var_call -> . IDENT output_list_index
    (457) output_factor1 -> . INT_LIT
    (458) output_factor1 -> . FLT_LIT
    (459) output_factor1 -> . DAY
    (460) output_factor1 -> . NIGHT
    (461) output_factor1 -> . STR_LIT

    TILDE           shift and go to state 371
    LPAREN          shift and go to state 364
    IDENT           shift and go to state 374
    INT_LIT         shift and go to state 372
    FLT_LIT         shift and go to state 373
    DAY             shift and go to state 375
    NIGHT           shift and go to state 376
    STR_LIT         shift and go to state 377

    output_factor                  shift and go to state 665
    output_var_call                shift and go to state 369
    output_factor1                 shift and go to state 370

state 507

    (456) output_factor_tail -> empty .

    COMMA           reduce using rule 456 (output_factor_tail -> empty .)
    NEWLINE         reduce using rule 456 (output_factor_tail -> empty .)


state 508

    (426) output_factor -> output_var_call output_postfix .

    PLUS            reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    MINUS           reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    MULTIPLY        reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    DIVISION        reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    MODULO          reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    EXPONENT        reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    GT              reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    LT              reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    EQ_EQ           reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    GT_EQ           reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    LT_EQ           reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    NOT_EQ          reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    AND             reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    OR              reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    COMMA           reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    NEWLINE         reduce using rule 426 (output_factor -> output_var_call output_postfix .)
    RPAREN          reduce using rule 426 (output_factor -> output_var_call output_postfix .)


state 509

    (434) output_postfix -> empty .

    PLUS            reduce using rule 434 (output_postfix -> empty .)
    MINUS           reduce using rule 434 (output_postfix -> empty .)
    MULTIPLY        reduce using rule 434 (output_postfix -> empty .)
    DIVISION        reduce using rule 434 (output_postfix -> empty .)
    MODULO          reduce using rule 434 (output_postfix -> empty .)
    EXPONENT        reduce using rule 434 (output_postfix -> empty .)
    GT              reduce using rule 434 (output_postfix -> empty .)
    LT              reduce using rule 434 (output_postfix -> empty .)
    EQ_EQ           reduce using rule 434 (output_postfix -> empty .)
    GT_EQ           reduce using rule 434 (output_postfix -> empty .)
    LT_EQ           reduce using rule 434 (output_postfix -> empty .)
    NOT_EQ          reduce using rule 434 (output_postfix -> empty .)
    AND             reduce using rule 434 (output_postfix -> empty .)
    OR              reduce using rule 434 (output_postfix -> empty .)
    COMMA           reduce using rule 434 (output_postfix -> empty .)
    NEWLINE         reduce using rule 434 (output_postfix -> empty .)
    RPAREN          reduce using rule 434 (output_postfix -> empty .)


state 510

    (435) output_postfix -> output_postfix_op .

    PLUS            reduce using rule 435 (output_postfix -> output_postfix_op .)
    MINUS           reduce using rule 435 (output_postfix -> output_postfix_op .)
    MULTIPLY        reduce using rule 435 (output_postfix -> output_postfix_op .)
    DIVISION        reduce using rule 435 (output_postfix -> output_postfix_op .)
    MODULO          reduce using rule 435 (output_postfix -> output_postfix_op .)
    EXPONENT        reduce using rule 435 (output_postfix -> output_postfix_op .)
    GT              reduce using rule 435 (output_postfix -> output_postfix_op .)
    LT              reduce using rule 435 (output_postfix -> output_postfix_op .)
    EQ_EQ           reduce using rule 435 (output_postfix -> output_postfix_op .)
    GT_EQ           reduce using rule 435 (output_postfix -> output_postfix_op .)
    LT_EQ           reduce using rule 435 (output_postfix -> output_postfix_op .)
    NOT_EQ          reduce using rule 435 (output_postfix -> output_postfix_op .)
    AND             reduce using rule 435 (output_postfix -> output_postfix_op .)
    OR              reduce using rule 435 (output_postfix -> output_postfix_op .)
    COMMA           reduce using rule 435 (output_postfix -> output_postfix_op .)
    NEWLINE         reduce using rule 435 (output_postfix -> output_postfix_op .)
    RPAREN          reduce using rule 435 (output_postfix -> output_postfix_op .)


state 511

    (432) output_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 432 (output_postfix_op -> PLUS_PLUS .)


state 512

    (433) output_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 433 (output_postfix_op -> MINUS_MINUS .)


state 513

    (428) output_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    GT              reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    LT              reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    AND             reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    OR              reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 428 (output_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 428 (output_factor -> TILDE INT_LIT .)


state 514

    (429) output_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 429 (output_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 429 (output_factor -> TILDE FLT_LIT .)


state 515

    (431) output_var_call -> IDENT output_list_index .

    PLUS_PLUS       reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    MINUS_MINUS     reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    PLUS            reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    MINUS           reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    MULTIPLY        reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    DIVISION        reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    MODULO          reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    EXPONENT        reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    GT              reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    LT              reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    EQ_EQ           reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    GT_EQ           reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    LT_EQ           reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    NOT_EQ          reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    AND             reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    OR              reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    COMMA           reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    NEWLINE         reduce using rule 431 (output_var_call -> IDENT output_list_index .)
    RPAREN          reduce using rule 431 (output_var_call -> IDENT output_list_index .)


state 516

    (436) output_list_index -> LBRACKET . output_index RBRACKET output_list_index2
    (440) output_index -> . INT_LIT
    (441) output_index -> . IDENT

    INT_LIT         shift and go to state 667
    IDENT           shift and go to state 668

    output_index                   shift and go to state 666

state 517

    (437) output_list_index -> empty .

    PLUS_PLUS       reduce using rule 437 (output_list_index -> empty .)
    MINUS_MINUS     reduce using rule 437 (output_list_index -> empty .)
    PLUS            reduce using rule 437 (output_list_index -> empty .)
    MINUS           reduce using rule 437 (output_list_index -> empty .)
    MULTIPLY        reduce using rule 437 (output_list_index -> empty .)
    DIVISION        reduce using rule 437 (output_list_index -> empty .)
    MODULO          reduce using rule 437 (output_list_index -> empty .)
    EXPONENT        reduce using rule 437 (output_list_index -> empty .)
    GT              reduce using rule 437 (output_list_index -> empty .)
    LT              reduce using rule 437 (output_list_index -> empty .)
    EQ_EQ           reduce using rule 437 (output_list_index -> empty .)
    GT_EQ           reduce using rule 437 (output_list_index -> empty .)
    LT_EQ           reduce using rule 437 (output_list_index -> empty .)
    NOT_EQ          reduce using rule 437 (output_list_index -> empty .)
    AND             reduce using rule 437 (output_list_index -> empty .)
    OR              reduce using rule 437 (output_list_index -> empty .)
    COMMA           reduce using rule 437 (output_list_index -> empty .)
    NEWLINE         reduce using rule 437 (output_list_index -> empty .)
    RPAREN          reduce using rule 437 (output_list_index -> empty .)


state 518

    (245) condition_factor -> LPAREN . condition RPAREN
    (240) condition -> . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition                      shift and go to state 669
    condition_factor               shift and go to state 520
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 519

    (237) conditional_statement -> CHECK LPAREN condition . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 670


state 520

    (240) condition -> condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 671
    empty                          shift and go to state 686

state 521

    (241) condition_factor -> condition_var_call . condition_postfix
    (249) condition_postfix -> . empty
    (250) condition_postfix -> . condition_postfix_op
    (567) empty -> .
    (247) condition_postfix_op -> . PLUS_PLUS
    (248) condition_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 690
    MINUS_MINUS     shift and go to state 691

    condition_postfix              shift and go to state 687
    empty                          shift and go to state 688
    condition_postfix_op           shift and go to state 689

state 522

    (242) condition_factor -> condition1 .

    PLUS            reduce using rule 242 (condition_factor -> condition1 .)
    MINUS           reduce using rule 242 (condition_factor -> condition1 .)
    MULTIPLY        reduce using rule 242 (condition_factor -> condition1 .)
    DIVISION        reduce using rule 242 (condition_factor -> condition1 .)
    MODULO          reduce using rule 242 (condition_factor -> condition1 .)
    EXPONENT        reduce using rule 242 (condition_factor -> condition1 .)
    GT              reduce using rule 242 (condition_factor -> condition1 .)
    LT              reduce using rule 242 (condition_factor -> condition1 .)
    EQ_EQ           reduce using rule 242 (condition_factor -> condition1 .)
    GT_EQ           reduce using rule 242 (condition_factor -> condition1 .)
    LT_EQ           reduce using rule 242 (condition_factor -> condition1 .)
    NOT_EQ          reduce using rule 242 (condition_factor -> condition1 .)
    AND             reduce using rule 242 (condition_factor -> condition1 .)
    OR              reduce using rule 242 (condition_factor -> condition1 .)
    RPAREN          reduce using rule 242 (condition_factor -> condition1 .)


state 523

    (243) condition_factor -> TILDE . INT_LIT
    (244) condition_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 692
    FLT_LIT         shift and go to state 693


state 524

    (272) condition1 -> INT_LIT .

    PLUS            reduce using rule 272 (condition1 -> INT_LIT .)
    MINUS           reduce using rule 272 (condition1 -> INT_LIT .)
    MULTIPLY        reduce using rule 272 (condition1 -> INT_LIT .)
    DIVISION        reduce using rule 272 (condition1 -> INT_LIT .)
    MODULO          reduce using rule 272 (condition1 -> INT_LIT .)
    EXPONENT        reduce using rule 272 (condition1 -> INT_LIT .)
    GT              reduce using rule 272 (condition1 -> INT_LIT .)
    LT              reduce using rule 272 (condition1 -> INT_LIT .)
    EQ_EQ           reduce using rule 272 (condition1 -> INT_LIT .)
    GT_EQ           reduce using rule 272 (condition1 -> INT_LIT .)
    LT_EQ           reduce using rule 272 (condition1 -> INT_LIT .)
    NOT_EQ          reduce using rule 272 (condition1 -> INT_LIT .)
    AND             reduce using rule 272 (condition1 -> INT_LIT .)
    OR              reduce using rule 272 (condition1 -> INT_LIT .)
    RPAREN          reduce using rule 272 (condition1 -> INT_LIT .)


state 525

    (273) condition1 -> FLT_LIT .

    PLUS            reduce using rule 273 (condition1 -> FLT_LIT .)
    MINUS           reduce using rule 273 (condition1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 273 (condition1 -> FLT_LIT .)
    DIVISION        reduce using rule 273 (condition1 -> FLT_LIT .)
    MODULO          reduce using rule 273 (condition1 -> FLT_LIT .)
    EXPONENT        reduce using rule 273 (condition1 -> FLT_LIT .)
    GT              reduce using rule 273 (condition1 -> FLT_LIT .)
    LT              reduce using rule 273 (condition1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 273 (condition1 -> FLT_LIT .)
    GT_EQ           reduce using rule 273 (condition1 -> FLT_LIT .)
    LT_EQ           reduce using rule 273 (condition1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 273 (condition1 -> FLT_LIT .)
    AND             reduce using rule 273 (condition1 -> FLT_LIT .)
    OR              reduce using rule 273 (condition1 -> FLT_LIT .)
    RPAREN          reduce using rule 273 (condition1 -> FLT_LIT .)


state 526

    (246) condition_var_call -> IDENT . condition_list_index
    (251) condition_list_index -> . LBRACKET condition_index RBRACKET condition_list_index2
    (252) condition_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 695
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    condition_list_index           shift and go to state 694
    empty                          shift and go to state 696

state 527

    (274) condition1 -> DAY .

    PLUS            reduce using rule 274 (condition1 -> DAY .)
    MINUS           reduce using rule 274 (condition1 -> DAY .)
    MULTIPLY        reduce using rule 274 (condition1 -> DAY .)
    DIVISION        reduce using rule 274 (condition1 -> DAY .)
    MODULO          reduce using rule 274 (condition1 -> DAY .)
    EXPONENT        reduce using rule 274 (condition1 -> DAY .)
    GT              reduce using rule 274 (condition1 -> DAY .)
    LT              reduce using rule 274 (condition1 -> DAY .)
    EQ_EQ           reduce using rule 274 (condition1 -> DAY .)
    GT_EQ           reduce using rule 274 (condition1 -> DAY .)
    LT_EQ           reduce using rule 274 (condition1 -> DAY .)
    NOT_EQ          reduce using rule 274 (condition1 -> DAY .)
    AND             reduce using rule 274 (condition1 -> DAY .)
    OR              reduce using rule 274 (condition1 -> DAY .)
    RPAREN          reduce using rule 274 (condition1 -> DAY .)


state 528

    (275) condition1 -> NIGHT .

    PLUS            reduce using rule 275 (condition1 -> NIGHT .)
    MINUS           reduce using rule 275 (condition1 -> NIGHT .)
    MULTIPLY        reduce using rule 275 (condition1 -> NIGHT .)
    DIVISION        reduce using rule 275 (condition1 -> NIGHT .)
    MODULO          reduce using rule 275 (condition1 -> NIGHT .)
    EXPONENT        reduce using rule 275 (condition1 -> NIGHT .)
    GT              reduce using rule 275 (condition1 -> NIGHT .)
    LT              reduce using rule 275 (condition1 -> NIGHT .)
    EQ_EQ           reduce using rule 275 (condition1 -> NIGHT .)
    GT_EQ           reduce using rule 275 (condition1 -> NIGHT .)
    LT_EQ           reduce using rule 275 (condition1 -> NIGHT .)
    NOT_EQ          reduce using rule 275 (condition1 -> NIGHT .)
    AND             reduce using rule 275 (condition1 -> NIGHT .)
    OR              reduce using rule 275 (condition1 -> NIGHT .)
    RPAREN          reduce using rule 275 (condition1 -> NIGHT .)


state 529

    (276) condition1 -> STR_LIT .

    PLUS            reduce using rule 276 (condition1 -> STR_LIT .)
    MINUS           reduce using rule 276 (condition1 -> STR_LIT .)
    MULTIPLY        reduce using rule 276 (condition1 -> STR_LIT .)
    DIVISION        reduce using rule 276 (condition1 -> STR_LIT .)
    MODULO          reduce using rule 276 (condition1 -> STR_LIT .)
    EXPONENT        reduce using rule 276 (condition1 -> STR_LIT .)
    GT              reduce using rule 276 (condition1 -> STR_LIT .)
    LT              reduce using rule 276 (condition1 -> STR_LIT .)
    EQ_EQ           reduce using rule 276 (condition1 -> STR_LIT .)
    GT_EQ           reduce using rule 276 (condition1 -> STR_LIT .)
    LT_EQ           reduce using rule 276 (condition1 -> STR_LIT .)
    NOT_EQ          reduce using rule 276 (condition1 -> STR_LIT .)
    AND             reduce using rule 276 (condition1 -> STR_LIT .)
    OR              reduce using rule 276 (condition1 -> STR_LIT .)
    RPAREN          reduce using rule 276 (condition1 -> STR_LIT .)


state 530

    (328) for_loop -> FOR LPAREN control_variable . SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 697


state 531

    (405) control_variable -> INT . IDENT EQ control_var_tail

    IDENT           shift and go to state 698


state 532

    (372) until_factor -> LPAREN . until_factor RPAREN
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 699
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 533

    (366) until_loop -> UNTIL LPAREN until_expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 700


state 534

    (367) until_expression -> until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 701
    empty                          shift and go to state 716

state 535

    (368) until_factor -> until_var_call . until_postfix
    (376) until_postfix -> . empty
    (377) until_postfix -> . until_postfix_op
    (567) empty -> .
    (374) until_postfix_op -> . PLUS_PLUS
    (375) until_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 720
    MINUS_MINUS     shift and go to state 721

    until_postfix                  shift and go to state 717
    empty                          shift and go to state 718
    until_postfix_op               shift and go to state 719

state 536

    (369) until_factor -> until_factor1 .

    PLUS            reduce using rule 369 (until_factor -> until_factor1 .)
    MINUS           reduce using rule 369 (until_factor -> until_factor1 .)
    MULTIPLY        reduce using rule 369 (until_factor -> until_factor1 .)
    DIVISION        reduce using rule 369 (until_factor -> until_factor1 .)
    MODULO          reduce using rule 369 (until_factor -> until_factor1 .)
    EXPONENT        reduce using rule 369 (until_factor -> until_factor1 .)
    GT              reduce using rule 369 (until_factor -> until_factor1 .)
    LT              reduce using rule 369 (until_factor -> until_factor1 .)
    EQ_EQ           reduce using rule 369 (until_factor -> until_factor1 .)
    GT_EQ           reduce using rule 369 (until_factor -> until_factor1 .)
    LT_EQ           reduce using rule 369 (until_factor -> until_factor1 .)
    NOT_EQ          reduce using rule 369 (until_factor -> until_factor1 .)
    AND             reduce using rule 369 (until_factor -> until_factor1 .)
    OR              reduce using rule 369 (until_factor -> until_factor1 .)
    RPAREN          reduce using rule 369 (until_factor -> until_factor1 .)


state 537

    (370) until_factor -> TILDE . INT_LIT
    (371) until_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 722
    FLT_LIT         shift and go to state 723


state 538

    (399) until_factor1 -> INT_LIT .

    PLUS            reduce using rule 399 (until_factor1 -> INT_LIT .)
    MINUS           reduce using rule 399 (until_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 399 (until_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 399 (until_factor1 -> INT_LIT .)
    MODULO          reduce using rule 399 (until_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 399 (until_factor1 -> INT_LIT .)
    GT              reduce using rule 399 (until_factor1 -> INT_LIT .)
    LT              reduce using rule 399 (until_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 399 (until_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 399 (until_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 399 (until_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 399 (until_factor1 -> INT_LIT .)
    AND             reduce using rule 399 (until_factor1 -> INT_LIT .)
    OR              reduce using rule 399 (until_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 399 (until_factor1 -> INT_LIT .)


state 539

    (400) until_factor1 -> FLT_LIT .

    PLUS            reduce using rule 400 (until_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 400 (until_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 400 (until_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 400 (until_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 400 (until_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 400 (until_factor1 -> FLT_LIT .)
    GT              reduce using rule 400 (until_factor1 -> FLT_LIT .)
    LT              reduce using rule 400 (until_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 400 (until_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 400 (until_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 400 (until_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 400 (until_factor1 -> FLT_LIT .)
    AND             reduce using rule 400 (until_factor1 -> FLT_LIT .)
    OR              reduce using rule 400 (until_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 400 (until_factor1 -> FLT_LIT .)


state 540

    (373) until_var_call -> IDENT . until_list_index
    (378) until_list_index -> . LBRACKET until_index RBRACKET until_list_index2
    (379) until_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 725
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    until_list_index               shift and go to state 724
    empty                          shift and go to state 726

state 541

    (401) until_factor1 -> DAY .

    PLUS            reduce using rule 401 (until_factor1 -> DAY .)
    MINUS           reduce using rule 401 (until_factor1 -> DAY .)
    MULTIPLY        reduce using rule 401 (until_factor1 -> DAY .)
    DIVISION        reduce using rule 401 (until_factor1 -> DAY .)
    MODULO          reduce using rule 401 (until_factor1 -> DAY .)
    EXPONENT        reduce using rule 401 (until_factor1 -> DAY .)
    GT              reduce using rule 401 (until_factor1 -> DAY .)
    LT              reduce using rule 401 (until_factor1 -> DAY .)
    EQ_EQ           reduce using rule 401 (until_factor1 -> DAY .)
    GT_EQ           reduce using rule 401 (until_factor1 -> DAY .)
    LT_EQ           reduce using rule 401 (until_factor1 -> DAY .)
    NOT_EQ          reduce using rule 401 (until_factor1 -> DAY .)
    AND             reduce using rule 401 (until_factor1 -> DAY .)
    OR              reduce using rule 401 (until_factor1 -> DAY .)
    RPAREN          reduce using rule 401 (until_factor1 -> DAY .)


state 542

    (402) until_factor1 -> NIGHT .

    PLUS            reduce using rule 402 (until_factor1 -> NIGHT .)
    MINUS           reduce using rule 402 (until_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 402 (until_factor1 -> NIGHT .)
    DIVISION        reduce using rule 402 (until_factor1 -> NIGHT .)
    MODULO          reduce using rule 402 (until_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 402 (until_factor1 -> NIGHT .)
    GT              reduce using rule 402 (until_factor1 -> NIGHT .)
    LT              reduce using rule 402 (until_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 402 (until_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 402 (until_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 402 (until_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 402 (until_factor1 -> NIGHT .)
    AND             reduce using rule 402 (until_factor1 -> NIGHT .)
    OR              reduce using rule 402 (until_factor1 -> NIGHT .)
    RPAREN          reduce using rule 402 (until_factor1 -> NIGHT .)


state 543

    (403) until_factor1 -> STR_LIT .

    PLUS            reduce using rule 403 (until_factor1 -> STR_LIT .)
    MINUS           reduce using rule 403 (until_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 403 (until_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 403 (until_factor1 -> STR_LIT .)
    MODULO          reduce using rule 403 (until_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 403 (until_factor1 -> STR_LIT .)
    GT              reduce using rule 403 (until_factor1 -> STR_LIT .)
    LT              reduce using rule 403 (until_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 403 (until_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 403 (until_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 403 (until_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 403 (until_factor1 -> STR_LIT .)
    AND             reduce using rule 403 (until_factor1 -> STR_LIT .)
    OR              reduce using rule 403 (until_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 403 (until_factor1 -> STR_LIT .)


state 544

    (404) repeat_until -> REPEAT LBRACE statements . RBRACE UNTIL LPAREN until_expression RPAREN

    RBRACE          shift and go to state 727


state 545

    (566) input_statement -> INPUT LPAREN RPAREN .

    NEWLINE         reduce using rule 566 (input_statement -> INPUT LPAREN RPAREN .)
    COMMA           reduce using rule 566 (input_statement -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 566 (input_statement -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 566 (input_statement -> INPUT LPAREN RPAREN .)
    COLON           reduce using rule 566 (input_statement -> INPUT LPAREN RPAREN .)


state 546

    (189) local_dec_tail2 -> COMMA IDENT . local_dec_tail
    (186) local_dec_tail -> . empty
    (187) local_dec_tail -> . COMMA IDENT local_dec_tail
    (188) local_dec_tail -> . EQ local_value local_dec_tail2
    (567) empty -> .

    COMMA           shift and go to state 265
    EQ              shift and go to state 266
    NEWLINE         reduce using rule 567 (empty -> .)

    local_dec_tail                 shift and go to state 728
    empty                          shift and go to state 264

state 547

    (545) typecast_factor -> LPAREN . typecast_factor RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 729
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 548

    (233) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 730


state 549

    (537) typecast_value -> typecast_expression .

    RPAREN          reduce using rule 537 (typecast_value -> typecast_expression .)


state 550

    (538) typecast_value -> FUNCTION_NAME . LPAREN RPAREN

    LPAREN          shift and go to state 731


state 551

    (539) typecast_value -> input_statement .

    RPAREN          reduce using rule 539 (typecast_value -> input_statement .)


state 552

    (540) typecast_expression -> typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 732
    empty                          shift and go to state 747

state 553

    (541) typecast_factor -> var_call . postfix
    (491) postfix -> . empty
    (492) postfix -> . postfix_op
    (567) empty -> .
    (411) postfix_op -> . PLUS_PLUS
    (412) postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 93
    MINUS_MINUS     shift and go to state 94

    postfix                        shift and go to state 748
    empty                          shift and go to state 91
    postfix_op                     shift and go to state 92

state 554

    (542) typecast_factor -> typecast_factor1 .

    PLUS            reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    MINUS           reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    MULTIPLY        reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    DIVISION        reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    MODULO          reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    EXPONENT        reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    GT              reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    LT              reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    EQ_EQ           reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    GT_EQ           reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    LT_EQ           reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    NOT_EQ          reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    AND             reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    OR              reduce using rule 542 (typecast_factor -> typecast_factor1 .)
    RPAREN          reduce using rule 542 (typecast_factor -> typecast_factor1 .)


state 555

    (543) typecast_factor -> TILDE . INT_LIT
    (544) typecast_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 749
    FLT_LIT         shift and go to state 750


state 556

    (561) typecast_factor1 -> INT_LIT .

    PLUS            reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    MINUS           reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    MODULO          reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    GT              reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    LT              reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    AND             reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    OR              reduce using rule 561 (typecast_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 561 (typecast_factor1 -> INT_LIT .)


state 557

    (562) typecast_factor1 -> FLT_LIT .

    PLUS            reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    GT              reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    LT              reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    AND             reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    OR              reduce using rule 562 (typecast_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 562 (typecast_factor1 -> FLT_LIT .)


state 558

    (563) typecast_factor1 -> DAY .

    PLUS            reduce using rule 563 (typecast_factor1 -> DAY .)
    MINUS           reduce using rule 563 (typecast_factor1 -> DAY .)
    MULTIPLY        reduce using rule 563 (typecast_factor1 -> DAY .)
    DIVISION        reduce using rule 563 (typecast_factor1 -> DAY .)
    MODULO          reduce using rule 563 (typecast_factor1 -> DAY .)
    EXPONENT        reduce using rule 563 (typecast_factor1 -> DAY .)
    GT              reduce using rule 563 (typecast_factor1 -> DAY .)
    LT              reduce using rule 563 (typecast_factor1 -> DAY .)
    EQ_EQ           reduce using rule 563 (typecast_factor1 -> DAY .)
    GT_EQ           reduce using rule 563 (typecast_factor1 -> DAY .)
    LT_EQ           reduce using rule 563 (typecast_factor1 -> DAY .)
    NOT_EQ          reduce using rule 563 (typecast_factor1 -> DAY .)
    AND             reduce using rule 563 (typecast_factor1 -> DAY .)
    OR              reduce using rule 563 (typecast_factor1 -> DAY .)
    RPAREN          reduce using rule 563 (typecast_factor1 -> DAY .)


state 559

    (564) typecast_factor1 -> NIGHT .

    PLUS            reduce using rule 564 (typecast_factor1 -> NIGHT .)
    MINUS           reduce using rule 564 (typecast_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 564 (typecast_factor1 -> NIGHT .)
    DIVISION        reduce using rule 564 (typecast_factor1 -> NIGHT .)
    MODULO          reduce using rule 564 (typecast_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 564 (typecast_factor1 -> NIGHT .)
    GT              reduce using rule 564 (typecast_factor1 -> NIGHT .)
    LT              reduce using rule 564 (typecast_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 564 (typecast_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 564 (typecast_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 564 (typecast_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 564 (typecast_factor1 -> NIGHT .)
    AND             reduce using rule 564 (typecast_factor1 -> NIGHT .)
    OR              reduce using rule 564 (typecast_factor1 -> NIGHT .)
    RPAREN          reduce using rule 564 (typecast_factor1 -> NIGHT .)


state 560

    (565) typecast_factor1 -> STR_LIT .

    PLUS            reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    MINUS           reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    MODULO          reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    GT              reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    LT              reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    AND             reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    OR              reduce using rule 565 (typecast_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 565 (typecast_factor1 -> STR_LIT .)


state 561

    (201) local_factor -> LPAREN local_factor RPAREN .

    PLUS            reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    MINUS           reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    MULTIPLY        reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    DIVISION        reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    MODULO          reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    EXPONENT        reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    GT              reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    LT              reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    EQ_EQ           reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    GT_EQ           reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    LT_EQ           reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    NOT_EQ          reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    AND             reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    OR              reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    COMMA           reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    NEWLINE         reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)
    RPAREN          reduce using rule 201 (local_factor -> LPAREN local_factor RPAREN .)


state 562

    (234) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 751


state 563

    (235) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 752


state 564

    (236) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 753


state 565

    (213) local_factor_tail -> PLUS local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 754
    empty                          shift and go to state 407

state 566

    (214) local_factor_tail -> MINUS local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 755
    empty                          shift and go to state 407

state 567

    (215) local_factor_tail -> MULTIPLY local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 756
    empty                          shift and go to state 407

state 568

    (216) local_factor_tail -> DIVISION local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 757
    empty                          shift and go to state 407

state 569

    (217) local_factor_tail -> MODULO local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 758
    empty                          shift and go to state 407

state 570

    (218) local_factor_tail -> EXPONENT local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 759
    empty                          shift and go to state 407

state 571

    (219) local_factor_tail -> GT local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 760
    empty                          shift and go to state 407

state 572

    (220) local_factor_tail -> LT local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 761
    empty                          shift and go to state 407

state 573

    (221) local_factor_tail -> EQ_EQ local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 762
    empty                          shift and go to state 407

state 574

    (222) local_factor_tail -> GT_EQ local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 763
    empty                          shift and go to state 407

state 575

    (223) local_factor_tail -> LT_EQ local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 764
    empty                          shift and go to state 407

state 576

    (224) local_factor_tail -> NOT_EQ local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 765
    empty                          shift and go to state 407

state 577

    (225) local_factor_tail -> AND local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 766
    empty                          shift and go to state 407

state 578

    (226) local_factor_tail -> OR local_factor . local_factor_tail
    (213) local_factor_tail -> . PLUS local_factor local_factor_tail
    (214) local_factor_tail -> . MINUS local_factor local_factor_tail
    (215) local_factor_tail -> . MULTIPLY local_factor local_factor_tail
    (216) local_factor_tail -> . DIVISION local_factor local_factor_tail
    (217) local_factor_tail -> . MODULO local_factor local_factor_tail
    (218) local_factor_tail -> . EXPONENT local_factor local_factor_tail
    (219) local_factor_tail -> . GT local_factor local_factor_tail
    (220) local_factor_tail -> . LT local_factor local_factor_tail
    (221) local_factor_tail -> . EQ_EQ local_factor local_factor_tail
    (222) local_factor_tail -> . GT_EQ local_factor local_factor_tail
    (223) local_factor_tail -> . LT_EQ local_factor local_factor_tail
    (224) local_factor_tail -> . NOT_EQ local_factor local_factor_tail
    (225) local_factor_tail -> . AND local_factor local_factor_tail
    (226) local_factor_tail -> . OR local_factor local_factor_tail
    (227) local_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 393
    MINUS           shift and go to state 394
    MULTIPLY        shift and go to state 395
    DIVISION        shift and go to state 396
    MODULO          shift and go to state 397
    EXPONENT        shift and go to state 398
    GT              shift and go to state 399
    LT              shift and go to state 400
    EQ_EQ           shift and go to state 401
    GT_EQ           shift and go to state 402
    LT_EQ           shift and go to state 403
    NOT_EQ          shift and go to state 404
    AND             shift and go to state 405
    OR              shift and go to state 406
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    local_factor_tail              shift and go to state 767
    empty                          shift and go to state 407

state 579

    (207) local_list_index -> LBRACKET local_index . RBRACKET local_list_index2

    RBRACKET        shift and go to state 768


state 580

    (211) local_index -> INT_LIT .

    RBRACKET        reduce using rule 211 (local_index -> INT_LIT .)


state 581

    (212) local_index -> IDENT .

    RBRACKET        reduce using rule 212 (local_index -> IDENT .)


state 582

    (185) local_2d_list -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 769


state 583

    (183) local_list_dec -> LBRACKET RBRACKET local_2d_list .

    COMMA           reduce using rule 183 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)
    EQ              reduce using rule 183 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)
    NEWLINE         reduce using rule 183 (local_list_dec -> LBRACKET RBRACKET local_2d_list .)


state 584

    (184) local_2d_list -> empty .

    COMMA           reduce using rule 184 (local_2d_list -> empty .)
    EQ              reduce using rule 184 (local_2d_list -> empty .)
    NEWLINE         reduce using rule 184 (local_2d_list -> empty .)


state 585

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline . function_statements_tail
    (101) function_statements_tail -> . function_statements
    (102) function_statements_tail -> . empty
    (99) function_statements -> . ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail
    (100) function_statements -> . empty
    (567) empty -> .
    (103) ret_type -> . FUNCTION
    (104) ret_type -> . function_dtype
    (105) function_dtype -> . FUNCTION_INT
    (106) function_dtype -> . FUNCTION_FLT
    (107) function_dtype -> . FUNCTION_CHR
    (108) function_dtype -> . FUNCTION_BLN
    (109) function_dtype -> . FUNCTION_STR
    (110) function_dtype -> . FUNCTION_LIST_INT
    (111) function_dtype -> . FUNCTION_LIST_FLT
    (112) function_dtype -> . FUNCTION_LIST_CHR
    (113) function_dtype -> . FUNCTION_LIST_STR
    (114) function_dtype -> . FUNCTION_LIST_BLN

    NEWLINE         reduce using rule 567 (empty -> .)
    MAIN_CASPER     reduce using rule 567 (empty -> .)
    FUNCTION        shift and go to state 28
    FUNCTION_INT    shift and go to state 30
    FUNCTION_FLT    shift and go to state 31
    FUNCTION_CHR    shift and go to state 32
    FUNCTION_BLN    shift and go to state 33
    FUNCTION_STR    shift and go to state 34
    FUNCTION_LIST_INT shift and go to state 35
    FUNCTION_LIST_FLT shift and go to state 36
    FUNCTION_LIST_CHR shift and go to state 37
    FUNCTION_LIST_STR shift and go to state 38
    FUNCTION_LIST_BLN shift and go to state 39

    ret_type                       shift and go to state 26
    function_statements_tail       shift and go to state 770
    function_statements            shift and go to state 771
    empty                          shift and go to state 772
    function_dtype                 shift and go to state 29

state 586

    (161) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 773


state 587

    (129) revive_factor -> LPAREN revive_factor RPAREN .

    PLUS            reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    MINUS           reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    MULTIPLY        reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    DIVISION        reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    MODULO          reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    EXPONENT        reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT              reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT              reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    EQ_EQ           reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    GT_EQ           reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    LT_EQ           reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    NOT_EQ          reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    AND             reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    OR              reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    NEWLINE         reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    RBRACE          reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)
    RPAREN          reduce using rule 129 (revive_factor -> LPAREN revive_factor RPAREN .)


state 588

    (162) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 774


state 589

    (163) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 775


state 590

    (164) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 776


state 591

    (141) revive_factor_tail -> PLUS revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 777
    empty                          shift and go to state 440

state 592

    (142) revive_factor_tail -> MINUS revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 778
    empty                          shift and go to state 440

state 593

    (143) revive_factor_tail -> MULTIPLY revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 779
    empty                          shift and go to state 440

state 594

    (144) revive_factor_tail -> DIVISION revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 780
    empty                          shift and go to state 440

state 595

    (145) revive_factor_tail -> MODULO revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 781
    empty                          shift and go to state 440

state 596

    (146) revive_factor_tail -> EXPONENT revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 782
    empty                          shift and go to state 440

state 597

    (147) revive_factor_tail -> GT revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 783
    empty                          shift and go to state 440

state 598

    (148) revive_factor_tail -> LT revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 784
    empty                          shift and go to state 440

state 599

    (149) revive_factor_tail -> EQ_EQ revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 785
    empty                          shift and go to state 440

state 600

    (150) revive_factor_tail -> GT_EQ revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 786
    empty                          shift and go to state 440

state 601

    (151) revive_factor_tail -> LT_EQ revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 787
    empty                          shift and go to state 440

state 602

    (152) revive_factor_tail -> NOT_EQ revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 788
    empty                          shift and go to state 440

state 603

    (153) revive_factor_tail -> AND revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 789
    empty                          shift and go to state 440

state 604

    (154) revive_factor_tail -> OR revive_factor . revive_factor_tail
    (141) revive_factor_tail -> . PLUS revive_factor revive_factor_tail
    (142) revive_factor_tail -> . MINUS revive_factor revive_factor_tail
    (143) revive_factor_tail -> . MULTIPLY revive_factor revive_factor_tail
    (144) revive_factor_tail -> . DIVISION revive_factor revive_factor_tail
    (145) revive_factor_tail -> . MODULO revive_factor revive_factor_tail
    (146) revive_factor_tail -> . EXPONENT revive_factor revive_factor_tail
    (147) revive_factor_tail -> . GT revive_factor revive_factor_tail
    (148) revive_factor_tail -> . LT revive_factor revive_factor_tail
    (149) revive_factor_tail -> . EQ_EQ revive_factor revive_factor_tail
    (150) revive_factor_tail -> . GT_EQ revive_factor revive_factor_tail
    (151) revive_factor_tail -> . LT_EQ revive_factor revive_factor_tail
    (152) revive_factor_tail -> . NOT_EQ revive_factor revive_factor_tail
    (153) revive_factor_tail -> . AND revive_factor revive_factor_tail
    (154) revive_factor_tail -> . OR revive_factor revive_factor_tail
    (155) revive_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 426
    MINUS           shift and go to state 427
    MULTIPLY        shift and go to state 428
    DIVISION        shift and go to state 429
    MODULO          shift and go to state 430
    EXPONENT        shift and go to state 431
    GT              shift and go to state 432
    LT              shift and go to state 433
    EQ_EQ           shift and go to state 434
    GT_EQ           shift and go to state 435
    LT_EQ           shift and go to state 436
    NOT_EQ          shift and go to state 437
    AND             shift and go to state 438
    OR              shift and go to state 439
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)

    revive_factor_tail             shift and go to state 790
    empty                          shift and go to state 440

state 605

    (135) revive_list_index -> LBRACKET revive_index . RBRACKET revive_list_index2

    RBRACKET        shift and go to state 791


state 606

    (139) revive_index -> INT_LIT .

    RBRACKET        reduce using rule 139 (revive_index -> INT_LIT .)


state 607

    (140) revive_index -> IDENT .

    RBRACKET        reduce using rule 140 (revive_index -> IDENT .)


state 608

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN . LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    LBRACE          shift and go to state 792


state 609

    (469) assign_tail -> DOT SPLICE LPAREN . start COMMA deleteCount COMMA splice_items RPAREN
    (479) start -> . INT_LIT

    INT_LIT         shift and go to state 794

    start                          shift and go to state 793

state 610

    (470) assign_tail -> DOT PUSH LPAREN . list_element RPAREN
    (24) list_element -> . literal element_tail
    (25) list_element -> . list_value element_tail
    (91) literal -> . literal1
    (92) literal -> . literal2
    (23) list_value -> . LBRACKET list_element RBRACKET
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT
    (98) literal2 -> . CHR_LIT

    LBRACKET        shift and go to state 48
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 89

    list_element                   shift and go to state 795
    literal                        shift and go to state 85
    list_value                     shift and go to state 86
    literal1                       shift and go to state 87
    literal2                       shift and go to state 88

state 611

    (533) type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 796
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 612

    (501) value_factor -> LPAREN value_factor . RPAREN

    RPAREN          shift and go to state 797


state 613

    (534) type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 798
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 614

    (535) type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 799
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 615

    (536) type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 800
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 616

    (496) value_expression -> value_factor value_factor_tail .

    NEWLINE         reduce using rule 496 (value_expression -> value_factor value_factor_tail .)
    COMMA           reduce using rule 496 (value_expression -> value_factor value_factor_tail .)
    RPAREN          reduce using rule 496 (value_expression -> value_factor value_factor_tail .)


state 617

    (513) value_factor_tail -> PLUS . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 801
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 618

    (514) value_factor_tail -> MINUS . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 802
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 619

    (515) value_factor_tail -> MULTIPLY . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 803
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 620

    (516) value_factor_tail -> DIVISION . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 804
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 621

    (517) value_factor_tail -> MODULO . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 805
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 622

    (518) value_factor_tail -> EXPONENT . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 806
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 623

    (519) value_factor_tail -> GT . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 807
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 624

    (520) value_factor_tail -> LT . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 808
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 625

    (521) value_factor_tail -> EQ_EQ . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 809
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 626

    (522) value_factor_tail -> GT_EQ . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 810
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 627

    (523) value_factor_tail -> LT_EQ . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 811
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 628

    (524) value_factor_tail -> NOT_EQ . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 812
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 629

    (525) value_factor_tail -> AND . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 813
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 630

    (526) value_factor_tail -> OR . value_factor value_factor_tail
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value_factor                   shift and go to state 814
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 631

    (527) value_factor_tail -> empty .

    NEWLINE         reduce using rule 527 (value_factor_tail -> empty .)
    COMMA           reduce using rule 527 (value_factor_tail -> empty .)
    RPAREN          reduce using rule 527 (value_factor_tail -> empty .)


state 632

    (497) value_factor -> value_var_call value_postfix .

    PLUS            reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    MINUS           reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    MULTIPLY        reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    DIVISION        reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    MODULO          reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    EXPONENT        reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    GT              reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    LT              reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    EQ_EQ           reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    GT_EQ           reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    LT_EQ           reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    NOT_EQ          reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    AND             reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    OR              reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    NEWLINE         reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    RPAREN          reduce using rule 497 (value_factor -> value_var_call value_postfix .)
    COMMA           reduce using rule 497 (value_factor -> value_var_call value_postfix .)


state 633

    (505) value_postfix -> empty .

    PLUS            reduce using rule 505 (value_postfix -> empty .)
    MINUS           reduce using rule 505 (value_postfix -> empty .)
    MULTIPLY        reduce using rule 505 (value_postfix -> empty .)
    DIVISION        reduce using rule 505 (value_postfix -> empty .)
    MODULO          reduce using rule 505 (value_postfix -> empty .)
    EXPONENT        reduce using rule 505 (value_postfix -> empty .)
    GT              reduce using rule 505 (value_postfix -> empty .)
    LT              reduce using rule 505 (value_postfix -> empty .)
    EQ_EQ           reduce using rule 505 (value_postfix -> empty .)
    GT_EQ           reduce using rule 505 (value_postfix -> empty .)
    LT_EQ           reduce using rule 505 (value_postfix -> empty .)
    NOT_EQ          reduce using rule 505 (value_postfix -> empty .)
    AND             reduce using rule 505 (value_postfix -> empty .)
    OR              reduce using rule 505 (value_postfix -> empty .)
    NEWLINE         reduce using rule 505 (value_postfix -> empty .)
    RPAREN          reduce using rule 505 (value_postfix -> empty .)
    COMMA           reduce using rule 505 (value_postfix -> empty .)


state 634

    (506) value_postfix -> value_postfix_op .

    PLUS            reduce using rule 506 (value_postfix -> value_postfix_op .)
    MINUS           reduce using rule 506 (value_postfix -> value_postfix_op .)
    MULTIPLY        reduce using rule 506 (value_postfix -> value_postfix_op .)
    DIVISION        reduce using rule 506 (value_postfix -> value_postfix_op .)
    MODULO          reduce using rule 506 (value_postfix -> value_postfix_op .)
    EXPONENT        reduce using rule 506 (value_postfix -> value_postfix_op .)
    GT              reduce using rule 506 (value_postfix -> value_postfix_op .)
    LT              reduce using rule 506 (value_postfix -> value_postfix_op .)
    EQ_EQ           reduce using rule 506 (value_postfix -> value_postfix_op .)
    GT_EQ           reduce using rule 506 (value_postfix -> value_postfix_op .)
    LT_EQ           reduce using rule 506 (value_postfix -> value_postfix_op .)
    NOT_EQ          reduce using rule 506 (value_postfix -> value_postfix_op .)
    AND             reduce using rule 506 (value_postfix -> value_postfix_op .)
    OR              reduce using rule 506 (value_postfix -> value_postfix_op .)
    NEWLINE         reduce using rule 506 (value_postfix -> value_postfix_op .)
    RPAREN          reduce using rule 506 (value_postfix -> value_postfix_op .)
    COMMA           reduce using rule 506 (value_postfix -> value_postfix_op .)


state 635

    (503) value_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    NEWLINE         reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)
    COMMA           reduce using rule 503 (value_postfix_op -> PLUS_PLUS .)


state 636

    (504) value_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    NEWLINE         reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)
    COMMA           reduce using rule 504 (value_postfix_op -> MINUS_MINUS .)


state 637

    (499) value_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    GT              reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    LT              reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    AND             reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    OR              reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    NEWLINE         reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 499 (value_factor -> TILDE INT_LIT .)
    COMMA           reduce using rule 499 (value_factor -> TILDE INT_LIT .)


state 638

    (500) value_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    NEWLINE         reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 500 (value_factor -> TILDE FLT_LIT .)
    COMMA           reduce using rule 500 (value_factor -> TILDE FLT_LIT .)


state 639

    (502) value_var_call -> IDENT value_list_index .

    PLUS_PLUS       reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    MINUS_MINUS     reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    PLUS            reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    MINUS           reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    MULTIPLY        reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    DIVISION        reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    MODULO          reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    EXPONENT        reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    GT              reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    LT              reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    EQ_EQ           reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    GT_EQ           reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    LT_EQ           reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    NOT_EQ          reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    AND             reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    OR              reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    NEWLINE         reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    RPAREN          reduce using rule 502 (value_var_call -> IDENT value_list_index .)
    COMMA           reduce using rule 502 (value_var_call -> IDENT value_list_index .)


state 640

    (507) value_list_index -> LBRACKET . value_index RBRACKET value_list_index2
    (511) value_index -> . INT_LIT
    (512) value_index -> . IDENT

    INT_LIT         shift and go to state 816
    IDENT           shift and go to state 817

    value_index                    shift and go to state 815

state 641

    (508) value_list_index -> empty .

    PLUS_PLUS       reduce using rule 508 (value_list_index -> empty .)
    MINUS_MINUS     reduce using rule 508 (value_list_index -> empty .)
    PLUS            reduce using rule 508 (value_list_index -> empty .)
    MINUS           reduce using rule 508 (value_list_index -> empty .)
    MULTIPLY        reduce using rule 508 (value_list_index -> empty .)
    DIVISION        reduce using rule 508 (value_list_index -> empty .)
    MODULO          reduce using rule 508 (value_list_index -> empty .)
    EXPONENT        reduce using rule 508 (value_list_index -> empty .)
    GT              reduce using rule 508 (value_list_index -> empty .)
    LT              reduce using rule 508 (value_list_index -> empty .)
    EQ_EQ           reduce using rule 508 (value_list_index -> empty .)
    GT_EQ           reduce using rule 508 (value_list_index -> empty .)
    LT_EQ           reduce using rule 508 (value_list_index -> empty .)
    NOT_EQ          reduce using rule 508 (value_list_index -> empty .)
    AND             reduce using rule 508 (value_list_index -> empty .)
    OR              reduce using rule 508 (value_list_index -> empty .)
    NEWLINE         reduce using rule 508 (value_list_index -> empty .)
    RPAREN          reduce using rule 508 (value_list_index -> empty .)
    COMMA           reduce using rule 508 (value_list_index -> empty .)


state 642

    (413) function_call -> FUNCTION_NAME LPAREN arguments RPAREN .

    NEWLINE         reduce using rule 413 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COMMA           reduce using rule 413 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 413 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    COLON           reduce using rule 413 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 413 (function_call -> FUNCTION_NAME LPAREN arguments RPAREN .)


state 643

    (416) arguments -> arg_value arg_tail .

    RPAREN          reduce using rule 416 (arguments -> arg_value arg_tail .)


state 644

    (417) arg_tail -> COMMA . arg_value arg_tail
    (419) arg_value -> . literal
    (420) arg_value -> . var_call
    (91) literal -> . literal1
    (92) literal -> . literal2
    (484) var_call -> . IDENT list_index
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT
    (98) literal2 -> . CHR_LIT

    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 89

    arg_value                      shift and go to state 818
    literal                        shift and go to state 482
    var_call                       shift and go to state 483
    literal1                       shift and go to state 87
    literal2                       shift and go to state 88

state 645

    (418) arg_tail -> empty .

    RPAREN          reduce using rule 418 (arg_tail -> empty .)


state 646

    (466) next_val -> COMMA value . next_val
    (466) next_val -> . COMMA value next_val
    (467) next_val -> . empty
    (567) empty -> .

    COMMA           shift and go to state 485
    NEWLINE         reduce using rule 567 (empty -> .)

    next_val                       shift and go to state 819
    empty                          shift and go to state 486

state 647

    (462) output_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 820


state 648

    (430) output_factor -> LPAREN output_factor RPAREN .

    PLUS            reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    MINUS           reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    MULTIPLY        reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    DIVISION        reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    MODULO          reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    EXPONENT        reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    GT              reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    LT              reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    EQ_EQ           reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    GT_EQ           reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    LT_EQ           reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    NOT_EQ          reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    AND             reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    OR              reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    COMMA           reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    NEWLINE         reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)
    RPAREN          reduce using rule 430 (output_factor -> LPAREN output_factor RPAREN .)


state 649

    (463) output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 821


state 650

    (464) output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 822


state 651

    (465) output_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 823


state 652

    (442) output_factor_tail -> PLUS output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 824
    empty                          shift and go to state 507

state 653

    (443) output_factor_tail -> MINUS output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 825
    empty                          shift and go to state 507

state 654

    (444) output_factor_tail -> MULTIPLY output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 826
    empty                          shift and go to state 507

state 655

    (445) output_factor_tail -> DIVISION output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 827
    empty                          shift and go to state 507

state 656

    (446) output_factor_tail -> MODULO output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 828
    empty                          shift and go to state 507

state 657

    (447) output_factor_tail -> EXPONENT output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 829
    empty                          shift and go to state 507

state 658

    (448) output_factor_tail -> GT output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 830
    empty                          shift and go to state 507

state 659

    (449) output_factor_tail -> LT output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 831
    empty                          shift and go to state 507

state 660

    (450) output_factor_tail -> EQ_EQ output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 832
    empty                          shift and go to state 507

state 661

    (451) output_factor_tail -> GT_EQ output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 833
    empty                          shift and go to state 507

state 662

    (452) output_factor_tail -> LT_EQ output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 834
    empty                          shift and go to state 507

state 663

    (453) output_factor_tail -> NOT_EQ output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 835
    empty                          shift and go to state 507

state 664

    (454) output_factor_tail -> AND output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 836
    empty                          shift and go to state 507

state 665

    (455) output_factor_tail -> OR output_factor . output_factor_tail
    (442) output_factor_tail -> . PLUS output_factor output_factor_tail
    (443) output_factor_tail -> . MINUS output_factor output_factor_tail
    (444) output_factor_tail -> . MULTIPLY output_factor output_factor_tail
    (445) output_factor_tail -> . DIVISION output_factor output_factor_tail
    (446) output_factor_tail -> . MODULO output_factor output_factor_tail
    (447) output_factor_tail -> . EXPONENT output_factor output_factor_tail
    (448) output_factor_tail -> . GT output_factor output_factor_tail
    (449) output_factor_tail -> . LT output_factor output_factor_tail
    (450) output_factor_tail -> . EQ_EQ output_factor output_factor_tail
    (451) output_factor_tail -> . GT_EQ output_factor output_factor_tail
    (452) output_factor_tail -> . LT_EQ output_factor output_factor_tail
    (453) output_factor_tail -> . NOT_EQ output_factor output_factor_tail
    (454) output_factor_tail -> . AND output_factor output_factor_tail
    (455) output_factor_tail -> . OR output_factor output_factor_tail
    (456) output_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 493
    MINUS           shift and go to state 494
    MULTIPLY        shift and go to state 495
    DIVISION        shift and go to state 496
    MODULO          shift and go to state 497
    EXPONENT        shift and go to state 498
    GT              shift and go to state 499
    LT              shift and go to state 500
    EQ_EQ           shift and go to state 501
    GT_EQ           shift and go to state 502
    LT_EQ           shift and go to state 503
    NOT_EQ          shift and go to state 504
    AND             shift and go to state 505
    OR              shift and go to state 506
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)

    output_factor_tail             shift and go to state 837
    empty                          shift and go to state 507

state 666

    (436) output_list_index -> LBRACKET output_index . RBRACKET output_list_index2

    RBRACKET        shift and go to state 838


state 667

    (440) output_index -> INT_LIT .

    RBRACKET        reduce using rule 440 (output_index -> INT_LIT .)


state 668

    (441) output_index -> IDENT .

    RBRACKET        reduce using rule 441 (output_index -> IDENT .)


state 669

    (245) condition_factor -> LPAREN condition . RPAREN

    RPAREN          shift and go to state 839


state 670

    (237) conditional_statement -> CHECK LPAREN condition RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 840


state 671

    (240) condition -> condition_factor condition_tail .

    RPAREN          reduce using rule 240 (condition -> condition_factor condition_tail .)


state 672

    (257) condition_tail -> PLUS . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 841
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 673

    (258) condition_tail -> MINUS . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 842
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 674

    (259) condition_tail -> MULTIPLY . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 843
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 675

    (260) condition_tail -> DIVISION . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 844
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 676

    (261) condition_tail -> MODULO . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 845
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 677

    (262) condition_tail -> EXPONENT . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 846
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 678

    (263) condition_tail -> GT . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 847
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 679

    (264) condition_tail -> LT . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 848
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 680

    (265) condition_tail -> EQ_EQ . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 849
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 681

    (266) condition_tail -> GT_EQ . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 850
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 682

    (267) condition_tail -> LT_EQ . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 851
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 683

    (268) condition_tail -> NOT_EQ . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 852
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 684

    (269) condition_tail -> AND . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 853
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 685

    (270) condition_tail -> OR . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition_factor               shift and go to state 854
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 686

    (271) condition_tail -> empty .

    RPAREN          reduce using rule 271 (condition_tail -> empty .)


state 687

    (241) condition_factor -> condition_var_call condition_postfix .

    PLUS            reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    MINUS           reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    MULTIPLY        reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    DIVISION        reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    MODULO          reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    EXPONENT        reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    GT              reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    LT              reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    EQ_EQ           reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    GT_EQ           reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    LT_EQ           reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    NOT_EQ          reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    AND             reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    OR              reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)
    RPAREN          reduce using rule 241 (condition_factor -> condition_var_call condition_postfix .)


state 688

    (249) condition_postfix -> empty .

    PLUS            reduce using rule 249 (condition_postfix -> empty .)
    MINUS           reduce using rule 249 (condition_postfix -> empty .)
    MULTIPLY        reduce using rule 249 (condition_postfix -> empty .)
    DIVISION        reduce using rule 249 (condition_postfix -> empty .)
    MODULO          reduce using rule 249 (condition_postfix -> empty .)
    EXPONENT        reduce using rule 249 (condition_postfix -> empty .)
    GT              reduce using rule 249 (condition_postfix -> empty .)
    LT              reduce using rule 249 (condition_postfix -> empty .)
    EQ_EQ           reduce using rule 249 (condition_postfix -> empty .)
    GT_EQ           reduce using rule 249 (condition_postfix -> empty .)
    LT_EQ           reduce using rule 249 (condition_postfix -> empty .)
    NOT_EQ          reduce using rule 249 (condition_postfix -> empty .)
    AND             reduce using rule 249 (condition_postfix -> empty .)
    OR              reduce using rule 249 (condition_postfix -> empty .)
    RPAREN          reduce using rule 249 (condition_postfix -> empty .)


state 689

    (250) condition_postfix -> condition_postfix_op .

    PLUS            reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    MINUS           reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    MULTIPLY        reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    DIVISION        reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    MODULO          reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    EXPONENT        reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    GT              reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    LT              reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    EQ_EQ           reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    GT_EQ           reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    LT_EQ           reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    NOT_EQ          reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    AND             reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    OR              reduce using rule 250 (condition_postfix -> condition_postfix_op .)
    RPAREN          reduce using rule 250 (condition_postfix -> condition_postfix_op .)


state 690

    (247) condition_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 247 (condition_postfix_op -> PLUS_PLUS .)


state 691

    (248) condition_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 248 (condition_postfix_op -> MINUS_MINUS .)


state 692

    (243) condition_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    GT              reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    LT              reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    AND             reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    OR              reduce using rule 243 (condition_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 243 (condition_factor -> TILDE INT_LIT .)


state 693

    (244) condition_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 244 (condition_factor -> TILDE FLT_LIT .)


state 694

    (246) condition_var_call -> IDENT condition_list_index .

    PLUS_PLUS       reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    MINUS_MINUS     reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    PLUS            reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    MINUS           reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    MULTIPLY        reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    DIVISION        reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    MODULO          reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    EXPONENT        reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    GT              reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    LT              reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    EQ_EQ           reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    GT_EQ           reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    LT_EQ           reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    NOT_EQ          reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    AND             reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    OR              reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)
    RPAREN          reduce using rule 246 (condition_var_call -> IDENT condition_list_index .)


state 695

    (251) condition_list_index -> LBRACKET . condition_index RBRACKET condition_list_index2
    (255) condition_index -> . INT_LIT
    (256) condition_index -> . IDENT

    INT_LIT         shift and go to state 856
    IDENT           shift and go to state 857

    condition_index                shift and go to state 855

state 696

    (252) condition_list_index -> empty .

    PLUS_PLUS       reduce using rule 252 (condition_list_index -> empty .)
    MINUS_MINUS     reduce using rule 252 (condition_list_index -> empty .)
    PLUS            reduce using rule 252 (condition_list_index -> empty .)
    MINUS           reduce using rule 252 (condition_list_index -> empty .)
    MULTIPLY        reduce using rule 252 (condition_list_index -> empty .)
    DIVISION        reduce using rule 252 (condition_list_index -> empty .)
    MODULO          reduce using rule 252 (condition_list_index -> empty .)
    EXPONENT        reduce using rule 252 (condition_list_index -> empty .)
    GT              reduce using rule 252 (condition_list_index -> empty .)
    LT              reduce using rule 252 (condition_list_index -> empty .)
    EQ_EQ           reduce using rule 252 (condition_list_index -> empty .)
    GT_EQ           reduce using rule 252 (condition_list_index -> empty .)
    LT_EQ           reduce using rule 252 (condition_list_index -> empty .)
    NOT_EQ          reduce using rule 252 (condition_list_index -> empty .)
    AND             reduce using rule 252 (condition_list_index -> empty .)
    OR              reduce using rule 252 (condition_list_index -> empty .)
    RPAREN          reduce using rule 252 (condition_list_index -> empty .)


state 697

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON . for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (329) for_expression -> . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_expression                 shift and go to state 859
    for_factor                     shift and go to state 860
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 698

    (405) control_variable -> INT IDENT . EQ control_var_tail

    EQ              shift and go to state 870


state 699

    (372) until_factor -> LPAREN until_factor . RPAREN

    RPAREN          shift and go to state 871


state 700

    (366) until_loop -> UNTIL LPAREN until_expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 872


state 701

    (367) until_expression -> until_factor until_factor_tail .

    RPAREN          reduce using rule 367 (until_expression -> until_factor until_factor_tail .)


state 702

    (384) until_factor_tail -> PLUS . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 873
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 703

    (385) until_factor_tail -> MINUS . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 874
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 704

    (386) until_factor_tail -> MULTIPLY . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 875
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 705

    (387) until_factor_tail -> DIVISION . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 876
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 706

    (388) until_factor_tail -> MODULO . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 877
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 707

    (389) until_factor_tail -> EXPONENT . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 878
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 708

    (390) until_factor_tail -> GT . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 879
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 709

    (391) until_factor_tail -> LT . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 880
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 710

    (392) until_factor_tail -> EQ_EQ . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 881
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 711

    (393) until_factor_tail -> GT_EQ . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 882
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 712

    (394) until_factor_tail -> LT_EQ . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 883
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 713

    (395) until_factor_tail -> NOT_EQ . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 884
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 714

    (396) until_factor_tail -> AND . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 885
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 715

    (397) until_factor_tail -> OR . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_factor                   shift and go to state 886
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 716

    (398) until_factor_tail -> empty .

    RPAREN          reduce using rule 398 (until_factor_tail -> empty .)


state 717

    (368) until_factor -> until_var_call until_postfix .

    PLUS            reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    MINUS           reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    MULTIPLY        reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    DIVISION        reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    MODULO          reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    EXPONENT        reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    GT              reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    LT              reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    EQ_EQ           reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    GT_EQ           reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    LT_EQ           reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    NOT_EQ          reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    AND             reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    OR              reduce using rule 368 (until_factor -> until_var_call until_postfix .)
    RPAREN          reduce using rule 368 (until_factor -> until_var_call until_postfix .)


state 718

    (376) until_postfix -> empty .

    PLUS            reduce using rule 376 (until_postfix -> empty .)
    MINUS           reduce using rule 376 (until_postfix -> empty .)
    MULTIPLY        reduce using rule 376 (until_postfix -> empty .)
    DIVISION        reduce using rule 376 (until_postfix -> empty .)
    MODULO          reduce using rule 376 (until_postfix -> empty .)
    EXPONENT        reduce using rule 376 (until_postfix -> empty .)
    GT              reduce using rule 376 (until_postfix -> empty .)
    LT              reduce using rule 376 (until_postfix -> empty .)
    EQ_EQ           reduce using rule 376 (until_postfix -> empty .)
    GT_EQ           reduce using rule 376 (until_postfix -> empty .)
    LT_EQ           reduce using rule 376 (until_postfix -> empty .)
    NOT_EQ          reduce using rule 376 (until_postfix -> empty .)
    AND             reduce using rule 376 (until_postfix -> empty .)
    OR              reduce using rule 376 (until_postfix -> empty .)
    RPAREN          reduce using rule 376 (until_postfix -> empty .)


state 719

    (377) until_postfix -> until_postfix_op .

    PLUS            reduce using rule 377 (until_postfix -> until_postfix_op .)
    MINUS           reduce using rule 377 (until_postfix -> until_postfix_op .)
    MULTIPLY        reduce using rule 377 (until_postfix -> until_postfix_op .)
    DIVISION        reduce using rule 377 (until_postfix -> until_postfix_op .)
    MODULO          reduce using rule 377 (until_postfix -> until_postfix_op .)
    EXPONENT        reduce using rule 377 (until_postfix -> until_postfix_op .)
    GT              reduce using rule 377 (until_postfix -> until_postfix_op .)
    LT              reduce using rule 377 (until_postfix -> until_postfix_op .)
    EQ_EQ           reduce using rule 377 (until_postfix -> until_postfix_op .)
    GT_EQ           reduce using rule 377 (until_postfix -> until_postfix_op .)
    LT_EQ           reduce using rule 377 (until_postfix -> until_postfix_op .)
    NOT_EQ          reduce using rule 377 (until_postfix -> until_postfix_op .)
    AND             reduce using rule 377 (until_postfix -> until_postfix_op .)
    OR              reduce using rule 377 (until_postfix -> until_postfix_op .)
    RPAREN          reduce using rule 377 (until_postfix -> until_postfix_op .)


state 720

    (374) until_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 374 (until_postfix_op -> PLUS_PLUS .)


state 721

    (375) until_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 375 (until_postfix_op -> MINUS_MINUS .)


state 722

    (370) until_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    GT              reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    LT              reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    AND             reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    OR              reduce using rule 370 (until_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 370 (until_factor -> TILDE INT_LIT .)


state 723

    (371) until_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 371 (until_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 371 (until_factor -> TILDE FLT_LIT .)


state 724

    (373) until_var_call -> IDENT until_list_index .

    PLUS_PLUS       reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    MINUS_MINUS     reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    PLUS            reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    MINUS           reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    MULTIPLY        reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    DIVISION        reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    MODULO          reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    EXPONENT        reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    GT              reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    LT              reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    EQ_EQ           reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    GT_EQ           reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    LT_EQ           reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    NOT_EQ          reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    AND             reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    OR              reduce using rule 373 (until_var_call -> IDENT until_list_index .)
    RPAREN          reduce using rule 373 (until_var_call -> IDENT until_list_index .)


state 725

    (378) until_list_index -> LBRACKET . until_index RBRACKET until_list_index2
    (382) until_index -> . INT_LIT
    (383) until_index -> . IDENT

    INT_LIT         shift and go to state 888
    IDENT           shift and go to state 889

    until_index                    shift and go to state 887

state 726

    (379) until_list_index -> empty .

    PLUS_PLUS       reduce using rule 379 (until_list_index -> empty .)
    MINUS_MINUS     reduce using rule 379 (until_list_index -> empty .)
    PLUS            reduce using rule 379 (until_list_index -> empty .)
    MINUS           reduce using rule 379 (until_list_index -> empty .)
    MULTIPLY        reduce using rule 379 (until_list_index -> empty .)
    DIVISION        reduce using rule 379 (until_list_index -> empty .)
    MODULO          reduce using rule 379 (until_list_index -> empty .)
    EXPONENT        reduce using rule 379 (until_list_index -> empty .)
    GT              reduce using rule 379 (until_list_index -> empty .)
    LT              reduce using rule 379 (until_list_index -> empty .)
    EQ_EQ           reduce using rule 379 (until_list_index -> empty .)
    GT_EQ           reduce using rule 379 (until_list_index -> empty .)
    LT_EQ           reduce using rule 379 (until_list_index -> empty .)
    NOT_EQ          reduce using rule 379 (until_list_index -> empty .)
    AND             reduce using rule 379 (until_list_index -> empty .)
    OR              reduce using rule 379 (until_list_index -> empty .)
    RPAREN          reduce using rule 379 (until_list_index -> empty .)


state 727

    (404) repeat_until -> REPEAT LBRACE statements RBRACE . UNTIL LPAREN until_expression RPAREN

    UNTIL           shift and go to state 890


state 728

    (189) local_dec_tail2 -> COMMA IDENT local_dec_tail .

    NEWLINE         reduce using rule 189 (local_dec_tail2 -> COMMA IDENT local_dec_tail .)


state 729

    (545) typecast_factor -> LPAREN typecast_factor . RPAREN

    RPAREN          shift and go to state 891


state 730

    (233) local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 233 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 233 (local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 731

    (538) typecast_value -> FUNCTION_NAME LPAREN . RPAREN

    RPAREN          shift and go to state 892


state 732

    (540) typecast_expression -> typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 540 (typecast_expression -> typecast_factor typecast_factor_tail .)


state 733

    (546) typecast_factor_tail -> PLUS . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 893
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 734

    (547) typecast_factor_tail -> MINUS . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 894
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 735

    (548) typecast_factor_tail -> MULTIPLY . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 895
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 736

    (549) typecast_factor_tail -> DIVISION . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 896
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 737

    (550) typecast_factor_tail -> MODULO . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 897
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 738

    (551) typecast_factor_tail -> EXPONENT . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 898
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 739

    (552) typecast_factor_tail -> GT . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 899
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 740

    (553) typecast_factor_tail -> LT . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 900
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 741

    (554) typecast_factor_tail -> EQ_EQ . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 901
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 742

    (555) typecast_factor_tail -> GT_EQ . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 902
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 743

    (556) typecast_factor_tail -> LT_EQ . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 903
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 744

    (557) typecast_factor_tail -> NOT_EQ . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 904
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 745

    (558) typecast_factor_tail -> AND . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 905
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 746

    (559) typecast_factor_tail -> OR . typecast_factor typecast_factor_tail
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_factor                shift and go to state 906
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 747

    (560) typecast_factor_tail -> empty .

    RPAREN          reduce using rule 560 (typecast_factor_tail -> empty .)


state 748

    (541) typecast_factor -> var_call postfix .

    PLUS            reduce using rule 541 (typecast_factor -> var_call postfix .)
    MINUS           reduce using rule 541 (typecast_factor -> var_call postfix .)
    MULTIPLY        reduce using rule 541 (typecast_factor -> var_call postfix .)
    DIVISION        reduce using rule 541 (typecast_factor -> var_call postfix .)
    MODULO          reduce using rule 541 (typecast_factor -> var_call postfix .)
    EXPONENT        reduce using rule 541 (typecast_factor -> var_call postfix .)
    GT              reduce using rule 541 (typecast_factor -> var_call postfix .)
    LT              reduce using rule 541 (typecast_factor -> var_call postfix .)
    EQ_EQ           reduce using rule 541 (typecast_factor -> var_call postfix .)
    GT_EQ           reduce using rule 541 (typecast_factor -> var_call postfix .)
    LT_EQ           reduce using rule 541 (typecast_factor -> var_call postfix .)
    NOT_EQ          reduce using rule 541 (typecast_factor -> var_call postfix .)
    AND             reduce using rule 541 (typecast_factor -> var_call postfix .)
    OR              reduce using rule 541 (typecast_factor -> var_call postfix .)
    RPAREN          reduce using rule 541 (typecast_factor -> var_call postfix .)


state 749

    (543) typecast_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    GT              reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    LT              reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    AND             reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    OR              reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 543 (typecast_factor -> TILDE INT_LIT .)


state 750

    (544) typecast_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 544 (typecast_factor -> TILDE FLT_LIT .)


state 751

    (234) local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 234 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 234 (local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 752

    (235) local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 235 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 235 (local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 753

    (236) local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 236 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 236 (local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 754

    (213) local_factor_tail -> PLUS local_factor local_factor_tail .

    COMMA           reduce using rule 213 (local_factor_tail -> PLUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 213 (local_factor_tail -> PLUS local_factor local_factor_tail .)


state 755

    (214) local_factor_tail -> MINUS local_factor local_factor_tail .

    COMMA           reduce using rule 214 (local_factor_tail -> MINUS local_factor local_factor_tail .)
    NEWLINE         reduce using rule 214 (local_factor_tail -> MINUS local_factor local_factor_tail .)


state 756

    (215) local_factor_tail -> MULTIPLY local_factor local_factor_tail .

    COMMA           reduce using rule 215 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)
    NEWLINE         reduce using rule 215 (local_factor_tail -> MULTIPLY local_factor local_factor_tail .)


state 757

    (216) local_factor_tail -> DIVISION local_factor local_factor_tail .

    COMMA           reduce using rule 216 (local_factor_tail -> DIVISION local_factor local_factor_tail .)
    NEWLINE         reduce using rule 216 (local_factor_tail -> DIVISION local_factor local_factor_tail .)


state 758

    (217) local_factor_tail -> MODULO local_factor local_factor_tail .

    COMMA           reduce using rule 217 (local_factor_tail -> MODULO local_factor local_factor_tail .)
    NEWLINE         reduce using rule 217 (local_factor_tail -> MODULO local_factor local_factor_tail .)


state 759

    (218) local_factor_tail -> EXPONENT local_factor local_factor_tail .

    COMMA           reduce using rule 218 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 218 (local_factor_tail -> EXPONENT local_factor local_factor_tail .)


state 760

    (219) local_factor_tail -> GT local_factor local_factor_tail .

    COMMA           reduce using rule 219 (local_factor_tail -> GT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 219 (local_factor_tail -> GT local_factor local_factor_tail .)


state 761

    (220) local_factor_tail -> LT local_factor local_factor_tail .

    COMMA           reduce using rule 220 (local_factor_tail -> LT local_factor local_factor_tail .)
    NEWLINE         reduce using rule 220 (local_factor_tail -> LT local_factor local_factor_tail .)


state 762

    (221) local_factor_tail -> EQ_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 221 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 221 (local_factor_tail -> EQ_EQ local_factor local_factor_tail .)


state 763

    (222) local_factor_tail -> GT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 222 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 222 (local_factor_tail -> GT_EQ local_factor local_factor_tail .)


state 764

    (223) local_factor_tail -> LT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 223 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 223 (local_factor_tail -> LT_EQ local_factor local_factor_tail .)


state 765

    (224) local_factor_tail -> NOT_EQ local_factor local_factor_tail .

    COMMA           reduce using rule 224 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)
    NEWLINE         reduce using rule 224 (local_factor_tail -> NOT_EQ local_factor local_factor_tail .)


state 766

    (225) local_factor_tail -> AND local_factor local_factor_tail .

    COMMA           reduce using rule 225 (local_factor_tail -> AND local_factor local_factor_tail .)
    NEWLINE         reduce using rule 225 (local_factor_tail -> AND local_factor local_factor_tail .)


state 767

    (226) local_factor_tail -> OR local_factor local_factor_tail .

    COMMA           reduce using rule 226 (local_factor_tail -> OR local_factor local_factor_tail .)
    NEWLINE         reduce using rule 226 (local_factor_tail -> OR local_factor local_factor_tail .)


state 768

    (207) local_list_index -> LBRACKET local_index RBRACKET . local_list_index2
    (209) local_list_index2 -> . LBRACKET local_index RBRACKET
    (210) local_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 907
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    local_list_index2              shift and go to state 908
    empty                          shift and go to state 909

state 769

    (185) local_2d_list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 185 (local_2d_list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 185 (local_2d_list -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 185 (local_2d_list -> LBRACKET RBRACKET .)


state 770

    (99) function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail .

    NEWLINE         reduce using rule 99 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail .)
    MAIN_CASPER     reduce using rule 99 (function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive maybe_newline RBRACE unli_newline function_statements_tail .)


state 771

    (101) function_statements_tail -> function_statements .

    NEWLINE         reduce using rule 101 (function_statements_tail -> function_statements .)
    MAIN_CASPER     reduce using rule 101 (function_statements_tail -> function_statements .)


state 772

    (102) function_statements_tail -> empty .
    (100) function_statements -> empty .

  ! reduce/reduce conflict for NEWLINE resolved using rule 100 (function_statements -> empty .)
  ! reduce/reduce conflict for MAIN_CASPER resolved using rule 100 (function_statements -> empty .)
    NEWLINE         reduce using rule 100 (function_statements -> empty .)
    MAIN_CASPER     reduce using rule 100 (function_statements -> empty .)

  ! NEWLINE         [ reduce using rule 102 (function_statements_tail -> empty .) ]
  ! MAIN_CASPER     [ reduce using rule 102 (function_statements_tail -> empty .) ]


state 773

    (161) revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 161 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 161 (revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 774

    (162) revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 162 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 162 (revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 775

    (163) revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 163 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 163 (revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 776

    (164) revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 164 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RBRACE          reduce using rule 164 (revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 777

    (141) revive_factor_tail -> PLUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 141 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 141 (revive_factor_tail -> PLUS revive_factor revive_factor_tail .)


state 778

    (142) revive_factor_tail -> MINUS revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 142 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 142 (revive_factor_tail -> MINUS revive_factor revive_factor_tail .)


state 779

    (143) revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 143 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 143 (revive_factor_tail -> MULTIPLY revive_factor revive_factor_tail .)


state 780

    (144) revive_factor_tail -> DIVISION revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 144 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 144 (revive_factor_tail -> DIVISION revive_factor revive_factor_tail .)


state 781

    (145) revive_factor_tail -> MODULO revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 145 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 145 (revive_factor_tail -> MODULO revive_factor revive_factor_tail .)


state 782

    (146) revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 146 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 146 (revive_factor_tail -> EXPONENT revive_factor revive_factor_tail .)


state 783

    (147) revive_factor_tail -> GT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 147 (revive_factor_tail -> GT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 147 (revive_factor_tail -> GT revive_factor revive_factor_tail .)


state 784

    (148) revive_factor_tail -> LT revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 148 (revive_factor_tail -> LT revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 148 (revive_factor_tail -> LT revive_factor revive_factor_tail .)


state 785

    (149) revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 149 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 149 (revive_factor_tail -> EQ_EQ revive_factor revive_factor_tail .)


state 786

    (150) revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 150 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 150 (revive_factor_tail -> GT_EQ revive_factor revive_factor_tail .)


state 787

    (151) revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 151 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 151 (revive_factor_tail -> LT_EQ revive_factor revive_factor_tail .)


state 788

    (152) revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 152 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 152 (revive_factor_tail -> NOT_EQ revive_factor revive_factor_tail .)


state 789

    (153) revive_factor_tail -> AND revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 153 (revive_factor_tail -> AND revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 153 (revive_factor_tail -> AND revive_factor revive_factor_tail .)


state 790

    (154) revive_factor_tail -> OR revive_factor revive_factor_tail .

    NEWLINE         reduce using rule 154 (revive_factor_tail -> OR revive_factor revive_factor_tail .)
    RBRACE          reduce using rule 154 (revive_factor_tail -> OR revive_factor revive_factor_tail .)


state 791

    (135) revive_list_index -> LBRACKET revive_index RBRACKET . revive_list_index2
    (137) revive_list_index2 -> . LBRACKET revive_index RBRACKET
    (138) revive_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 910
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    revive_list_index2             shift and go to state 911
    empty                          shift and go to state 912

state 792

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE . maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    SHIFT           reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 913
    empty                          shift and go to state 17

state 793

    (469) assign_tail -> DOT SPLICE LPAREN start . COMMA deleteCount COMMA splice_items RPAREN

    COMMA           shift and go to state 914


state 794

    (479) start -> INT_LIT .

    COMMA           reduce using rule 479 (start -> INT_LIT .)


state 795

    (470) assign_tail -> DOT PUSH LPAREN list_element . RPAREN

    RPAREN          shift and go to state 915


state 796

    (533) type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 916


state 797

    (501) value_factor -> LPAREN value_factor RPAREN .

    PLUS            reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    MINUS           reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    MULTIPLY        reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    DIVISION        reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    MODULO          reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    EXPONENT        reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    GT              reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    LT              reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    EQ_EQ           reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    GT_EQ           reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    LT_EQ           reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    NOT_EQ          reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    AND             reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    OR              reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    NEWLINE         reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    RPAREN          reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)
    COMMA           reduce using rule 501 (value_factor -> LPAREN value_factor RPAREN .)


state 798

    (534) type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 917


state 799

    (535) type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 918


state 800

    (536) type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 919


state 801

    (513) value_factor_tail -> PLUS value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 920
    empty                          shift and go to state 631

state 802

    (514) value_factor_tail -> MINUS value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 921
    empty                          shift and go to state 631

state 803

    (515) value_factor_tail -> MULTIPLY value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 922
    empty                          shift and go to state 631

state 804

    (516) value_factor_tail -> DIVISION value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 923
    empty                          shift and go to state 631

state 805

    (517) value_factor_tail -> MODULO value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 924
    empty                          shift and go to state 631

state 806

    (518) value_factor_tail -> EXPONENT value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 925
    empty                          shift and go to state 631

state 807

    (519) value_factor_tail -> GT value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 926
    empty                          shift and go to state 631

state 808

    (520) value_factor_tail -> LT value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 927
    empty                          shift and go to state 631

state 809

    (521) value_factor_tail -> EQ_EQ value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 928
    empty                          shift and go to state 631

state 810

    (522) value_factor_tail -> GT_EQ value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 929
    empty                          shift and go to state 631

state 811

    (523) value_factor_tail -> LT_EQ value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 930
    empty                          shift and go to state 631

state 812

    (524) value_factor_tail -> NOT_EQ value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 931
    empty                          shift and go to state 631

state 813

    (525) value_factor_tail -> AND value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 932
    empty                          shift and go to state 631

state 814

    (526) value_factor_tail -> OR value_factor . value_factor_tail
    (513) value_factor_tail -> . PLUS value_factor value_factor_tail
    (514) value_factor_tail -> . MINUS value_factor value_factor_tail
    (515) value_factor_tail -> . MULTIPLY value_factor value_factor_tail
    (516) value_factor_tail -> . DIVISION value_factor value_factor_tail
    (517) value_factor_tail -> . MODULO value_factor value_factor_tail
    (518) value_factor_tail -> . EXPONENT value_factor value_factor_tail
    (519) value_factor_tail -> . GT value_factor value_factor_tail
    (520) value_factor_tail -> . LT value_factor value_factor_tail
    (521) value_factor_tail -> . EQ_EQ value_factor value_factor_tail
    (522) value_factor_tail -> . GT_EQ value_factor value_factor_tail
    (523) value_factor_tail -> . LT_EQ value_factor value_factor_tail
    (524) value_factor_tail -> . NOT_EQ value_factor value_factor_tail
    (525) value_factor_tail -> . AND value_factor value_factor_tail
    (526) value_factor_tail -> . OR value_factor value_factor_tail
    (527) value_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 617
    MINUS           shift and go to state 618
    MULTIPLY        shift and go to state 619
    DIVISION        shift and go to state 620
    MODULO          shift and go to state 621
    EXPONENT        shift and go to state 622
    GT              shift and go to state 623
    LT              shift and go to state 624
    EQ_EQ           shift and go to state 625
    GT_EQ           shift and go to state 626
    LT_EQ           shift and go to state 627
    NOT_EQ          shift and go to state 628
    AND             shift and go to state 629
    OR              shift and go to state 630
    NEWLINE         reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    value_factor_tail              shift and go to state 933
    empty                          shift and go to state 631

state 815

    (507) value_list_index -> LBRACKET value_index . RBRACKET value_list_index2

    RBRACKET        shift and go to state 934


state 816

    (511) value_index -> INT_LIT .

    RBRACKET        reduce using rule 511 (value_index -> INT_LIT .)


state 817

    (512) value_index -> IDENT .

    RBRACKET        reduce using rule 512 (value_index -> IDENT .)


state 818

    (417) arg_tail -> COMMA arg_value . arg_tail
    (417) arg_tail -> . COMMA arg_value arg_tail
    (418) arg_tail -> . empty
    (567) empty -> .

    COMMA           shift and go to state 644
    RPAREN          reduce using rule 567 (empty -> .)

    arg_tail                       shift and go to state 935
    empty                          shift and go to state 645

state 819

    (466) next_val -> COMMA value next_val .

    NEWLINE         reduce using rule 466 (next_val -> COMMA value next_val .)


state 820

    (462) output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 462 (output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 462 (output_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 821

    (463) output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 463 (output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 463 (output_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 822

    (464) output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 464 (output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 464 (output_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 823

    (465) output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COMMA           reduce using rule 465 (output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    NEWLINE         reduce using rule 465 (output_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 824

    (442) output_factor_tail -> PLUS output_factor output_factor_tail .

    COMMA           reduce using rule 442 (output_factor_tail -> PLUS output_factor output_factor_tail .)
    NEWLINE         reduce using rule 442 (output_factor_tail -> PLUS output_factor output_factor_tail .)


state 825

    (443) output_factor_tail -> MINUS output_factor output_factor_tail .

    COMMA           reduce using rule 443 (output_factor_tail -> MINUS output_factor output_factor_tail .)
    NEWLINE         reduce using rule 443 (output_factor_tail -> MINUS output_factor output_factor_tail .)


state 826

    (444) output_factor_tail -> MULTIPLY output_factor output_factor_tail .

    COMMA           reduce using rule 444 (output_factor_tail -> MULTIPLY output_factor output_factor_tail .)
    NEWLINE         reduce using rule 444 (output_factor_tail -> MULTIPLY output_factor output_factor_tail .)


state 827

    (445) output_factor_tail -> DIVISION output_factor output_factor_tail .

    COMMA           reduce using rule 445 (output_factor_tail -> DIVISION output_factor output_factor_tail .)
    NEWLINE         reduce using rule 445 (output_factor_tail -> DIVISION output_factor output_factor_tail .)


state 828

    (446) output_factor_tail -> MODULO output_factor output_factor_tail .

    COMMA           reduce using rule 446 (output_factor_tail -> MODULO output_factor output_factor_tail .)
    NEWLINE         reduce using rule 446 (output_factor_tail -> MODULO output_factor output_factor_tail .)


state 829

    (447) output_factor_tail -> EXPONENT output_factor output_factor_tail .

    COMMA           reduce using rule 447 (output_factor_tail -> EXPONENT output_factor output_factor_tail .)
    NEWLINE         reduce using rule 447 (output_factor_tail -> EXPONENT output_factor output_factor_tail .)


state 830

    (448) output_factor_tail -> GT output_factor output_factor_tail .

    COMMA           reduce using rule 448 (output_factor_tail -> GT output_factor output_factor_tail .)
    NEWLINE         reduce using rule 448 (output_factor_tail -> GT output_factor output_factor_tail .)


state 831

    (449) output_factor_tail -> LT output_factor output_factor_tail .

    COMMA           reduce using rule 449 (output_factor_tail -> LT output_factor output_factor_tail .)
    NEWLINE         reduce using rule 449 (output_factor_tail -> LT output_factor output_factor_tail .)


state 832

    (450) output_factor_tail -> EQ_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 450 (output_factor_tail -> EQ_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 450 (output_factor_tail -> EQ_EQ output_factor output_factor_tail .)


state 833

    (451) output_factor_tail -> GT_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 451 (output_factor_tail -> GT_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 451 (output_factor_tail -> GT_EQ output_factor output_factor_tail .)


state 834

    (452) output_factor_tail -> LT_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 452 (output_factor_tail -> LT_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 452 (output_factor_tail -> LT_EQ output_factor output_factor_tail .)


state 835

    (453) output_factor_tail -> NOT_EQ output_factor output_factor_tail .

    COMMA           reduce using rule 453 (output_factor_tail -> NOT_EQ output_factor output_factor_tail .)
    NEWLINE         reduce using rule 453 (output_factor_tail -> NOT_EQ output_factor output_factor_tail .)


state 836

    (454) output_factor_tail -> AND output_factor output_factor_tail .

    COMMA           reduce using rule 454 (output_factor_tail -> AND output_factor output_factor_tail .)
    NEWLINE         reduce using rule 454 (output_factor_tail -> AND output_factor output_factor_tail .)


state 837

    (455) output_factor_tail -> OR output_factor output_factor_tail .

    COMMA           reduce using rule 455 (output_factor_tail -> OR output_factor output_factor_tail .)
    NEWLINE         reduce using rule 455 (output_factor_tail -> OR output_factor output_factor_tail .)


state 838

    (436) output_list_index -> LBRACKET output_index RBRACKET . output_list_index2
    (438) output_list_index2 -> . LBRACKET output_index RBRACKET
    (439) output_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 936
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    output_list_index2             shift and go to state 937
    empty                          shift and go to state 938

state 839

    (245) condition_factor -> LPAREN condition RPAREN .

    PLUS            reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    MINUS           reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    MULTIPLY        reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    DIVISION        reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    MODULO          reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    EXPONENT        reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    GT              reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    LT              reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    EQ_EQ           reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    GT_EQ           reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    LT_EQ           reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    NOT_EQ          reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    AND             reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    OR              reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)
    RPAREN          reduce using rule 245 (condition_factor -> LPAREN condition RPAREN .)


state 840

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 939
    empty                          shift and go to state 17

state 841

    (257) condition_tail -> PLUS condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 940
    empty                          shift and go to state 686

state 842

    (258) condition_tail -> MINUS condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 941
    empty                          shift and go to state 686

state 843

    (259) condition_tail -> MULTIPLY condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 942
    empty                          shift and go to state 686

state 844

    (260) condition_tail -> DIVISION condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 943
    empty                          shift and go to state 686

state 845

    (261) condition_tail -> MODULO condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 944
    empty                          shift and go to state 686

state 846

    (262) condition_tail -> EXPONENT condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 945
    empty                          shift and go to state 686

state 847

    (263) condition_tail -> GT condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 946
    empty                          shift and go to state 686

state 848

    (264) condition_tail -> LT condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 947
    empty                          shift and go to state 686

state 849

    (265) condition_tail -> EQ_EQ condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 948
    empty                          shift and go to state 686

state 850

    (266) condition_tail -> GT_EQ condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 949
    empty                          shift and go to state 686

state 851

    (267) condition_tail -> LT_EQ condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 950
    empty                          shift and go to state 686

state 852

    (268) condition_tail -> NOT_EQ condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 951
    empty                          shift and go to state 686

state 853

    (269) condition_tail -> AND condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 952
    empty                          shift and go to state 686

state 854

    (270) condition_tail -> OR condition_factor . condition_tail
    (257) condition_tail -> . PLUS condition_factor condition_tail
    (258) condition_tail -> . MINUS condition_factor condition_tail
    (259) condition_tail -> . MULTIPLY condition_factor condition_tail
    (260) condition_tail -> . DIVISION condition_factor condition_tail
    (261) condition_tail -> . MODULO condition_factor condition_tail
    (262) condition_tail -> . EXPONENT condition_factor condition_tail
    (263) condition_tail -> . GT condition_factor condition_tail
    (264) condition_tail -> . LT condition_factor condition_tail
    (265) condition_tail -> . EQ_EQ condition_factor condition_tail
    (266) condition_tail -> . GT_EQ condition_factor condition_tail
    (267) condition_tail -> . LT_EQ condition_factor condition_tail
    (268) condition_tail -> . NOT_EQ condition_factor condition_tail
    (269) condition_tail -> . AND condition_factor condition_tail
    (270) condition_tail -> . OR condition_factor condition_tail
    (271) condition_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 672
    MINUS           shift and go to state 673
    MULTIPLY        shift and go to state 674
    DIVISION        shift and go to state 675
    MODULO          shift and go to state 676
    EXPONENT        shift and go to state 677
    GT              shift and go to state 678
    LT              shift and go to state 679
    EQ_EQ           shift and go to state 680
    GT_EQ           shift and go to state 681
    LT_EQ           shift and go to state 682
    NOT_EQ          shift and go to state 683
    AND             shift and go to state 684
    OR              shift and go to state 685
    RPAREN          reduce using rule 567 (empty -> .)

    condition_tail                 shift and go to state 953
    empty                          shift and go to state 686

state 855

    (251) condition_list_index -> LBRACKET condition_index . RBRACKET condition_list_index2

    RBRACKET        shift and go to state 954


state 856

    (255) condition_index -> INT_LIT .

    RBRACKET        reduce using rule 255 (condition_index -> INT_LIT .)


state 857

    (256) condition_index -> IDENT .

    RBRACKET        reduce using rule 256 (condition_index -> IDENT .)


state 858

    (334) for_factor -> LPAREN . for_factor RPAREN
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 955
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 859

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression . SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    SEMICOLON       shift and go to state 956


state 860

    (329) for_expression -> for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 957
    empty                          shift and go to state 972

state 861

    (330) for_factor -> for_var_call . for_postfix
    (338) for_postfix -> . empty
    (339) for_postfix -> . for_postfix_op
    (567) empty -> .
    (336) for_postfix_op -> . PLUS_PLUS
    (337) for_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    SEMICOLON       reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 976
    MINUS_MINUS     shift and go to state 977

    for_postfix                    shift and go to state 973
    empty                          shift and go to state 974
    for_postfix_op                 shift and go to state 975

state 862

    (331) for_factor -> for_factor1 .

    PLUS            reduce using rule 331 (for_factor -> for_factor1 .)
    MINUS           reduce using rule 331 (for_factor -> for_factor1 .)
    MULTIPLY        reduce using rule 331 (for_factor -> for_factor1 .)
    DIVISION        reduce using rule 331 (for_factor -> for_factor1 .)
    MODULO          reduce using rule 331 (for_factor -> for_factor1 .)
    EXPONENT        reduce using rule 331 (for_factor -> for_factor1 .)
    GT              reduce using rule 331 (for_factor -> for_factor1 .)
    LT              reduce using rule 331 (for_factor -> for_factor1 .)
    EQ_EQ           reduce using rule 331 (for_factor -> for_factor1 .)
    GT_EQ           reduce using rule 331 (for_factor -> for_factor1 .)
    LT_EQ           reduce using rule 331 (for_factor -> for_factor1 .)
    NOT_EQ          reduce using rule 331 (for_factor -> for_factor1 .)
    AND             reduce using rule 331 (for_factor -> for_factor1 .)
    OR              reduce using rule 331 (for_factor -> for_factor1 .)
    SEMICOLON       reduce using rule 331 (for_factor -> for_factor1 .)
    RPAREN          reduce using rule 331 (for_factor -> for_factor1 .)


state 863

    (332) for_factor -> TILDE . INT_LIT
    (333) for_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 978
    FLT_LIT         shift and go to state 979


state 864

    (361) for_factor1 -> INT_LIT .

    PLUS            reduce using rule 361 (for_factor1 -> INT_LIT .)
    MINUS           reduce using rule 361 (for_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 361 (for_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 361 (for_factor1 -> INT_LIT .)
    MODULO          reduce using rule 361 (for_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 361 (for_factor1 -> INT_LIT .)
    GT              reduce using rule 361 (for_factor1 -> INT_LIT .)
    LT              reduce using rule 361 (for_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 361 (for_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 361 (for_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 361 (for_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 361 (for_factor1 -> INT_LIT .)
    AND             reduce using rule 361 (for_factor1 -> INT_LIT .)
    OR              reduce using rule 361 (for_factor1 -> INT_LIT .)
    SEMICOLON       reduce using rule 361 (for_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 361 (for_factor1 -> INT_LIT .)


state 865

    (362) for_factor1 -> FLT_LIT .

    PLUS            reduce using rule 362 (for_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 362 (for_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 362 (for_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 362 (for_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 362 (for_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 362 (for_factor1 -> FLT_LIT .)
    GT              reduce using rule 362 (for_factor1 -> FLT_LIT .)
    LT              reduce using rule 362 (for_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 362 (for_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 362 (for_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 362 (for_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 362 (for_factor1 -> FLT_LIT .)
    AND             reduce using rule 362 (for_factor1 -> FLT_LIT .)
    OR              reduce using rule 362 (for_factor1 -> FLT_LIT .)
    SEMICOLON       reduce using rule 362 (for_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 362 (for_factor1 -> FLT_LIT .)


state 866

    (335) for_var_call -> IDENT . for_list_index
    (340) for_list_index -> . LBRACKET for_index RBRACKET for_list_index2
    (341) for_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 981
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    SEMICOLON       reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    for_list_index                 shift and go to state 980
    empty                          shift and go to state 982

state 867

    (363) for_factor1 -> DAY .

    PLUS            reduce using rule 363 (for_factor1 -> DAY .)
    MINUS           reduce using rule 363 (for_factor1 -> DAY .)
    MULTIPLY        reduce using rule 363 (for_factor1 -> DAY .)
    DIVISION        reduce using rule 363 (for_factor1 -> DAY .)
    MODULO          reduce using rule 363 (for_factor1 -> DAY .)
    EXPONENT        reduce using rule 363 (for_factor1 -> DAY .)
    GT              reduce using rule 363 (for_factor1 -> DAY .)
    LT              reduce using rule 363 (for_factor1 -> DAY .)
    EQ_EQ           reduce using rule 363 (for_factor1 -> DAY .)
    GT_EQ           reduce using rule 363 (for_factor1 -> DAY .)
    LT_EQ           reduce using rule 363 (for_factor1 -> DAY .)
    NOT_EQ          reduce using rule 363 (for_factor1 -> DAY .)
    AND             reduce using rule 363 (for_factor1 -> DAY .)
    OR              reduce using rule 363 (for_factor1 -> DAY .)
    SEMICOLON       reduce using rule 363 (for_factor1 -> DAY .)
    RPAREN          reduce using rule 363 (for_factor1 -> DAY .)


state 868

    (364) for_factor1 -> NIGHT .

    PLUS            reduce using rule 364 (for_factor1 -> NIGHT .)
    MINUS           reduce using rule 364 (for_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 364 (for_factor1 -> NIGHT .)
    DIVISION        reduce using rule 364 (for_factor1 -> NIGHT .)
    MODULO          reduce using rule 364 (for_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 364 (for_factor1 -> NIGHT .)
    GT              reduce using rule 364 (for_factor1 -> NIGHT .)
    LT              reduce using rule 364 (for_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 364 (for_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 364 (for_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 364 (for_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 364 (for_factor1 -> NIGHT .)
    AND             reduce using rule 364 (for_factor1 -> NIGHT .)
    OR              reduce using rule 364 (for_factor1 -> NIGHT .)
    SEMICOLON       reduce using rule 364 (for_factor1 -> NIGHT .)
    RPAREN          reduce using rule 364 (for_factor1 -> NIGHT .)


state 869

    (365) for_factor1 -> STR_LIT .

    PLUS            reduce using rule 365 (for_factor1 -> STR_LIT .)
    MINUS           reduce using rule 365 (for_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 365 (for_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 365 (for_factor1 -> STR_LIT .)
    MODULO          reduce using rule 365 (for_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 365 (for_factor1 -> STR_LIT .)
    GT              reduce using rule 365 (for_factor1 -> STR_LIT .)
    LT              reduce using rule 365 (for_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 365 (for_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 365 (for_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 365 (for_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 365 (for_factor1 -> STR_LIT .)
    AND             reduce using rule 365 (for_factor1 -> STR_LIT .)
    OR              reduce using rule 365 (for_factor1 -> STR_LIT .)
    SEMICOLON       reduce using rule 365 (for_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 365 (for_factor1 -> STR_LIT .)


state 870

    (405) control_variable -> INT IDENT EQ . control_var_tail
    (406) control_var_tail -> . INT_LIT
    (407) control_var_tail -> . var_call
    (484) var_call -> . IDENT list_index

    INT_LIT         shift and go to state 984
    IDENT           shift and go to state 55

    control_var_tail               shift and go to state 983
    var_call                       shift and go to state 985

state 871

    (372) until_factor -> LPAREN until_factor RPAREN .

    PLUS            reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    MINUS           reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    MULTIPLY        reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    DIVISION        reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    MODULO          reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    EXPONENT        reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    GT              reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    LT              reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    EQ_EQ           reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    GT_EQ           reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    LT_EQ           reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    NOT_EQ          reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    AND             reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    OR              reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)
    RPAREN          reduce using rule 372 (until_factor -> LPAREN until_factor RPAREN .)


state 872

    (366) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE . statements RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    RBRACE          reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 986
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 873

    (384) until_factor_tail -> PLUS until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 987
    empty                          shift and go to state 716

state 874

    (385) until_factor_tail -> MINUS until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 988
    empty                          shift and go to state 716

state 875

    (386) until_factor_tail -> MULTIPLY until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 989
    empty                          shift and go to state 716

state 876

    (387) until_factor_tail -> DIVISION until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 990
    empty                          shift and go to state 716

state 877

    (388) until_factor_tail -> MODULO until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 991
    empty                          shift and go to state 716

state 878

    (389) until_factor_tail -> EXPONENT until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 992
    empty                          shift and go to state 716

state 879

    (390) until_factor_tail -> GT until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 993
    empty                          shift and go to state 716

state 880

    (391) until_factor_tail -> LT until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 994
    empty                          shift and go to state 716

state 881

    (392) until_factor_tail -> EQ_EQ until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 995
    empty                          shift and go to state 716

state 882

    (393) until_factor_tail -> GT_EQ until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 996
    empty                          shift and go to state 716

state 883

    (394) until_factor_tail -> LT_EQ until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 997
    empty                          shift and go to state 716

state 884

    (395) until_factor_tail -> NOT_EQ until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 998
    empty                          shift and go to state 716

state 885

    (396) until_factor_tail -> AND until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 999
    empty                          shift and go to state 716

state 886

    (397) until_factor_tail -> OR until_factor . until_factor_tail
    (384) until_factor_tail -> . PLUS until_factor until_factor_tail
    (385) until_factor_tail -> . MINUS until_factor until_factor_tail
    (386) until_factor_tail -> . MULTIPLY until_factor until_factor_tail
    (387) until_factor_tail -> . DIVISION until_factor until_factor_tail
    (388) until_factor_tail -> . MODULO until_factor until_factor_tail
    (389) until_factor_tail -> . EXPONENT until_factor until_factor_tail
    (390) until_factor_tail -> . GT until_factor until_factor_tail
    (391) until_factor_tail -> . LT until_factor until_factor_tail
    (392) until_factor_tail -> . EQ_EQ until_factor until_factor_tail
    (393) until_factor_tail -> . GT_EQ until_factor until_factor_tail
    (394) until_factor_tail -> . LT_EQ until_factor until_factor_tail
    (395) until_factor_tail -> . NOT_EQ until_factor until_factor_tail
    (396) until_factor_tail -> . AND until_factor until_factor_tail
    (397) until_factor_tail -> . OR until_factor until_factor_tail
    (398) until_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 702
    MINUS           shift and go to state 703
    MULTIPLY        shift and go to state 704
    DIVISION        shift and go to state 705
    MODULO          shift and go to state 706
    EXPONENT        shift and go to state 707
    GT              shift and go to state 708
    LT              shift and go to state 709
    EQ_EQ           shift and go to state 710
    GT_EQ           shift and go to state 711
    LT_EQ           shift and go to state 712
    NOT_EQ          shift and go to state 713
    AND             shift and go to state 714
    OR              shift and go to state 715
    RPAREN          reduce using rule 567 (empty -> .)

    until_factor_tail              shift and go to state 1000
    empty                          shift and go to state 716

state 887

    (378) until_list_index -> LBRACKET until_index . RBRACKET until_list_index2

    RBRACKET        shift and go to state 1001


state 888

    (382) until_index -> INT_LIT .

    RBRACKET        reduce using rule 382 (until_index -> INT_LIT .)


state 889

    (383) until_index -> IDENT .

    RBRACKET        reduce using rule 383 (until_index -> IDENT .)


state 890

    (404) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL . LPAREN until_expression RPAREN

    LPAREN          shift and go to state 1002


state 891

    (545) typecast_factor -> LPAREN typecast_factor RPAREN .

    PLUS            reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MINUS           reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MULTIPLY        reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    DIVISION        reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    MODULO          reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    EXPONENT        reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    GT              reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    LT              reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    EQ_EQ           reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    GT_EQ           reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    LT_EQ           reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    NOT_EQ          reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    AND             reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    OR              reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)
    RPAREN          reduce using rule 545 (typecast_factor -> LPAREN typecast_factor RPAREN .)


state 892

    (538) typecast_value -> FUNCTION_NAME LPAREN RPAREN .

    RPAREN          reduce using rule 538 (typecast_value -> FUNCTION_NAME LPAREN RPAREN .)


state 893

    (546) typecast_factor_tail -> PLUS typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1003
    empty                          shift and go to state 747

state 894

    (547) typecast_factor_tail -> MINUS typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1004
    empty                          shift and go to state 747

state 895

    (548) typecast_factor_tail -> MULTIPLY typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1005
    empty                          shift and go to state 747

state 896

    (549) typecast_factor_tail -> DIVISION typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1006
    empty                          shift and go to state 747

state 897

    (550) typecast_factor_tail -> MODULO typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1007
    empty                          shift and go to state 747

state 898

    (551) typecast_factor_tail -> EXPONENT typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1008
    empty                          shift and go to state 747

state 899

    (552) typecast_factor_tail -> GT typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1009
    empty                          shift and go to state 747

state 900

    (553) typecast_factor_tail -> LT typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1010
    empty                          shift and go to state 747

state 901

    (554) typecast_factor_tail -> EQ_EQ typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1011
    empty                          shift and go to state 747

state 902

    (555) typecast_factor_tail -> GT_EQ typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1012
    empty                          shift and go to state 747

state 903

    (556) typecast_factor_tail -> LT_EQ typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1013
    empty                          shift and go to state 747

state 904

    (557) typecast_factor_tail -> NOT_EQ typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1014
    empty                          shift and go to state 747

state 905

    (558) typecast_factor_tail -> AND typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1015
    empty                          shift and go to state 747

state 906

    (559) typecast_factor_tail -> OR typecast_factor . typecast_factor_tail
    (546) typecast_factor_tail -> . PLUS typecast_factor typecast_factor_tail
    (547) typecast_factor_tail -> . MINUS typecast_factor typecast_factor_tail
    (548) typecast_factor_tail -> . MULTIPLY typecast_factor typecast_factor_tail
    (549) typecast_factor_tail -> . DIVISION typecast_factor typecast_factor_tail
    (550) typecast_factor_tail -> . MODULO typecast_factor typecast_factor_tail
    (551) typecast_factor_tail -> . EXPONENT typecast_factor typecast_factor_tail
    (552) typecast_factor_tail -> . GT typecast_factor typecast_factor_tail
    (553) typecast_factor_tail -> . LT typecast_factor typecast_factor_tail
    (554) typecast_factor_tail -> . EQ_EQ typecast_factor typecast_factor_tail
    (555) typecast_factor_tail -> . GT_EQ typecast_factor typecast_factor_tail
    (556) typecast_factor_tail -> . LT_EQ typecast_factor typecast_factor_tail
    (557) typecast_factor_tail -> . NOT_EQ typecast_factor typecast_factor_tail
    (558) typecast_factor_tail -> . AND typecast_factor typecast_factor_tail
    (559) typecast_factor_tail -> . OR typecast_factor typecast_factor_tail
    (560) typecast_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 733
    MINUS           shift and go to state 734
    MULTIPLY        shift and go to state 735
    DIVISION        shift and go to state 736
    MODULO          shift and go to state 737
    EXPONENT        shift and go to state 738
    GT              shift and go to state 739
    LT              shift and go to state 740
    EQ_EQ           shift and go to state 741
    GT_EQ           shift and go to state 742
    LT_EQ           shift and go to state 743
    NOT_EQ          shift and go to state 744
    AND             shift and go to state 745
    OR              shift and go to state 746
    RPAREN          reduce using rule 567 (empty -> .)

    typecast_factor_tail           shift and go to state 1016
    empty                          shift and go to state 747

state 907

    (209) local_list_index2 -> LBRACKET . local_index RBRACKET
    (211) local_index -> . INT_LIT
    (212) local_index -> . IDENT

    INT_LIT         shift and go to state 580
    IDENT           shift and go to state 581

    local_index                    shift and go to state 1017

state 908

    (207) local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .

    PLUS_PLUS       reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    MINUS_MINUS     reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    PLUS            reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    MINUS           reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    MULTIPLY        reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    DIVISION        reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    MODULO          reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    EXPONENT        reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    GT              reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    LT              reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    EQ_EQ           reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    GT_EQ           reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    LT_EQ           reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    NOT_EQ          reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    AND             reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    OR              reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    COMMA           reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    NEWLINE         reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)
    RPAREN          reduce using rule 207 (local_list_index -> LBRACKET local_index RBRACKET local_list_index2 .)


state 909

    (210) local_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 210 (local_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 210 (local_list_index2 -> empty .)
    PLUS            reduce using rule 210 (local_list_index2 -> empty .)
    MINUS           reduce using rule 210 (local_list_index2 -> empty .)
    MULTIPLY        reduce using rule 210 (local_list_index2 -> empty .)
    DIVISION        reduce using rule 210 (local_list_index2 -> empty .)
    MODULO          reduce using rule 210 (local_list_index2 -> empty .)
    EXPONENT        reduce using rule 210 (local_list_index2 -> empty .)
    GT              reduce using rule 210 (local_list_index2 -> empty .)
    LT              reduce using rule 210 (local_list_index2 -> empty .)
    EQ_EQ           reduce using rule 210 (local_list_index2 -> empty .)
    GT_EQ           reduce using rule 210 (local_list_index2 -> empty .)
    LT_EQ           reduce using rule 210 (local_list_index2 -> empty .)
    NOT_EQ          reduce using rule 210 (local_list_index2 -> empty .)
    AND             reduce using rule 210 (local_list_index2 -> empty .)
    OR              reduce using rule 210 (local_list_index2 -> empty .)
    COMMA           reduce using rule 210 (local_list_index2 -> empty .)
    NEWLINE         reduce using rule 210 (local_list_index2 -> empty .)
    RPAREN          reduce using rule 210 (local_list_index2 -> empty .)


state 910

    (137) revive_list_index2 -> LBRACKET . revive_index RBRACKET
    (139) revive_index -> . INT_LIT
    (140) revive_index -> . IDENT

    INT_LIT         shift and go to state 606
    IDENT           shift and go to state 607

    revive_index                   shift and go to state 1018

state 911

    (135) revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .

    PLUS_PLUS       reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    MINUS_MINUS     reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    PLUS            reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    MINUS           reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    MULTIPLY        reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    DIVISION        reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    MODULO          reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    EXPONENT        reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    GT              reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    LT              reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    EQ_EQ           reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    GT_EQ           reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    LT_EQ           reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    NOT_EQ          reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    AND             reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    OR              reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    NEWLINE         reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    RBRACE          reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)
    RPAREN          reduce using rule 135 (revive_list_index -> LBRACKET revive_index RBRACKET revive_list_index2 .)


state 912

    (138) revive_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 138 (revive_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 138 (revive_list_index2 -> empty .)
    PLUS            reduce using rule 138 (revive_list_index2 -> empty .)
    MINUS           reduce using rule 138 (revive_list_index2 -> empty .)
    MULTIPLY        reduce using rule 138 (revive_list_index2 -> empty .)
    DIVISION        reduce using rule 138 (revive_list_index2 -> empty .)
    MODULO          reduce using rule 138 (revive_list_index2 -> empty .)
    EXPONENT        reduce using rule 138 (revive_list_index2 -> empty .)
    GT              reduce using rule 138 (revive_list_index2 -> empty .)
    LT              reduce using rule 138 (revive_list_index2 -> empty .)
    EQ_EQ           reduce using rule 138 (revive_list_index2 -> empty .)
    GT_EQ           reduce using rule 138 (revive_list_index2 -> empty .)
    LT_EQ           reduce using rule 138 (revive_list_index2 -> empty .)
    NOT_EQ          reduce using rule 138 (revive_list_index2 -> empty .)
    AND             reduce using rule 138 (revive_list_index2 -> empty .)
    OR              reduce using rule 138 (revive_list_index2 -> empty .)
    NEWLINE         reduce using rule 138 (revive_list_index2 -> empty .)
    RBRACE          reduce using rule 138 (revive_list_index2 -> empty .)
    RPAREN          reduce using rule 138 (revive_list_index2 -> empty .)


state 913

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline . switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (278) switch_condition -> . SHIFT switch_value COLON maybe_newline statements switchcond_tail

    SHIFT           shift and go to state 1020

    switch_condition               shift and go to state 1019

state 914

    (469) assign_tail -> DOT SPLICE LPAREN start COMMA . deleteCount COMMA splice_items RPAREN
    (480) deleteCount -> . empty
    (481) deleteCount -> . INT_LIT
    (567) empty -> .

    INT_LIT         shift and go to state 1023
    COMMA           reduce using rule 567 (empty -> .)

    deleteCount                    shift and go to state 1021
    empty                          shift and go to state 1022

state 915

    (470) assign_tail -> DOT PUSH LPAREN list_element RPAREN .

    NEWLINE         reduce using rule 470 (assign_tail -> DOT PUSH LPAREN list_element RPAREN .)


state 916

    (533) type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 533 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 533 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 533 (type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 917

    (534) type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 534 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 534 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 534 (type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 918

    (535) type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 535 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 535 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 535 (type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 919

    (536) type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    NEWLINE         reduce using rule 536 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    COMMA           reduce using rule 536 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)
    RPAREN          reduce using rule 536 (type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 920

    (513) value_factor_tail -> PLUS value_factor value_factor_tail .

    NEWLINE         reduce using rule 513 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    COMMA           reduce using rule 513 (value_factor_tail -> PLUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 513 (value_factor_tail -> PLUS value_factor value_factor_tail .)


state 921

    (514) value_factor_tail -> MINUS value_factor value_factor_tail .

    NEWLINE         reduce using rule 514 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    COMMA           reduce using rule 514 (value_factor_tail -> MINUS value_factor value_factor_tail .)
    RPAREN          reduce using rule 514 (value_factor_tail -> MINUS value_factor value_factor_tail .)


state 922

    (515) value_factor_tail -> MULTIPLY value_factor value_factor_tail .

    NEWLINE         reduce using rule 515 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    COMMA           reduce using rule 515 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)
    RPAREN          reduce using rule 515 (value_factor_tail -> MULTIPLY value_factor value_factor_tail .)


state 923

    (516) value_factor_tail -> DIVISION value_factor value_factor_tail .

    NEWLINE         reduce using rule 516 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    COMMA           reduce using rule 516 (value_factor_tail -> DIVISION value_factor value_factor_tail .)
    RPAREN          reduce using rule 516 (value_factor_tail -> DIVISION value_factor value_factor_tail .)


state 924

    (517) value_factor_tail -> MODULO value_factor value_factor_tail .

    NEWLINE         reduce using rule 517 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    COMMA           reduce using rule 517 (value_factor_tail -> MODULO value_factor value_factor_tail .)
    RPAREN          reduce using rule 517 (value_factor_tail -> MODULO value_factor value_factor_tail .)


state 925

    (518) value_factor_tail -> EXPONENT value_factor value_factor_tail .

    NEWLINE         reduce using rule 518 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    COMMA           reduce using rule 518 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)
    RPAREN          reduce using rule 518 (value_factor_tail -> EXPONENT value_factor value_factor_tail .)


state 926

    (519) value_factor_tail -> GT value_factor value_factor_tail .

    NEWLINE         reduce using rule 519 (value_factor_tail -> GT value_factor value_factor_tail .)
    COMMA           reduce using rule 519 (value_factor_tail -> GT value_factor value_factor_tail .)
    RPAREN          reduce using rule 519 (value_factor_tail -> GT value_factor value_factor_tail .)


state 927

    (520) value_factor_tail -> LT value_factor value_factor_tail .

    NEWLINE         reduce using rule 520 (value_factor_tail -> LT value_factor value_factor_tail .)
    COMMA           reduce using rule 520 (value_factor_tail -> LT value_factor value_factor_tail .)
    RPAREN          reduce using rule 520 (value_factor_tail -> LT value_factor value_factor_tail .)


state 928

    (521) value_factor_tail -> EQ_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 521 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 521 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 521 (value_factor_tail -> EQ_EQ value_factor value_factor_tail .)


state 929

    (522) value_factor_tail -> GT_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 522 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 522 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 522 (value_factor_tail -> GT_EQ value_factor value_factor_tail .)


state 930

    (523) value_factor_tail -> LT_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 523 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 523 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 523 (value_factor_tail -> LT_EQ value_factor value_factor_tail .)


state 931

    (524) value_factor_tail -> NOT_EQ value_factor value_factor_tail .

    NEWLINE         reduce using rule 524 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    COMMA           reduce using rule 524 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)
    RPAREN          reduce using rule 524 (value_factor_tail -> NOT_EQ value_factor value_factor_tail .)


state 932

    (525) value_factor_tail -> AND value_factor value_factor_tail .

    NEWLINE         reduce using rule 525 (value_factor_tail -> AND value_factor value_factor_tail .)
    COMMA           reduce using rule 525 (value_factor_tail -> AND value_factor value_factor_tail .)
    RPAREN          reduce using rule 525 (value_factor_tail -> AND value_factor value_factor_tail .)


state 933

    (526) value_factor_tail -> OR value_factor value_factor_tail .

    NEWLINE         reduce using rule 526 (value_factor_tail -> OR value_factor value_factor_tail .)
    COMMA           reduce using rule 526 (value_factor_tail -> OR value_factor value_factor_tail .)
    RPAREN          reduce using rule 526 (value_factor_tail -> OR value_factor value_factor_tail .)


state 934

    (507) value_list_index -> LBRACKET value_index RBRACKET . value_list_index2
    (509) value_list_index2 -> . LBRACKET value_index RBRACKET
    (510) value_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 1024
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    COMMA           reduce using rule 567 (empty -> .)

    value_list_index2              shift and go to state 1025
    empty                          shift and go to state 1026

state 935

    (417) arg_tail -> COMMA arg_value arg_tail .

    RPAREN          reduce using rule 417 (arg_tail -> COMMA arg_value arg_tail .)


state 936

    (438) output_list_index2 -> LBRACKET . output_index RBRACKET
    (440) output_index -> . INT_LIT
    (441) output_index -> . IDENT

    INT_LIT         shift and go to state 667
    IDENT           shift and go to state 668

    output_index                   shift and go to state 1027

state 937

    (436) output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .

    PLUS_PLUS       reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    MINUS_MINUS     reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    PLUS            reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    MINUS           reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    MULTIPLY        reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    DIVISION        reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    MODULO          reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    EXPONENT        reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    GT              reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    LT              reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    EQ_EQ           reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    GT_EQ           reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    LT_EQ           reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    NOT_EQ          reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    AND             reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    OR              reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    COMMA           reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    NEWLINE         reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)
    RPAREN          reduce using rule 436 (output_list_index -> LBRACKET output_index RBRACKET output_list_index2 .)


state 938

    (439) output_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 439 (output_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 439 (output_list_index2 -> empty .)
    PLUS            reduce using rule 439 (output_list_index2 -> empty .)
    MINUS           reduce using rule 439 (output_list_index2 -> empty .)
    MULTIPLY        reduce using rule 439 (output_list_index2 -> empty .)
    DIVISION        reduce using rule 439 (output_list_index2 -> empty .)
    MODULO          reduce using rule 439 (output_list_index2 -> empty .)
    EXPONENT        reduce using rule 439 (output_list_index2 -> empty .)
    GT              reduce using rule 439 (output_list_index2 -> empty .)
    LT              reduce using rule 439 (output_list_index2 -> empty .)
    EQ_EQ           reduce using rule 439 (output_list_index2 -> empty .)
    GT_EQ           reduce using rule 439 (output_list_index2 -> empty .)
    LT_EQ           reduce using rule 439 (output_list_index2 -> empty .)
    NOT_EQ          reduce using rule 439 (output_list_index2 -> empty .)
    AND             reduce using rule 439 (output_list_index2 -> empty .)
    OR              reduce using rule 439 (output_list_index2 -> empty .)
    COMMA           reduce using rule 439 (output_list_index2 -> empty .)
    NEWLINE         reduce using rule 439 (output_list_index2 -> empty .)
    RPAREN          reduce using rule 439 (output_list_index2 -> empty .)


state 939

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 1028
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 940

    (257) condition_tail -> PLUS condition_factor condition_tail .

    RPAREN          reduce using rule 257 (condition_tail -> PLUS condition_factor condition_tail .)


state 941

    (258) condition_tail -> MINUS condition_factor condition_tail .

    RPAREN          reduce using rule 258 (condition_tail -> MINUS condition_factor condition_tail .)


state 942

    (259) condition_tail -> MULTIPLY condition_factor condition_tail .

    RPAREN          reduce using rule 259 (condition_tail -> MULTIPLY condition_factor condition_tail .)


state 943

    (260) condition_tail -> DIVISION condition_factor condition_tail .

    RPAREN          reduce using rule 260 (condition_tail -> DIVISION condition_factor condition_tail .)


state 944

    (261) condition_tail -> MODULO condition_factor condition_tail .

    RPAREN          reduce using rule 261 (condition_tail -> MODULO condition_factor condition_tail .)


state 945

    (262) condition_tail -> EXPONENT condition_factor condition_tail .

    RPAREN          reduce using rule 262 (condition_tail -> EXPONENT condition_factor condition_tail .)


state 946

    (263) condition_tail -> GT condition_factor condition_tail .

    RPAREN          reduce using rule 263 (condition_tail -> GT condition_factor condition_tail .)


state 947

    (264) condition_tail -> LT condition_factor condition_tail .

    RPAREN          reduce using rule 264 (condition_tail -> LT condition_factor condition_tail .)


state 948

    (265) condition_tail -> EQ_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 265 (condition_tail -> EQ_EQ condition_factor condition_tail .)


state 949

    (266) condition_tail -> GT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 266 (condition_tail -> GT_EQ condition_factor condition_tail .)


state 950

    (267) condition_tail -> LT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 267 (condition_tail -> LT_EQ condition_factor condition_tail .)


state 951

    (268) condition_tail -> NOT_EQ condition_factor condition_tail .

    RPAREN          reduce using rule 268 (condition_tail -> NOT_EQ condition_factor condition_tail .)


state 952

    (269) condition_tail -> AND condition_factor condition_tail .

    RPAREN          reduce using rule 269 (condition_tail -> AND condition_factor condition_tail .)


state 953

    (270) condition_tail -> OR condition_factor condition_tail .

    RPAREN          reduce using rule 270 (condition_tail -> OR condition_factor condition_tail .)


state 954

    (251) condition_list_index -> LBRACKET condition_index RBRACKET . condition_list_index2
    (253) condition_list_index2 -> . LBRACKET condition_index RBRACKET
    (254) condition_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 1029
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    condition_list_index2          shift and go to state 1030
    empty                          shift and go to state 1031

state 955

    (334) for_factor -> LPAREN for_factor . RPAREN

    RPAREN          shift and go to state 1032


state 956

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON . update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE
    (408) update -> . var_call update_tail
    (484) var_call -> . IDENT list_index

    IDENT           shift and go to state 55

    update                         shift and go to state 1033
    var_call                       shift and go to state 1034

state 957

    (329) for_expression -> for_factor for_factor_tail .

    SEMICOLON       reduce using rule 329 (for_expression -> for_factor for_factor_tail .)


state 958

    (346) for_factor_tail -> PLUS . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1035
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 959

    (347) for_factor_tail -> MINUS . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1036
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 960

    (348) for_factor_tail -> MULTIPLY . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1037
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 961

    (349) for_factor_tail -> DIVISION . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1038
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 962

    (350) for_factor_tail -> MODULO . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1039
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 963

    (351) for_factor_tail -> EXPONENT . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1040
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 964

    (352) for_factor_tail -> GT . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1041
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 965

    (353) for_factor_tail -> LT . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1042
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 966

    (354) for_factor_tail -> EQ_EQ . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1043
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 967

    (355) for_factor_tail -> GT_EQ . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1044
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 968

    (356) for_factor_tail -> LT_EQ . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1045
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 969

    (357) for_factor_tail -> NOT_EQ . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1046
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 970

    (358) for_factor_tail -> AND . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1047
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 971

    (359) for_factor_tail -> OR . for_factor for_factor_tail
    (330) for_factor -> . for_var_call for_postfix
    (331) for_factor -> . for_factor1
    (332) for_factor -> . TILDE INT_LIT
    (333) for_factor -> . TILDE FLT_LIT
    (334) for_factor -> . LPAREN for_factor RPAREN
    (335) for_var_call -> . IDENT for_list_index
    (361) for_factor1 -> . INT_LIT
    (362) for_factor1 -> . FLT_LIT
    (363) for_factor1 -> . DAY
    (364) for_factor1 -> . NIGHT
    (365) for_factor1 -> . STR_LIT

    TILDE           shift and go to state 863
    LPAREN          shift and go to state 858
    IDENT           shift and go to state 866
    INT_LIT         shift and go to state 864
    FLT_LIT         shift and go to state 865
    DAY             shift and go to state 867
    NIGHT           shift and go to state 868
    STR_LIT         shift and go to state 869

    for_factor                     shift and go to state 1048
    for_var_call                   shift and go to state 861
    for_factor1                    shift and go to state 862

state 972

    (360) for_factor_tail -> empty .

    SEMICOLON       reduce using rule 360 (for_factor_tail -> empty .)


state 973

    (330) for_factor -> for_var_call for_postfix .

    PLUS            reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    MINUS           reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    MULTIPLY        reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    DIVISION        reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    MODULO          reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    EXPONENT        reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    GT              reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    LT              reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    EQ_EQ           reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    GT_EQ           reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    LT_EQ           reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    NOT_EQ          reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    AND             reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    OR              reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    SEMICOLON       reduce using rule 330 (for_factor -> for_var_call for_postfix .)
    RPAREN          reduce using rule 330 (for_factor -> for_var_call for_postfix .)


state 974

    (338) for_postfix -> empty .

    PLUS            reduce using rule 338 (for_postfix -> empty .)
    MINUS           reduce using rule 338 (for_postfix -> empty .)
    MULTIPLY        reduce using rule 338 (for_postfix -> empty .)
    DIVISION        reduce using rule 338 (for_postfix -> empty .)
    MODULO          reduce using rule 338 (for_postfix -> empty .)
    EXPONENT        reduce using rule 338 (for_postfix -> empty .)
    GT              reduce using rule 338 (for_postfix -> empty .)
    LT              reduce using rule 338 (for_postfix -> empty .)
    EQ_EQ           reduce using rule 338 (for_postfix -> empty .)
    GT_EQ           reduce using rule 338 (for_postfix -> empty .)
    LT_EQ           reduce using rule 338 (for_postfix -> empty .)
    NOT_EQ          reduce using rule 338 (for_postfix -> empty .)
    AND             reduce using rule 338 (for_postfix -> empty .)
    OR              reduce using rule 338 (for_postfix -> empty .)
    SEMICOLON       reduce using rule 338 (for_postfix -> empty .)
    RPAREN          reduce using rule 338 (for_postfix -> empty .)


state 975

    (339) for_postfix -> for_postfix_op .

    PLUS            reduce using rule 339 (for_postfix -> for_postfix_op .)
    MINUS           reduce using rule 339 (for_postfix -> for_postfix_op .)
    MULTIPLY        reduce using rule 339 (for_postfix -> for_postfix_op .)
    DIVISION        reduce using rule 339 (for_postfix -> for_postfix_op .)
    MODULO          reduce using rule 339 (for_postfix -> for_postfix_op .)
    EXPONENT        reduce using rule 339 (for_postfix -> for_postfix_op .)
    GT              reduce using rule 339 (for_postfix -> for_postfix_op .)
    LT              reduce using rule 339 (for_postfix -> for_postfix_op .)
    EQ_EQ           reduce using rule 339 (for_postfix -> for_postfix_op .)
    GT_EQ           reduce using rule 339 (for_postfix -> for_postfix_op .)
    LT_EQ           reduce using rule 339 (for_postfix -> for_postfix_op .)
    NOT_EQ          reduce using rule 339 (for_postfix -> for_postfix_op .)
    AND             reduce using rule 339 (for_postfix -> for_postfix_op .)
    OR              reduce using rule 339 (for_postfix -> for_postfix_op .)
    SEMICOLON       reduce using rule 339 (for_postfix -> for_postfix_op .)
    RPAREN          reduce using rule 339 (for_postfix -> for_postfix_op .)


state 976

    (336) for_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    SEMICOLON       reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 336 (for_postfix_op -> PLUS_PLUS .)


state 977

    (337) for_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    SEMICOLON       reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 337 (for_postfix_op -> MINUS_MINUS .)


state 978

    (332) for_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    GT              reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    LT              reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    AND             reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    OR              reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    SEMICOLON       reduce using rule 332 (for_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 332 (for_factor -> TILDE INT_LIT .)


state 979

    (333) for_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    SEMICOLON       reduce using rule 333 (for_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 333 (for_factor -> TILDE FLT_LIT .)


state 980

    (335) for_var_call -> IDENT for_list_index .

    PLUS_PLUS       reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    MINUS_MINUS     reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    PLUS            reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    MINUS           reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    MULTIPLY        reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    DIVISION        reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    MODULO          reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    EXPONENT        reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    GT              reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    LT              reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    EQ_EQ           reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    GT_EQ           reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    LT_EQ           reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    NOT_EQ          reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    AND             reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    OR              reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    SEMICOLON       reduce using rule 335 (for_var_call -> IDENT for_list_index .)
    RPAREN          reduce using rule 335 (for_var_call -> IDENT for_list_index .)


state 981

    (340) for_list_index -> LBRACKET . for_index RBRACKET for_list_index2
    (344) for_index -> . INT_LIT
    (345) for_index -> . IDENT

    INT_LIT         shift and go to state 1050
    IDENT           shift and go to state 1051

    for_index                      shift and go to state 1049

state 982

    (341) for_list_index -> empty .

    PLUS_PLUS       reduce using rule 341 (for_list_index -> empty .)
    MINUS_MINUS     reduce using rule 341 (for_list_index -> empty .)
    PLUS            reduce using rule 341 (for_list_index -> empty .)
    MINUS           reduce using rule 341 (for_list_index -> empty .)
    MULTIPLY        reduce using rule 341 (for_list_index -> empty .)
    DIVISION        reduce using rule 341 (for_list_index -> empty .)
    MODULO          reduce using rule 341 (for_list_index -> empty .)
    EXPONENT        reduce using rule 341 (for_list_index -> empty .)
    GT              reduce using rule 341 (for_list_index -> empty .)
    LT              reduce using rule 341 (for_list_index -> empty .)
    EQ_EQ           reduce using rule 341 (for_list_index -> empty .)
    GT_EQ           reduce using rule 341 (for_list_index -> empty .)
    LT_EQ           reduce using rule 341 (for_list_index -> empty .)
    NOT_EQ          reduce using rule 341 (for_list_index -> empty .)
    AND             reduce using rule 341 (for_list_index -> empty .)
    OR              reduce using rule 341 (for_list_index -> empty .)
    SEMICOLON       reduce using rule 341 (for_list_index -> empty .)
    RPAREN          reduce using rule 341 (for_list_index -> empty .)


state 983

    (405) control_variable -> INT IDENT EQ control_var_tail .

    SEMICOLON       reduce using rule 405 (control_variable -> INT IDENT EQ control_var_tail .)


state 984

    (406) control_var_tail -> INT_LIT .

    SEMICOLON       reduce using rule 406 (control_var_tail -> INT_LIT .)


state 985

    (407) control_var_tail -> var_call .

    SEMICOLON       reduce using rule 407 (control_var_tail -> var_call .)


state 986

    (366) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 1052


state 987

    (384) until_factor_tail -> PLUS until_factor until_factor_tail .

    RPAREN          reduce using rule 384 (until_factor_tail -> PLUS until_factor until_factor_tail .)


state 988

    (385) until_factor_tail -> MINUS until_factor until_factor_tail .

    RPAREN          reduce using rule 385 (until_factor_tail -> MINUS until_factor until_factor_tail .)


state 989

    (386) until_factor_tail -> MULTIPLY until_factor until_factor_tail .

    RPAREN          reduce using rule 386 (until_factor_tail -> MULTIPLY until_factor until_factor_tail .)


state 990

    (387) until_factor_tail -> DIVISION until_factor until_factor_tail .

    RPAREN          reduce using rule 387 (until_factor_tail -> DIVISION until_factor until_factor_tail .)


state 991

    (388) until_factor_tail -> MODULO until_factor until_factor_tail .

    RPAREN          reduce using rule 388 (until_factor_tail -> MODULO until_factor until_factor_tail .)


state 992

    (389) until_factor_tail -> EXPONENT until_factor until_factor_tail .

    RPAREN          reduce using rule 389 (until_factor_tail -> EXPONENT until_factor until_factor_tail .)


state 993

    (390) until_factor_tail -> GT until_factor until_factor_tail .

    RPAREN          reduce using rule 390 (until_factor_tail -> GT until_factor until_factor_tail .)


state 994

    (391) until_factor_tail -> LT until_factor until_factor_tail .

    RPAREN          reduce using rule 391 (until_factor_tail -> LT until_factor until_factor_tail .)


state 995

    (392) until_factor_tail -> EQ_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 392 (until_factor_tail -> EQ_EQ until_factor until_factor_tail .)


state 996

    (393) until_factor_tail -> GT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 393 (until_factor_tail -> GT_EQ until_factor until_factor_tail .)


state 997

    (394) until_factor_tail -> LT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 394 (until_factor_tail -> LT_EQ until_factor until_factor_tail .)


state 998

    (395) until_factor_tail -> NOT_EQ until_factor until_factor_tail .

    RPAREN          reduce using rule 395 (until_factor_tail -> NOT_EQ until_factor until_factor_tail .)


state 999

    (396) until_factor_tail -> AND until_factor until_factor_tail .

    RPAREN          reduce using rule 396 (until_factor_tail -> AND until_factor until_factor_tail .)


state 1000

    (397) until_factor_tail -> OR until_factor until_factor_tail .

    RPAREN          reduce using rule 397 (until_factor_tail -> OR until_factor until_factor_tail .)


state 1001

    (378) until_list_index -> LBRACKET until_index RBRACKET . until_list_index2
    (380) until_list_index2 -> . LBRACKET until_index RBRACKET
    (381) until_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 1053
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    until_list_index2              shift and go to state 1054
    empty                          shift and go to state 1055

state 1002

    (404) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN . until_expression RPAREN
    (367) until_expression -> . until_factor until_factor_tail
    (368) until_factor -> . until_var_call until_postfix
    (369) until_factor -> . until_factor1
    (370) until_factor -> . TILDE INT_LIT
    (371) until_factor -> . TILDE FLT_LIT
    (372) until_factor -> . LPAREN until_factor RPAREN
    (373) until_var_call -> . IDENT until_list_index
    (399) until_factor1 -> . INT_LIT
    (400) until_factor1 -> . FLT_LIT
    (401) until_factor1 -> . DAY
    (402) until_factor1 -> . NIGHT
    (403) until_factor1 -> . STR_LIT

    TILDE           shift and go to state 537
    LPAREN          shift and go to state 532
    IDENT           shift and go to state 540
    INT_LIT         shift and go to state 538
    FLT_LIT         shift and go to state 539
    DAY             shift and go to state 541
    NIGHT           shift and go to state 542
    STR_LIT         shift and go to state 543

    until_expression               shift and go to state 1056
    until_factor                   shift and go to state 534
    until_var_call                 shift and go to state 535
    until_factor1                  shift and go to state 536

state 1003

    (546) typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 546 (typecast_factor_tail -> PLUS typecast_factor typecast_factor_tail .)


state 1004

    (547) typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 547 (typecast_factor_tail -> MINUS typecast_factor typecast_factor_tail .)


state 1005

    (548) typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 548 (typecast_factor_tail -> MULTIPLY typecast_factor typecast_factor_tail .)


state 1006

    (549) typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 549 (typecast_factor_tail -> DIVISION typecast_factor typecast_factor_tail .)


state 1007

    (550) typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 550 (typecast_factor_tail -> MODULO typecast_factor typecast_factor_tail .)


state 1008

    (551) typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 551 (typecast_factor_tail -> EXPONENT typecast_factor typecast_factor_tail .)


state 1009

    (552) typecast_factor_tail -> GT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 552 (typecast_factor_tail -> GT typecast_factor typecast_factor_tail .)


state 1010

    (553) typecast_factor_tail -> LT typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 553 (typecast_factor_tail -> LT typecast_factor typecast_factor_tail .)


state 1011

    (554) typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 554 (typecast_factor_tail -> EQ_EQ typecast_factor typecast_factor_tail .)


state 1012

    (555) typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 555 (typecast_factor_tail -> GT_EQ typecast_factor typecast_factor_tail .)


state 1013

    (556) typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 556 (typecast_factor_tail -> LT_EQ typecast_factor typecast_factor_tail .)


state 1014

    (557) typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 557 (typecast_factor_tail -> NOT_EQ typecast_factor typecast_factor_tail .)


state 1015

    (558) typecast_factor_tail -> AND typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 558 (typecast_factor_tail -> AND typecast_factor typecast_factor_tail .)


state 1016

    (559) typecast_factor_tail -> OR typecast_factor typecast_factor_tail .

    RPAREN          reduce using rule 559 (typecast_factor_tail -> OR typecast_factor typecast_factor_tail .)


state 1017

    (209) local_list_index2 -> LBRACKET local_index . RBRACKET

    RBRACKET        shift and go to state 1057


state 1018

    (137) revive_list_index2 -> LBRACKET revive_index . RBRACKET

    RBRACKET        shift and go to state 1058


state 1019

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition . maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    OTHERWISE       reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1059
    empty                          shift and go to state 17

state 1020

    (278) switch_condition -> SHIFT . switch_value COLON maybe_newline statements switchcond_tail
    (279) switch_value -> . switch_type_cast
    (280) switch_value -> . switch_expression
    (281) switch_value -> . function_call
    (319) switch_type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (320) switch_type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (321) switch_type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (322) switch_type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (282) switch_expression -> . switch_factor switch_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 1064
    CONVERT_TO_FLT  shift and go to state 1066
    CONVERT_TO_BLN  shift and go to state 1067
    CONVERT_TO_STR  shift and go to state 1068
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    INPUT           shift and go to state 293
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_value                   shift and go to state 1060
    switch_type_cast               shift and go to state 1061
    switch_expression              shift and go to state 1062
    function_call                  shift and go to state 1063
    switch_factor                  shift and go to state 1069
    input_statement                shift and go to state 287
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1021

    (469) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount . COMMA splice_items RPAREN

    COMMA           shift and go to state 1079


state 1022

    (480) deleteCount -> empty .

    COMMA           reduce using rule 480 (deleteCount -> empty .)


state 1023

    (481) deleteCount -> INT_LIT .

    COMMA           reduce using rule 481 (deleteCount -> INT_LIT .)


state 1024

    (509) value_list_index2 -> LBRACKET . value_index RBRACKET
    (511) value_index -> . INT_LIT
    (512) value_index -> . IDENT

    INT_LIT         shift and go to state 816
    IDENT           shift and go to state 817

    value_index                    shift and go to state 1080

state 1025

    (507) value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .

    PLUS_PLUS       reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    MINUS_MINUS     reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    PLUS            reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    MINUS           reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    MULTIPLY        reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    DIVISION        reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    MODULO          reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    EXPONENT        reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    GT              reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    LT              reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    EQ_EQ           reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    GT_EQ           reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    LT_EQ           reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    NOT_EQ          reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    AND             reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    OR              reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    NEWLINE         reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    RPAREN          reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)
    COMMA           reduce using rule 507 (value_list_index -> LBRACKET value_index RBRACKET value_list_index2 .)


state 1026

    (510) value_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 510 (value_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 510 (value_list_index2 -> empty .)
    PLUS            reduce using rule 510 (value_list_index2 -> empty .)
    MINUS           reduce using rule 510 (value_list_index2 -> empty .)
    MULTIPLY        reduce using rule 510 (value_list_index2 -> empty .)
    DIVISION        reduce using rule 510 (value_list_index2 -> empty .)
    MODULO          reduce using rule 510 (value_list_index2 -> empty .)
    EXPONENT        reduce using rule 510 (value_list_index2 -> empty .)
    GT              reduce using rule 510 (value_list_index2 -> empty .)
    LT              reduce using rule 510 (value_list_index2 -> empty .)
    EQ_EQ           reduce using rule 510 (value_list_index2 -> empty .)
    GT_EQ           reduce using rule 510 (value_list_index2 -> empty .)
    LT_EQ           reduce using rule 510 (value_list_index2 -> empty .)
    NOT_EQ          reduce using rule 510 (value_list_index2 -> empty .)
    AND             reduce using rule 510 (value_list_index2 -> empty .)
    OR              reduce using rule 510 (value_list_index2 -> empty .)
    NEWLINE         reduce using rule 510 (value_list_index2 -> empty .)
    RPAREN          reduce using rule 510 (value_list_index2 -> empty .)
    COMMA           reduce using rule 510 (value_list_index2 -> empty .)


state 1027

    (438) output_list_index2 -> LBRACKET output_index . RBRACKET

    RBRACKET        shift and go to state 1081


state 1028

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1082
    empty                          shift and go to state 17

state 1029

    (253) condition_list_index2 -> LBRACKET . condition_index RBRACKET
    (255) condition_index -> . INT_LIT
    (256) condition_index -> . IDENT

    INT_LIT         shift and go to state 856
    IDENT           shift and go to state 857

    condition_index                shift and go to state 1083

state 1030

    (251) condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .

    PLUS_PLUS       reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    MINUS_MINUS     reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    PLUS            reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    MINUS           reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    MULTIPLY        reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    DIVISION        reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    MODULO          reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    EXPONENT        reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    GT              reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    LT              reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    EQ_EQ           reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    GT_EQ           reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    LT_EQ           reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    NOT_EQ          reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    AND             reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    OR              reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)
    RPAREN          reduce using rule 251 (condition_list_index -> LBRACKET condition_index RBRACKET condition_list_index2 .)


state 1031

    (254) condition_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 254 (condition_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 254 (condition_list_index2 -> empty .)
    PLUS            reduce using rule 254 (condition_list_index2 -> empty .)
    MINUS           reduce using rule 254 (condition_list_index2 -> empty .)
    MULTIPLY        reduce using rule 254 (condition_list_index2 -> empty .)
    DIVISION        reduce using rule 254 (condition_list_index2 -> empty .)
    MODULO          reduce using rule 254 (condition_list_index2 -> empty .)
    EXPONENT        reduce using rule 254 (condition_list_index2 -> empty .)
    GT              reduce using rule 254 (condition_list_index2 -> empty .)
    LT              reduce using rule 254 (condition_list_index2 -> empty .)
    EQ_EQ           reduce using rule 254 (condition_list_index2 -> empty .)
    GT_EQ           reduce using rule 254 (condition_list_index2 -> empty .)
    LT_EQ           reduce using rule 254 (condition_list_index2 -> empty .)
    NOT_EQ          reduce using rule 254 (condition_list_index2 -> empty .)
    AND             reduce using rule 254 (condition_list_index2 -> empty .)
    OR              reduce using rule 254 (condition_list_index2 -> empty .)
    RPAREN          reduce using rule 254 (condition_list_index2 -> empty .)


state 1032

    (334) for_factor -> LPAREN for_factor RPAREN .

    PLUS            reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    MINUS           reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    MULTIPLY        reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    DIVISION        reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    MODULO          reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    EXPONENT        reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    GT              reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    LT              reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    EQ_EQ           reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    GT_EQ           reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    LT_EQ           reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    NOT_EQ          reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    AND             reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    OR              reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    SEMICOLON       reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)
    RPAREN          reduce using rule 334 (for_factor -> LPAREN for_factor RPAREN .)


state 1033

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE

    RPAREN          shift and go to state 1084


state 1034

    (408) update -> var_call . update_tail
    (409) update_tail -> . postfix_op
    (410) update_tail -> . compound_op value
    (411) postfix_op -> . PLUS_PLUS
    (412) postfix_op -> . MINUS_MINUS
    (474) compound_op -> . PLUS_EQ
    (475) compound_op -> . MINUS_EQ
    (476) compound_op -> . MUL_EQ
    (477) compound_op -> . DIV_EQ
    (478) compound_op -> . MOD_EQ

    PLUS_PLUS       shift and go to state 93
    MINUS_MINUS     shift and go to state 94
    PLUS_EQ         shift and go to state 353
    MINUS_EQ        shift and go to state 354
    MUL_EQ          shift and go to state 355
    DIV_EQ          shift and go to state 356
    MOD_EQ          shift and go to state 357

    update_tail                    shift and go to state 1085
    postfix_op                     shift and go to state 1086
    compound_op                    shift and go to state 1087

state 1035

    (346) for_factor_tail -> PLUS for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1088
    empty                          shift and go to state 972

state 1036

    (347) for_factor_tail -> MINUS for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1089
    empty                          shift and go to state 972

state 1037

    (348) for_factor_tail -> MULTIPLY for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1090
    empty                          shift and go to state 972

state 1038

    (349) for_factor_tail -> DIVISION for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1091
    empty                          shift and go to state 972

state 1039

    (350) for_factor_tail -> MODULO for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1092
    empty                          shift and go to state 972

state 1040

    (351) for_factor_tail -> EXPONENT for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1093
    empty                          shift and go to state 972

state 1041

    (352) for_factor_tail -> GT for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1094
    empty                          shift and go to state 972

state 1042

    (353) for_factor_tail -> LT for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1095
    empty                          shift and go to state 972

state 1043

    (354) for_factor_tail -> EQ_EQ for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1096
    empty                          shift and go to state 972

state 1044

    (355) for_factor_tail -> GT_EQ for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1097
    empty                          shift and go to state 972

state 1045

    (356) for_factor_tail -> LT_EQ for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1098
    empty                          shift and go to state 972

state 1046

    (357) for_factor_tail -> NOT_EQ for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1099
    empty                          shift and go to state 972

state 1047

    (358) for_factor_tail -> AND for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1100
    empty                          shift and go to state 972

state 1048

    (359) for_factor_tail -> OR for_factor . for_factor_tail
    (346) for_factor_tail -> . PLUS for_factor for_factor_tail
    (347) for_factor_tail -> . MINUS for_factor for_factor_tail
    (348) for_factor_tail -> . MULTIPLY for_factor for_factor_tail
    (349) for_factor_tail -> . DIVISION for_factor for_factor_tail
    (350) for_factor_tail -> . MODULO for_factor for_factor_tail
    (351) for_factor_tail -> . EXPONENT for_factor for_factor_tail
    (352) for_factor_tail -> . GT for_factor for_factor_tail
    (353) for_factor_tail -> . LT for_factor for_factor_tail
    (354) for_factor_tail -> . EQ_EQ for_factor for_factor_tail
    (355) for_factor_tail -> . GT_EQ for_factor for_factor_tail
    (356) for_factor_tail -> . LT_EQ for_factor for_factor_tail
    (357) for_factor_tail -> . NOT_EQ for_factor for_factor_tail
    (358) for_factor_tail -> . AND for_factor for_factor_tail
    (359) for_factor_tail -> . OR for_factor for_factor_tail
    (360) for_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 958
    MINUS           shift and go to state 959
    MULTIPLY        shift and go to state 960
    DIVISION        shift and go to state 961
    MODULO          shift and go to state 962
    EXPONENT        shift and go to state 963
    GT              shift and go to state 964
    LT              shift and go to state 965
    EQ_EQ           shift and go to state 966
    GT_EQ           shift and go to state 967
    LT_EQ           shift and go to state 968
    NOT_EQ          shift and go to state 969
    AND             shift and go to state 970
    OR              shift and go to state 971
    SEMICOLON       reduce using rule 567 (empty -> .)

    for_factor_tail                shift and go to state 1101
    empty                          shift and go to state 972

state 1049

    (340) for_list_index -> LBRACKET for_index . RBRACKET for_list_index2

    RBRACKET        shift and go to state 1102


state 1050

    (344) for_index -> INT_LIT .

    RBRACKET        reduce using rule 344 (for_index -> INT_LIT .)


state 1051

    (345) for_index -> IDENT .

    RBRACKET        reduce using rule 345 (for_index -> IDENT .)


state 1052

    (366) until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .

    NEWLINE         reduce using rule 366 (until_loop -> UNTIL LPAREN until_expression RPAREN LBRACE statements RBRACE .)


state 1053

    (380) until_list_index2 -> LBRACKET . until_index RBRACKET
    (382) until_index -> . INT_LIT
    (383) until_index -> . IDENT

    INT_LIT         shift and go to state 888
    IDENT           shift and go to state 889

    until_index                    shift and go to state 1103

state 1054

    (378) until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .

    PLUS_PLUS       reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    MINUS_MINUS     reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    PLUS            reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    MINUS           reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    MULTIPLY        reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    DIVISION        reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    MODULO          reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    EXPONENT        reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    GT              reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    LT              reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    EQ_EQ           reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    GT_EQ           reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    LT_EQ           reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    NOT_EQ          reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    AND             reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    OR              reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)
    RPAREN          reduce using rule 378 (until_list_index -> LBRACKET until_index RBRACKET until_list_index2 .)


state 1055

    (381) until_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 381 (until_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 381 (until_list_index2 -> empty .)
    PLUS            reduce using rule 381 (until_list_index2 -> empty .)
    MINUS           reduce using rule 381 (until_list_index2 -> empty .)
    MULTIPLY        reduce using rule 381 (until_list_index2 -> empty .)
    DIVISION        reduce using rule 381 (until_list_index2 -> empty .)
    MODULO          reduce using rule 381 (until_list_index2 -> empty .)
    EXPONENT        reduce using rule 381 (until_list_index2 -> empty .)
    GT              reduce using rule 381 (until_list_index2 -> empty .)
    LT              reduce using rule 381 (until_list_index2 -> empty .)
    EQ_EQ           reduce using rule 381 (until_list_index2 -> empty .)
    GT_EQ           reduce using rule 381 (until_list_index2 -> empty .)
    LT_EQ           reduce using rule 381 (until_list_index2 -> empty .)
    NOT_EQ          reduce using rule 381 (until_list_index2 -> empty .)
    AND             reduce using rule 381 (until_list_index2 -> empty .)
    OR              reduce using rule 381 (until_list_index2 -> empty .)
    RPAREN          reduce using rule 381 (until_list_index2 -> empty .)


state 1056

    (404) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression . RPAREN

    RPAREN          shift and go to state 1104


state 1057

    (209) local_list_index2 -> LBRACKET local_index RBRACKET .

    PLUS_PLUS       reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    MINUS_MINUS     reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    PLUS            reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    MINUS           reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    MULTIPLY        reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    DIVISION        reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    MODULO          reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    EXPONENT        reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    GT              reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    LT              reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    EQ_EQ           reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    GT_EQ           reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    LT_EQ           reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    NOT_EQ          reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    AND             reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    OR              reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    COMMA           reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    NEWLINE         reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)
    RPAREN          reduce using rule 209 (local_list_index2 -> LBRACKET local_index RBRACKET .)


state 1058

    (137) revive_list_index2 -> LBRACKET revive_index RBRACKET .

    PLUS_PLUS       reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    MINUS_MINUS     reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    PLUS            reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    MINUS           reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    MULTIPLY        reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    DIVISION        reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    MODULO          reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    EXPONENT        reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    GT              reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    LT              reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    EQ_EQ           reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    GT_EQ           reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    LT_EQ           reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    NOT_EQ          reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    AND             reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    OR              reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    NEWLINE         reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    RBRACE          reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)
    RPAREN          reduce using rule 137 (revive_list_index2 -> LBRACKET revive_index RBRACKET .)


state 1059

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline . OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    OTHERWISE       shift and go to state 1105


state 1060

    (278) switch_condition -> SHIFT switch_value . COLON maybe_newline statements switchcond_tail

    COLON           shift and go to state 1106


state 1061

    (279) switch_value -> switch_type_cast .

    COLON           reduce using rule 279 (switch_value -> switch_type_cast .)


state 1062

    (280) switch_value -> switch_expression .

    COLON           reduce using rule 280 (switch_value -> switch_expression .)


state 1063

    (281) switch_value -> function_call .

    COLON           reduce using rule 281 (switch_value -> function_call .)


state 1064

    (319) switch_type_cast -> CONVERT_TO_INT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 1107


state 1065

    (287) switch_factor -> LPAREN . switch_factor RPAREN
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1108
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1066

    (320) switch_type_cast -> CONVERT_TO_FLT . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 1109


state 1067

    (321) switch_type_cast -> CONVERT_TO_BLN . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 1110


state 1068

    (322) switch_type_cast -> CONVERT_TO_STR . LPAREN typecast_value RPAREN

    LPAREN          shift and go to state 1111


state 1069

    (282) switch_expression -> switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1112
    empty                          shift and go to state 1127

state 1070

    (283) switch_factor -> switch_var_call . switch_postfix
    (291) switch_postfix -> . empty
    (292) switch_postfix -> . switch_postfix_op
    (567) empty -> .
    (289) switch_postfix_op -> . PLUS_PLUS
    (290) switch_postfix_op -> . MINUS_MINUS

    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COLON           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)
    PLUS_PLUS       shift and go to state 1131
    MINUS_MINUS     shift and go to state 1132

    switch_postfix                 shift and go to state 1128
    empty                          shift and go to state 1129
    switch_postfix_op              shift and go to state 1130

state 1071

    (284) switch_factor -> switch_factor1 .

    PLUS            reduce using rule 284 (switch_factor -> switch_factor1 .)
    MINUS           reduce using rule 284 (switch_factor -> switch_factor1 .)
    MULTIPLY        reduce using rule 284 (switch_factor -> switch_factor1 .)
    DIVISION        reduce using rule 284 (switch_factor -> switch_factor1 .)
    MODULO          reduce using rule 284 (switch_factor -> switch_factor1 .)
    EXPONENT        reduce using rule 284 (switch_factor -> switch_factor1 .)
    GT              reduce using rule 284 (switch_factor -> switch_factor1 .)
    LT              reduce using rule 284 (switch_factor -> switch_factor1 .)
    EQ_EQ           reduce using rule 284 (switch_factor -> switch_factor1 .)
    GT_EQ           reduce using rule 284 (switch_factor -> switch_factor1 .)
    LT_EQ           reduce using rule 284 (switch_factor -> switch_factor1 .)
    NOT_EQ          reduce using rule 284 (switch_factor -> switch_factor1 .)
    AND             reduce using rule 284 (switch_factor -> switch_factor1 .)
    OR              reduce using rule 284 (switch_factor -> switch_factor1 .)
    COLON           reduce using rule 284 (switch_factor -> switch_factor1 .)
    RPAREN          reduce using rule 284 (switch_factor -> switch_factor1 .)


state 1072

    (285) switch_factor -> TILDE . INT_LIT
    (286) switch_factor -> TILDE . FLT_LIT

    INT_LIT         shift and go to state 1133
    FLT_LIT         shift and go to state 1134


state 1073

    (314) switch_factor1 -> INT_LIT .

    PLUS            reduce using rule 314 (switch_factor1 -> INT_LIT .)
    MINUS           reduce using rule 314 (switch_factor1 -> INT_LIT .)
    MULTIPLY        reduce using rule 314 (switch_factor1 -> INT_LIT .)
    DIVISION        reduce using rule 314 (switch_factor1 -> INT_LIT .)
    MODULO          reduce using rule 314 (switch_factor1 -> INT_LIT .)
    EXPONENT        reduce using rule 314 (switch_factor1 -> INT_LIT .)
    GT              reduce using rule 314 (switch_factor1 -> INT_LIT .)
    LT              reduce using rule 314 (switch_factor1 -> INT_LIT .)
    EQ_EQ           reduce using rule 314 (switch_factor1 -> INT_LIT .)
    GT_EQ           reduce using rule 314 (switch_factor1 -> INT_LIT .)
    LT_EQ           reduce using rule 314 (switch_factor1 -> INT_LIT .)
    NOT_EQ          reduce using rule 314 (switch_factor1 -> INT_LIT .)
    AND             reduce using rule 314 (switch_factor1 -> INT_LIT .)
    OR              reduce using rule 314 (switch_factor1 -> INT_LIT .)
    COLON           reduce using rule 314 (switch_factor1 -> INT_LIT .)
    RPAREN          reduce using rule 314 (switch_factor1 -> INT_LIT .)


state 1074

    (315) switch_factor1 -> FLT_LIT .

    PLUS            reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    MINUS           reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    MULTIPLY        reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    DIVISION        reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    MODULO          reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    EXPONENT        reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    GT              reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    LT              reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    EQ_EQ           reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    GT_EQ           reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    LT_EQ           reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    NOT_EQ          reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    AND             reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    OR              reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    COLON           reduce using rule 315 (switch_factor1 -> FLT_LIT .)
    RPAREN          reduce using rule 315 (switch_factor1 -> FLT_LIT .)


state 1075

    (288) switch_var_call -> IDENT . switch_list_index
    (293) switch_list_index -> . LBRACKET switch_index RBRACKET switch_list_index2
    (294) switch_list_index -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 1136
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COLON           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    switch_list_index              shift and go to state 1135
    empty                          shift and go to state 1137

state 1076

    (316) switch_factor1 -> DAY .

    PLUS            reduce using rule 316 (switch_factor1 -> DAY .)
    MINUS           reduce using rule 316 (switch_factor1 -> DAY .)
    MULTIPLY        reduce using rule 316 (switch_factor1 -> DAY .)
    DIVISION        reduce using rule 316 (switch_factor1 -> DAY .)
    MODULO          reduce using rule 316 (switch_factor1 -> DAY .)
    EXPONENT        reduce using rule 316 (switch_factor1 -> DAY .)
    GT              reduce using rule 316 (switch_factor1 -> DAY .)
    LT              reduce using rule 316 (switch_factor1 -> DAY .)
    EQ_EQ           reduce using rule 316 (switch_factor1 -> DAY .)
    GT_EQ           reduce using rule 316 (switch_factor1 -> DAY .)
    LT_EQ           reduce using rule 316 (switch_factor1 -> DAY .)
    NOT_EQ          reduce using rule 316 (switch_factor1 -> DAY .)
    AND             reduce using rule 316 (switch_factor1 -> DAY .)
    OR              reduce using rule 316 (switch_factor1 -> DAY .)
    COLON           reduce using rule 316 (switch_factor1 -> DAY .)
    RPAREN          reduce using rule 316 (switch_factor1 -> DAY .)


state 1077

    (317) switch_factor1 -> NIGHT .

    PLUS            reduce using rule 317 (switch_factor1 -> NIGHT .)
    MINUS           reduce using rule 317 (switch_factor1 -> NIGHT .)
    MULTIPLY        reduce using rule 317 (switch_factor1 -> NIGHT .)
    DIVISION        reduce using rule 317 (switch_factor1 -> NIGHT .)
    MODULO          reduce using rule 317 (switch_factor1 -> NIGHT .)
    EXPONENT        reduce using rule 317 (switch_factor1 -> NIGHT .)
    GT              reduce using rule 317 (switch_factor1 -> NIGHT .)
    LT              reduce using rule 317 (switch_factor1 -> NIGHT .)
    EQ_EQ           reduce using rule 317 (switch_factor1 -> NIGHT .)
    GT_EQ           reduce using rule 317 (switch_factor1 -> NIGHT .)
    LT_EQ           reduce using rule 317 (switch_factor1 -> NIGHT .)
    NOT_EQ          reduce using rule 317 (switch_factor1 -> NIGHT .)
    AND             reduce using rule 317 (switch_factor1 -> NIGHT .)
    OR              reduce using rule 317 (switch_factor1 -> NIGHT .)
    COLON           reduce using rule 317 (switch_factor1 -> NIGHT .)
    RPAREN          reduce using rule 317 (switch_factor1 -> NIGHT .)


state 1078

    (318) switch_factor1 -> STR_LIT .

    PLUS            reduce using rule 318 (switch_factor1 -> STR_LIT .)
    MINUS           reduce using rule 318 (switch_factor1 -> STR_LIT .)
    MULTIPLY        reduce using rule 318 (switch_factor1 -> STR_LIT .)
    DIVISION        reduce using rule 318 (switch_factor1 -> STR_LIT .)
    MODULO          reduce using rule 318 (switch_factor1 -> STR_LIT .)
    EXPONENT        reduce using rule 318 (switch_factor1 -> STR_LIT .)
    GT              reduce using rule 318 (switch_factor1 -> STR_LIT .)
    LT              reduce using rule 318 (switch_factor1 -> STR_LIT .)
    EQ_EQ           reduce using rule 318 (switch_factor1 -> STR_LIT .)
    GT_EQ           reduce using rule 318 (switch_factor1 -> STR_LIT .)
    LT_EQ           reduce using rule 318 (switch_factor1 -> STR_LIT .)
    NOT_EQ          reduce using rule 318 (switch_factor1 -> STR_LIT .)
    AND             reduce using rule 318 (switch_factor1 -> STR_LIT .)
    OR              reduce using rule 318 (switch_factor1 -> STR_LIT .)
    COLON           reduce using rule 318 (switch_factor1 -> STR_LIT .)
    RPAREN          reduce using rule 318 (switch_factor1 -> STR_LIT .)


state 1079

    (469) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA . splice_items RPAREN
    (482) splice_items -> . empty
    (483) splice_items -> . list_element
    (567) empty -> .
    (24) list_element -> . literal element_tail
    (25) list_element -> . list_value element_tail
    (91) literal -> . literal1
    (92) literal -> . literal2
    (23) list_value -> . LBRACKET list_element RBRACKET
    (93) literal1 -> . INT_LIT
    (94) literal1 -> . FLT_LIT
    (95) literal1 -> . DAY
    (96) literal1 -> . NIGHT
    (97) literal1 -> . STR_LIT
    (98) literal2 -> . CHR_LIT

    RPAREN          reduce using rule 567 (empty -> .)
    LBRACKET        shift and go to state 48
    INT_LIT         shift and go to state 52
    FLT_LIT         shift and go to state 53
    DAY             shift and go to state 56
    NIGHT           shift and go to state 57
    STR_LIT         shift and go to state 58
    CHR_LIT         shift and go to state 89

    splice_items                   shift and go to state 1138
    empty                          shift and go to state 1139
    list_element                   shift and go to state 1140
    literal                        shift and go to state 85
    list_value                     shift and go to state 86
    literal1                       shift and go to state 87
    literal2                       shift and go to state 88

state 1080

    (509) value_list_index2 -> LBRACKET value_index . RBRACKET

    RBRACKET        shift and go to state 1141


state 1081

    (438) output_list_index2 -> LBRACKET output_index RBRACKET .

    PLUS_PLUS       reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    MINUS_MINUS     reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    PLUS            reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    MINUS           reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    MULTIPLY        reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    DIVISION        reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    MODULO          reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    EXPONENT        reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    GT              reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    LT              reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    EQ_EQ           reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    GT_EQ           reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    LT_EQ           reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    NOT_EQ          reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    AND             reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    OR              reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    COMMA           reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    NEWLINE         reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)
    RPAREN          reduce using rule 438 (output_list_index2 -> LBRACKET output_index RBRACKET .)


state 1082

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    RBRACE          shift and go to state 1142


state 1083

    (253) condition_list_index2 -> LBRACKET condition_index . RBRACKET

    RBRACKET        shift and go to state 1143


state 1084

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 1144


state 1085

    (408) update -> var_call update_tail .

    RPAREN          reduce using rule 408 (update -> var_call update_tail .)


state 1086

    (409) update_tail -> postfix_op .

    RPAREN          reduce using rule 409 (update_tail -> postfix_op .)


state 1087

    (410) update_tail -> compound_op . value
    (493) value -> . type_cast
    (494) value -> . value_expression
    (495) value -> . function_call
    (533) type_cast -> . CONVERT_TO_INT LPAREN typecast_value RPAREN
    (534) type_cast -> . CONVERT_TO_FLT LPAREN typecast_value RPAREN
    (535) type_cast -> . CONVERT_TO_BLN LPAREN typecast_value RPAREN
    (536) type_cast -> . CONVERT_TO_STR LPAREN typecast_value RPAREN
    (496) value_expression -> . value_factor value_factor_tail
    (413) function_call -> . FUNCTION_NAME LPAREN arguments RPAREN
    (414) function_call -> . input_statement
    (497) value_factor -> . value_var_call value_postfix
    (498) value_factor -> . value_factor1
    (499) value_factor -> . TILDE INT_LIT
    (500) value_factor -> . TILDE FLT_LIT
    (501) value_factor -> . LPAREN value_factor RPAREN
    (566) input_statement -> . INPUT LPAREN RPAREN
    (502) value_var_call -> . IDENT value_list_index
    (528) value_factor1 -> . INT_LIT
    (529) value_factor1 -> . FLT_LIT
    (530) value_factor1 -> . DAY
    (531) value_factor1 -> . NIGHT
    (532) value_factor1 -> . STR_LIT

    CONVERT_TO_INT  shift and go to state 464
    CONVERT_TO_FLT  shift and go to state 466
    CONVERT_TO_BLN  shift and go to state 467
    CONVERT_TO_STR  shift and go to state 468
    FUNCTION_NAME   shift and go to state 286
    TILDE           shift and go to state 472
    LPAREN          shift and go to state 465
    INPUT           shift and go to state 293
    IDENT           shift and go to state 475
    INT_LIT         shift and go to state 473
    FLT_LIT         shift and go to state 474
    DAY             shift and go to state 476
    NIGHT           shift and go to state 477
    STR_LIT         shift and go to state 478

    value                          shift and go to state 1145
    type_cast                      shift and go to state 461
    value_expression               shift and go to state 462
    function_call                  shift and go to state 463
    value_factor                   shift and go to state 469
    input_statement                shift and go to state 287
    value_var_call                 shift and go to state 470
    value_factor1                  shift and go to state 471

state 1088

    (346) for_factor_tail -> PLUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 346 (for_factor_tail -> PLUS for_factor for_factor_tail .)


state 1089

    (347) for_factor_tail -> MINUS for_factor for_factor_tail .

    SEMICOLON       reduce using rule 347 (for_factor_tail -> MINUS for_factor for_factor_tail .)


state 1090

    (348) for_factor_tail -> MULTIPLY for_factor for_factor_tail .

    SEMICOLON       reduce using rule 348 (for_factor_tail -> MULTIPLY for_factor for_factor_tail .)


state 1091

    (349) for_factor_tail -> DIVISION for_factor for_factor_tail .

    SEMICOLON       reduce using rule 349 (for_factor_tail -> DIVISION for_factor for_factor_tail .)


state 1092

    (350) for_factor_tail -> MODULO for_factor for_factor_tail .

    SEMICOLON       reduce using rule 350 (for_factor_tail -> MODULO for_factor for_factor_tail .)


state 1093

    (351) for_factor_tail -> EXPONENT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 351 (for_factor_tail -> EXPONENT for_factor for_factor_tail .)


state 1094

    (352) for_factor_tail -> GT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 352 (for_factor_tail -> GT for_factor for_factor_tail .)


state 1095

    (353) for_factor_tail -> LT for_factor for_factor_tail .

    SEMICOLON       reduce using rule 353 (for_factor_tail -> LT for_factor for_factor_tail .)


state 1096

    (354) for_factor_tail -> EQ_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 354 (for_factor_tail -> EQ_EQ for_factor for_factor_tail .)


state 1097

    (355) for_factor_tail -> GT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 355 (for_factor_tail -> GT_EQ for_factor for_factor_tail .)


state 1098

    (356) for_factor_tail -> LT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 356 (for_factor_tail -> LT_EQ for_factor for_factor_tail .)


state 1099

    (357) for_factor_tail -> NOT_EQ for_factor for_factor_tail .

    SEMICOLON       reduce using rule 357 (for_factor_tail -> NOT_EQ for_factor for_factor_tail .)


state 1100

    (358) for_factor_tail -> AND for_factor for_factor_tail .

    SEMICOLON       reduce using rule 358 (for_factor_tail -> AND for_factor for_factor_tail .)


state 1101

    (359) for_factor_tail -> OR for_factor for_factor_tail .

    SEMICOLON       reduce using rule 359 (for_factor_tail -> OR for_factor for_factor_tail .)


state 1102

    (340) for_list_index -> LBRACKET for_index RBRACKET . for_list_index2
    (342) for_list_index2 -> . LBRACKET for_index RBRACKET
    (343) for_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 1146
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    SEMICOLON       reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    for_list_index2                shift and go to state 1147
    empty                          shift and go to state 1148

state 1103

    (380) until_list_index2 -> LBRACKET until_index . RBRACKET

    RBRACKET        shift and go to state 1149


state 1104

    (404) repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .

    NEWLINE         reduce using rule 404 (repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN until_expression RPAREN .)


state 1105

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1150
    empty                          shift and go to state 17

state 1106

    (278) switch_condition -> SHIFT switch_value COLON . maybe_newline statements switchcond_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    SHIFT           reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1151
    empty                          shift and go to state 17

state 1107

    (319) switch_type_cast -> CONVERT_TO_INT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 1152
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 1108

    (287) switch_factor -> LPAREN switch_factor . RPAREN

    RPAREN          shift and go to state 1153


state 1109

    (320) switch_type_cast -> CONVERT_TO_FLT LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 1154
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 1110

    (321) switch_type_cast -> CONVERT_TO_BLN LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 1155
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 1111

    (322) switch_type_cast -> CONVERT_TO_STR LPAREN . typecast_value RPAREN
    (537) typecast_value -> . typecast_expression
    (538) typecast_value -> . FUNCTION_NAME LPAREN RPAREN
    (539) typecast_value -> . input_statement
    (540) typecast_expression -> . typecast_factor typecast_factor_tail
    (566) input_statement -> . INPUT LPAREN RPAREN
    (541) typecast_factor -> . var_call postfix
    (542) typecast_factor -> . typecast_factor1
    (543) typecast_factor -> . TILDE INT_LIT
    (544) typecast_factor -> . TILDE FLT_LIT
    (545) typecast_factor -> . LPAREN typecast_factor RPAREN
    (484) var_call -> . IDENT list_index
    (561) typecast_factor1 -> . INT_LIT
    (562) typecast_factor1 -> . FLT_LIT
    (563) typecast_factor1 -> . DAY
    (564) typecast_factor1 -> . NIGHT
    (565) typecast_factor1 -> . STR_LIT

    FUNCTION_NAME   shift and go to state 550
    INPUT           shift and go to state 293
    TILDE           shift and go to state 555
    LPAREN          shift and go to state 547
    IDENT           shift and go to state 55
    INT_LIT         shift and go to state 556
    FLT_LIT         shift and go to state 557
    DAY             shift and go to state 558
    NIGHT           shift and go to state 559
    STR_LIT         shift and go to state 560

    typecast_value                 shift and go to state 1156
    typecast_expression            shift and go to state 549
    input_statement                shift and go to state 551
    typecast_factor                shift and go to state 552
    var_call                       shift and go to state 553
    typecast_factor1               shift and go to state 554

state 1112

    (282) switch_expression -> switch_factor switch_factor_tail .

    COLON           reduce using rule 282 (switch_expression -> switch_factor switch_factor_tail .)


state 1113

    (299) switch_factor_tail -> PLUS . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1157
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1114

    (300) switch_factor_tail -> MINUS . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1158
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1115

    (301) switch_factor_tail -> MULTIPLY . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1159
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1116

    (302) switch_factor_tail -> DIVISION . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1160
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1117

    (303) switch_factor_tail -> MODULO . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1161
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1118

    (304) switch_factor_tail -> EXPONENT . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1162
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1119

    (305) switch_factor_tail -> GT . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1163
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1120

    (306) switch_factor_tail -> LT . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1164
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1121

    (307) switch_factor_tail -> EQ_EQ . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1165
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1122

    (308) switch_factor_tail -> GT_EQ . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1166
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1123

    (309) switch_factor_tail -> LT_EQ . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1167
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1124

    (310) switch_factor_tail -> NOT_EQ . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1168
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1125

    (311) switch_factor_tail -> AND . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1169
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1126

    (312) switch_factor_tail -> OR . switch_factor switch_factor_tail
    (283) switch_factor -> . switch_var_call switch_postfix
    (284) switch_factor -> . switch_factor1
    (285) switch_factor -> . TILDE INT_LIT
    (286) switch_factor -> . TILDE FLT_LIT
    (287) switch_factor -> . LPAREN switch_factor RPAREN
    (288) switch_var_call -> . IDENT switch_list_index
    (314) switch_factor1 -> . INT_LIT
    (315) switch_factor1 -> . FLT_LIT
    (316) switch_factor1 -> . DAY
    (317) switch_factor1 -> . NIGHT
    (318) switch_factor1 -> . STR_LIT

    TILDE           shift and go to state 1072
    LPAREN          shift and go to state 1065
    IDENT           shift and go to state 1075
    INT_LIT         shift and go to state 1073
    FLT_LIT         shift and go to state 1074
    DAY             shift and go to state 1076
    NIGHT           shift and go to state 1077
    STR_LIT         shift and go to state 1078

    switch_factor                  shift and go to state 1170
    switch_var_call                shift and go to state 1070
    switch_factor1                 shift and go to state 1071

state 1127

    (313) switch_factor_tail -> empty .

    COLON           reduce using rule 313 (switch_factor_tail -> empty .)


state 1128

    (283) switch_factor -> switch_var_call switch_postfix .

    PLUS            reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    MINUS           reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    MULTIPLY        reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    DIVISION        reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    MODULO          reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    EXPONENT        reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    GT              reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    LT              reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    EQ_EQ           reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    GT_EQ           reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    LT_EQ           reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    NOT_EQ          reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    AND             reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    OR              reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    COLON           reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)
    RPAREN          reduce using rule 283 (switch_factor -> switch_var_call switch_postfix .)


state 1129

    (291) switch_postfix -> empty .

    PLUS            reduce using rule 291 (switch_postfix -> empty .)
    MINUS           reduce using rule 291 (switch_postfix -> empty .)
    MULTIPLY        reduce using rule 291 (switch_postfix -> empty .)
    DIVISION        reduce using rule 291 (switch_postfix -> empty .)
    MODULO          reduce using rule 291 (switch_postfix -> empty .)
    EXPONENT        reduce using rule 291 (switch_postfix -> empty .)
    GT              reduce using rule 291 (switch_postfix -> empty .)
    LT              reduce using rule 291 (switch_postfix -> empty .)
    EQ_EQ           reduce using rule 291 (switch_postfix -> empty .)
    GT_EQ           reduce using rule 291 (switch_postfix -> empty .)
    LT_EQ           reduce using rule 291 (switch_postfix -> empty .)
    NOT_EQ          reduce using rule 291 (switch_postfix -> empty .)
    AND             reduce using rule 291 (switch_postfix -> empty .)
    OR              reduce using rule 291 (switch_postfix -> empty .)
    COLON           reduce using rule 291 (switch_postfix -> empty .)
    RPAREN          reduce using rule 291 (switch_postfix -> empty .)


state 1130

    (292) switch_postfix -> switch_postfix_op .

    PLUS            reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    MINUS           reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    MULTIPLY        reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    DIVISION        reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    MODULO          reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    EXPONENT        reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    GT              reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    LT              reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    EQ_EQ           reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    GT_EQ           reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    LT_EQ           reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    NOT_EQ          reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    AND             reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    OR              reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    COLON           reduce using rule 292 (switch_postfix -> switch_postfix_op .)
    RPAREN          reduce using rule 292 (switch_postfix -> switch_postfix_op .)


state 1131

    (289) switch_postfix_op -> PLUS_PLUS .

    PLUS            reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    MINUS           reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    MULTIPLY        reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    DIVISION        reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    MODULO          reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    EXPONENT        reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    GT              reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    LT              reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    EQ_EQ           reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    GT_EQ           reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    LT_EQ           reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    NOT_EQ          reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    AND             reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    OR              reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    COLON           reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)
    RPAREN          reduce using rule 289 (switch_postfix_op -> PLUS_PLUS .)


state 1132

    (290) switch_postfix_op -> MINUS_MINUS .

    PLUS            reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    MINUS           reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    MULTIPLY        reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    DIVISION        reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    MODULO          reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    EXPONENT        reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    GT              reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    LT              reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    EQ_EQ           reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    GT_EQ           reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    LT_EQ           reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    NOT_EQ          reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    AND             reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    OR              reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    COLON           reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)
    RPAREN          reduce using rule 290 (switch_postfix_op -> MINUS_MINUS .)


state 1133

    (285) switch_factor -> TILDE INT_LIT .

    PLUS            reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    MINUS           reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    MULTIPLY        reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    DIVISION        reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    MODULO          reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    EXPONENT        reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    GT              reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    LT              reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    EQ_EQ           reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    GT_EQ           reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    LT_EQ           reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    NOT_EQ          reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    AND             reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    OR              reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    COLON           reduce using rule 285 (switch_factor -> TILDE INT_LIT .)
    RPAREN          reduce using rule 285 (switch_factor -> TILDE INT_LIT .)


state 1134

    (286) switch_factor -> TILDE FLT_LIT .

    PLUS            reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    MINUS           reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    MULTIPLY        reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    DIVISION        reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    MODULO          reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    EXPONENT        reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    GT              reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    LT              reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    EQ_EQ           reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    GT_EQ           reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    LT_EQ           reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    NOT_EQ          reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    AND             reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    OR              reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    COLON           reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)
    RPAREN          reduce using rule 286 (switch_factor -> TILDE FLT_LIT .)


state 1135

    (288) switch_var_call -> IDENT switch_list_index .

    PLUS_PLUS       reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    MINUS_MINUS     reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    PLUS            reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    MINUS           reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    MULTIPLY        reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    DIVISION        reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    MODULO          reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    EXPONENT        reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    GT              reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    LT              reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    EQ_EQ           reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    GT_EQ           reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    LT_EQ           reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    NOT_EQ          reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    AND             reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    OR              reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    COLON           reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)
    RPAREN          reduce using rule 288 (switch_var_call -> IDENT switch_list_index .)


state 1136

    (293) switch_list_index -> LBRACKET . switch_index RBRACKET switch_list_index2
    (297) switch_index -> . INT_LIT
    (298) switch_index -> . IDENT

    INT_LIT         shift and go to state 1172
    IDENT           shift and go to state 1173

    switch_index                   shift and go to state 1171

state 1137

    (294) switch_list_index -> empty .

    PLUS_PLUS       reduce using rule 294 (switch_list_index -> empty .)
    MINUS_MINUS     reduce using rule 294 (switch_list_index -> empty .)
    PLUS            reduce using rule 294 (switch_list_index -> empty .)
    MINUS           reduce using rule 294 (switch_list_index -> empty .)
    MULTIPLY        reduce using rule 294 (switch_list_index -> empty .)
    DIVISION        reduce using rule 294 (switch_list_index -> empty .)
    MODULO          reduce using rule 294 (switch_list_index -> empty .)
    EXPONENT        reduce using rule 294 (switch_list_index -> empty .)
    GT              reduce using rule 294 (switch_list_index -> empty .)
    LT              reduce using rule 294 (switch_list_index -> empty .)
    EQ_EQ           reduce using rule 294 (switch_list_index -> empty .)
    GT_EQ           reduce using rule 294 (switch_list_index -> empty .)
    LT_EQ           reduce using rule 294 (switch_list_index -> empty .)
    NOT_EQ          reduce using rule 294 (switch_list_index -> empty .)
    AND             reduce using rule 294 (switch_list_index -> empty .)
    OR              reduce using rule 294 (switch_list_index -> empty .)
    COLON           reduce using rule 294 (switch_list_index -> empty .)
    RPAREN          reduce using rule 294 (switch_list_index -> empty .)


state 1138

    (469) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items . RPAREN

    RPAREN          shift and go to state 1174


state 1139

    (482) splice_items -> empty .

    RPAREN          reduce using rule 482 (splice_items -> empty .)


state 1140

    (483) splice_items -> list_element .

    RPAREN          reduce using rule 483 (splice_items -> list_element .)


state 1141

    (509) value_list_index2 -> LBRACKET value_index RBRACKET .

    PLUS_PLUS       reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    MINUS_MINUS     reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    PLUS            reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    MINUS           reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    MULTIPLY        reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    DIVISION        reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    MODULO          reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    EXPONENT        reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    GT              reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    LT              reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    EQ_EQ           reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    GT_EQ           reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    LT_EQ           reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    NOT_EQ          reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    AND             reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    OR              reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    NEWLINE         reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    RPAREN          reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)
    COMMA           reduce using rule 509 (value_list_index2 -> LBRACKET value_index RBRACKET .)


state 1142

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    OTHERWISE_CHECK reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1175
    empty                          shift and go to state 17

state 1143

    (253) condition_list_index2 -> LBRACKET condition_index RBRACKET .

    PLUS_PLUS       reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    MINUS_MINUS     reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    PLUS            reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    MINUS           reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    MULTIPLY        reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    DIVISION        reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    MODULO          reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    EXPONENT        reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    GT              reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    LT              reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    EQ_EQ           reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    GT_EQ           reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    LT_EQ           reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    NOT_EQ          reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    AND             reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    OR              reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)
    RPAREN          reduce using rule 253 (condition_list_index2 -> LBRACKET condition_index RBRACKET .)


state 1144

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1176
    empty                          shift and go to state 17

state 1145

    (410) update_tail -> compound_op value .

    RPAREN          reduce using rule 410 (update_tail -> compound_op value .)


state 1146

    (342) for_list_index2 -> LBRACKET . for_index RBRACKET
    (344) for_index -> . INT_LIT
    (345) for_index -> . IDENT

    INT_LIT         shift and go to state 1050
    IDENT           shift and go to state 1051

    for_index                      shift and go to state 1177

state 1147

    (340) for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .

    PLUS_PLUS       reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    MINUS_MINUS     reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    PLUS            reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    MINUS           reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    MULTIPLY        reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    DIVISION        reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    MODULO          reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    EXPONENT        reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    GT              reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    LT              reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    EQ_EQ           reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    GT_EQ           reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    LT_EQ           reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    NOT_EQ          reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    AND             reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    OR              reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    SEMICOLON       reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)
    RPAREN          reduce using rule 340 (for_list_index -> LBRACKET for_index RBRACKET for_list_index2 .)


state 1148

    (343) for_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 343 (for_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 343 (for_list_index2 -> empty .)
    PLUS            reduce using rule 343 (for_list_index2 -> empty .)
    MINUS           reduce using rule 343 (for_list_index2 -> empty .)
    MULTIPLY        reduce using rule 343 (for_list_index2 -> empty .)
    DIVISION        reduce using rule 343 (for_list_index2 -> empty .)
    MODULO          reduce using rule 343 (for_list_index2 -> empty .)
    EXPONENT        reduce using rule 343 (for_list_index2 -> empty .)
    GT              reduce using rule 343 (for_list_index2 -> empty .)
    LT              reduce using rule 343 (for_list_index2 -> empty .)
    EQ_EQ           reduce using rule 343 (for_list_index2 -> empty .)
    GT_EQ           reduce using rule 343 (for_list_index2 -> empty .)
    LT_EQ           reduce using rule 343 (for_list_index2 -> empty .)
    NOT_EQ          reduce using rule 343 (for_list_index2 -> empty .)
    AND             reduce using rule 343 (for_list_index2 -> empty .)
    OR              reduce using rule 343 (for_list_index2 -> empty .)
    SEMICOLON       reduce using rule 343 (for_list_index2 -> empty .)
    RPAREN          reduce using rule 343 (for_list_index2 -> empty .)


state 1149

    (380) until_list_index2 -> LBRACKET until_index RBRACKET .

    PLUS_PLUS       reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    MINUS_MINUS     reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    PLUS            reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    MINUS           reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    MULTIPLY        reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    DIVISION        reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    MODULO          reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    EXPONENT        reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    GT              reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    LT              reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    EQ_EQ           reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    GT_EQ           reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    LT_EQ           reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    NOT_EQ          reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    AND             reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    OR              reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)
    RPAREN          reduce using rule 380 (until_list_index2 -> LBRACKET until_index RBRACKET .)


state 1150

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE

    LBRACE          shift and go to state 1178


state 1151

    (278) switch_condition -> SHIFT switch_value COLON maybe_newline . statements switchcond_tail
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    SHIFT           reduce using rule 567 (empty -> .)
    NEWLINE         reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 1179
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 1152

    (319) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1180


state 1153

    (287) switch_factor -> LPAREN switch_factor RPAREN .

    PLUS            reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    MINUS           reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    MULTIPLY        reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    DIVISION        reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    MODULO          reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    EXPONENT        reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT              reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT              reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    EQ_EQ           reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    GT_EQ           reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    LT_EQ           reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    NOT_EQ          reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    AND             reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    OR              reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    COLON           reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)
    RPAREN          reduce using rule 287 (switch_factor -> LPAREN switch_factor RPAREN .)


state 1154

    (320) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1181


state 1155

    (321) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1182


state 1156

    (322) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value . RPAREN

    RPAREN          shift and go to state 1183


state 1157

    (299) switch_factor_tail -> PLUS switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1184
    empty                          shift and go to state 1127

state 1158

    (300) switch_factor_tail -> MINUS switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1185
    empty                          shift and go to state 1127

state 1159

    (301) switch_factor_tail -> MULTIPLY switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1186
    empty                          shift and go to state 1127

state 1160

    (302) switch_factor_tail -> DIVISION switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1187
    empty                          shift and go to state 1127

state 1161

    (303) switch_factor_tail -> MODULO switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1188
    empty                          shift and go to state 1127

state 1162

    (304) switch_factor_tail -> EXPONENT switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1189
    empty                          shift and go to state 1127

state 1163

    (305) switch_factor_tail -> GT switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1190
    empty                          shift and go to state 1127

state 1164

    (306) switch_factor_tail -> LT switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1191
    empty                          shift and go to state 1127

state 1165

    (307) switch_factor_tail -> EQ_EQ switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1192
    empty                          shift and go to state 1127

state 1166

    (308) switch_factor_tail -> GT_EQ switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1193
    empty                          shift and go to state 1127

state 1167

    (309) switch_factor_tail -> LT_EQ switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1194
    empty                          shift and go to state 1127

state 1168

    (310) switch_factor_tail -> NOT_EQ switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1195
    empty                          shift and go to state 1127

state 1169

    (311) switch_factor_tail -> AND switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1196
    empty                          shift and go to state 1127

state 1170

    (312) switch_factor_tail -> OR switch_factor . switch_factor_tail
    (299) switch_factor_tail -> . PLUS switch_factor switch_factor_tail
    (300) switch_factor_tail -> . MINUS switch_factor switch_factor_tail
    (301) switch_factor_tail -> . MULTIPLY switch_factor switch_factor_tail
    (302) switch_factor_tail -> . DIVISION switch_factor switch_factor_tail
    (303) switch_factor_tail -> . MODULO switch_factor switch_factor_tail
    (304) switch_factor_tail -> . EXPONENT switch_factor switch_factor_tail
    (305) switch_factor_tail -> . GT switch_factor switch_factor_tail
    (306) switch_factor_tail -> . LT switch_factor switch_factor_tail
    (307) switch_factor_tail -> . EQ_EQ switch_factor switch_factor_tail
    (308) switch_factor_tail -> . GT_EQ switch_factor switch_factor_tail
    (309) switch_factor_tail -> . LT_EQ switch_factor switch_factor_tail
    (310) switch_factor_tail -> . NOT_EQ switch_factor switch_factor_tail
    (311) switch_factor_tail -> . AND switch_factor switch_factor_tail
    (312) switch_factor_tail -> . OR switch_factor switch_factor_tail
    (313) switch_factor_tail -> . empty
    (567) empty -> .

    PLUS            shift and go to state 1113
    MINUS           shift and go to state 1114
    MULTIPLY        shift and go to state 1115
    DIVISION        shift and go to state 1116
    MODULO          shift and go to state 1117
    EXPONENT        shift and go to state 1118
    GT              shift and go to state 1119
    LT              shift and go to state 1120
    EQ_EQ           shift and go to state 1121
    GT_EQ           shift and go to state 1122
    LT_EQ           shift and go to state 1123
    NOT_EQ          shift and go to state 1124
    AND             shift and go to state 1125
    OR              shift and go to state 1126
    COLON           reduce using rule 567 (empty -> .)

    switch_factor_tail             shift and go to state 1197
    empty                          shift and go to state 1127

state 1171

    (293) switch_list_index -> LBRACKET switch_index . RBRACKET switch_list_index2

    RBRACKET        shift and go to state 1198


state 1172

    (297) switch_index -> INT_LIT .

    RBRACKET        reduce using rule 297 (switch_index -> INT_LIT .)


state 1173

    (298) switch_index -> IDENT .

    RBRACKET        reduce using rule 298 (switch_index -> IDENT .)


state 1174

    (469) assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .

    NEWLINE         reduce using rule 469 (assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN .)


state 1175

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (238) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail
    (239) conditional_tail -> . empty
    (567) empty -> .

    OTHERWISE_CHECK shift and go to state 1200
    NEWLINE         reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

    conditional_tail               shift and go to state 1199
    empty                          shift and go to state 1201

state 1176

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 1202
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 1177

    (342) for_list_index2 -> LBRACKET for_index . RBRACKET

    RBRACKET        shift and go to state 1203


state 1178

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1204
    empty                          shift and go to state 17

state 1179

    (278) switch_condition -> SHIFT switch_value COLON maybe_newline statements . switchcond_tail
    (323) switchcond_tail -> . switch_condition
    (324) switchcond_tail -> . empty
    (278) switch_condition -> . SHIFT switch_value COLON maybe_newline statements switchcond_tail
    (567) empty -> .

    SHIFT           shift and go to state 1020
    NEWLINE         reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

    switchcond_tail                shift and go to state 1205
    switch_condition               shift and go to state 1206
    empty                          shift and go to state 1207

state 1180

    (319) switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 319 (switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN .)


state 1181

    (320) switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .

    COLON           reduce using rule 320 (switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN .)


state 1182

    (321) switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .

    COLON           reduce using rule 321 (switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN .)


state 1183

    (322) switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .

    COLON           reduce using rule 322 (switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN .)


state 1184

    (299) switch_factor_tail -> PLUS switch_factor switch_factor_tail .

    COLON           reduce using rule 299 (switch_factor_tail -> PLUS switch_factor switch_factor_tail .)


state 1185

    (300) switch_factor_tail -> MINUS switch_factor switch_factor_tail .

    COLON           reduce using rule 300 (switch_factor_tail -> MINUS switch_factor switch_factor_tail .)


state 1186

    (301) switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .

    COLON           reduce using rule 301 (switch_factor_tail -> MULTIPLY switch_factor switch_factor_tail .)


state 1187

    (302) switch_factor_tail -> DIVISION switch_factor switch_factor_tail .

    COLON           reduce using rule 302 (switch_factor_tail -> DIVISION switch_factor switch_factor_tail .)


state 1188

    (303) switch_factor_tail -> MODULO switch_factor switch_factor_tail .

    COLON           reduce using rule 303 (switch_factor_tail -> MODULO switch_factor switch_factor_tail .)


state 1189

    (304) switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .

    COLON           reduce using rule 304 (switch_factor_tail -> EXPONENT switch_factor switch_factor_tail .)


state 1190

    (305) switch_factor_tail -> GT switch_factor switch_factor_tail .

    COLON           reduce using rule 305 (switch_factor_tail -> GT switch_factor switch_factor_tail .)


state 1191

    (306) switch_factor_tail -> LT switch_factor switch_factor_tail .

    COLON           reduce using rule 306 (switch_factor_tail -> LT switch_factor switch_factor_tail .)


state 1192

    (307) switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 307 (switch_factor_tail -> EQ_EQ switch_factor switch_factor_tail .)


state 1193

    (308) switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 308 (switch_factor_tail -> GT_EQ switch_factor switch_factor_tail .)


state 1194

    (309) switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 309 (switch_factor_tail -> LT_EQ switch_factor switch_factor_tail .)


state 1195

    (310) switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .

    COLON           reduce using rule 310 (switch_factor_tail -> NOT_EQ switch_factor switch_factor_tail .)


state 1196

    (311) switch_factor_tail -> AND switch_factor switch_factor_tail .

    COLON           reduce using rule 311 (switch_factor_tail -> AND switch_factor switch_factor_tail .)


state 1197

    (312) switch_factor_tail -> OR switch_factor switch_factor_tail .

    COLON           reduce using rule 312 (switch_factor_tail -> OR switch_factor switch_factor_tail .)


state 1198

    (293) switch_list_index -> LBRACKET switch_index RBRACKET . switch_list_index2
    (295) switch_list_index2 -> . LBRACKET switch_index RBRACKET
    (296) switch_list_index2 -> . empty
    (567) empty -> .

    LBRACKET        shift and go to state 1208
    PLUS_PLUS       reduce using rule 567 (empty -> .)
    MINUS_MINUS     reduce using rule 567 (empty -> .)
    PLUS            reduce using rule 567 (empty -> .)
    MINUS           reduce using rule 567 (empty -> .)
    MULTIPLY        reduce using rule 567 (empty -> .)
    DIVISION        reduce using rule 567 (empty -> .)
    MODULO          reduce using rule 567 (empty -> .)
    EXPONENT        reduce using rule 567 (empty -> .)
    GT              reduce using rule 567 (empty -> .)
    LT              reduce using rule 567 (empty -> .)
    EQ_EQ           reduce using rule 567 (empty -> .)
    GT_EQ           reduce using rule 567 (empty -> .)
    LT_EQ           reduce using rule 567 (empty -> .)
    NOT_EQ          reduce using rule 567 (empty -> .)
    AND             reduce using rule 567 (empty -> .)
    OR              reduce using rule 567 (empty -> .)
    COLON           reduce using rule 567 (empty -> .)
    RPAREN          reduce using rule 567 (empty -> .)

    switch_list_index2             shift and go to state 1209
    empty                          shift and go to state 1210

state 1199

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail . maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    OTHERWISE       reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1211
    empty                          shift and go to state 17

state 1200

    (238) conditional_tail -> OTHERWISE_CHECK . LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail

    LPAREN          shift and go to state 1212


state 1201

    (239) conditional_tail -> empty .

    NEWLINE         reduce using rule 239 (conditional_tail -> empty .)
    OTHERWISE       reduce using rule 239 (conditional_tail -> empty .)


state 1202

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1213
    empty                          shift and go to state 17

state 1203

    (342) for_list_index2 -> LBRACKET for_index RBRACKET .

    PLUS_PLUS       reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    MINUS_MINUS     reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    PLUS            reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    MINUS           reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    MULTIPLY        reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    DIVISION        reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    MODULO          reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    EXPONENT        reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    GT              reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    LT              reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    EQ_EQ           reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    GT_EQ           reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    LT_EQ           reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    NOT_EQ          reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    AND             reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    OR              reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    SEMICOLON       reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)
    RPAREN          reduce using rule 342 (for_list_index2 -> LBRACKET for_index RBRACKET .)


state 1204

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 1214
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 1205

    (278) switch_condition -> SHIFT switch_value COLON maybe_newline statements switchcond_tail .

    NEWLINE         reduce using rule 278 (switch_condition -> SHIFT switch_value COLON maybe_newline statements switchcond_tail .)
    OTHERWISE       reduce using rule 278 (switch_condition -> SHIFT switch_value COLON maybe_newline statements switchcond_tail .)


state 1206

    (323) switchcond_tail -> switch_condition .

    NEWLINE         reduce using rule 323 (switchcond_tail -> switch_condition .)
    OTHERWISE       reduce using rule 323 (switchcond_tail -> switch_condition .)


state 1207

    (324) switchcond_tail -> empty .

    NEWLINE         reduce using rule 324 (switchcond_tail -> empty .)
    OTHERWISE       reduce using rule 324 (switchcond_tail -> empty .)


state 1208

    (295) switch_list_index2 -> LBRACKET . switch_index RBRACKET
    (297) switch_index -> . INT_LIT
    (298) switch_index -> . IDENT

    INT_LIT         shift and go to state 1172
    IDENT           shift and go to state 1173

    switch_index                   shift and go to state 1215

state 1209

    (293) switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .

    PLUS_PLUS       reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    MINUS_MINUS     reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    PLUS            reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    MINUS           reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    MULTIPLY        reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    DIVISION        reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    MODULO          reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    EXPONENT        reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    GT              reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    LT              reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    EQ_EQ           reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    GT_EQ           reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    LT_EQ           reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    NOT_EQ          reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    AND             reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    OR              reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    COLON           reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)
    RPAREN          reduce using rule 293 (switch_list_index -> LBRACKET switch_index RBRACKET switch_list_index2 .)


state 1210

    (296) switch_list_index2 -> empty .

    PLUS_PLUS       reduce using rule 296 (switch_list_index2 -> empty .)
    MINUS_MINUS     reduce using rule 296 (switch_list_index2 -> empty .)
    PLUS            reduce using rule 296 (switch_list_index2 -> empty .)
    MINUS           reduce using rule 296 (switch_list_index2 -> empty .)
    MULTIPLY        reduce using rule 296 (switch_list_index2 -> empty .)
    DIVISION        reduce using rule 296 (switch_list_index2 -> empty .)
    MODULO          reduce using rule 296 (switch_list_index2 -> empty .)
    EXPONENT        reduce using rule 296 (switch_list_index2 -> empty .)
    GT              reduce using rule 296 (switch_list_index2 -> empty .)
    LT              reduce using rule 296 (switch_list_index2 -> empty .)
    EQ_EQ           reduce using rule 296 (switch_list_index2 -> empty .)
    GT_EQ           reduce using rule 296 (switch_list_index2 -> empty .)
    LT_EQ           reduce using rule 296 (switch_list_index2 -> empty .)
    NOT_EQ          reduce using rule 296 (switch_list_index2 -> empty .)
    AND             reduce using rule 296 (switch_list_index2 -> empty .)
    OR              reduce using rule 296 (switch_list_index2 -> empty .)
    COLON           reduce using rule 296 (switch_list_index2 -> empty .)
    RPAREN          reduce using rule 296 (switch_list_index2 -> empty .)


state 1211

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline . OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE

    OTHERWISE       shift and go to state 1216


state 1212

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN . condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail
    (240) condition -> . condition_factor condition_tail
    (241) condition_factor -> . condition_var_call condition_postfix
    (242) condition_factor -> . condition1
    (243) condition_factor -> . TILDE INT_LIT
    (244) condition_factor -> . TILDE FLT_LIT
    (245) condition_factor -> . LPAREN condition RPAREN
    (246) condition_var_call -> . IDENT condition_list_index
    (272) condition1 -> . INT_LIT
    (273) condition1 -> . FLT_LIT
    (274) condition1 -> . DAY
    (275) condition1 -> . NIGHT
    (276) condition1 -> . STR_LIT

    TILDE           shift and go to state 523
    LPAREN          shift and go to state 518
    IDENT           shift and go to state 526
    INT_LIT         shift and go to state 524
    FLT_LIT         shift and go to state 525
    DAY             shift and go to state 527
    NIGHT           shift and go to state 528
    STR_LIT         shift and go to state 529

    condition                      shift and go to state 1217
    condition_factor               shift and go to state 520
    condition_var_call             shift and go to state 521
    condition1                     shift and go to state 522

state 1213

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 1218


state 1214

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1219
    empty                          shift and go to state 17

state 1215

    (295) switch_list_index2 -> LBRACKET switch_index . RBRACKET

    RBRACKET        shift and go to state 1220


state 1216

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE . maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    LBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1221
    empty                          shift and go to state 17

state 1217

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition . RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail

    RPAREN          shift and go to state 1222


state 1218

    (328) for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 328 (for_loop -> FOR LPAREN control_variable SEMICOLON for_expression SEMICOLON update RPAREN LBRACE maybe_newline statements maybe_newline RBRACE .)


state 1219

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline RBRACE

    RBRACE          shift and go to state 1223


state 1220

    (295) switch_list_index2 -> LBRACKET switch_index RBRACKET .

    PLUS_PLUS       reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    MINUS_MINUS     reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    PLUS            reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    MINUS           reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    MULTIPLY        reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    DIVISION        reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    MODULO          reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    EXPONENT        reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    GT              reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    LT              reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    EQ_EQ           reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    GT_EQ           reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    LT_EQ           reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    NOT_EQ          reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    AND             reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    OR              reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    COLON           reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)
    RPAREN          reduce using rule 295 (switch_list_index2 -> LBRACKET switch_index RBRACKET .)


state 1221

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline . LBRACE maybe_newline statements maybe_newline RBRACE

    LBRACE          shift and go to state 1224


state 1222

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN . LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail

    LBRACE          shift and go to state 1225


state 1223

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1226
    empty                          shift and go to state 17

state 1224

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE . maybe_newline statements maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1227
    empty                          shift and go to state 17

state 1225

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE . maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    INT             reduce using rule 567 (empty -> .)
    FLT             reduce using rule 567 (empty -> .)
    BLN             reduce using rule 567 (empty -> .)
    CHR             reduce using rule 567 (empty -> .)
    STR             reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1228
    empty                          shift and go to state 17

state 1226

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . RBRACE

    RBRACE          shift and go to state 1229


state 1227

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline . statements maybe_newline RBRACE
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 1230
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 1228

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline . statements maybe_newline RBRACE maybe_newline conditional_tail
    (165) statements -> . empty
    (166) statements -> . local_dec maybe_newline statements_tail
    (567) empty -> .
    (174) local_dec -> . local_var_statement local_dec_tail unli_newline
    (175) local_dec -> . empty
    (176) local_var_statement -> . local_data_type IDENT local_list_dec
    (177) local_data_type -> . INT
    (178) local_data_type -> . FLT
    (179) local_data_type -> . BLN
    (180) local_data_type -> . CHR
    (181) local_data_type -> . STR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLT resolved as shift
  ! shift/reduce conflict for BLN resolved as shift
  ! shift/reduce conflict for CHR resolved as shift
  ! shift/reduce conflict for STR resolved as shift
    NEWLINE         reduce using rule 567 (empty -> .)
    RBRACE          reduce using rule 567 (empty -> .)
    SWAP            reduce using rule 567 (empty -> .)
    FUNCTION_NAME   reduce using rule 567 (empty -> .)
    IDENT           reduce using rule 567 (empty -> .)
    DISPLAY         reduce using rule 567 (empty -> .)
    CHECK           reduce using rule 567 (empty -> .)
    FOR             reduce using rule 567 (empty -> .)
    UNTIL           reduce using rule 567 (empty -> .)
    REPEAT          reduce using rule 567 (empty -> .)
    INPUT           reduce using rule 567 (empty -> .)
    INT             shift and go to state 253
    FLT             shift and go to state 254
    BLN             shift and go to state 255
    CHR             shift and go to state 256
    STR             shift and go to state 257

  ! INT             [ reduce using rule 567 (empty -> .) ]
  ! FLT             [ reduce using rule 567 (empty -> .) ]
  ! BLN             [ reduce using rule 567 (empty -> .) ]
  ! CHR             [ reduce using rule 567 (empty -> .) ]
  ! STR             [ reduce using rule 567 (empty -> .) ]

    statements                     shift and go to state 1231
    empty                          shift and go to state 249
    local_dec                      shift and go to state 250
    local_var_statement            shift and go to state 251
    local_data_type                shift and go to state 252

state 1229

    (277) switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE .

    NEWLINE         reduce using rule 277 (switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE .)


state 1230

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements . maybe_newline RBRACE
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1232
    empty                          shift and go to state 17

state 1231

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements . maybe_newline RBRACE maybe_newline conditional_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

    NEWLINE         shift and go to state 18
    RBRACE          reduce using rule 567 (empty -> .)

    maybe_newline                  shift and go to state 1233
    empty                          shift and go to state 17

state 1232

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline . RBRACE

    RBRACE          shift and go to state 1234


state 1233

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline . RBRACE maybe_newline conditional_tail

    RBRACE          shift and go to state 1235


state 1234

    (237) conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .

    NEWLINE         reduce using rule 237 (conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE .)


state 1235

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE . maybe_newline conditional_tail
    (2) maybe_newline -> . empty
    (3) maybe_newline -> . NEWLINE maybe_newline
    (567) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 18
    OTHERWISE_CHECK reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

  ! NEWLINE         [ reduce using rule 567 (empty -> .) ]

    maybe_newline                  shift and go to state 1236
    empty                          shift and go to state 17

state 1236

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline . conditional_tail
    (238) conditional_tail -> . OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail
    (239) conditional_tail -> . empty
    (567) empty -> .

    OTHERWISE_CHECK shift and go to state 1200
    NEWLINE         reduce using rule 567 (empty -> .)
    OTHERWISE       reduce using rule 567 (empty -> .)

    conditional_tail               shift and go to state 1237
    empty                          shift and go to state 1201

state 1237

    (238) conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail .

    NEWLINE         reduce using rule 238 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail .)
    OTHERWISE       reduce using rule 238 (conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 5 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 18 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 234 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 242 resolved as shift
WARNING: shift/reduce conflict for INT in state 243 resolved as shift
WARNING: shift/reduce conflict for FLT in state 243 resolved as shift
WARNING: shift/reduce conflict for BLN in state 243 resolved as shift
WARNING: shift/reduce conflict for CHR in state 243 resolved as shift
WARNING: shift/reduce conflict for STR in state 243 resolved as shift
WARNING: shift/reduce conflict for INT in state 247 resolved as shift
WARNING: shift/reduce conflict for FLT in state 247 resolved as shift
WARNING: shift/reduce conflict for BLN in state 247 resolved as shift
WARNING: shift/reduce conflict for CHR in state 247 resolved as shift
WARNING: shift/reduce conflict for STR in state 247 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 248 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 250 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 262 resolved as shift
WARNING: shift/reduce conflict for FUNCTION_NAME in state 262 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 262 resolved as shift
WARNING: shift/reduce conflict for DISPLAY in state 262 resolved as shift
WARNING: shift/reduce conflict for CHECK in state 262 resolved as shift
WARNING: shift/reduce conflict for FOR in state 262 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 262 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 262 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 262 resolved as shift
WARNING: shift/reduce conflict for INT in state 262 resolved as shift
WARNING: shift/reduce conflict for FLT in state 262 resolved as shift
WARNING: shift/reduce conflict for BLN in state 262 resolved as shift
WARNING: shift/reduce conflict for CHR in state 262 resolved as shift
WARNING: shift/reduce conflict for STR in state 262 resolved as shift
WARNING: shift/reduce conflict for INT in state 341 resolved as shift
WARNING: shift/reduce conflict for FLT in state 341 resolved as shift
WARNING: shift/reduce conflict for BLN in state 341 resolved as shift
WARNING: shift/reduce conflict for CHR in state 341 resolved as shift
WARNING: shift/reduce conflict for STR in state 341 resolved as shift
WARNING: shift/reduce conflict for INT in state 342 resolved as shift
WARNING: shift/reduce conflict for FLT in state 342 resolved as shift
WARNING: shift/reduce conflict for BLN in state 342 resolved as shift
WARNING: shift/reduce conflict for CHR in state 342 resolved as shift
WARNING: shift/reduce conflict for STR in state 342 resolved as shift
WARNING: shift/reduce conflict for INT in state 343 resolved as shift
WARNING: shift/reduce conflict for FLT in state 343 resolved as shift
WARNING: shift/reduce conflict for BLN in state 343 resolved as shift
WARNING: shift/reduce conflict for CHR in state 343 resolved as shift
WARNING: shift/reduce conflict for STR in state 343 resolved as shift
WARNING: shift/reduce conflict for INT in state 344 resolved as shift
WARNING: shift/reduce conflict for FLT in state 344 resolved as shift
WARNING: shift/reduce conflict for BLN in state 344 resolved as shift
WARNING: shift/reduce conflict for CHR in state 344 resolved as shift
WARNING: shift/reduce conflict for STR in state 344 resolved as shift
WARNING: shift/reduce conflict for INT in state 345 resolved as shift
WARNING: shift/reduce conflict for FLT in state 345 resolved as shift
WARNING: shift/reduce conflict for BLN in state 345 resolved as shift
WARNING: shift/reduce conflict for CHR in state 345 resolved as shift
WARNING: shift/reduce conflict for STR in state 345 resolved as shift
WARNING: shift/reduce conflict for INT in state 346 resolved as shift
WARNING: shift/reduce conflict for FLT in state 346 resolved as shift
WARNING: shift/reduce conflict for BLN in state 346 resolved as shift
WARNING: shift/reduce conflict for CHR in state 346 resolved as shift
WARNING: shift/reduce conflict for STR in state 346 resolved as shift
WARNING: shift/reduce conflict for INT in state 381 resolved as shift
WARNING: shift/reduce conflict for FLT in state 381 resolved as shift
WARNING: shift/reduce conflict for BLN in state 381 resolved as shift
WARNING: shift/reduce conflict for CHR in state 381 resolved as shift
WARNING: shift/reduce conflict for STR in state 381 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 840 resolved as shift
WARNING: shift/reduce conflict for INT in state 872 resolved as shift
WARNING: shift/reduce conflict for FLT in state 872 resolved as shift
WARNING: shift/reduce conflict for BLN in state 872 resolved as shift
WARNING: shift/reduce conflict for CHR in state 872 resolved as shift
WARNING: shift/reduce conflict for STR in state 872 resolved as shift
WARNING: shift/reduce conflict for INT in state 939 resolved as shift
WARNING: shift/reduce conflict for FLT in state 939 resolved as shift
WARNING: shift/reduce conflict for BLN in state 939 resolved as shift
WARNING: shift/reduce conflict for CHR in state 939 resolved as shift
WARNING: shift/reduce conflict for STR in state 939 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1106 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1142 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1144 resolved as shift
WARNING: shift/reduce conflict for INT in state 1151 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1151 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1151 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1151 resolved as shift
WARNING: shift/reduce conflict for STR in state 1151 resolved as shift
WARNING: shift/reduce conflict for INT in state 1176 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1176 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1176 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1176 resolved as shift
WARNING: shift/reduce conflict for STR in state 1176 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1178 resolved as shift
WARNING: shift/reduce conflict for INT in state 1204 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1204 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1204 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1204 resolved as shift
WARNING: shift/reduce conflict for STR in state 1204 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1224 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1225 resolved as shift
WARNING: shift/reduce conflict for INT in state 1227 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1227 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1227 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1227 resolved as shift
WARNING: shift/reduce conflict for STR in state 1227 resolved as shift
WARNING: shift/reduce conflict for INT in state 1228 resolved as shift
WARNING: shift/reduce conflict for FLT in state 1228 resolved as shift
WARNING: shift/reduce conflict for BLN in state 1228 resolved as shift
WARNING: shift/reduce conflict for CHR in state 1228 resolved as shift
WARNING: shift/reduce conflict for STR in state 1228 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 1235 resolved as shift
WARNING: reduce/reduce conflict in state 249 resolved using rule (statements -> empty)
WARNING: rejected rule (local_dec -> empty) in state 249
WARNING: reduce/reduce conflict in state 772 resolved using rule (function_statements -> empty)
WARNING: rejected rule (function_statements_tail -> empty) in state 772
WARNING: Rule (function_statements_tail -> empty) is never reduced
