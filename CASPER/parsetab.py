
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_decglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : expressionvar_statement : data_type IDENT var_tail unli_newlinevar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value :  expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expression\n                   | GT expression\n                   | LT expression\n                   | EQ_EQ expression\n                   | GT_EQ expression\n                   | LT_EQ expression\n                   | NOT_EQ expression\n                   | AND expression\n                   | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE \n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : string_operation_statement unli_newline statements_tail2\n                    | conditional_statement unli_newline statements_tail2\n                    | switch_statement unli_newline statements_tail2\n                    | loop_statement unli_newline statements_tail2\n                    | function_call unli_newline statements_tail2\n                    | output_statement unli_newline statements_tail2\n                    \n    \n    statements_tail2 : statements\n    local_dec : empty\n                 | var_statementconditional_statement : CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACEconditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tailswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | output_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,120,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,21,22,23,24,25,26,27,44,45,46,48,49,50,51,54,55,56,57,58,59,60,62,64,65,66,70,71,86,88,89,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,121,122,124,125,132,133,135,136,138,139,140,141,143,147,148,150,151,152,153,154,155,156,157,158,162,163,164,170,171,175,176,177,178,183,184,185,186,187,188,189,190,192,193,195,196,206,210,211,212,213,215,216,221,222,223,224,225,226,227,228,229,230,231,239,240,247,248,249,252,262,263,264,266,270,276,277,278,281,282,283,284,286,288,289,292,294,297,298,303,305,306,315,317,319,320,321,323,324,326,327,328,329,331,332,333,336,337,338,339,341,343,344,346,348,350,351,352,355,356,357,359,360,361,],[4,-152,4,17,4,-8,-5,17,-2,17,-152,-152,17,-77,-3,-7,-9,-10,-11,-152,-152,-16,-18,-152,-54,-55,-152,-47,-48,-49,-50,-51,-52,4,-12,-13,-14,-53,-58,-56,-73,-74,-152,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,17,-15,-75,17,17,4,-152,-152,17,-96,17,-106,-152,-152,17,-95,-6,-97,4,4,4,4,4,4,-114,-115,-116,4,-20,-94,-37,-38,-39,-127,-152,-152,-152,-152,-152,-152,-139,-141,-122,-124,-125,-152,17,-19,-152,-25,-152,-76,-98,-104,-99,-100,-101,-102,-103,-152,-150,-151,-123,-134,-136,-152,-21,-23,-22,-140,-148,17,-126,-152,-152,-26,-40,-41,-42,-43,-152,17,-137,-135,17,-24,-149,17,-152,-152,17,17,-118,17,17,17,-119,-152,-152,17,17,-108,17,-152,-152,-152,-111,-112,-113,17,17,-117,17,17,17,-152,17,-152,-110,-107,17,-152,-109,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,21,22,23,24,25,43,216,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,-152,-77,-3,-7,-9,63,-76,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,31,-2,-3,-7,-9,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,33,-2,-3,-7,-9,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,34,-2,-3,-7,-9,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,35,-2,-3,-7,-9,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,36,-2,-3,-7,-9,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,37,-2,-3,-7,-9,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,38,-2,-3,-7,-9,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,39,-2,-3,-7,-9,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,40,-2,-3,-7,-9,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,41,-2,-3,-7,-9,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-152,-4,-152,-8,-5,-152,-2,-152,-152,42,-2,-3,-7,-9,]),'INT':([3,4,14,16,17,18,23,91,131,132,135,136,184,185,186,187,188,189,208,210,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[9,-4,-5,-2,-152,9,-3,9,9,-152,9,9,9,9,9,9,9,9,245,-152,9,-152,-152,9,9,-152,9,-152,-152,9,9,-152,9,-152,9,]),'FLT':([3,4,14,16,17,18,23,91,131,132,135,136,184,185,186,187,188,189,210,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[10,-4,-5,-2,-152,10,-3,10,10,-152,10,10,10,10,10,10,10,10,-152,10,-152,-152,10,10,-152,10,-152,-152,10,10,-152,10,-152,10,]),'BLN':([3,4,14,16,17,18,23,91,131,132,135,136,184,185,186,187,188,189,210,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[11,-4,-5,-2,-152,11,-3,11,11,-152,11,11,11,11,11,11,11,11,-152,11,-152,-152,11,11,-152,11,-152,-152,11,11,-152,11,-152,11,]),'CHR':([3,4,14,16,17,18,23,91,131,132,135,136,184,185,186,187,188,189,210,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[12,-4,-5,-2,-152,12,-3,12,12,-152,12,12,12,12,12,12,12,12,-152,12,-152,-152,12,12,-152,12,-152,-152,12,12,-152,12,-152,12,]),'STR':([3,4,14,16,17,18,23,91,131,132,135,136,184,185,186,187,188,189,210,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[13,-4,-5,-2,-152,13,-3,13,13,-152,13,13,13,13,13,13,13,13,-152,13,-152,-152,13,13,-152,13,-152,-152,13,13,-152,13,-152,13,]),'GHOST':([4,14,92,],[-4,-5,120,]),'REVIVE':([4,14,136,139,143,152,184,185,186,187,188,189,221,222,223,224,225,226,227,],[-4,-5,-152,-96,149,-97,-152,-152,-152,-152,-152,-152,-98,-104,-99,-100,-101,-102,-103,]),'RBRACE':([4,14,16,17,23,49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,132,135,136,138,139,143,145,148,150,152,174,175,176,177,178,183,184,185,186,187,188,189,206,210,221,222,223,224,225,226,227,239,240,247,266,270,275,278,281,282,283,288,289,292,298,303,305,310,312,327,331,333,336,340,343,347,348,350,351,352,353,354,355,358,],[-4,-5,-2,-152,-3,-152,-54,-55,-152,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-152,-152,-152,-152,-96,-152,151,-152,-95,-97,216,-94,-37,-38,-39,-127,-152,-152,-152,-152,-152,-152,-152,-152,-98,-104,-99,-100,-101,-102,-103,-134,-136,-152,-126,-152,293,-40,-41,-42,-43,-137,-135,-152,-152,-152,-152,317,319,-152,-152,-152,-152,344,-152,350,-152,-152,-152,-152,356,357,-152,359,]),'CHECK':([4,14,16,17,23,132,135,136,139,140,141,146,184,185,186,187,188,189,210,211,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,-152,-152,-152,-105,-152,-106,160,-152,-152,-152,-152,-152,-152,-152,-19,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'SWAP':([4,14,16,17,23,132,135,136,139,140,141,146,184,185,186,187,188,189,210,211,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,-152,-152,-152,-105,-152,-106,161,-152,-152,-152,-152,-152,-152,-152,-19,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'FUNCTION_NAME':([4,14,16,17,23,30,31,32,33,34,35,36,37,38,39,40,41,42,132,135,136,139,140,141,146,149,166,172,184,185,186,187,188,189,194,197,198,199,200,201,202,207,210,211,217,218,219,220,241,247,292,298,303,305,307,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,61,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-152,-152,-152,-105,-152,-106,165,165,165,165,-152,-152,-152,-152,-152,-152,165,-142,-143,-144,-145,-146,-147,165,-152,-19,255,255,255,255,165,-152,-152,-152,-152,-152,165,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'DISPLAY':([4,14,16,17,23,132,135,136,139,140,141,146,149,166,172,184,185,186,187,188,189,194,197,198,199,200,201,202,207,210,211,241,247,292,298,303,305,307,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,-152,-152,-152,-105,-152,-106,166,166,166,166,-152,-152,-152,-152,-152,-152,166,-142,-143,-144,-145,-146,-147,166,-152,-19,166,-152,-152,-152,-152,-152,166,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'IDENT':([4,8,9,10,11,12,13,14,16,17,23,28,29,53,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,118,132,134,135,136,139,140,141,142,146,149,166,172,173,184,185,186,187,188,189,191,194,197,198,199,200,201,202,203,204,205,207,209,210,211,217,218,219,220,241,245,247,250,261,269,272,292,298,301,303,305,307,311,321,326,327,331,333,335,336,348,351,352,355,],[-4,19,-32,-33,-34,-35,-36,-5,-2,-152,-3,44,54,54,94,54,54,54,54,54,54,54,54,54,54,54,54,54,54,116,126,-152,137,-152,-152,-105,-152,-106,147,54,54,54,54,215,-152,-152,-152,-152,-152,-152,54,54,-142,-143,-144,-145,-146,-147,54,233,54,54,54,-152,-19,54,54,54,54,54,273,-152,276,54,54,54,-152,-152,54,-152,-152,54,54,-152,-152,-152,-152,-152,54,-152,-152,-152,-152,-152,]),'FOR':([4,14,16,17,23,132,135,136,139,140,141,146,184,185,186,187,188,189,210,211,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,-152,-152,-152,-105,-152,-106,167,-152,-152,-152,-152,-152,-152,-152,-19,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'UNTIL':([4,14,16,17,23,132,135,136,139,140,141,146,184,185,186,187,188,189,210,211,247,292,293,298,303,305,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,-152,-152,-152,-105,-152,-106,168,-152,-152,-152,-152,-152,-152,-152,-19,-152,-152,304,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'REPEAT':([4,14,16,17,23,132,135,136,139,140,141,146,184,185,186,187,188,189,210,211,247,292,298,303,305,321,326,327,331,333,336,348,351,352,355,],[-4,-5,-2,-152,-3,-152,-152,-152,-105,-152,-106,169,-152,-152,-152,-152,-152,-152,-152,-19,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,-152,]),'SHIFT':([4,14,16,17,23,139,152,184,185,186,187,188,189,221,222,223,224,225,226,227,286,299,321,326,332,],[-4,-5,-2,-152,-3,-96,-97,-152,-152,-152,-152,-152,-152,-98,-104,-99,-100,-101,-102,-103,-152,307,-152,-152,307,]),'OTHERWISE':([4,14,16,17,23,139,152,184,185,186,187,188,189,221,222,223,224,225,226,227,306,313,319,321,324,326,328,329,332,334,337,338,339,359,360,361,],[-4,-5,-2,-152,-3,-96,-97,-152,-152,-152,-152,-152,-152,-98,-104,-99,-100,-101,-102,-103,-152,320,-152,-152,-152,-152,-152,-108,-152,341,-111,-112,-113,-152,-152,-109,]),'LBRACE':([16,17,23,121,125,127,128,169,264,265,274,285,315,320,322,325,341,345,346,349,],[-2,-152,-3,-152,-152,132,133,210,-152,286,292,298,-152,-152,327,331,-152,348,-152,352,]),'OTHERWISE_CHECK':([16,17,23,319,324,359,360,],[-2,-152,-3,-152,330,-152,330,]),'COMMA':([19,44,45,46,48,49,50,51,54,55,56,57,58,59,60,69,70,71,86,88,89,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,126,137,147,176,177,178,183,206,212,213,215,236,237,238,239,240,242,243,266,270,276,277,278,281,282,283,287,288,289,],[28,28,67,-16,-18,-152,-54,-55,-152,-47,-48,-49,-50,-51,-52,98,-53,-58,-56,-73,-74,28,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,131,131,173,-37,-38,-39,-127,241,250,-25,173,269,-132,-133,-134,-136,241,-38,-126,241,173,-26,-40,-41,-42,-43,269,-137,-135,]),'EQ':([19,44,54,88,89,94,124,147,159,215,273,276,309,],[29,29,-152,-73,-74,29,-75,172,202,172,291,172,202,]),'LBRACKET':([29,54,172,],[47,90,214,]),'TILDE':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,166,172,194,197,198,199,200,201,202,203,207,209,217,218,219,220,241,272,307,311,335,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-142,-143,-144,-145,-146,-147,52,52,52,52,52,52,52,52,52,52,52,52,]),'LPAREN':([29,53,61,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,160,161,165,166,167,168,172,179,180,181,182,194,197,198,199,200,201,202,203,207,209,217,218,219,220,241,255,257,272,304,307,311,330,335,],[53,53,91,93,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,203,204,205,207,208,209,53,217,218,219,220,53,-142,-143,-144,-145,-146,-147,53,53,53,53,53,53,53,53,279,280,53,311,53,53,335,53,]),'INT_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,98,149,166,172,194,197,198,199,200,201,202,203,205,207,209,214,217,218,219,220,241,269,272,291,307,311,335,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,115,55,55,55,55,55,-142,-143,-144,-145,-146,-147,55,55,55,55,55,55,55,55,55,55,55,55,302,55,55,55,]),'FLT_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,166,172,194,197,198,199,200,201,202,203,205,207,209,214,217,218,219,220,241,269,272,307,311,335,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-142,-143,-144,-145,-146,-147,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'DAY':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,166,172,194,197,198,199,200,201,202,203,205,207,209,214,217,218,219,220,241,269,272,307,311,335,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-142,-143,-144,-145,-146,-147,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'NIGHT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,166,172,194,197,198,199,200,201,202,203,205,207,209,214,217,218,219,220,241,269,272,307,311,335,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-142,-143,-144,-145,-146,-147,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CHR_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,166,172,194,197,198,199,200,201,202,203,205,207,209,214,217,218,219,220,241,269,272,307,311,335,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-142,-143,-144,-145,-146,-147,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'STR_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,166,172,191,194,197,198,199,200,201,202,203,205,207,209,214,217,218,219,220,241,261,269,272,307,311,335,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,230,60,-142,-143,-144,-145,-146,-147,60,60,60,60,60,60,60,60,60,60,230,60,60,60,60,60,]),'PLUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,159,228,229,230,284,],[72,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,191,261,-150,-151,261,]),'MINUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[73,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'MULTIPLY':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[74,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'DIVISION':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[75,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'MODULO':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[76,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'EXPONENT':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[77,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'GT':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[78,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'LT':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[79,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'EQ_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[80,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'GT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[81,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'LT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[82,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'NOT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[83,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'AND':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[84,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'OR':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[85,-54,-55,-152,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'RPAREN':([49,50,51,54,55,56,57,58,59,60,70,71,86,87,88,89,91,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,124,126,129,130,137,144,176,177,178,183,193,195,196,205,206,231,232,233,234,235,236,237,238,239,240,242,243,246,253,254,256,258,259,260,266,267,268,270,271,278,279,280,281,282,283,287,288,289,295,296,300,308,316,318,342,],[-152,-54,-55,-152,-47,-48,-49,-50,-51,-52,-53,-58,-56,113,-73,-74,-152,121,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,125,-91,-75,-152,-90,-92,-152,-93,-37,-38,-39,-127,-122,-124,-125,-152,-152,-123,264,265,266,-128,-152,-132,-133,-134,-136,-152,113,274,278,-44,-46,281,282,283,-126,-129,-130,-152,289,-40,295,296,-41,-42,-43,-152,-137,-135,-45,-138,-131,315,-121,323,346,]),'COLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,176,177,178,183,206,239,240,266,270,278,281,282,283,288,289,314,],[-152,-54,-55,-152,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-37,-38,-39,-127,-152,-134,-136,-126,-152,-40,-41,-42,-43,-137,-135,321,]),'SEMICOLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,244,290,302,],[-152,-54,-55,-152,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,272,301,-120,]),'PLUS_PLUS':([54,88,89,124,159,309,],[-152,-73,-74,-75,195,195,]),'MINUS_MINUS':([54,88,89,124,159,309,],[-152,-73,-74,-75,196,196,]),'PLUS_EQ':([54,88,89,124,159,309,],[-152,-73,-74,-75,197,197,]),'MINUS_EQ':([54,88,89,124,159,309,],[-152,-73,-74,-75,198,198,]),'MUL_EQ':([54,88,89,124,159,309,],[-152,-73,-74,-75,199,199,]),'DIV_EQ':([54,88,89,124,159,309,],[-152,-73,-74,-75,200,200,]),'MOD_EQ':([54,88,89,124,159,309,],[-152,-73,-74,-75,201,201,]),'RBRACKET':([55,56,57,58,59,60,68,69,96,97,114,115,116,123,251,],[-47,-48,-49,-50,-51,-52,95,-152,-27,-28,124,-30,-31,-29,277,]),'CONVERT_TO_INT':([149,166,172,194,197,198,199,200,201,202,207,241,307,],[179,179,179,179,-142,-143,-144,-145,-146,-147,179,179,179,]),'CONVERT_TO_FLT':([149,166,172,194,197,198,199,200,201,202,207,241,307,],[180,180,180,180,-142,-143,-144,-145,-146,-147,180,180,180,]),'CONVERT_TO_BLN':([149,166,172,194,197,198,199,200,201,202,207,241,307,],[181,181,181,181,-142,-143,-144,-145,-146,-147,181,181,181,]),'CONVERT_TO_STR':([149,166,172,194,197,198,199,200,201,202,207,241,307,],[182,182,182,182,-142,-143,-144,-145,-146,-147,182,182,182,]),'INPUT':([217,218,219,220,],[257,257,257,257,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,62,133,153,154,155,156,157,158,170,],[3,14,18,92,136,184,185,186,187,188,189,211,]),'global_dec':([3,18,],[5,25,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,21,44,45,49,54,69,91,94,121,125,126,132,135,136,137,138,140,143,147,148,184,185,186,187,188,189,205,206,210,212,215,228,236,242,247,264,270,276,284,286,287,292,298,303,305,306,315,319,320,321,324,326,327,328,331,332,333,336,341,343,346,348,350,351,352,355,359,360,],[7,16,22,16,7,27,16,27,66,71,89,97,119,27,16,16,130,16,139,139,130,16,16,150,171,16,139,139,139,139,139,139,235,240,16,249,171,263,268,240,139,16,240,171,263,16,268,16,16,139,139,16,16,16,16,16,329,139,16,16,16,338,139,139,16,16,16,16,16,139,16,139,16,329,]),'data_type':([3,18,91,131,135,136,184,185,186,187,188,189,247,303,305,326,333,336,351,355,],[8,8,118,134,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'maybe_newline':([5,15,17,21,121,125,132,138,140,148,210,264,286,292,298,306,315,319,320,321,327,328,331,341,343,346,348,350,352,359,],[15,20,23,43,127,128,135,145,146,174,247,285,299,303,305,313,322,324,325,326,333,334,336,345,347,349,351,353,355,360,]),'function_statements':([15,],[21,]),'global_tail':([18,],[24,]),'global_statement_tail':([19,44,94,],[26,64,122,]),'ret_type':([20,],[30,]),'function_dtype':([20,],[32,]),'global_dec_value':([29,],[45,]),'global_value':([29,],[46,]),'expression':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,166,172,194,203,207,209,217,218,219,220,241,272,307,311,335,],[48,87,99,100,101,102,103,104,105,106,107,108,109,110,111,112,177,177,177,177,232,243,246,254,254,254,254,177,290,177,318,342,]),'factor':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,166,172,194,203,207,209,217,218,219,220,241,272,307,311,335,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'var_call':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,146,149,166,172,191,194,203,205,207,209,217,218,219,220,241,261,269,272,301,307,311,335,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,159,50,50,50,229,50,50,238,50,50,50,50,50,50,50,229,238,50,309,50,50,50,]),'literal':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,166,172,194,203,205,207,209,214,217,218,219,220,241,269,272,307,311,335,],[51,69,86,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,69,51,51,51,51,51,237,51,51,69,51,51,51,51,51,237,51,51,51,51,]),'main_function':([43,],[62,]),'global_tail2':([45,],[65,]),'list_element':([47,98,214,],[68,123,251,]),'factor_tail':([49,],[70,]),'var_call_tail':([54,],[88,]),'element_tail':([69,],[96,]),'index':([90,],[114,]),'parameters':([91,],[117,]),'parameters_tail':([126,137,],[129,144,]),'statements':([135,136,184,185,186,187,188,189,247,303,305,326,333,336,351,355,],[138,143,222,222,222,222,222,222,275,310,312,332,340,343,354,358,]),'local_dec':([135,136,184,185,186,187,188,189,247,303,305,326,333,336,351,355,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'var_statement':([135,136,184,185,186,187,188,189,247,303,305,326,333,336,351,355,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'revive':([143,],[148,]),'statements_tail':([146,],[152,]),'string_operation_statement':([146,],[153,]),'conditional_statement':([146,],[154,]),'switch_statement':([146,],[155,]),'loop_statement':([146,],[156,]),'function_call':([146,149,166,172,194,207,241,307,],[157,178,178,178,178,178,178,178,]),'output_statement':([146,149,166,172,194,207,241,307,],[158,183,183,183,183,183,183,183,]),'for_loop':([146,],[162,]),'until_loop':([146,],[163,]),'repeat_until':([146,],[164,]),'var_tail':([147,215,276,],[170,252,294,]),'value':([149,166,172,194,207,241,307,],[175,206,213,231,242,270,314,]),'type_cast':([149,166,172,194,207,241,307,],[176,176,176,176,176,176,176,]),'string_operation_tail':([159,],[190,]),'update_tail':([159,309,],[192,316,]),'postfix':([159,309,],[193,193,]),'assign_op':([159,309,],[194,194,]),'tail_value':([172,],[212,]),'statements_tail2':([184,185,186,187,188,189,],[221,223,224,225,226,227,]),'string_val':([191,261,],[228,284,]),'arguments':([205,],[234,]),'arg_value':([205,269,],[236,287,]),'next_val':([206,242,270,],[239,271,288,]),'control_variable':([208,],[244,]),'var_tail2':([212,],[248,]),'typecast_value':([217,218,219,220,],[253,258,259,260,]),'input_statement':([217,218,219,220,],[256,256,256,256,]),'stringcon_tail':([228,284,],[262,297,]),'arg_tail':([236,287,],[267,300,]),'switch_condition':([299,332,],[306,339,]),'update':([301,],[308,]),'conditional_tail':([324,360,],[328,361,]),'switchcond_tail':([332,],[337,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',67),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',74),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',75),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',94),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',101),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',102),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',103),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',115),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',116),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',126),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',127),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',137),
  ('var_statement -> data_type IDENT var_tail unli_newline','var_statement',4,'p_var_statement','Parser.py',144),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',151),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',152),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',153),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',165),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',166),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',176),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',177),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',187),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',197),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',198),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',208),
  ('index -> IDENT','index',1,'p_index','Parser.py',209),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',218),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',219),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',220),
  ('value -> type_cast','value',1,'p_value','Parser.py',227),
  ('value -> expression','value',1,'p_value','Parser.py',228),
  ('value -> function_call','value',1,'p_value','Parser.py',229),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',239),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',247),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',248),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',258),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',260),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',261),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',262),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',263),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',270),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',281),
  ('factor -> literal','factor',1,'p_factor','Parser.py',282),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',283),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',284),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',296),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',297),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',298),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',299),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',300),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',301),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',302),
  ('factor_tail -> GT expression','factor_tail',2,'p_factor_tail','Parser.py',303),
  ('factor_tail -> LT expression','factor_tail',2,'p_factor_tail','Parser.py',304),
  ('factor_tail -> EQ_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',305),
  ('factor_tail -> GT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',306),
  ('factor_tail -> LT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',307),
  ('factor_tail -> NOT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',308),
  ('factor_tail -> AND expression','factor_tail',2,'p_factor_tail','Parser.py',309),
  ('factor_tail -> OR expression','factor_tail',2,'p_factor_tail','Parser.py',310),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',321),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',328),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',329),
  ('function_statements -> maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE','function_statements',13,'p_function_statements','Parser.py',339),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',340),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',362),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',363),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',373),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',374),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',375),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',376),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',377),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',378),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',379),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',380),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',381),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',382),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',389),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',390),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',400),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',401),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',411),
  ('revive -> empty','revive',1,'p_revive','Parser.py',412),
  ('statements -> empty','statements',1,'p_statements','Parser.py',422),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',423),
  ('statements_tail -> string_operation_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',437),
  ('statements_tail -> conditional_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',438),
  ('statements_tail -> switch_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',439),
  ('statements_tail -> loop_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',440),
  ('statements_tail -> function_call unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',441),
  ('statements_tail -> output_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',442),
  ('statements_tail2 -> statements','statements_tail2',1,'p_statements_tail2','Parser.py',450),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',457),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',458),
  ('conditional_statement -> CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_statement',18,'p_conditional_statement','Parser.py',466),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',473),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_tail',11,'p_conditional_tail','Parser.py',474),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',484),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',491),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',498),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',499),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',509),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',510),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',511),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',518),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',525),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',9,'p_repeat_until','Parser.py',532),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',539),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',546),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',553),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',554),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',564),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',565),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',572),
  ('function_call -> output_statement','function_call',1,'p_function_call','Parser.py',573),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',583),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',584),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',594),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',595),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',605),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',606),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',613),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',614),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',626),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',627),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',637),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',644),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',653),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',654),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',664),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',665),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',666),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',667),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',668),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',669),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',676),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',677),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',687),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',688),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',704),
]
