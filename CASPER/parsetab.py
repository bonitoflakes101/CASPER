
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH NEWLINE global_dec NEWLINE function_statements NEWLINE main_function NEWLINE GHOST\n    maybe_newline : empty\n                  | NEWLINE\n    main_function : MAIN_CASPER LPAREN RPAREN LBRACE statements RBRACEglobal_dec : global_statement global_tail\n                  | emptyglobal_tail : global_dec\n                   | emptyglobal_statement : data_type IDENT global_statement_tailglobal_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : factor\n                    | expressionvar_statement : data_type IDENT var_tailvar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : factor\n             | type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value : IDENT\n                      | literal\n                      | expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : expr_head expr_tailexpr_head : term term_tailterm : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expressionterm_tail : empty\n                 | GT expression\n                 | LT expression\n                 | EQ_EQ expression\n                 | GT_EQ expression\n                 | LT_EQ expression\n                 | NOT_EQ expressionexpr_tail : empty\n                 | AND expression\n                 | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE\n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec NEWLINE statements_tail\n    statements_tail : empty\n                    | statements\n                    | conditional_statement NEWLINE statements_tail\n                    | switch_statement NEWLINE statements_tail\n                    | loop_statement NEWLINE statements_tail\n                    | function_call NEWLINE statements_tail\n                    | string_operation_statement NEWLINE statements_tail\n                    | output_statement NEWLINE statements_tail\n    local_dec : var_statement\n                 | emptyconditional_statement : CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tailconditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE\n                        | OTHERWISE LBRACE statements RBRACEswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACEswitch_condition : SHIFT value COLON statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACErepeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | input_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : assign_op value\n                             | PLUS string_val stringcon_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,121,],[0,-1,]),'NEWLINE':([2,3,4,5,6,13,14,15,16,17,18,20,33,34,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,58,61,62,63,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,125,127,128,129,134,135,136,140,141,142,148,150,151,152,153,154,155,158,159,160,162,169,170,173,175,176,177,178,184,185,186,187,188,189,193,202,206,208,209,211,229,230,231,232,233,234,242,243,244,247,259,264,265,266,272,273,274,276,277,278,279,282,283,284,287,289,295,300,301,305,307,308,312,319,321,322,324,333,334,335,337,],[3,-161,13,-161,-6,-161,-5,-7,-6,-161,37,-84,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,93,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-161,-161,-114,141,-113,-4,-161,-161,-114,184,185,186,187,188,189,-123,-124,-125,-136,-19,-20,-83,-37,-38,-39,-40,-161,-161,-161,-161,-161,-161,-148,-161,-161,-161,-25,-161,-149,-161,-159,-160,-143,-145,-147,-21,-23,-22,-135,-150,-157,-161,-161,-26,-41,-42,-43,-44,-161,-161,-146,-144,-161,-24,-158,-161,-161,-127,-115,-116,-161,-128,-161,-119,-161,-118,-126,-161,-117,]),'INT':([3,5,17,33,34,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,60,61,62,63,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,125,127,128,129,132,141,184,185,186,187,188,189,204,206,279,287,301,312,321,324,335,],[8,8,-161,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,8,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,8,8,8,8,8,8,8,8,8,8,239,8,8,8,8,8,8,8,8,]),'FLT':([3,5,17,33,34,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,60,61,62,63,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,125,127,128,129,132,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[9,9,-161,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,9,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'BLN':([3,5,17,33,34,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,60,61,62,63,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,125,127,128,129,132,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[10,10,-161,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,10,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'CHR':([3,5,17,33,34,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,60,61,62,63,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,125,127,128,129,132,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[11,11,-161,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,11,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STR':([3,5,17,33,34,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,60,61,62,63,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,125,127,128,129,132,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[12,12,-161,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,12,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IDENT':([7,8,9,10,11,12,35,36,48,64,69,70,71,72,73,74,80,81,84,87,88,89,90,91,92,96,137,139,141,144,164,171,172,184,185,186,187,188,189,190,191,192,194,195,196,197,198,199,200,201,203,205,212,213,214,215,235,239,245,262,263,268,293,296,299,316,320,],[17,-32,-33,-34,-35,-36,39,50,50,98,50,50,50,50,50,50,50,50,114,50,50,50,50,50,50,124,142,146,50,50,50,50,211,50,50,50,50,50,50,50,223,50,50,50,-151,-152,-153,-154,-155,-156,50,50,249,249,249,249,50,269,272,50,50,50,50,50,50,50,50,]),'FUNCTION':([13,],[21,]),'FUNCTION_INT':([13,],[23,]),'FUNCTION_FLT':([13,],[24,]),'FUNCTION_CHR':([13,],[25,]),'FUNCTION_BLN':([13,],[26,]),'FUNCTION_STR':([13,],[27,]),'FUNCTION_LIST_INT':([13,],[28,]),'FUNCTION_LIST_FLT':([13,],[29,]),'FUNCTION_LIST_CHR':([13,],[30,]),'FUNCTION_LIST_STR':([13,],[31,]),'FUNCTION_LIST_BLN':([13,],[32,]),'COMMA':([17,39,40,41,43,44,45,46,49,50,51,52,53,54,55,56,57,66,67,68,75,77,78,79,82,83,85,86,98,99,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,124,127,142,146,162,175,176,177,178,202,208,209,211,226,227,228,236,237,242,259,266,272,273,274,276,277,278,281,],[35,35,64,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,102,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,35,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,132,-82,172,132,-136,-37,-38,-39,-40,235,245,-25,172,262,-141,-142,235,-39,-147,-135,235,172,-26,-41,-42,-43,-44,262,]),'EQ':([17,39,50,82,83,98,127,142,163,211,269,272,304,],[36,36,-161,-80,-81,36,-82,171,201,171,286,171,201,]),'FUNCTION_NAME':([19,21,22,23,24,25,26,27,28,29,30,31,32,141,144,164,171,184,185,186,187,188,189,194,196,197,198,199,200,201,203,212,213,214,215,235,293,316,],[38,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,161,161,161,161,161,161,161,161,161,161,161,-151,-152,-153,-154,-155,-156,161,252,252,252,252,161,161,161,]),'LBRACKET':([36,50,171,249,],[42,84,210,84,]),'TILDE':([36,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,144,164,171,190,194,196,197,198,199,200,201,203,205,212,213,214,215,235,268,293,299,316,320,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-151,-152,-153,-154,-155,-156,47,47,47,47,47,47,47,47,47,47,47,47,]),'LPAREN':([36,38,48,59,69,70,71,72,73,74,80,81,87,88,89,90,91,92,144,156,157,161,164,165,166,168,171,179,180,181,182,190,194,196,197,198,199,200,201,203,205,212,213,214,215,235,252,268,288,293,299,309,316,320,],[48,60,48,94,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,190,191,192,203,204,205,207,48,212,213,214,215,48,48,-151,-152,-153,-154,-155,-156,48,48,48,48,48,48,48,275,48,299,48,48,320,48,48,]),'INT_LIT':([36,42,47,48,69,70,71,72,73,74,80,81,84,87,88,89,90,91,92,102,144,164,171,190,192,194,196,197,198,199,200,201,203,205,210,212,213,214,215,235,262,268,286,293,299,316,320,],[51,51,51,51,51,51,51,51,51,51,51,51,113,51,51,51,51,51,51,51,51,51,51,51,51,51,-151,-152,-153,-154,-155,-156,51,51,51,51,51,51,51,51,51,51,297,51,51,51,51,]),'FLT_LIT':([36,42,47,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,102,144,164,171,190,192,194,196,197,198,199,200,201,203,205,210,212,213,214,215,235,262,268,293,299,316,320,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-151,-152,-153,-154,-155,-156,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'DAY':([36,42,47,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,102,144,164,171,190,192,194,196,197,198,199,200,201,203,205,210,212,213,214,215,235,262,268,293,299,316,320,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-151,-152,-153,-154,-155,-156,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NIGHT':([36,42,47,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,102,144,164,171,190,192,194,196,197,198,199,200,201,203,205,210,212,213,214,215,235,262,268,293,299,316,320,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-151,-152,-153,-154,-155,-156,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'CHR_LIT':([36,42,47,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,102,144,164,171,190,192,194,196,197,198,199,200,201,203,205,210,212,213,214,215,235,262,268,293,299,316,320,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-151,-152,-153,-154,-155,-156,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'STR_LIT':([36,42,47,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,102,144,164,171,190,192,194,195,196,197,198,199,200,201,203,205,210,212,213,214,215,235,262,263,268,293,299,316,320,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,232,-151,-152,-153,-154,-155,-156,56,56,56,56,56,56,56,56,56,232,56,56,56,56,56,]),'MAIN_CASPER':([37,],[59,]),'PLUS':([43,45,46,50,51,52,53,54,55,56,75,77,82,83,109,127,163,175,230,231,232,249,250,282,],[69,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,69,-80,-81,-62,-82,195,69,263,-159,-160,-161,-60,263,]),'MINUS':([43,45,46,50,51,52,53,54,55,56,75,77,82,83,109,127,175,249,250,],[70,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,70,-80,-81,-62,-82,70,-161,-60,]),'MULTIPLY':([43,45,46,50,51,52,53,54,55,56,75,77,82,83,109,127,175,249,250,],[71,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,71,-80,-81,-62,-82,71,-161,-60,]),'DIVISION':([43,45,46,50,51,52,53,54,55,56,75,77,82,83,109,127,175,249,250,],[72,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,72,-80,-81,-62,-82,72,-161,-60,]),'MODULO':([43,45,46,50,51,52,53,54,55,56,75,77,82,83,109,127,175,249,250,],[73,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,73,-80,-81,-62,-82,73,-161,-60,]),'EXPONENT':([43,45,46,50,51,52,53,54,55,56,75,77,82,83,109,127,175,249,250,],[74,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,74,-80,-81,-62,-82,74,-161,-60,]),'GT':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,87,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'LT':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,88,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'EQ_EQ':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,89,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'GT_EQ':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,90,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'LT_EQ':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,91,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'NOT_EQ':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,92,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'AND':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,80,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'OR':([43,45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,175,249,250,],[-161,-59,-60,81,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'RPAREN':([45,46,49,50,51,52,53,54,55,56,57,60,67,68,75,76,77,78,79,82,83,85,86,94,95,97,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,124,127,130,131,146,162,175,176,177,178,183,192,207,222,223,224,225,226,227,228,234,236,237,240,242,248,249,250,251,253,254,255,256,259,260,261,266,267,274,275,276,277,278,281,283,290,294,303,306,314,315,317,318,325,326,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-161,-58,-63,-61,109,-161,-56,-77,-80,-81,-57,-70,122,123,-98,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-161,-82,-97,-99,-161,-136,-37,-38,-39,-40,-100,-161,242,257,258,259,-137,-161,-141,-142,-145,-161,109,270,-147,274,-45,-46,-47,-49,276,277,278,-135,-138,-139,-161,284,-41,290,-42,-43,-44,-161,-146,-48,-140,313,319,-130,-131,-133,-134,-132,332,]),'RBRACE':([45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,128,129,133,134,138,141,143,145,147,148,149,162,174,175,176,177,178,184,185,186,187,188,189,206,216,217,218,219,220,221,241,242,259,274,276,277,278,279,287,291,298,301,311,321,324,327,331,335,336,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,140,-103,-161,-161,173,-102,-104,-103,-106,-136,-101,-37,-38,-39,-40,-161,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,271,-147,-135,-41,-42,-43,-44,-161,-161,300,305,-161,322,-161,-161,333,334,-161,337,]),'COLON':([45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,162,175,176,177,178,242,259,274,276,277,278,302,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-136,-37,-38,-39,-40,-147,-135,-41,-42,-43,-44,312,]),'SEMICOLON':([45,46,49,50,51,52,53,54,55,56,57,67,68,75,77,78,79,82,83,85,86,103,104,105,106,107,108,109,110,111,115,116,117,118,119,120,127,238,285,297,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,268,296,-129,]),'PLUS_EQ':([50,82,83,127,163,304,],[-161,-80,-81,-82,196,196,]),'MINUS_EQ':([50,82,83,127,163,304,],[-161,-80,-81,-82,197,197,]),'MUL_EQ':([50,82,83,127,163,304,],[-161,-80,-81,-82,198,198,]),'DIV_EQ':([50,82,83,127,163,304,],[-161,-80,-81,-82,199,199,]),'MOD_EQ':([50,82,83,127,163,304,],[-161,-80,-81,-82,200,200,]),'PLUS_PLUS':([50,82,83,127,304,],[-161,-80,-81,-82,317,]),'MINUS_MINUS':([50,82,83,127,304,],[-161,-80,-81,-82,318,]),'RBRACKET':([51,52,53,54,55,56,65,66,100,101,112,113,114,126,246,],[-50,-51,-52,-53,-54,-55,99,-161,-27,-28,127,-30,-31,-29,273,]),'GHOST':([93,],[121,]),'LBRACE':([122,123,167,257,258,270,310,313,332,],[128,129,206,279,280,287,321,324,335,]),'REVIVE':([129,134,138,141,147,148,149,184,185,186,187,188,189,216,217,218,219,220,221,],[-161,-103,144,-161,-104,-103,-106,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,]),'SHIFT':([134,141,147,148,149,184,185,186,187,188,189,216,217,218,219,220,221,280,312,323,],[-103,-161,-104,-103,-106,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,293,-161,293,]),'OTHERWISE':([134,141,147,148,149,184,185,186,187,188,189,216,217,218,219,220,221,292,300,312,323,328,329,330,],[-103,-161,-104,-103,-106,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,301,310,-161,-161,-120,-121,-122,]),'CHECK':([141,184,185,186,187,188,189,],[156,156,156,156,156,156,156,]),'SWAP':([141,184,185,186,187,188,189,],[157,157,157,157,157,157,157,]),'DISPLAY':([141,184,185,186,187,188,189,],[164,164,164,164,164,164,164,]),'FOR':([141,184,185,186,187,188,189,],[165,165,165,165,165,165,165,]),'UNTIL':([141,184,185,186,187,188,189,271,],[166,166,166,166,166,166,166,288,]),'REPEAT':([141,184,185,186,187,188,189,],[167,167,167,167,167,167,167,]),'INPUT':([141,144,164,171,184,185,186,187,188,189,194,196,197,198,199,200,201,203,212,213,214,215,235,293,316,],[168,168,168,168,168,168,168,168,168,168,168,-151,-152,-153,-154,-155,-156,168,168,168,168,168,168,168,168,]),'CONVERT_TO_INT':([144,164,171,194,196,197,198,199,200,201,203,235,293,316,],[179,179,179,179,-151,-152,-153,-154,-155,-156,179,179,179,179,]),'CONVERT_TO_FLT':([144,164,171,194,196,197,198,199,200,201,203,235,293,316,],[180,180,180,180,-151,-152,-153,-154,-155,-156,180,180,180,180,]),'CONVERT_TO_BLN':([144,164,171,194,196,197,198,199,200,201,203,235,293,316,],[181,181,181,181,-151,-152,-153,-154,-155,-156,181,181,181,181,]),'CONVERT_TO_STR':([144,164,171,194,196,197,198,199,200,201,203,235,293,316,],[182,182,182,182,-151,-152,-153,-154,-155,-156,182,182,182,182,]),'OTHERWISE_CHECK':([300,],[309,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_dec':([3,5,],[4,15,]),'global_statement':([3,5,],[5,5,]),'empty':([3,5,13,17,39,40,43,49,50,57,60,66,77,98,124,128,129,138,141,142,146,175,184,185,186,187,188,189,192,202,206,208,211,226,230,236,249,266,272,279,281,282,287,300,301,312,321,323,324,335,],[6,16,20,34,34,63,68,79,83,86,97,101,68,34,131,134,134,145,148,170,131,68,148,148,148,148,148,148,225,234,134,244,170,261,265,234,83,234,170,134,261,265,134,308,134,134,134,329,134,134,]),'data_type':([3,5,60,128,129,132,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[7,7,96,137,137,139,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'global_tail':([5,],[14,]),'function_statements':([13,],[18,]),'ret_type':([13,],[19,]),'function_dtype':([13,],[22,]),'global_statement_tail':([17,39,98,],[33,61,125,]),'global_dec_value':([36,],[40,]),'global_value':([36,],[41,]),'factor':([36,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,144,164,171,190,194,203,205,212,213,214,215,235,268,293,299,316,320,],[43,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,175,175,175,77,175,175,77,77,77,77,77,175,77,175,77,175,77,]),'expression':([36,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,144,164,171,190,194,203,205,212,213,214,215,235,268,293,299,316,320,],[44,76,103,104,105,106,107,108,110,111,115,116,117,118,119,120,177,177,177,222,177,237,240,251,251,251,251,177,285,177,306,177,326,]),'var_call':([36,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,141,144,164,171,184,185,186,187,188,189,190,192,194,195,203,205,212,213,214,215,235,262,263,268,293,296,299,316,320,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,163,45,45,45,163,163,163,163,163,163,45,228,45,231,45,45,45,45,45,45,45,228,231,45,45,304,45,45,45,]),'literal':([36,42,47,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,102,144,164,171,190,192,194,203,205,210,212,213,214,215,235,262,268,293,299,316,320,],[46,66,75,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,66,46,46,46,46,227,46,46,46,66,250,250,250,250,46,227,46,46,46,46,46,]),'expr_head':([36,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,144,164,171,190,194,203,205,212,213,214,215,235,268,293,299,316,320,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'term':([36,48,69,70,71,72,73,74,80,81,87,88,89,90,91,92,144,164,171,190,194,203,205,212,213,214,215,235,268,293,299,316,320,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'main_function':([37,],[58,]),'global_tail2':([40,],[62,]),'list_element':([42,102,210,],[65,126,246,]),'factor_tail':([43,77,175,],[67,67,67,]),'expr_tail':([49,],[78,]),'var_call_tail':([50,249,],[82,82,]),'term_tail':([57,],[85,]),'parameters':([60,],[95,]),'element_tail':([66,],[100,]),'index':([84,],[112,]),'parameters_tail':([124,146,],[130,183,]),'statements':([128,129,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[133,138,149,149,149,149,149,149,149,241,291,298,311,323,327,331,336,]),'local_dec':([128,129,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'var_statement':([128,129,141,184,185,186,187,188,189,206,279,287,301,312,321,324,335,],[136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'revive':([138,],[143,]),'statements_tail':([141,184,185,186,187,188,189,],[147,216,217,218,219,220,221,]),'conditional_statement':([141,184,185,186,187,188,189,],[150,150,150,150,150,150,150,]),'switch_statement':([141,184,185,186,187,188,189,],[151,151,151,151,151,151,151,]),'loop_statement':([141,184,185,186,187,188,189,],[152,152,152,152,152,152,152,]),'function_call':([141,144,164,171,184,185,186,187,188,189,194,203,235,293,316,],[153,178,178,178,153,153,153,153,153,153,178,178,178,178,178,]),'string_operation_statement':([141,184,185,186,187,188,189,],[154,154,154,154,154,154,154,]),'output_statement':([141,184,185,186,187,188,189,],[155,155,155,155,155,155,155,]),'for_loop':([141,184,185,186,187,188,189,],[158,158,158,158,158,158,158,]),'until_loop':([141,184,185,186,187,188,189,],[159,159,159,159,159,159,159,]),'repeat_until':([141,184,185,186,187,188,189,],[160,160,160,160,160,160,160,]),'input_statement':([141,144,164,171,184,185,186,187,188,189,194,203,212,213,214,215,235,293,316,],[162,162,162,162,162,162,162,162,162,162,162,162,253,253,253,253,162,162,162,]),'var_tail':([142,211,272,],[169,247,289,]),'value':([144,164,171,194,203,235,293,316,],[174,202,209,229,236,266,302,325,]),'type_cast':([144,164,171,194,203,235,293,316,],[176,176,176,176,176,176,176,176,]),'string_operation_tail':([163,],[193,]),'assign_op':([163,304,],[194,316,]),'tail_value':([171,],[208,]),'arguments':([192,],[224,]),'arg_value':([192,262,],[226,281,]),'string_val':([195,263,],[230,282,]),'next_val':([202,236,266,],[233,267,283,]),'control_variable':([204,],[238,]),'var_tail2':([208,],[243,]),'typecast_value':([212,213,214,215,],[248,254,255,256,]),'arg_tail':([226,281,],[260,294,]),'stringcon_tail':([230,282,],[264,295,]),'switch_condition':([280,323,],[292,330,]),'update':([296,],[303,]),'conditional_tail':([300,],[307,]),'update_tail':([304,],[314,]),'postfix':([304,],[315,]),'switchcond_tail':([323,],[328,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH NEWLINE global_dec NEWLINE function_statements NEWLINE main_function NEWLINE GHOST','program',9,'p_program','Parser.py',40),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',48),
  ('maybe_newline -> NEWLINE','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('main_function -> MAIN_CASPER LPAREN RPAREN LBRACE statements RBRACE','main_function',6,'p_main_function','Parser.py',60),
  ('global_dec -> global_statement global_tail','global_dec',2,'p_global_dec','Parser.py',67),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',68),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',79),
  ('global_tail -> empty','global_tail',1,'p_global_tail','Parser.py',80),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',91),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',98),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',99),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',100),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',112),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',113),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',123),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',124),
  ('global_value -> factor','global_value',1,'p_global_value','Parser.py',134),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',135),
  ('var_statement -> data_type IDENT var_tail','var_statement',3,'p_var_statement','Parser.py',142),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',149),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',150),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',151),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',163),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',164),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',174),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',175),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',185),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',195),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',196),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',206),
  ('index -> IDENT','index',1,'p_index','Parser.py',207),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',214),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',215),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',218),
  ('value -> factor','value',1,'p_value','Parser.py',225),
  ('value -> type_cast','value',1,'p_value','Parser.py',226),
  ('value -> expression','value',1,'p_value','Parser.py',227),
  ('value -> function_call','value',1,'p_value','Parser.py',228),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',235),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('typecast_value -> IDENT','typecast_value',1,'p_typecast_value','Parser.py',245),
  ('typecast_value -> literal','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',247),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',248),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',249),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',260),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',261),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',262),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',263),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',264),
  ('expression -> expr_head expr_tail','expression',2,'p_expression','Parser.py',271),
  ('expr_head -> term term_tail','expr_head',2,'p_expr_head','Parser.py',281),
  ('term -> factor factor_tail','term',2,'p_term','Parser.py',291),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',301),
  ('factor -> literal','factor',1,'p_factor','Parser.py',302),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',303),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',304),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',316),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',317),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',318),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',319),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',320),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',321),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',322),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser.py',332),
  ('term_tail -> GT expression','term_tail',2,'p_term_tail','Parser.py',333),
  ('term_tail -> LT expression','term_tail',2,'p_term_tail','Parser.py',334),
  ('term_tail -> EQ_EQ expression','term_tail',2,'p_term_tail','Parser.py',335),
  ('term_tail -> GT_EQ expression','term_tail',2,'p_term_tail','Parser.py',336),
  ('term_tail -> LT_EQ expression','term_tail',2,'p_term_tail','Parser.py',337),
  ('term_tail -> NOT_EQ expression','term_tail',2,'p_term_tail','Parser.py',338),
  ('expr_tail -> empty','expr_tail',1,'p_expr_tail','Parser.py',353),
  ('expr_tail -> AND expression','expr_tail',2,'p_expr_tail','Parser.py',354),
  ('expr_tail -> OR expression','expr_tail',2,'p_expr_tail','Parser.py',355),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',365),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',372),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',373),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE','function_statements',9,'p_function_statements','Parser.py',383),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',384),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',399),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',400),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',410),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',411),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',412),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',413),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',414),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',415),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',416),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',417),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',418),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',419),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',426),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',427),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',437),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',438),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',448),
  ('revive -> empty','revive',1,'p_revive','Parser.py',449),
  ('statements -> empty','statements',1,'p_statements','Parser.py',459),
  ('statements -> local_dec NEWLINE statements_tail','statements',3,'p_statements','Parser.py',460),
  ('statements_tail -> empty','statements_tail',1,'p_statements_tail','Parser.py',474),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',475),
  ('statements_tail -> conditional_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',476),
  ('statements_tail -> switch_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',477),
  ('statements_tail -> loop_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',478),
  ('statements_tail -> function_call NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',479),
  ('statements_tail -> string_operation_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',480),
  ('statements_tail -> output_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',481),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',504),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',505),
  ('conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_statement',8,'p_conditional_statement','Parser.py',513),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',520),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE','conditional_tail',7,'p_conditional_tail','Parser.py',521),
  ('conditional_tail -> OTHERWISE LBRACE statements RBRACE','conditional_tail',4,'p_conditional_tail','Parser.py',522),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE','switch_statement',9,'p_switch_statement','Parser.py',534),
  ('switch_condition -> SHIFT value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',541),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',548),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',549),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',559),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',560),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',561),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','Parser.py',568),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',575),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',582),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',589),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',596),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',603),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',604),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',614),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',615),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',622),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',623),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',633),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',634),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',644),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',645),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',655),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',656),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',663),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',664),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',671),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',672),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',682),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',689),
  ('string_operation_tail -> assign_op value','string_operation_tail',2,'p_string_operation_tail','Parser.py',696),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',697),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',707),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',708),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',709),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',710),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',711),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',712),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',719),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',720),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',730),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',731),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',747),
]
