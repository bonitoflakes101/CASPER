
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_decglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : expressionvar_statement : data_type IDENT var_tail unli_newlinevar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value :  expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expression\n                   | GT expression\n                   | LT expression\n                   | EQ_EQ expression\n                   | GT_EQ expression\n                   | LT_EQ expression\n                   | NOT_EQ expression\n                   | AND expression\n                   | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail\n                           | emptyfunction_statements_tail : function_statements\n                                | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : string_operation_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | output_statement unli_newline statements\n                    | statements\n    local_dec : empty\n                 | var_statement\n    conditional_statement : CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail  OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE\n    \n    conditional_tail : OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tail\n                     | empty\n    condition : condition_factor condition_factor_tailcondition_factor : var_call\n              | condition_literal\n              | TILDE condition_literal\n              | LPAREN condition RPARENcondition_factor_tail : empty\n                   | PLUS condition\n                   | MINUS condition\n                   | MULTIPLY condition\n                   | DIVISION condition\n                   | MODULO condition\n                   | EXPONENT condition\n                   | GT condition\n                   | LT condition\n                   | EQ_EQ condition\n                   | GT_EQ condition\n                   | LT_EQ condition\n                   | NOT_EQ condition\n                   | AND condition\n                   | OR conditioncondition_literal : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACEfor_loop_condition : for_loop_condition_factor for_loop_condition_factor_tailfor_loop_condition_factor : var_call\n              | for_loop_condition_literal\n              | TILDE for_loop_condition_literal\n              | LPAREN for_loop_condition RPARENfor_loop_condition_factor_tail : empty\n                   | PLUS for_loop_condition\n                   | MINUS for_loop_condition\n                   | MULTIPLY for_loop_condition\n                   | DIVISION for_loop_condition\n                   | MODULO for_loop_condition\n                   | EXPONENT for_loop_condition\n                   | GT for_loop_condition\n                   | LT for_loop_condition\n                   | EQ_EQ for_loop_condition\n                   | GT_EQ for_loop_condition\n                   | LT_EQ for_loop_condition\n                   | NOT_EQ for_loop_condition\n                   | AND for_loop_condition\n                   | OR for_loop_conditionfor_loop_condition_literal : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITuntil_loop : UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPARENuntil_loop_condition : until_loop_condition_factor until_loop_condition_factor_tailuntil_loop_condition_factor : var_call\n              | until_loop_condition_literal\n              | TILDE until_loop_condition_literal\n              | LPAREN until_loop_condition RPARENuntil_loop_condition_factor_tail : empty\n                   | PLUS until_loop_condition\n                   | MINUS until_loop_condition\n                   | MULTIPLY until_loop_condition\n                   | DIVISION until_loop_condition\n                   | MODULO until_loop_condition\n                   | EXPONENT until_loop_condition\n                   | GT until_loop_condition\n                   | LT until_loop_condition\n                   | EQ_EQ until_loop_condition\n                   | GT_EQ until_loop_condition\n                   | LT_EQ until_loop_condition\n                   | NOT_EQ until_loop_condition\n                   | AND until_loop_condition\n                   | OR until_loop_conditionuntil_loop_condition_literal : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITcontrol_variable : INT IDENT EQ control_var_tailcontrol_var_tail : INT_LIT\n                        | var_callupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | input_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,119,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,20,22,35,36,37,38,39,44,45,46,48,49,50,51,54,55,56,57,58,59,60,61,64,65,66,70,71,86,88,89,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,123,125,127,131,132,134,135,136,137,138,141,142,144,145,146,150,151,152,153,159,161,162,163,164,165,166,167,168,172,173,174,179,180,183,184,191,192,193,194,195,196,197,199,200,202,203,212,216,217,218,219,221,222,235,236,237,238,239,240,241,242,243,244,245,259,260,278,279,280,283,284,285,286,287,289,290,291,292,297,298,300,319,343,344,347,364,365,366,381,397,399,400,424,426,427,451,453,455,456,457,459,462,463,467,468,469,470,472,473,474,475,479,480,481,482,484,486,488,490,491,492,494,],[4,-234,4,17,4,-8,-5,-234,-2,17,-234,-234,17,-77,-3,-7,-9,-10,-11,-234,-234,-16,-18,-234,-54,-55,-234,-47,-48,-49,-50,-51,-52,4,-12,-13,-14,-53,-58,-56,-73,-74,-234,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,17,-15,-75,17,17,-234,-234,-234,-98,17,-108,17,17,-97,-234,-234,-96,-37,-38,-39,-209,-99,4,-106,4,4,4,4,4,-142,-143,-144,4,-20,-6,4,-234,-234,-234,-234,-234,-234,-221,-223,-204,-206,-207,-234,17,-19,-234,-25,-234,-234,-220,-100,-101,-102,-103,-104,-105,-234,-232,-233,-205,-216,-218,-234,-21,-23,-22,-76,-78,-77,-40,-41,-42,-43,-208,-222,-230,17,-234,-234,-26,-234,17,-219,-217,17,-24,-231,17,-234,-234,17,17,-172,17,17,17,-173,-234,17,17,-234,-234,17,-234,-139,-140,-141,17,-145,17,17,-234,17,17,-109,-234,-138,17,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,23,-2,-234,-234,-3,-7,-9,23,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,25,-2,-234,-234,-3,-7,-9,25,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,26,-2,-234,-234,-3,-7,-9,26,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,27,-2,-234,-234,-3,-7,-9,27,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,28,-2,-234,-234,-3,-7,-9,28,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,29,-2,-234,-234,-3,-7,-9,29,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,30,-2,-234,-234,-3,-7,-9,30,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,31,-2,-234,-234,-3,-7,-9,31,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,32,-2,-234,-234,-3,-7,-9,32,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,33,-2,-234,-234,-3,-7,-9,33,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,35,36,37,222,],[-234,-4,-234,-8,-5,34,-2,-234,-234,-3,-7,-9,34,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,20,22,35,36,37,42,222,284,285,286,],[-234,-4,-234,-8,-5,-234,-2,-234,-234,-234,-77,-3,-7,-9,62,-234,-76,-78,-77,]),'INT':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[9,-4,-5,-2,-234,9,-3,9,-234,9,-234,9,9,-107,-234,-108,9,9,9,9,9,9,9,265,-234,-19,9,-234,-234,9,9,-234,9,-234,-234,9,9,-234,9,-234,9,]),'FLT':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[10,-4,-5,-2,-234,10,-3,10,-234,10,-234,10,10,-107,-234,-108,10,10,10,10,10,10,10,-234,-19,10,-234,-234,10,10,-234,10,-234,-234,10,10,-234,10,-234,10,]),'BLN':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[11,-4,-5,-2,-234,11,-3,11,-234,11,-234,11,11,-107,-234,-108,11,11,11,11,11,11,11,-234,-19,11,-234,-234,11,11,-234,11,-234,-234,11,11,-234,11,-234,11,]),'CHR':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[12,-4,-5,-2,-234,12,-3,12,-234,12,-234,12,12,-107,-234,-108,12,12,12,12,12,12,12,-234,-19,12,-234,-234,12,12,-234,12,-234,-234,12,12,-234,12,-234,12,]),'STR':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[13,-4,-5,-2,-234,13,-3,13,-234,13,-234,13,13,-107,-234,-108,13,13,13,13,13,13,13,-234,-19,13,-234,-234,13,13,-234,13,-234,-234,13,13,-234,13,-234,13,]),'GHOST':([4,14,91,],[-4,-5,119,]),'CHECK':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,170,-234,-234,-234,-234,-234,-234,-234,-19,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'SWAP':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,171,-234,-234,-234,-234,-234,-234,-234,-19,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'FUNCTION_NAME':([4,14,16,17,21,23,24,25,26,27,28,29,30,31,32,33,34,35,127,131,132,134,136,137,138,143,145,175,181,185,186,187,188,191,192,193,194,195,196,201,204,205,206,207,208,209,213,216,217,261,278,381,400,424,426,428,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,43,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-3,-234,-234,-234,-234,-107,-234,-108,158,158,158,158,225,225,225,225,-234,-234,-234,-234,-234,-234,158,-224,-225,-226,-227,-228,-229,158,-234,-19,158,-234,-234,-234,-234,-234,158,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'DISPLAY':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,175,-234,-234,-234,-234,-234,-234,-234,-19,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'IDENT':([4,8,9,10,11,12,13,14,16,17,35,40,41,53,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,127,131,132,133,134,136,137,138,139,143,145,175,181,182,185,186,187,188,189,191,192,193,194,195,196,198,201,204,205,206,207,208,209,210,211,213,215,216,217,246,261,265,266,278,281,295,296,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,379,381,400,403,406,407,408,409,410,411,412,413,414,415,416,417,418,419,424,426,428,447,457,462,463,467,469,471,472,481,484,488,491,],[-4,19,-32,-33,-34,-35,-36,-5,-2,-234,-3,44,54,54,96,54,54,54,54,54,54,54,54,54,54,54,54,54,54,118,122,-234,-234,-234,140,-234,-107,-234,-108,146,54,54,54,54,221,54,54,54,54,54,-234,-234,-234,-234,-234,-234,54,54,-224,-225,-226,-227,-228,-229,54,258,54,54,-234,-19,54,54,322,54,-234,343,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-234,-234,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-234,-234,54,54,-234,-234,-234,-234,-234,54,-234,-234,-234,-234,-234,]),'FOR':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,176,-234,-234,-234,-234,-234,-234,-234,-19,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'UNTIL':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,396,400,424,426,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,177,-234,-234,-234,-234,-234,-234,-234,-19,-234,-234,425,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'REPEAT':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,216,217,278,381,400,424,426,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,178,-234,-234,-234,-234,-234,-234,-234,-19,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'INPUT':([4,14,16,17,35,127,131,132,134,136,137,138,143,145,175,181,185,186,187,188,191,192,193,194,195,196,201,204,205,206,207,208,209,213,216,217,261,278,381,400,424,426,428,457,462,463,467,469,472,481,484,488,491,],[-4,-5,-2,-234,-3,-234,-234,-234,-234,-107,-234,-108,160,160,160,160,160,160,160,160,-234,-234,-234,-234,-234,-234,160,-224,-225,-226,-227,-228,-229,160,-234,-19,160,-234,-234,-234,-234,-234,160,-234,-234,-234,-234,-234,-234,-234,-234,-234,-234,]),'REVIVE':([4,14,16,17,35,127,132,135,136,137,138,145,161,163,191,192,193,194,195,196,217,236,237,238,239,240,241,],[-4,-5,-2,-234,-3,-234,-234,143,-98,-234,-108,-234,-99,-106,-234,-234,-234,-234,-234,-234,-19,-100,-101,-102,-103,-104,-105,]),'RBRACE':([4,14,16,17,35,49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,125,127,131,132,134,135,136,137,138,141,142,144,145,148,149,150,151,152,153,159,161,163,191,192,193,194,195,196,216,217,235,236,237,238,239,240,241,278,287,289,290,291,292,342,381,400,424,426,446,448,463,467,469,472,476,479,481,483,484,486,487,488,489,491,493,],[-4,-5,-2,-234,-3,-234,-54,-55,-234,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-234,-234,-234,-234,-234,-98,-234,-108,-234,-234,-97,-234,183,184,-96,-37,-38,-39,-209,-99,-106,-234,-234,-234,-234,-234,-234,-234,-19,-220,-100,-101,-102,-103,-104,-105,-234,-40,-41,-42,-43,-208,396,-234,-234,-234,-234,453,455,-234,-234,-234,-234,480,-234,-234,486,-234,-234,490,-234,492,-234,494,]),'SHIFT':([4,14,16,17,35,136,137,138,145,161,163,191,192,193,194,195,196,217,236,237,238,239,240,241,364,401,457,462,468,],[-4,-5,-2,-234,-3,-98,-234,-108,-234,-99,-106,-234,-234,-234,-234,-234,-234,-19,-100,-101,-102,-103,-104,-105,-234,428,-234,-234,428,]),'OTHERWISE':([4,14,16,17,35,136,137,138,145,161,163,191,192,193,194,195,196,217,236,237,238,239,240,241,427,449,455,457,460,462,464,466,468,473,474,475,494,495,496,],[-4,-5,-2,-234,-3,-98,-234,-108,-234,-99,-106,-234,-234,-234,-234,-234,-234,-19,-100,-101,-102,-103,-104,-105,-234,456,-234,-234,-234,-234,470,-111,-234,-139,-140,-141,-234,-234,-110,]),'LBRACE':([16,17,35,120,121,126,178,300,318,324,349,451,456,458,461,470,477,482,485,],[-2,-234,-3,-234,127,131,216,-234,364,381,400,-234,-234,463,467,-234,481,-234,488,]),'OTHERWISE_CHECK':([16,17,35,455,460,494,495,],[-2,-234,-3,-234,465,-234,465,]),'COMMA':([19,44,45,46,48,49,50,51,54,55,56,57,58,59,60,69,70,71,86,88,89,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,125,140,146,151,152,153,159,212,218,219,221,232,233,234,235,262,263,287,289,290,291,292,319,343,344,346,],[40,40,67,-16,-18,-234,-54,-55,-234,-47,-48,-49,-50,-51,-52,100,-53,-58,-56,-73,-74,40,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,130,-75,130,182,-37,-38,-39,-209,261,281,-25,182,295,-214,-215,-220,261,-38,-40,-41,-42,-43,-208,261,182,-26,295,]),'EQ':([19,44,54,88,89,96,125,146,169,221,322,343,431,],[41,41,-234,-73,-74,41,-75,181,209,181,379,181,209,]),'LBRACKET':([41,54,181,],[47,90,220,]),'TILDE':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,175,181,185,186,187,188,201,204,205,206,207,208,209,210,213,215,246,261,266,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-224,-225,-226,-227,-228,-229,251,52,271,251,52,271,251,251,251,251,251,251,251,251,251,251,251,251,251,251,372,271,271,271,271,271,271,271,271,271,271,271,271,271,271,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,52,271,251,]),'LPAREN':([41,43,53,62,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,154,155,156,157,158,160,170,171,175,176,177,181,185,186,187,188,201,204,205,206,207,208,209,210,213,215,225,246,261,266,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,406,407,408,409,410,411,412,413,414,415,416,417,418,419,425,428,447,465,471,],[53,63,53,92,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,185,186,187,188,189,190,210,211,213,214,215,53,53,53,53,53,53,-224,-225,-226,-227,-228,-229,246,53,266,288,246,53,266,246,246,246,246,246,246,246,246,246,246,246,246,246,246,367,266,266,266,266,266,266,266,266,266,266,266,266,266,266,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,447,53,266,471,246,]),'INT_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,100,143,175,181,185,186,187,188,189,201,204,205,206,207,208,209,210,213,215,220,246,251,261,266,271,295,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,372,379,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,117,55,55,55,55,55,55,55,55,55,55,-224,-225,-226,-227,-228,-229,252,55,272,55,252,252,55,272,272,55,252,252,252,252,252,252,252,252,252,252,252,252,252,252,373,272,272,272,272,272,272,272,272,272,272,272,272,272,272,373,373,422,373,373,373,373,373,373,373,373,373,373,373,373,373,373,55,272,252,]),'FLT_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,175,181,185,186,187,188,189,201,204,205,206,207,208,209,210,213,215,220,246,251,261,266,271,295,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,372,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-224,-225,-226,-227,-228,-229,253,56,273,56,253,253,56,273,273,56,253,253,253,253,253,253,253,253,253,253,253,253,253,253,374,273,273,273,273,273,273,273,273,273,273,273,273,273,273,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,56,273,253,]),'DAY':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,175,181,185,186,187,188,189,201,204,205,206,207,208,209,210,213,215,220,246,251,261,266,271,295,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,372,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-224,-225,-226,-227,-228,-229,254,57,274,57,254,254,57,274,274,57,254,254,254,254,254,254,254,254,254,254,254,254,254,254,375,274,274,274,274,274,274,274,274,274,274,274,274,274,274,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,57,274,254,]),'NIGHT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,175,181,185,186,187,188,189,201,204,205,206,207,208,209,210,213,215,220,246,251,261,266,271,295,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,372,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-224,-225,-226,-227,-228,-229,255,58,275,58,255,255,58,275,275,58,255,255,255,255,255,255,255,255,255,255,255,255,255,255,376,275,275,275,275,275,275,275,275,275,275,275,275,275,275,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,376,58,275,255,]),'CHR_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,175,181,185,186,187,188,189,201,204,205,206,207,208,209,210,213,215,220,246,251,261,266,271,295,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,372,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-224,-225,-226,-227,-228,-229,256,59,276,59,256,256,59,276,276,59,256,256,256,256,256,256,256,256,256,256,256,256,256,256,377,276,276,276,276,276,276,276,276,276,276,276,276,276,276,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377,59,276,256,]),'STR_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,175,181,185,186,187,188,189,198,201,204,205,206,207,208,209,210,213,215,220,246,251,261,266,271,295,296,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,372,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,244,60,-224,-225,-226,-227,-228,-229,257,60,277,60,257,257,60,277,277,60,244,257,257,257,257,257,257,257,257,257,257,257,257,257,257,378,277,277,277,277,277,277,277,277,277,277,277,277,277,277,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,60,277,257,]),'PLUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,169,242,243,244,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,347,348,369,370,371,373,374,375,376,377,378,380,420,429,],[72,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,198,296,-232,-233,303,-113,-114,-132,-133,-134,-135,-136,-137,327,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,296,-116,406,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'MINUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[73,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,304,-113,-114,-132,-133,-134,-135,-136,-137,328,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,407,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'MULTIPLY':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[74,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,305,-113,-114,-132,-133,-134,-135,-136,-137,329,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,408,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'DIVISION':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[75,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,306,-113,-114,-132,-133,-134,-135,-136,-137,330,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,409,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'MODULO':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[76,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,307,-113,-114,-132,-133,-134,-135,-136,-137,331,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,410,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'EXPONENT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[77,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,308,-113,-114,-132,-133,-134,-135,-136,-137,332,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,411,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'GT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[78,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,309,-113,-114,-132,-133,-134,-135,-136,-137,333,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,412,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'LT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[79,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,310,-113,-114,-132,-133,-134,-135,-136,-137,334,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,413,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'EQ_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[80,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,311,-113,-114,-132,-133,-134,-135,-136,-137,335,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,414,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'GT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[81,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,312,-113,-114,-132,-133,-134,-135,-136,-137,336,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,415,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'LT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[82,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,313,-113,-114,-132,-133,-134,-135,-136,-137,337,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,416,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'NOT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[83,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,314,-113,-114,-132,-133,-134,-135,-136,-137,338,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,417,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'AND':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[84,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,315,-113,-114,-132,-133,-134,-135,-136,-137,339,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,418,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'OR':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,248,249,250,252,253,254,255,256,257,268,269,270,272,273,274,275,276,277,317,341,348,369,370,371,373,374,375,376,377,378,380,420,429,],[85,-54,-55,-234,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,316,-113,-114,-132,-133,-134,-135,-136,-137,340,-175,-176,-194,-195,-196,-197,-198,-199,-115,-177,-116,419,-147,-148,-166,-167,-168,-169,-170,-171,-178,-149,-150,]),'RPAREN':([49,50,51,54,55,56,57,58,59,60,63,70,71,86,87,88,89,92,93,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,125,128,129,140,147,151,152,153,159,189,190,200,202,203,223,224,226,227,228,229,230,231,232,233,234,235,245,247,248,249,250,252,253,254,255,256,257,258,260,262,263,267,268,269,270,272,273,274,275,276,277,287,288,289,290,291,292,293,294,299,301,302,317,319,320,323,325,326,341,345,346,348,350,351,352,353,354,355,356,357,358,359,360,361,362,363,365,369,370,371,373,374,375,376,377,378,380,382,383,384,385,386,387,388,389,390,391,392,393,394,395,398,402,404,405,420,429,430,432,433,434,435,436,437,438,439,440,441,442,443,444,445,452,454,478,],[-234,-54,-55,-234,-47,-48,-49,-50,-51,-52,-234,-53,-58,-56,115,-73,-74,120,121,-93,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-234,-75,-92,-94,-234,-95,-37,-38,-39,-209,-234,235,-204,-206,-207,287,-44,-46,289,290,291,292,-210,-234,-214,-215,-220,-205,300,-234,-113,-114,-132,-133,-134,-135,-136,-137,318,-218,-234,115,324,-234,-175,-176,-194,-195,-196,-197,-198,-199,-40,345,-41,-42,-43,-208,-211,-212,348,-112,-117,-115,-234,366,380,-174,-179,-177,-45,-234,-116,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-219,-234,-147,-148,-166,-167,-168,-169,-170,-171,-178,-180,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-213,429,-146,-151,-149,-150,451,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,-203,459,482,]),'COLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,125,151,152,153,159,235,287,289,290,291,292,450,],[-234,-54,-55,-234,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-37,-38,-39,-209,-220,-40,-41,-42,-43,-208,457,]),'PLUS_PLUS':([54,88,89,125,169,431,],[-234,-73,-74,-75,202,202,]),'MINUS_MINUS':([54,88,89,125,169,431,],[-234,-73,-74,-75,203,203,]),'PLUS_EQ':([54,88,89,125,169,431,],[-234,-73,-74,-75,204,204,]),'MINUS_EQ':([54,88,89,125,169,431,],[-234,-73,-74,-75,205,205,]),'MUL_EQ':([54,88,89,125,169,431,],[-234,-73,-74,-75,206,206,]),'DIV_EQ':([54,88,89,125,169,431,],[-234,-73,-74,-75,207,207,]),'MOD_EQ':([54,88,89,125,169,431,],[-234,-73,-74,-75,208,208,]),'SEMICOLON':([54,88,89,125,264,368,369,370,371,373,374,375,376,377,378,404,405,420,421,422,423,429,432,433,434,435,436,437,438,439,440,441,442,443,444,445,],[-234,-73,-74,-75,321,403,-234,-147,-148,-166,-167,-168,-169,-170,-171,-146,-151,-149,-200,-201,-202,-150,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,]),'RBRACKET':([55,56,57,58,59,60,68,69,98,99,116,117,118,124,282,],[-47,-48,-49,-50,-51,-52,97,-234,-27,-28,125,-30,-31,-29,344,]),'CONVERT_TO_INT':([143,175,181,201,204,205,206,207,208,209,213,261,428,],[154,154,154,154,-224,-225,-226,-227,-228,-229,154,154,154,]),'CONVERT_TO_FLT':([143,175,181,201,204,205,206,207,208,209,213,261,428,],[155,155,155,155,-224,-225,-226,-227,-228,-229,155,155,155,]),'CONVERT_TO_BLN':([143,175,181,201,204,205,206,207,208,209,213,261,428,],[156,156,156,156,-224,-225,-226,-227,-228,-229,156,156,156,]),'CONVERT_TO_STR':([143,175,181,201,204,205,206,207,208,209,213,261,428,],[157,157,157,157,-224,-225,-226,-227,-228,-229,157,157,157,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,61,162,164,165,166,167,168,179,184,],[3,14,18,91,191,192,193,194,195,196,217,222,]),'global_dec':([3,18,],[5,37,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,20,44,45,49,54,63,69,96,120,122,127,131,132,134,135,137,140,141,142,145,146,189,191,192,193,194,195,196,212,216,218,221,222,232,242,248,262,268,278,300,319,343,346,347,364,369,381,400,424,426,427,451,455,456,457,460,462,463,467,468,469,470,472,479,481,482,484,486,488,491,494,495,],[7,16,22,16,7,39,16,39,66,71,89,95,99,39,16,129,16,16,136,136,144,16,129,16,16,136,180,231,136,136,136,136,136,136,260,16,280,180,286,294,298,302,260,326,136,16,260,180,294,298,16,405,16,16,136,136,16,16,16,16,16,466,136,16,16,474,136,16,136,16,16,16,136,16,16,136,16,466,]),'data_type':([3,18,63,130,132,134,145,191,192,193,194,195,196,278,424,426,462,469,472,484,491,],[8,8,94,133,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'maybe_newline':([5,17,20,120,127,131,137,141,142,216,300,364,381,400,427,451,455,456,457,463,467,470,479,481,482,486,488,494,],[15,35,42,126,132,134,145,148,149,278,349,401,424,426,449,458,460,461,462,469,472,477,483,484,485,489,491,495,]),'function_statements':([15,222,],[20,285,]),'ret_type':([15,222,],[21,21,]),'function_dtype':([15,222,],[24,24,]),'global_tail':([18,],[36,]),'global_statement_tail':([19,44,96,],[38,64,123,]),'global_dec_value':([41,],[45,]),'global_value':([41,],[46,]),'expression':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,175,181,185,186,187,188,201,213,261,428,],[48,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,152,152,152,224,224,224,224,152,263,152,152,]),'factor':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,175,181,185,186,187,188,201,213,261,428,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'var_call':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,145,175,181,185,186,187,188,189,198,201,210,213,215,246,261,266,295,296,303,304,305,306,307,308,309,310,311,312,313,314,315,316,321,327,328,329,330,331,332,333,334,335,336,337,338,339,340,367,379,403,406,407,408,409,410,411,412,413,414,415,416,417,418,419,428,447,471,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,169,50,50,50,50,50,50,234,243,50,249,50,269,249,50,269,234,243,249,249,249,249,249,249,249,249,249,249,249,249,249,249,370,269,269,269,269,269,269,269,269,269,269,269,269,269,269,370,423,431,370,370,370,370,370,370,370,370,370,370,370,370,370,370,50,269,249,]),'literal':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,175,181,185,186,187,188,189,201,213,220,261,295,428,],[51,69,86,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,69,51,51,51,51,51,51,51,233,51,51,69,51,233,51,]),'main_function':([42,],[61,]),'global_tail2':([45,],[65,]),'list_element':([47,100,220,],[68,124,282,]),'factor_tail':([49,],[70,]),'var_call_tail':([54,],[88,]),'parameters':([63,],[93,]),'element_tail':([69,],[98,]),'index':([90,],[116,]),'parameters_tail':([122,140,],[128,147,]),'statements':([132,134,145,191,192,193,194,195,196,278,424,426,462,469,472,484,491,],[135,141,163,236,237,238,239,240,241,342,446,448,468,476,479,487,493,]),'local_dec':([132,134,145,191,192,193,194,195,196,278,424,426,462,469,472,484,491,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'var_statement':([132,134,145,191,192,193,194,195,196,278,424,426,462,469,472,484,491,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'revive':([135,],[142,]),'value':([143,175,181,201,213,261,428,],[150,212,219,245,262,319,450,]),'type_cast':([143,175,181,201,213,261,428,],[151,151,151,151,151,151,151,]),'function_call':([143,145,175,181,201,213,261,428,],[153,167,153,153,153,153,153,153,]),'input_statement':([143,145,175,181,185,186,187,188,201,213,261,428,],[159,159,159,159,226,226,226,226,159,159,159,159,]),'statements_tail':([145,],[161,]),'string_operation_statement':([145,],[162,]),'conditional_statement':([145,],[164,]),'switch_statement':([145,],[165,]),'loop_statement':([145,],[166,]),'output_statement':([145,],[168,]),'for_loop':([145,],[172,]),'until_loop':([145,],[173,]),'repeat_until':([145,],[174,]),'var_tail':([146,221,343,],[179,283,397,]),'string_operation_tail':([169,],[197,]),'update_tail':([169,431,],[199,452,]),'postfix':([169,431,],[200,200,]),'assign_op':([169,431,],[201,201,]),'tail_value':([181,],[218,]),'typecast_value':([185,186,187,188,],[223,227,228,229,]),'arguments':([189,],[230,]),'arg_value':([189,295,],[232,346,]),'string_val':([198,296,],[242,347,]),'condition':([210,246,303,304,305,306,307,308,309,310,311,312,313,314,315,316,471,],[247,299,350,351,352,353,354,355,356,357,358,359,360,361,362,363,478,]),'condition_factor':([210,246,303,304,305,306,307,308,309,310,311,312,313,314,315,316,471,],[248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,]),'condition_literal':([210,246,251,303,304,305,306,307,308,309,310,311,312,313,314,315,316,471,],[250,250,317,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,]),'next_val':([212,262,319,],[259,320,365,]),'control_variable':([214,],[264,]),'until_loop_condition':([215,266,327,328,329,330,331,332,333,334,335,336,337,338,339,340,447,],[267,323,382,383,384,385,386,387,388,389,390,391,392,393,394,395,454,]),'until_loop_condition_factor':([215,266,327,328,329,330,331,332,333,334,335,336,337,338,339,340,447,],[268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,]),'until_loop_condition_literal':([215,266,271,327,328,329,330,331,332,333,334,335,336,337,338,339,340,447,],[270,270,341,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,]),'var_tail2':([218,],[279,]),'function_statements_tail':([222,],[284,]),'arg_tail':([232,346,],[293,398,]),'stringcon_tail':([242,347,],[297,399,]),'condition_factor_tail':([248,],[301,]),'until_loop_condition_factor_tail':([268,],[325,]),'for_loop_condition':([321,367,406,407,408,409,410,411,412,413,414,415,416,417,418,419,],[368,402,432,433,434,435,436,437,438,439,440,441,442,443,444,445,]),'for_loop_condition_factor':([321,367,406,407,408,409,410,411,412,413,414,415,416,417,418,419,],[369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,]),'for_loop_condition_literal':([321,367,372,406,407,408,409,410,411,412,413,414,415,416,417,418,419,],[371,371,420,371,371,371,371,371,371,371,371,371,371,371,371,371,371,]),'for_loop_condition_factor_tail':([369,],[404,]),'control_var_tail':([379,],[421,]),'switch_condition':([401,468,],[427,475,]),'update':([403,],[430,]),'conditional_tail':([460,495,],[464,496,]),'switchcond_tail':([468,],[473,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',67),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',74),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',75),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',94),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',101),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',102),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',103),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',115),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',116),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',126),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',127),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',137),
  ('var_statement -> data_type IDENT var_tail unli_newline','var_statement',4,'p_var_statement','Parser.py',144),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',151),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',152),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',153),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',165),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',166),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',176),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',177),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',187),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',197),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',198),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',208),
  ('index -> IDENT','index',1,'p_index','Parser.py',209),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',218),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',219),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',220),
  ('value -> type_cast','value',1,'p_value','Parser.py',227),
  ('value -> expression','value',1,'p_value','Parser.py',228),
  ('value -> function_call','value',1,'p_value','Parser.py',229),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',239),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',247),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',248),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',258),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',260),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',261),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',262),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',263),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',274),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',285),
  ('factor -> literal','factor',1,'p_factor','Parser.py',286),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',287),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',288),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',300),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',301),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',302),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',303),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',304),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',305),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',306),
  ('factor_tail -> GT expression','factor_tail',2,'p_factor_tail','Parser.py',307),
  ('factor_tail -> LT expression','factor_tail',2,'p_factor_tail','Parser.py',308),
  ('factor_tail -> EQ_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',309),
  ('factor_tail -> GT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',310),
  ('factor_tail -> LT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',311),
  ('factor_tail -> NOT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',312),
  ('factor_tail -> AND expression','factor_tail',2,'p_factor_tail','Parser.py',313),
  ('factor_tail -> OR expression','factor_tail',2,'p_factor_tail','Parser.py',314),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',325),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',332),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',333),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail','function_statements',13,'p_function_statements','Parser.py',341),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',342),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',369),
  ('function_statements_tail -> empty','function_statements_tail',1,'p_function_statements_tail','Parser.py',370),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',390),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',391),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',401),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',402),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',403),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',404),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',405),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',406),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',407),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',408),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',409),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',410),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',417),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',418),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',428),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',429),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',439),
  ('revive -> empty','revive',1,'p_revive','Parser.py',440),
  ('statements -> empty','statements',1,'p_statements','Parser.py',450),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',451),
  ('statements_tail -> string_operation_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',465),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',466),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',467),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',468),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',469),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',470),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',471),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',488),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',489),
  ('conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_statement',17,'p_conditional_statement','Parser.py',497),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_tail',11,'p_conditional_tail','Parser.py',509),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',510),
  ('condition -> condition_factor condition_factor_tail','condition',2,'p_condition','Parser.py',525),
  ('condition_factor -> var_call','condition_factor',1,'p_condition_factor','Parser.py',536),
  ('condition_factor -> condition_literal','condition_factor',1,'p_condition_factor','Parser.py',537),
  ('condition_factor -> TILDE condition_literal','condition_factor',2,'p_condition_factor','Parser.py',538),
  ('condition_factor -> LPAREN condition RPAREN','condition_factor',3,'p_condition_factor','Parser.py',539),
  ('condition_factor_tail -> empty','condition_factor_tail',1,'p_condition_factor_tail','Parser.py',551),
  ('condition_factor_tail -> PLUS condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',552),
  ('condition_factor_tail -> MINUS condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',553),
  ('condition_factor_tail -> MULTIPLY condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',554),
  ('condition_factor_tail -> DIVISION condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',555),
  ('condition_factor_tail -> MODULO condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',556),
  ('condition_factor_tail -> EXPONENT condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',557),
  ('condition_factor_tail -> GT condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',558),
  ('condition_factor_tail -> LT condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',559),
  ('condition_factor_tail -> EQ_EQ condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',560),
  ('condition_factor_tail -> GT_EQ condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',561),
  ('condition_factor_tail -> LT_EQ condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',562),
  ('condition_factor_tail -> NOT_EQ condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',563),
  ('condition_factor_tail -> AND condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',564),
  ('condition_factor_tail -> OR condition','condition_factor_tail',2,'p_condition_factor_tail','Parser.py',565),
  ('condition_literal -> INT_LIT','condition_literal',1,'p_condition_literal','Parser.py',572),
  ('condition_literal -> FLT_LIT','condition_literal',1,'p_condition_literal','Parser.py',573),
  ('condition_literal -> DAY','condition_literal',1,'p_condition_literal','Parser.py',574),
  ('condition_literal -> NIGHT','condition_literal',1,'p_condition_literal','Parser.py',575),
  ('condition_literal -> CHR_LIT','condition_literal',1,'p_condition_literal','Parser.py',576),
  ('condition_literal -> STR_LIT','condition_literal',1,'p_condition_literal','Parser.py',577),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',586),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',593),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',600),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',601),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',611),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',612),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',613),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',620),
  ('for_loop_condition -> for_loop_condition_factor for_loop_condition_factor_tail','for_loop_condition',2,'p_for_loop_condition','Parser.py',624),
  ('for_loop_condition_factor -> var_call','for_loop_condition_factor',1,'p_for_loop_condition_factor','Parser.py',635),
  ('for_loop_condition_factor -> for_loop_condition_literal','for_loop_condition_factor',1,'p_for_loop_condition_factor','Parser.py',636),
  ('for_loop_condition_factor -> TILDE for_loop_condition_literal','for_loop_condition_factor',2,'p_for_loop_condition_factor','Parser.py',637),
  ('for_loop_condition_factor -> LPAREN for_loop_condition RPAREN','for_loop_condition_factor',3,'p_for_loop_condition_factor','Parser.py',638),
  ('for_loop_condition_factor_tail -> empty','for_loop_condition_factor_tail',1,'p_for_loop_condition_factor_tail','Parser.py',650),
  ('for_loop_condition_factor_tail -> PLUS for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',651),
  ('for_loop_condition_factor_tail -> MINUS for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',652),
  ('for_loop_condition_factor_tail -> MULTIPLY for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',653),
  ('for_loop_condition_factor_tail -> DIVISION for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',654),
  ('for_loop_condition_factor_tail -> MODULO for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',655),
  ('for_loop_condition_factor_tail -> EXPONENT for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',656),
  ('for_loop_condition_factor_tail -> GT for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',657),
  ('for_loop_condition_factor_tail -> LT for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',658),
  ('for_loop_condition_factor_tail -> EQ_EQ for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',659),
  ('for_loop_condition_factor_tail -> GT_EQ for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',660),
  ('for_loop_condition_factor_tail -> LT_EQ for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',661),
  ('for_loop_condition_factor_tail -> NOT_EQ for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',662),
  ('for_loop_condition_factor_tail -> AND for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',663),
  ('for_loop_condition_factor_tail -> OR for_loop_condition','for_loop_condition_factor_tail',2,'p_for_loop_condition_factor_tail','Parser.py',664),
  ('for_loop_condition_literal -> INT_LIT','for_loop_condition_literal',1,'p_for_loop_condition_literal','Parser.py',671),
  ('for_loop_condition_literal -> FLT_LIT','for_loop_condition_literal',1,'p_for_loop_condition_literal','Parser.py',672),
  ('for_loop_condition_literal -> DAY','for_loop_condition_literal',1,'p_for_loop_condition_literal','Parser.py',673),
  ('for_loop_condition_literal -> NIGHT','for_loop_condition_literal',1,'p_for_loop_condition_literal','Parser.py',674),
  ('for_loop_condition_literal -> CHR_LIT','for_loop_condition_literal',1,'p_for_loop_condition_literal','Parser.py',675),
  ('for_loop_condition_literal -> STR_LIT','for_loop_condition_literal',1,'p_for_loop_condition_literal','Parser.py',676),
  ('until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',684),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN','repeat_until',9,'p_repeat_until','Parser.py',691),
  ('until_loop_condition -> until_loop_condition_factor until_loop_condition_factor_tail','until_loop_condition',2,'p_until_loop_condition','Parser.py',696),
  ('until_loop_condition_factor -> var_call','until_loop_condition_factor',1,'p_until_loop_condition_factor','Parser.py',707),
  ('until_loop_condition_factor -> until_loop_condition_literal','until_loop_condition_factor',1,'p_until_loop_condition_factor','Parser.py',708),
  ('until_loop_condition_factor -> TILDE until_loop_condition_literal','until_loop_condition_factor',2,'p_until_loop_condition_factor','Parser.py',709),
  ('until_loop_condition_factor -> LPAREN until_loop_condition RPAREN','until_loop_condition_factor',3,'p_until_loop_condition_factor','Parser.py',710),
  ('until_loop_condition_factor_tail -> empty','until_loop_condition_factor_tail',1,'p_until_loop_condition_factor_tail','Parser.py',722),
  ('until_loop_condition_factor_tail -> PLUS until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',723),
  ('until_loop_condition_factor_tail -> MINUS until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',724),
  ('until_loop_condition_factor_tail -> MULTIPLY until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',725),
  ('until_loop_condition_factor_tail -> DIVISION until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',726),
  ('until_loop_condition_factor_tail -> MODULO until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',727),
  ('until_loop_condition_factor_tail -> EXPONENT until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',728),
  ('until_loop_condition_factor_tail -> GT until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',729),
  ('until_loop_condition_factor_tail -> LT until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',730),
  ('until_loop_condition_factor_tail -> EQ_EQ until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',731),
  ('until_loop_condition_factor_tail -> GT_EQ until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',732),
  ('until_loop_condition_factor_tail -> LT_EQ until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',733),
  ('until_loop_condition_factor_tail -> NOT_EQ until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',734),
  ('until_loop_condition_factor_tail -> AND until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',735),
  ('until_loop_condition_factor_tail -> OR until_loop_condition','until_loop_condition_factor_tail',2,'p_until_loop_condition_factor_tail','Parser.py',736),
  ('until_loop_condition_literal -> INT_LIT','until_loop_condition_literal',1,'p_until_loop_condition_literal','Parser.py',743),
  ('until_loop_condition_literal -> FLT_LIT','until_loop_condition_literal',1,'p_until_loop_condition_literal','Parser.py',744),
  ('until_loop_condition_literal -> DAY','until_loop_condition_literal',1,'p_until_loop_condition_literal','Parser.py',745),
  ('until_loop_condition_literal -> NIGHT','until_loop_condition_literal',1,'p_until_loop_condition_literal','Parser.py',746),
  ('until_loop_condition_literal -> CHR_LIT','until_loop_condition_literal',1,'p_until_loop_condition_literal','Parser.py',747),
  ('until_loop_condition_literal -> STR_LIT','until_loop_condition_literal',1,'p_until_loop_condition_literal','Parser.py',748),
  ('control_variable -> INT IDENT EQ control_var_tail','control_variable',4,'p_control_variable','Parser.py',755),
  ('control_var_tail -> INT_LIT','control_var_tail',1,'p_control_var_tail','Parser.py',763),
  ('control_var_tail -> var_call','control_var_tail',1,'p_control_var_tail','Parser.py',764),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',775),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',782),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',783),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',793),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',794),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',801),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',802),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',812),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',813),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',823),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',824),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',834),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',835),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',842),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',843),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',855),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',856),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',866),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',873),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',882),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',883),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',893),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',894),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',895),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',896),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',897),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',898),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',905),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',906),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',916),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',917),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',933),
]
