
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOT DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW PUSH RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP SPLICE STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE\n    global_dec : global_statement global_tail     \n               | empty                            \n    \n        global_tail : global_dec\n    \n        global_statement : var_statement global_statement_tail\n    \n        var_statement : data_type IDENT list_dec\n    \n    list_dec : empty               \n             | LBRACKET RBRACKET _2d_list \n    \n    _2d_list : empty            \n             | LBRACKET RBRACKET \n    \n    global_statement_tail : empty                        \n                          | COMMA IDENT global_statement_tail \n                          | EQ global_value global_statement_tail2 \n    \n    global_statement_tail2 : COMMA IDENT global_statement_tail \n                           | empty                           \n    \n    global_value : expression   \n                 | list_value   \n    \n     list_value : LBRACKET list_element RBRACKET\n    \n    list_element : literal element_tail  \n    \n    element_tail : COMMA list_element  \n                 | empty              \n    \n    data_type : INT   \n              | FLT   \n              | BLN  \n              | CHR  \n              | STR  \n    \n    expression : factor factor_tail\n    \n    factor : var_call postfix           \n           | literal1                    \n           | TILDE INT_LIT               \n           | TILDE FLT_LIT                \n           | LPAREN expression RPAREN    \n    \n    factor_tail : PLUS factor factor_tail\n                | MINUS factor factor_tail\n                | MULTIPLY factor factor_tail\n                | DIVISION factor factor_tail\n                | MODULO factor factor_tail\n                | EXPONENT factor factor_tail\n                | GT factor factor_tail\n                | LT factor factor_tail\n                | EQ_EQ factor factor_tail\n                | GT_EQ factor factor_tail\n                | LT_EQ factor factor_tail\n                | NOT_EQ factor factor_tail\n                | AND factor factor_tail\n                | OR factor factor_tail\n                | empty\n    \n    literal : literal1\n            | literal2\n    \n    literal1 : INT_LIT\n             | FLT_LIT\n             | DAY\n             | NIGHT\n             | STR_LIT\n    \n    literal2 : CHR_LIT\n    \n    function_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE function_statements_tail  \n                        | empty                                                          \n    \n    function_statements_tail : function_statements \n                             | empty               \n    \n    ret_type : FUNCTION           \n             | function_dtype    \n    \n    function_dtype : FUNCTION_INT       \n                   | FUNCTION_FLT      \n                   | FUNCTION_CHR       \n                   | FUNCTION_BLN       \n                   | FUNCTION_STR       \n                   | FUNCTION_LIST_INT \n                   | FUNCTION_LIST_FLT  \n                   | FUNCTION_LIST_CHR \n                   | FUNCTION_LIST_STR  \n                   | FUNCTION_LIST_BLN  \n    \n    parameters : data_type IDENT parameters_tail  \n               | empty                            \n    \n    parameters_tail : COMMA data_type IDENT parameters_tail \n                    | empty                                 \n    \n    revive : REVIVE value  \n           | empty        \n    statements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | assignment_statement unli_newline statements\n                    | output_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | statements\n    \n    local_dec : var_statement local_dec_tail  \n              | empty                      \n    \n    local_dec_tail : empty                          \n                   | COMMA IDENT local_dec_tail     \n                   | EQ local_value local_dec_tail2  \n    \n    local_dec_tail2 : COMMA IDENT local_dec_tail  \n                    | empty                      \n    \n    local_value : value      \n                | list_value  \n    \n    conditional_statement : CHECK LPAREN expression RPAREN LBRACE maybe_newline statements maybe_newline RBRACE  maybe_newline conditional_tail  maybe_newline OTHERWISE  maybe_newline LBRACE  maybe_newline statements  maybe_newline RBRACE  \n    \n    conditional_tail : OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail \n                     | empty                                            \n    \n    switch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE \n    \n    switch_condition : SHIFT value COLON statements switchcond_tail  \n    \n    switchcond_tail : switch_condition  \n                    | empty          \n    \n    loop_statement : for_loop    \n                   | until_loop  \n                   | repeat_until\n    \n    for_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE \n    \n    until_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACE  \n    \n    repeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN \n    \n    control_variable : INT IDENT EQ control_var_tail\n    \n    control_var_tail : INT_LIT   \n                     | var_call \n    \n    update : var_call update_tail  \n    \n    update_tail : postfix_op         \n                | compound_op value   \n    \n    postfix_op : PLUS_PLUS   \n               | MINUS_MINUS \n    \n    function_call : FUNCTION_NAME LPAREN arguments RPAREN  \n                  | input_statement                      \n    \n    arguments : empty                  \n              | arg_value arg_tail    \n    \n    arg_tail : COMMA arg_value arg_tail   \n             | empty                     \n    \n    arg_value : literal   \n              | var_call \n    \n    output_statement : DISPLAY value next_val   \n    \n    next_val : COMMA value next_val  \n             | empty                \n    \n    assignment_statement : IDENT assign_tail  \n    \n    assign_tail : DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN  \n                | DOT PUSH LPAREN list_element RPAREN                                  \n                | assign_op value                                                     \n    \n    assign_op : compound_op  \n              | EQ           \n    \n    compound_op : PLUS_EQ \n                | MINUS_EQ  \n                | MUL_EQ   \n                | DIV_EQ    \n                | MOD_EQ   \n    \n    start : INT_LIT \n    \n    deleteCount : empty     \n                | INT_LIT  \n    \n    splice_items : empty          \n                 | list_element  \n    \n    var_call : IDENT list_index  \n    \n    list_index : LBRACKET index RBRACKET list_index2  \n               | empty                                \n    \n    list_index2 : LBRACKET index RBRACKET \n                | empty                   \n    \n    index : INT_LIT    \n          | IDENT      \n    \n    postfix : empty        \n            | postfix_op  \n    \n    value : type_cast     \n          | expression   \n          | function_call \n    \n    type_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN \n              | CONVERT_TO_FLT LPAREN typecast_value RPAREN  \n              | CONVERT_TO_BLN LPAREN typecast_value RPAREN  \n              | CONVERT_TO_STR LPAREN typecast_value RPAREN \n    \n    typecast_value : expression                           \n                   | FUNCTION_NAME LPAREN RPAREN          \n                   | input_statement                     \n    \n    input_statement : INPUT LPAREN RPAREN  \n    empty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,100,196,198,199,200,201,202,],[3,15,129,228,229,230,231,232,233,]),'global_dec':([3,6,],[5,20,]),'global_statement':([3,6,],[6,6,]),'empty':([3,5,6,8,16,18,25,26,42,43,46,48,54,84,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,150,153,155,160,165,166,168,169,172,176,181,182,183,213,214,226,228,229,230,231,232,233,245,249,264,286,299,307,313,316,321,323,335,340,341,342,350,354,355,362,365,371,375,376,377,379,380,],[7,17,7,22,28,17,59,17,22,66,82,89,98,121,128,133,22,82,82,82,82,82,82,82,82,82,82,82,82,82,82,158,17,163,167,17,175,17,178,167,167,163,17,221,178,253,263,167,167,167,167,167,167,280,167,295,178,280,295,17,167,333,167,17,167,167,352,360,17,167,367,17,17,17,167,167,17,367,]),'var_statement':([3,6,160,172,176,228,229,230,231,232,233,249,316,323,340,341,355,376,377,],[8,8,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,]),'data_type':([3,6,102,160,162,172,176,228,229,230,231,232,233,249,316,323,340,341,355,376,377,],[9,9,132,9,170,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'maybe_newline':([5,18,26,153,165,168,182,313,335,354,365,371,375,379,],[16,41,61,159,172,176,218,323,343,362,369,373,377,381,]),'global_tail':([6,],[19,]),'global_statement_tail':([8,42,103,],[21,63,134,]),'function_statements':([16,183,],[26,220,]),'ret_type':([16,183,],[27,27,]),'function_dtype':([16,183,],[30,30,]),'global_value':([24,],[43,]),'expression':([24,53,174,180,208,222,223,224,225,237,246,248,279,301,320,329,347,370,],[44,95,186,186,186,256,256,256,256,186,281,284,186,314,186,339,186,372,]),'list_value':([24,180,],[45,216,]),'factor':([24,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,174,180,208,222,223,224,225,237,246,248,279,301,320,329,347,370,],[46,46,104,105,106,107,108,109,110,111,112,113,114,115,116,117,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'var_call':([24,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,174,180,208,222,223,224,225,226,237,246,248,279,294,301,315,320,324,329,347,370,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,266,48,48,48,48,266,48,327,48,337,48,48,48,]),'literal1':([24,47,53,68,69,70,71,72,73,74,75,76,77,78,79,80,81,120,174,180,208,222,223,224,225,226,237,246,248,279,294,298,301,320,329,342,347,370,],[49,85,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,85,49,49,49,49,49,49,49,85,49,49,49,49,85,85,49,49,49,85,49,49,]),'list_dec':([25,],[58,]),'global_statement_tail2':([43,],[64,]),'factor_tail':([46,104,105,106,107,108,109,110,111,112,113,114,115,116,117,],[67,135,136,137,138,139,140,141,142,143,144,145,146,147,148,]),'list_element':([47,120,298,342,],[83,149,311,353,]),'literal':([47,120,226,294,298,342,],[84,84,265,265,84,84,]),'literal2':([47,120,226,294,298,342,],[86,86,86,86,86,86,]),'postfix':([48,],[88,]),'postfix_op':([48,337,],[90,346,]),'list_index':([54,],[96,]),'main_function':([61,],[100,]),'element_tail':([84,],[119,]),'index':([97,156,],[123,164,]),'_2d_list':([99,],[127,]),'parameters':([102,],[131,]),'list_index2':([150,],[157,]),'parameters_tail':([155,181,],[161,217,]),'statements':([160,172,176,228,229,230,231,232,233,249,316,323,340,341,355,376,377,],[166,182,197,268,269,270,271,272,273,285,328,335,349,350,363,378,379,]),'local_dec':([160,172,176,228,229,230,231,232,233,249,316,323,340,341,355,376,377,],[168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,]),'revive':([166,],[173,]),'local_dec_tail':([169,213,286,],[177,250,305,]),'value':([174,180,208,237,279,320,347,],[184,215,245,277,299,331,356,]),'type_cast':([174,180,208,237,279,320,347,],[185,185,185,185,185,185,185,]),'function_call':([174,176,180,208,237,279,320,347,],[187,199,187,187,187,187,187,187,]),'input_statement':([174,176,180,208,222,223,224,225,237,279,320,347,],[193,193,193,193,258,258,258,258,193,193,193,193,]),'statements_tail':([176,],[195,]),'switch_statement':([176,],[196,]),'loop_statement':([176,],[198,]),'assignment_statement':([176,],[200,]),'output_statement':([176,],[201,]),'conditional_statement':([176,],[202,]),'for_loop':([176,],[205,]),'until_loop':([176,],[206,]),'repeat_until':([176,],[207,]),'local_value':([180,],[214,]),'function_statements_tail':([183,],[219,]),'assign_tail':([204,],[235,]),'assign_op':([204,],[237,]),'compound_op':([204,337,],[238,347,]),'local_dec_tail2':([214,],[251,]),'typecast_value':([222,223,224,225,],[255,259,260,261,]),'arguments':([226,],[262,]),'arg_value':([226,294,],[264,307,]),'next_val':([245,299,],[278,312,]),'control_variable':([247,],[282,]),'arg_tail':([264,307,],[293,318,]),'start':([297,],[309,]),'switch_condition':([308,350,],[319,359,]),'control_var_tail':([315,],[325,]),'deleteCount':([321,],[332,]),'update':([324,],[336,]),'update_tail':([337,],[345,]),'splice_items':([342,],[351,]),'switchcond_tail':([350,],[358,]),'conditional_tail':([362,380,],[365,382,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement global_tail','global_dec',2,'p_global_dec','Parser.py',78),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',79),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',94),
  ('global_statement -> var_statement global_statement_tail','global_statement',2,'p_global_statement','Parser.py',104),
  ('var_statement -> data_type IDENT list_dec','var_statement',3,'p_var_statement','Parser.py',117),
  ('list_dec -> empty','list_dec',1,'p_list_dec','Parser.py',132),
  ('list_dec -> LBRACKET RBRACKET _2d_list','list_dec',3,'p_list_dec','Parser.py',133),
  ('_2d_list -> empty','_2d_list',1,'p_2d_list','Parser.py',148),
  ('_2d_list -> LBRACKET RBRACKET','_2d_list',2,'p_2d_list','Parser.py',149),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',164),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',165),
  ('global_statement_tail -> EQ global_value global_statement_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',166),
  ('global_statement_tail2 -> COMMA IDENT global_statement_tail','global_statement_tail2',3,'p_global_statement_tail2','Parser.py',183),
  ('global_statement_tail2 -> empty','global_statement_tail2',1,'p_global_statement_tail2','Parser.py',184),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',199),
  ('global_value -> list_value','global_value',1,'p_global_value','Parser.py',200),
  ('list_value -> LBRACKET list_element RBRACKET','list_value',3,'p_list_value','Parser.py',210),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',222),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',231),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',232),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',249),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',250),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',251),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',252),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',253),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',263),
  ('factor -> var_call postfix','factor',2,'p_factor','Parser.py',280),
  ('factor -> literal1','factor',1,'p_factor','Parser.py',281),
  ('factor -> TILDE INT_LIT','factor',2,'p_factor','Parser.py',282),
  ('factor -> TILDE FLT_LIT','factor',2,'p_factor','Parser.py',283),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',284),
  ('factor_tail -> PLUS factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',322),
  ('factor_tail -> MINUS factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',323),
  ('factor_tail -> MULTIPLY factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',324),
  ('factor_tail -> DIVISION factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',325),
  ('factor_tail -> MODULO factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',326),
  ('factor_tail -> EXPONENT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',327),
  ('factor_tail -> GT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',328),
  ('factor_tail -> LT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',329),
  ('factor_tail -> EQ_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',330),
  ('factor_tail -> GT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',331),
  ('factor_tail -> LT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',332),
  ('factor_tail -> NOT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',333),
  ('factor_tail -> AND factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',334),
  ('factor_tail -> OR factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',335),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',336),
  ('literal -> literal1','literal',1,'p_literal','Parser.py',349),
  ('literal -> literal2','literal',1,'p_literal','Parser.py',350),
  ('literal1 -> INT_LIT','literal1',1,'p_literal1','Parser.py',365),
  ('literal1 -> FLT_LIT','literal1',1,'p_literal1','Parser.py',366),
  ('literal1 -> DAY','literal1',1,'p_literal1','Parser.py',367),
  ('literal1 -> NIGHT','literal1',1,'p_literal1','Parser.py',368),
  ('literal1 -> STR_LIT','literal1',1,'p_literal1','Parser.py',369),
  ('literal2 -> CHR_LIT','literal2',1,'p_literal2','Parser.py',375),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE function_statements_tail','function_statements',10,'p_function_statements','Parser.py',385),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',386),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',407),
  ('function_statements_tail -> empty','function_statements_tail',1,'p_function_statements_tail','Parser.py',408),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',421),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',422),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',443),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',444),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',445),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',446),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',447),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',448),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',449),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',450),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',451),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',452),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',462),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',463),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',476),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',477),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',489),
  ('revive -> empty','revive',1,'p_revive','Parser.py',490),
  ('statements -> empty','statements',1,'p_statements','Parser.py',502),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',503),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',519),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',520),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',521),
  ('statements_tail -> assignment_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',522),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',523),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',524),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',525),
  ('local_dec -> var_statement local_dec_tail','local_dec',2,'p_local_dec','Parser.py',583),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',584),
  ('local_dec_tail -> empty','local_dec_tail',1,'p_local_dec_tail','Parser.py',600),
  ('local_dec_tail -> COMMA IDENT local_dec_tail','local_dec_tail',3,'p_local_dec_tail','Parser.py',601),
  ('local_dec_tail -> EQ local_value local_dec_tail2','local_dec_tail',3,'p_local_dec_tail','Parser.py',602),
  ('local_dec_tail2 -> COMMA IDENT local_dec_tail','local_dec_tail2',3,'p_local_dec_tail2','Parser.py',617),
  ('local_dec_tail2 -> empty','local_dec_tail2',1,'p_local_dec_tail2','Parser.py',618),
  ('local_value -> value','local_value',1,'p_local_value','Parser.py',632),
  ('local_value -> list_value','local_value',1,'p_local_value','Parser.py',633),
  ('conditional_statement -> CHECK LPAREN expression RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','conditional_statement',19,'p_conditional_statement','Parser.py',642),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_tail',8,'p_conditional_tail','Parser.py',653),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',654),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE','switch_statement',11,'p_switch_statement','Parser.py',666),
  ('switch_condition -> SHIFT value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',679),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',690),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',691),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',706),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',707),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',708),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','Parser.py',717),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',726),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',735),
  ('control_variable -> INT IDENT EQ control_var_tail','control_variable',4,'p_control_variable','Parser.py',744),
  ('control_var_tail -> INT_LIT','control_var_tail',1,'p_control_var_tail','Parser.py',755),
  ('control_var_tail -> var_call','control_var_tail',1,'p_control_var_tail','Parser.py',756),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',765),
  ('update_tail -> postfix_op','update_tail',1,'p_update_tail','Parser.py',775),
  ('update_tail -> compound_op value','update_tail',2,'p_update_tail','Parser.py',776),
  ('postfix_op -> PLUS_PLUS','postfix_op',1,'p_postfix_op','Parser.py',789),
  ('postfix_op -> MINUS_MINUS','postfix_op',1,'p_postfix_op','Parser.py',790),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',800),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',801),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',814),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',815),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',828),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',829),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',842),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',843),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',852),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',862),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',863),
  ('assignment_statement -> IDENT assign_tail','assignment_statement',2,'p_assignment_statement','Parser.py',875),
  ('assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN','assign_tail',9,'p_assign_tail','Parser.py',887),
  ('assign_tail -> DOT PUSH LPAREN list_element RPAREN','assign_tail',5,'p_assign_tail','Parser.py',888),
  ('assign_tail -> assign_op value','assign_tail',2,'p_assign_tail','Parser.py',889),
  ('assign_op -> compound_op','assign_op',1,'p_assign_op','Parser.py',905),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',906),
  ('compound_op -> PLUS_EQ','compound_op',1,'p_compound_op','Parser.py',919),
  ('compound_op -> MINUS_EQ','compound_op',1,'p_compound_op','Parser.py',920),
  ('compound_op -> MUL_EQ','compound_op',1,'p_compound_op','Parser.py',921),
  ('compound_op -> DIV_EQ','compound_op',1,'p_compound_op','Parser.py',922),
  ('compound_op -> MOD_EQ','compound_op',1,'p_compound_op','Parser.py',923),
  ('start -> INT_LIT','start',1,'p_start','Parser.py',932),
  ('deleteCount -> empty','deleteCount',1,'p_deleteCount','Parser.py',942),
  ('deleteCount -> INT_LIT','deleteCount',1,'p_deleteCount','Parser.py',943),
  ('splice_items -> empty','splice_items',1,'p_splice_items','Parser.py',956),
  ('splice_items -> list_element','splice_items',1,'p_splice_items','Parser.py',957),
  ('var_call -> IDENT list_index','var_call',2,'p_var_call','Parser.py',969),
  ('list_index -> LBRACKET index RBRACKET list_index2','list_index',4,'p_list_index','Parser.py',980),
  ('list_index -> empty','list_index',1,'p_list_index','Parser.py',981),
  ('list_index2 -> LBRACKET index RBRACKET','list_index2',3,'p_list_index2','Parser.py',994),
  ('list_index2 -> empty','list_index2',1,'p_list_index2','Parser.py',995),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',1008),
  ('index -> IDENT','index',1,'p_index','Parser.py',1009),
  ('postfix -> empty','postfix',1,'p_postfix','Parser.py',1019),
  ('postfix -> postfix_op','postfix',1,'p_postfix','Parser.py',1020),
  ('value -> type_cast','value',1,'p_value','Parser.py',1031),
  ('value -> expression','value',1,'p_value','Parser.py',1032),
  ('value -> function_call','value',1,'p_value','Parser.py',1033),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1045),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1046),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1047),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1048),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',1060),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',1061),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',1062),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',1073),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1078),
]
