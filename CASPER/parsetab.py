
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BIRTH BLN BLN_LIT CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GLOBAL GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH statement_list GHOSTstatement_list : statement\n                      | statement_list statement\n                      | statement_list NEWLINE\n                      | emptystatement : variable_declaration\n                 | assignment\n                 | function_call\n                 | loop\n                 | conditional\n                 | io_statementvariable_declaration : TYPE IDENT EQ expressionassignment : IDENT EQ expressionfunction_call : FUNCTION_NAME LPAREN arguments RPAREN loop : REPEAT LPAREN expression RPAREN statement_list UNTIL LPAREN expression RPARENconditional : CHECK LPAREN expression RPAREN statement_list OTHERWISE statement_list OTHERWISE_CHECK LPAREN expression RPARENio_statement : DISPLAY LPAREN expression RPARENexpression : IDENT\n                  | INT_LIT\n                  | FLT_LIT\n                  | STR_LIT\n                  | function_callarguments : expression COMMA arguments\n                 | expression\n                 | emptyempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,18,],[0,-1,]),'GHOST':([2,3,4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,45,55,58,],[-26,18,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,-17,-15,-16,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,43,44,45,47,48,50,52,55,58,],[-26,20,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,-26,-26,-17,20,20,-26,20,-15,-16,]),'TYPE':([2,3,4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,43,44,45,47,48,50,52,55,58,],[12,12,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,12,12,-17,12,12,12,12,-15,-16,]),'IDENT':([2,3,4,5,6,7,8,9,10,11,12,19,20,22,23,24,25,26,27,28,29,30,31,32,33,40,41,42,43,44,45,47,48,50,51,52,55,56,58,],[13,13,-2,-5,-6,-7,-8,-9,-10,-11,21,-3,-4,28,28,28,28,28,28,-18,-13,-19,-20,-21,-22,-12,-14,28,13,13,-17,13,13,13,28,13,-15,28,-16,]),'FUNCTION_NAME':([2,3,4,5,6,7,8,9,10,11,19,20,22,23,24,25,26,27,28,29,30,31,32,33,40,41,42,43,44,45,47,48,50,51,52,55,56,58,],[14,14,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,14,14,14,14,14,14,-18,-13,-19,-20,-21,-22,-12,-14,14,14,14,-17,14,14,14,14,14,-15,14,-16,]),'REPEAT':([2,3,4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,43,44,45,47,48,50,52,55,58,],[15,15,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,15,15,-17,15,15,15,15,-15,-16,]),'CHECK':([2,3,4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,43,44,45,47,48,50,52,55,58,],[16,16,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,16,16,-17,16,16,16,16,-15,-16,]),'DISPLAY':([2,3,4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,43,44,45,47,48,50,52,55,58,],[17,17,-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,17,17,-17,17,17,17,17,-15,-16,]),'UNTIL':([4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,43,45,47,55,58,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,-26,-17,49,-15,-16,]),'OTHERWISE':([4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,44,45,48,55,58,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,-26,-17,50,-15,-16,]),'OTHERWISE_CHECK':([4,5,6,7,8,9,10,11,19,20,28,29,30,31,32,33,40,41,45,50,52,55,58,],[-2,-5,-6,-7,-8,-9,-10,-11,-3,-4,-18,-13,-19,-20,-21,-22,-12,-14,-17,-26,54,-15,-16,]),'EQ':([13,21,],[22,27,]),'LPAREN':([14,15,16,17,49,54,],[23,24,25,26,51,56,]),'INT_LIT':([22,23,24,25,26,27,42,51,56,],[30,30,30,30,30,30,30,30,30,]),'FLT_LIT':([22,23,24,25,26,27,42,51,56,],[31,31,31,31,31,31,31,31,31,]),'STR_LIT':([22,23,24,25,26,27,42,51,56,],[32,32,32,32,32,32,32,32,32,]),'RPAREN':([23,28,30,31,32,33,34,35,36,37,38,39,41,42,46,53,57,],[-26,-18,-19,-20,-21,-22,41,-24,-25,43,44,45,-14,-26,-23,55,58,]),'COMMA':([28,30,31,32,33,35,41,],[-18,-19,-20,-21,-22,42,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([2,43,44,50,],[3,47,48,52,]),'statement':([2,3,43,44,47,48,50,52,],[4,19,4,4,19,19,4,19,]),'empty':([2,23,42,43,44,50,],[5,36,36,5,5,5,]),'variable_declaration':([2,3,43,44,47,48,50,52,],[6,6,6,6,6,6,6,6,]),'assignment':([2,3,43,44,47,48,50,52,],[7,7,7,7,7,7,7,7,]),'function_call':([2,3,22,23,24,25,26,27,42,43,44,47,48,50,51,52,56,],[8,8,33,33,33,33,33,33,33,8,8,8,8,8,33,8,33,]),'loop':([2,3,43,44,47,48,50,52,],[9,9,9,9,9,9,9,9,]),'conditional':([2,3,43,44,47,48,50,52,],[10,10,10,10,10,10,10,10,]),'io_statement':([2,3,43,44,47,48,50,52,],[11,11,11,11,11,11,11,11,]),'expression':([22,23,24,25,26,27,42,51,56,],[29,35,37,38,39,40,35,53,57,]),'arguments':([23,42,],[34,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH statement_list GHOST','program',3,'p_program','Parser.py',22),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',26),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','Parser.py',27),
  ('statement_list -> statement_list NEWLINE','statement_list',2,'p_statement_list','Parser.py',28),
  ('statement_list -> empty','statement_list',1,'p_statement_list','Parser.py',29),
  ('statement -> variable_declaration','statement',1,'p_statement','Parser.py',36),
  ('statement -> assignment','statement',1,'p_statement','Parser.py',37),
  ('statement -> function_call','statement',1,'p_statement','Parser.py',38),
  ('statement -> loop','statement',1,'p_statement','Parser.py',39),
  ('statement -> conditional','statement',1,'p_statement','Parser.py',40),
  ('statement -> io_statement','statement',1,'p_statement','Parser.py',41),
  ('variable_declaration -> TYPE IDENT EQ expression','variable_declaration',4,'p_variable_declaration','Parser.py',47),
  ('assignment -> IDENT EQ expression','assignment',3,'p_assignment','Parser.py',51),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',55),
  ('loop -> REPEAT LPAREN expression RPAREN statement_list UNTIL LPAREN expression RPAREN','loop',9,'p_loop','Parser.py',59),
  ('conditional -> CHECK LPAREN expression RPAREN statement_list OTHERWISE statement_list OTHERWISE_CHECK LPAREN expression RPAREN','conditional',11,'p_conditional','Parser.py',63),
  ('io_statement -> DISPLAY LPAREN expression RPAREN','io_statement',4,'p_io_statement','Parser.py',67),
  ('expression -> IDENT','expression',1,'p_expression','Parser.py',71),
  ('expression -> INT_LIT','expression',1,'p_expression','Parser.py',72),
  ('expression -> FLT_LIT','expression',1,'p_expression','Parser.py',73),
  ('expression -> STR_LIT','expression',1,'p_expression','Parser.py',74),
  ('expression -> function_call','expression',1,'p_expression','Parser.py',75),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','Parser.py',79),
  ('arguments -> expression','arguments',1,'p_arguments','Parser.py',80),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',81),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',90),
]
