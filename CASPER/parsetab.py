
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_decglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : expressionvar_statement : data_type IDENT var_tail unli_newlinevar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value :  expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : expr_head expr_tailexpr_head : term term_tailterm : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expressionterm_tail : empty\n                 | GT expression\n                 | LT expression\n                 | EQ_EQ expression\n                 | GT_EQ expression\n                 | LT_EQ expression\n                 | NOT_EQ expressionexpr_tail : empty\n                 | AND expression\n                 | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE \n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : string_operation_statement unli_newline statements_tail2\n                    | conditional_statement unli_newline statements_tail2\n                    | switch_statement unli_newline statements_tail2\n                    | loop_statement unli_newline statements_tail2\n                    | function_call unli_newline statements_tail2\n                    | output_statement unli_newline statements_tail2\n                    \n    \n    statements_tail2 : statements\n    local_dec : empty\n                 | var_statementconditional_statement : CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail conditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tail2\n                        | OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACEconditional_tail2 : OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail2\n                         | OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACEswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | output_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,126,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,21,22,23,24,25,26,27,44,45,46,48,49,50,51,52,53,56,57,58,59,60,61,62,64,66,67,68,72,73,76,77,84,85,92,94,95,100,101,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,127,128,130,131,138,139,141,142,144,145,146,147,149,153,154,156,157,158,159,160,161,162,163,164,168,169,170,176,177,181,182,183,184,189,190,191,192,193,194,195,196,198,199,201,202,212,216,217,218,219,221,222,227,228,229,230,231,232,233,234,235,236,237,245,246,253,254,255,258,268,269,270,272,276,282,283,284,287,288,289,290,292,294,295,298,300,303,304,309,311,312,321,323,325,326,327,329,330,332,333,334,335,337,338,339,340,343,344,345,346,349,350,351,352,353,357,358,359,361,362,364,367,368,372,373,374,377,378,379,381,383,],[4,-159,4,17,4,-8,-5,17,-2,17,-159,-159,17,-81,-3,-7,-9,-10,-11,-159,-159,-16,-18,-159,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,4,-12,-13,-14,-53,-74,-54,-67,-55,-60,-58,-77,-78,-159,-17,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,17,-15,-79,17,17,4,-159,-159,17,-100,17,-110,-159,-159,17,-99,-6,-101,4,4,4,4,4,4,-121,-122,-123,4,-20,-98,-37,-38,-39,-134,-159,-159,-159,-159,-159,-159,-146,-148,-129,-131,-132,-159,17,-19,-159,-25,-159,-80,-102,-108,-103,-104,-105,-106,-107,-159,-157,-158,-130,-141,-143,-159,-21,-23,-22,-147,-155,17,-133,-159,-159,-26,-40,-41,-42,-43,-159,17,-144,-142,17,-24,-156,17,-159,-159,17,17,-125,17,17,17,-126,-159,-159,17,-111,-112,17,17,-159,-159,-159,-118,-119,-120,17,17,-124,17,-159,17,17,-114,-159,-117,17,-113,17,17,17,-159,17,-116,-159,17,-115,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,21,22,23,24,25,43,222,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,-159,-81,-3,-7,-9,65,-80,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,31,-2,-3,-7,-9,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,33,-2,-3,-7,-9,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,34,-2,-3,-7,-9,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,35,-2,-3,-7,-9,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,36,-2,-3,-7,-9,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,37,-2,-3,-7,-9,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,38,-2,-3,-7,-9,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,39,-2,-3,-7,-9,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,40,-2,-3,-7,-9,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,41,-2,-3,-7,-9,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,],[-159,-4,-159,-8,-5,-159,-2,-159,-159,42,-2,-3,-7,-9,]),'INT':([3,4,14,16,17,18,23,97,137,138,141,142,190,191,192,193,194,195,214,216,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[9,-4,-5,-2,-159,9,-3,9,9,-159,9,9,9,9,9,9,9,9,251,-159,9,-159,-159,9,9,-159,9,-159,-159,9,9,-159,9,-159,9,-159,9,-159,9,]),'FLT':([3,4,14,16,17,18,23,97,137,138,141,142,190,191,192,193,194,195,216,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[10,-4,-5,-2,-159,10,-3,10,10,-159,10,10,10,10,10,10,10,10,-159,10,-159,-159,10,10,-159,10,-159,-159,10,10,-159,10,-159,10,-159,10,-159,10,]),'BLN':([3,4,14,16,17,18,23,97,137,138,141,142,190,191,192,193,194,195,216,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[11,-4,-5,-2,-159,11,-3,11,11,-159,11,11,11,11,11,11,11,11,-159,11,-159,-159,11,11,-159,11,-159,-159,11,11,-159,11,-159,11,-159,11,-159,11,]),'CHR':([3,4,14,16,17,18,23,97,137,138,141,142,190,191,192,193,194,195,216,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[12,-4,-5,-2,-159,12,-3,12,12,-159,12,12,12,12,12,12,12,12,-159,12,-159,-159,12,12,-159,12,-159,-159,12,12,-159,12,-159,12,-159,12,-159,12,]),'STR':([3,4,14,16,17,18,23,97,137,138,141,142,190,191,192,193,194,195,216,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[13,-4,-5,-2,-159,13,-3,13,13,-159,13,13,13,13,13,13,13,13,-159,13,-159,-159,13,13,-159,13,-159,-159,13,13,-159,13,-159,13,-159,13,-159,13,]),'GHOST':([4,14,98,],[-4,-5,126,]),'REVIVE':([4,14,142,145,149,158,190,191,192,193,194,195,227,228,229,230,231,232,233,],[-4,-5,-159,-100,155,-101,-159,-159,-159,-159,-159,-159,-102,-108,-103,-104,-105,-106,-107,]),'RBRACE':([4,14,16,17,23,49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,138,141,142,144,145,149,151,154,156,158,180,181,182,183,184,189,190,191,192,193,194,195,212,216,227,228,229,230,231,232,233,245,246,253,272,276,281,284,287,288,289,294,295,298,304,309,311,316,318,333,338,340,343,347,349,350,353,354,356,357,358,360,361,363,372,374,376,377,379,380,],[-4,-5,-2,-159,-3,-159,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,-159,-159,-159,-159,-100,-159,157,-159,-99,-101,222,-98,-37,-38,-39,-134,-159,-159,-159,-159,-159,-159,-159,-159,-102,-108,-103,-104,-105,-106,-107,-141,-143,-159,-133,-159,299,-40,-41,-42,-43,-144,-142,-159,-159,-159,-159,323,325,-159,-159,-159,-159,351,-159,-159,-159,357,359,-159,-159,362,-159,364,-159,-159,378,-159,-159,381,]),'CHECK':([4,14,16,17,23,138,141,142,145,146,147,152,190,191,192,193,194,195,216,217,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,-159,-159,-159,-109,-159,-110,166,-159,-159,-159,-159,-159,-159,-159,-19,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'SWAP':([4,14,16,17,23,138,141,142,145,146,147,152,190,191,192,193,194,195,216,217,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,-159,-159,-159,-109,-159,-110,167,-159,-159,-159,-159,-159,-159,-159,-19,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'FUNCTION_NAME':([4,14,16,17,23,30,31,32,33,34,35,36,37,38,39,40,41,42,138,141,142,145,146,147,152,155,172,178,190,191,192,193,194,195,200,203,204,205,206,207,208,213,216,217,223,224,225,226,247,253,298,304,309,311,313,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,63,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-159,-159,-159,-109,-159,-110,171,171,171,171,-159,-159,-159,-159,-159,-159,171,-149,-150,-151,-152,-153,-154,171,-159,-19,261,261,261,261,171,-159,-159,-159,-159,-159,171,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'DISPLAY':([4,14,16,17,23,138,141,142,145,146,147,152,155,172,178,190,191,192,193,194,195,200,203,204,205,206,207,208,213,216,217,247,253,298,304,309,311,313,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,-159,-159,-159,-109,-159,-110,172,172,172,172,-159,-159,-159,-159,-159,-159,172,-149,-150,-151,-152,-153,-154,172,-159,-19,172,-159,-159,-159,-159,-159,172,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'IDENT':([4,8,9,10,11,12,13,14,16,17,23,28,29,55,69,74,75,78,79,80,81,82,83,86,87,88,89,90,91,96,124,138,140,141,142,145,146,147,148,152,155,172,178,179,190,191,192,193,194,195,197,200,203,204,205,206,207,208,209,210,211,213,215,216,217,223,224,225,226,247,251,253,256,267,275,278,298,304,307,309,311,313,317,327,332,333,338,340,341,343,349,353,358,361,369,372,374,377,379,],[-4,19,-32,-33,-34,-35,-36,-5,-2,-159,-3,44,56,56,100,56,56,56,56,56,56,56,56,56,56,56,56,56,56,122,132,-159,143,-159,-159,-109,-159,-110,153,56,56,56,56,221,-159,-159,-159,-159,-159,-159,56,56,-149,-150,-151,-152,-153,-154,56,239,56,56,56,-159,-19,56,56,56,56,56,279,-159,282,56,56,56,-159,-159,56,-159,-159,56,56,-159,-159,-159,-159,-159,56,-159,-159,-159,-159,-159,56,-159,-159,-159,-159,]),'FOR':([4,14,16,17,23,138,141,142,145,146,147,152,190,191,192,193,194,195,216,217,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,-159,-159,-159,-109,-159,-110,173,-159,-159,-159,-159,-159,-159,-159,-19,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'UNTIL':([4,14,16,17,23,138,141,142,145,146,147,152,190,191,192,193,194,195,216,217,253,298,299,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,-159,-159,-159,-109,-159,-110,174,-159,-159,-159,-159,-159,-159,-159,-19,-159,-159,310,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'REPEAT':([4,14,16,17,23,138,141,142,145,146,147,152,190,191,192,193,194,195,216,217,253,298,304,309,311,327,332,333,338,340,343,349,353,358,361,372,374,377,379,],[-4,-5,-2,-159,-3,-159,-159,-159,-109,-159,-110,175,-159,-159,-159,-159,-159,-159,-159,-19,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,-159,]),'SHIFT':([4,14,16,17,23,145,158,190,191,192,193,194,195,227,228,229,230,231,232,233,292,305,327,332,339,],[-4,-5,-2,-159,-3,-100,-101,-159,-159,-159,-159,-159,-159,-102,-108,-103,-104,-105,-106,-107,-159,313,-159,-159,313,]),'OTHERWISE':([4,14,16,17,23,145,158,190,191,192,193,194,195,227,228,229,230,231,232,233,312,319,325,327,330,332,339,344,345,346,364,365,381,382,],[-4,-5,-2,-159,-3,-100,-101,-159,-159,-159,-159,-159,-159,-102,-108,-103,-104,-105,-106,-107,-159,326,-159,-159,337,-159,-159,-118,-119,-120,-159,368,-159,368,]),'LBRACE':([16,17,23,127,131,133,134,175,270,271,280,291,321,326,328,331,337,342,352,355,368,370,373,375,],[-2,-159,-3,-159,-159,138,139,216,-159,292,298,304,-159,-159,333,338,-159,349,-159,358,-159,372,-159,377,]),'OTHERWISE_CHECK':([16,17,23,325,330,364,365,381,382,],[-2,-159,-3,-159,336,-159,366,-159,366,]),'COMMA':([19,44,45,46,48,49,50,51,52,53,56,57,58,59,60,61,62,71,72,73,76,77,84,85,92,94,95,100,101,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,132,143,153,182,183,184,189,212,218,219,221,242,243,244,245,246,248,249,272,276,282,283,284,287,288,289,293,294,295,],[28,28,69,-16,-18,-159,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,104,-53,-74,-54,-67,-55,-60,-58,-77,-78,28,-17,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,137,137,179,-37,-38,-39,-134,247,256,-25,179,275,-139,-140,-141,-143,247,-38,-133,247,179,-26,-40,-41,-42,-43,275,-144,-142,]),'EQ':([19,44,56,94,95,100,130,153,165,221,279,282,315,],[29,29,-159,-77,-78,29,-79,178,208,178,297,178,208,]),'LBRACKET':([29,56,178,],[47,96,220,]),'TILDE':([29,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,155,172,178,200,203,204,205,206,207,208,209,213,215,223,224,225,226,247,278,313,317,341,369,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-149,-150,-151,-152,-153,-154,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'LPAREN':([29,55,63,65,74,75,78,79,80,81,82,83,86,87,88,89,90,91,155,166,167,171,172,173,174,178,185,186,187,188,200,203,204,205,206,207,208,209,213,215,223,224,225,226,247,261,263,278,310,313,317,336,341,366,369,],[55,55,97,99,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,209,210,211,213,214,215,55,223,224,225,226,55,-149,-150,-151,-152,-153,-154,55,55,55,55,55,55,55,55,285,286,55,317,55,55,341,55,369,55,]),'INT_LIT':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,96,104,155,172,178,200,203,204,205,206,207,208,209,211,213,215,220,223,224,225,226,247,275,278,297,313,317,341,369,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,121,57,57,57,57,57,-149,-150,-151,-152,-153,-154,57,57,57,57,57,57,57,57,57,57,57,57,308,57,57,57,57,]),'FLT_LIT':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,104,155,172,178,200,203,204,205,206,207,208,209,211,213,215,220,223,224,225,226,247,275,278,313,317,341,369,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-149,-150,-151,-152,-153,-154,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'DAY':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,104,155,172,178,200,203,204,205,206,207,208,209,211,213,215,220,223,224,225,226,247,275,278,313,317,341,369,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-149,-150,-151,-152,-153,-154,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NIGHT':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,104,155,172,178,200,203,204,205,206,207,208,209,211,213,215,220,223,224,225,226,247,275,278,313,317,341,369,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-149,-150,-151,-152,-153,-154,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CHR_LIT':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,104,155,172,178,200,203,204,205,206,207,208,209,211,213,215,220,223,224,225,226,247,275,278,313,317,341,369,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-149,-150,-151,-152,-153,-154,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'STR_LIT':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,104,155,172,178,197,200,203,204,205,206,207,208,209,211,213,215,220,223,224,225,226,247,267,275,278,313,317,341,369,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,236,62,-149,-150,-151,-152,-153,-154,62,62,62,62,62,62,62,62,62,62,236,62,62,62,62,62,62,]),'AND':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[74,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'OR':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[75,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'RPAREN':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,130,132,135,136,143,150,182,183,184,189,199,201,202,211,212,237,238,239,240,241,242,243,244,245,246,248,249,252,259,260,262,264,265,266,272,273,274,276,277,284,285,286,287,288,289,293,294,295,301,302,306,314,322,324,348,371,],[-159,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,119,-77,-78,-159,127,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,131,-95,-79,-159,-94,-96,-159,-97,-37,-38,-39,-134,-129,-131,-132,-159,-159,-130,270,271,272,-135,-159,-139,-140,-141,-143,-159,119,280,284,-44,-46,287,288,289,-133,-136,-137,-159,295,-40,301,302,-41,-42,-43,-159,-144,-142,-45,-145,-138,321,-128,329,352,373,]),'GT':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[-159,78,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'LT':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[-159,79,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'EQ_EQ':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[-159,80,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'GT_EQ':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[-159,81,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'LT_EQ':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[-159,82,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'NOT_EQ':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,],[-159,83,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,]),'COLON':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,182,183,184,189,212,245,246,272,276,284,287,288,289,294,295,320,],[-159,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,-37,-38,-39,-134,-159,-141,-143,-133,-159,-40,-41,-42,-43,-144,-142,327,]),'SEMICOLON':([49,50,51,52,53,56,57,58,59,60,61,62,72,73,76,77,84,85,92,94,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,130,250,296,308,],[-159,-159,-159,-56,-57,-159,-47,-48,-49,-50,-51,-52,-53,-74,-54,-67,-55,-60,-58,-77,-78,-75,-76,-68,-69,-70,-71,-72,-73,-61,-62,-63,-64,-65,-66,-59,-79,278,307,-127,]),'PLUS':([51,52,53,56,57,58,59,60,61,62,92,94,95,119,130,165,234,235,236,290,],[86,-56,-57,-159,-47,-48,-49,-50,-51,-52,-58,-77,-78,-59,-79,197,267,-157,-158,267,]),'MINUS':([51,52,53,56,57,58,59,60,61,62,92,94,95,119,130,],[87,-56,-57,-159,-47,-48,-49,-50,-51,-52,-58,-77,-78,-59,-79,]),'MULTIPLY':([51,52,53,56,57,58,59,60,61,62,92,94,95,119,130,],[88,-56,-57,-159,-47,-48,-49,-50,-51,-52,-58,-77,-78,-59,-79,]),'DIVISION':([51,52,53,56,57,58,59,60,61,62,92,94,95,119,130,],[89,-56,-57,-159,-47,-48,-49,-50,-51,-52,-58,-77,-78,-59,-79,]),'MODULO':([51,52,53,56,57,58,59,60,61,62,92,94,95,119,130,],[90,-56,-57,-159,-47,-48,-49,-50,-51,-52,-58,-77,-78,-59,-79,]),'EXPONENT':([51,52,53,56,57,58,59,60,61,62,92,94,95,119,130,],[91,-56,-57,-159,-47,-48,-49,-50,-51,-52,-58,-77,-78,-59,-79,]),'PLUS_PLUS':([56,94,95,130,165,315,],[-159,-77,-78,-79,201,201,]),'MINUS_MINUS':([56,94,95,130,165,315,],[-159,-77,-78,-79,202,202,]),'PLUS_EQ':([56,94,95,130,165,315,],[-159,-77,-78,-79,203,203,]),'MINUS_EQ':([56,94,95,130,165,315,],[-159,-77,-78,-79,204,204,]),'MUL_EQ':([56,94,95,130,165,315,],[-159,-77,-78,-79,205,205,]),'DIV_EQ':([56,94,95,130,165,315,],[-159,-77,-78,-79,206,206,]),'MOD_EQ':([56,94,95,130,165,315,],[-159,-77,-78,-79,207,207,]),'RBRACKET':([57,58,59,60,61,62,70,71,102,103,120,121,122,129,257,],[-47,-48,-49,-50,-51,-52,101,-159,-27,-28,130,-30,-31,-29,283,]),'CONVERT_TO_INT':([155,172,178,200,203,204,205,206,207,208,213,247,313,],[185,185,185,185,-149,-150,-151,-152,-153,-154,185,185,185,]),'CONVERT_TO_FLT':([155,172,178,200,203,204,205,206,207,208,213,247,313,],[186,186,186,186,-149,-150,-151,-152,-153,-154,186,186,186,]),'CONVERT_TO_BLN':([155,172,178,200,203,204,205,206,207,208,213,247,313,],[187,187,187,187,-149,-150,-151,-152,-153,-154,187,187,187,]),'CONVERT_TO_STR':([155,172,178,200,203,204,205,206,207,208,213,247,313,],[188,188,188,188,-149,-150,-151,-152,-153,-154,188,188,188,]),'INPUT':([223,224,225,226,],[263,263,263,263,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,64,139,159,160,161,162,163,164,176,],[3,14,18,98,142,190,191,192,193,194,195,217,]),'global_dec':([3,18,],[5,25,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,21,44,45,49,50,51,56,71,97,100,127,131,132,138,141,142,143,144,146,149,153,154,190,191,192,193,194,195,211,212,216,218,221,234,242,248,253,270,276,282,290,292,293,298,304,309,311,312,321,325,326,327,330,332,333,337,338,339,340,343,349,350,352,353,357,358,361,364,368,372,373,374,377,379,381,],[7,16,22,16,7,27,16,27,68,73,77,85,95,103,125,27,16,16,136,16,145,145,136,16,16,156,177,16,145,145,145,145,145,145,241,246,16,255,177,269,274,246,145,16,246,177,269,16,274,16,16,145,145,16,16,16,16,16,335,145,16,16,16,345,145,145,16,16,16,145,16,16,145,16,16,16,16,145,16,145,16,]),'data_type':([3,18,97,137,141,142,190,191,192,193,194,195,253,309,311,332,340,343,353,361,374,379,],[8,8,124,140,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'maybe_newline':([5,15,17,21,127,131,138,144,146,154,216,270,292,298,304,312,321,325,326,327,333,337,338,349,350,352,357,358,364,368,372,373,377,381,],[15,20,23,43,133,134,141,151,152,180,253,291,305,309,311,319,328,330,331,332,340,342,343,353,354,355,360,361,365,370,374,375,379,382,]),'function_statements':([15,],[21,]),'global_tail':([18,],[24,]),'global_statement_tail':([19,44,100,],[26,66,128,]),'ret_type':([20,],[30,]),'function_dtype':([20,],[32,]),'global_dec_value':([29,],[45,]),'global_value':([29,],[46,]),'expression':([29,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,155,172,178,200,209,213,215,223,224,225,226,247,278,313,317,341,369,],[48,93,105,106,107,108,109,110,111,112,113,114,115,116,117,118,183,183,183,183,238,249,252,260,260,260,260,183,296,183,324,348,371,]),'expr_head':([29,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,155,172,178,200,209,213,215,223,224,225,226,247,278,313,317,341,369,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'term':([29,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,155,172,178,200,209,213,215,223,224,225,226,247,278,313,317,341,369,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'factor':([29,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,155,172,178,200,209,213,215,223,224,225,226,247,278,313,317,341,369,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'var_call':([29,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,152,155,172,178,197,200,209,211,213,215,223,224,225,226,247,267,275,278,307,313,317,341,369,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,165,52,52,52,235,52,52,244,52,52,52,52,52,52,52,235,244,52,315,52,52,52,52,]),'literal':([29,47,54,55,74,75,78,79,80,81,82,83,86,87,88,89,90,91,104,155,172,178,200,209,211,213,215,220,223,224,225,226,247,275,278,313,317,341,369,],[53,71,92,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,71,53,53,53,53,53,243,53,53,71,53,53,53,53,53,243,53,53,53,53,53,]),'main_function':([43,],[64,]),'global_tail2':([45,],[67,]),'list_element':([47,104,220,],[70,129,257,]),'expr_tail':([49,],[72,]),'term_tail':([50,],[76,]),'factor_tail':([51,],[84,]),'var_call_tail':([56,],[94,]),'element_tail':([71,],[102,]),'index':([96,],[120,]),'parameters':([97,],[123,]),'parameters_tail':([132,143,],[135,150,]),'statements':([141,142,190,191,192,193,194,195,253,309,311,332,340,343,353,361,374,379,],[144,149,228,228,228,228,228,228,281,316,318,339,347,350,356,363,376,380,]),'local_dec':([141,142,190,191,192,193,194,195,253,309,311,332,340,343,353,361,374,379,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'var_statement':([141,142,190,191,192,193,194,195,253,309,311,332,340,343,353,361,374,379,],[147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'revive':([149,],[154,]),'statements_tail':([152,],[158,]),'string_operation_statement':([152,],[159,]),'conditional_statement':([152,],[160,]),'switch_statement':([152,],[161,]),'loop_statement':([152,],[162,]),'function_call':([152,155,172,178,200,213,247,313,],[163,184,184,184,184,184,184,184,]),'output_statement':([152,155,172,178,200,213,247,313,],[164,189,189,189,189,189,189,189,]),'for_loop':([152,],[168,]),'until_loop':([152,],[169,]),'repeat_until':([152,],[170,]),'var_tail':([153,221,282,],[176,258,300,]),'value':([155,172,178,200,213,247,313,],[181,212,219,237,248,276,320,]),'type_cast':([155,172,178,200,213,247,313,],[182,182,182,182,182,182,182,]),'string_operation_tail':([165,],[196,]),'update_tail':([165,315,],[198,322,]),'postfix':([165,315,],[199,199,]),'assign_op':([165,315,],[200,200,]),'tail_value':([178,],[218,]),'statements_tail2':([190,191,192,193,194,195,],[227,229,230,231,232,233,]),'string_val':([197,267,],[234,290,]),'arguments':([211,],[240,]),'arg_value':([211,275,],[242,293,]),'next_val':([212,248,276,],[245,277,294,]),'control_variable':([214,],[250,]),'var_tail2':([218,],[254,]),'typecast_value':([223,224,225,226,],[259,264,265,266,]),'input_statement':([223,224,225,226,],[262,262,262,262,]),'stringcon_tail':([234,290,],[268,303,]),'arg_tail':([242,293,],[273,306,]),'switch_condition':([305,339,],[312,346,]),'update':([307,],[314,]),'conditional_tail':([330,],[334,]),'switchcond_tail':([339,],[344,]),'conditional_tail2':([365,382,],[367,383,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',40),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',48),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',49),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',57),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',58),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',73),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',74),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',85),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',93),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',100),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',101),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',102),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',114),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',115),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',125),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',126),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',136),
  ('var_statement -> data_type IDENT var_tail unli_newline','var_statement',4,'p_var_statement','Parser.py',143),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',150),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',151),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',152),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',164),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',165),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',175),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',176),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',186),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',196),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',197),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',207),
  ('index -> IDENT','index',1,'p_index','Parser.py',208),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',215),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',218),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',219),
  ('value -> type_cast','value',1,'p_value','Parser.py',226),
  ('value -> expression','value',1,'p_value','Parser.py',227),
  ('value -> function_call','value',1,'p_value','Parser.py',228),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',235),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',245),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',246),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',247),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',257),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',258),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',259),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',260),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',261),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',262),
  ('expression -> expr_head expr_tail','expression',2,'p_expression','Parser.py',269),
  ('expr_head -> term term_tail','expr_head',2,'p_expr_head','Parser.py',279),
  ('term -> factor factor_tail','term',2,'p_term','Parser.py',291),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',301),
  ('factor -> literal','factor',1,'p_factor','Parser.py',302),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',303),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',304),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',316),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',317),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',318),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',319),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',320),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',321),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',322),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser.py',332),
  ('term_tail -> GT expression','term_tail',2,'p_term_tail','Parser.py',333),
  ('term_tail -> LT expression','term_tail',2,'p_term_tail','Parser.py',334),
  ('term_tail -> EQ_EQ expression','term_tail',2,'p_term_tail','Parser.py',335),
  ('term_tail -> GT_EQ expression','term_tail',2,'p_term_tail','Parser.py',336),
  ('term_tail -> LT_EQ expression','term_tail',2,'p_term_tail','Parser.py',337),
  ('term_tail -> NOT_EQ expression','term_tail',2,'p_term_tail','Parser.py',338),
  ('expr_tail -> empty','expr_tail',1,'p_expr_tail','Parser.py',353),
  ('expr_tail -> AND expression','expr_tail',2,'p_expr_tail','Parser.py',354),
  ('expr_tail -> OR expression','expr_tail',2,'p_expr_tail','Parser.py',355),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',365),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',372),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',373),
  ('function_statements -> maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE','function_statements',13,'p_function_statements','Parser.py',383),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',384),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',406),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',407),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',417),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',418),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',419),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',420),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',421),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',422),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',423),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',424),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',425),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',426),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',433),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',434),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',444),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',445),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',455),
  ('revive -> empty','revive',1,'p_revive','Parser.py',456),
  ('statements -> empty','statements',1,'p_statements','Parser.py',466),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',467),
  ('statements_tail -> string_operation_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',481),
  ('statements_tail -> conditional_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',482),
  ('statements_tail -> switch_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',483),
  ('statements_tail -> loop_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',484),
  ('statements_tail -> function_call unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',485),
  ('statements_tail -> output_statement unli_newline statements_tail2','statements_tail',3,'p_statements_tail','Parser.py',486),
  ('statements_tail2 -> statements','statements_tail2',1,'p_statements_tail2','Parser.py',494),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',501),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',502),
  ('conditional_statement -> CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_statement',11,'p_conditional_statement','Parser.py',510),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',517),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail2','conditional_tail',11,'p_conditional_tail','Parser.py',518),
  ('conditional_tail -> OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_tail',6,'p_conditional_tail','Parser.py',519),
  ('conditional_tail2 -> OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail2','conditional_tail2',11,'p_conditional_tail2','Parser.py',532),
  ('conditional_tail2 -> OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_tail2',6,'p_conditional_tail2','Parser.py',533),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',543),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',550),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',557),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',558),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',568),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',569),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',570),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',577),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',584),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',9,'p_repeat_until','Parser.py',591),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',598),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',605),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',612),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',613),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',623),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',624),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',631),
  ('function_call -> output_statement','function_call',1,'p_function_call','Parser.py',632),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',642),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',643),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',653),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',654),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',664),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',665),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',672),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',673),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',685),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',686),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',696),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',703),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',712),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',713),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',723),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',724),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',725),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',726),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',727),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',728),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',735),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',736),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',746),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',747),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',763),
]
