
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_dec\n                   | emptyglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : factor\n                    | expressionvar_statement : data_type IDENT var_tailvar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : factor\n             | type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value : IDENT\n                      | literal\n                      | expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : expr_head expr_tailexpr_head : term term_tailterm : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expressionterm_tail : empty\n                 | GT expression\n                 | LT expression\n                 | EQ_EQ expression\n                 | GT_EQ expression\n                 | LT_EQ expression\n                 | NOT_EQ expressionexpr_tail : empty\n                 | AND expression\n                 | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE \n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec NEWLINE statements_tail\n    statements_tail : empty\n                    | statements\n                    | conditional_statement NEWLINE statements_tail\n                    | switch_statement NEWLINE statements_tail\n                    | loop_statement NEWLINE statements_tail\n                    | function_call NEWLINE statements_tail\n                    | string_operation_statement NEWLINE statements_tail\n                    | output_statement NEWLINE statements_tail\n    local_dec : var_statement\n                 | emptyconditional_statement : CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tailconditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE\n                        | OTHERWISE LBRACE statements RBRACEswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACEswitch_condition : SHIFT value COLON statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACErepeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | input_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : assign_op value\n                             | PLUS string_val stringcon_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,128,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,21,22,23,24,25,26,27,28,45,46,47,49,50,51,52,55,56,57,58,59,60,61,62,63,65,67,68,69,73,74,81,83,84,85,88,89,91,92,102,103,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,130,132,133,135,140,141,143,144,145,146,148,151,152,153,155,156,157,158,159,160,161,162,163,164,167,168,169,171,178,179,182,184,185,186,187,188,189,190,194,203,205,206,207,208,215,217,218,220,222,223,224,225,226,227,228,236,237,238,239,240,241,253,254,255,258,259,262,267,268,269,284,285,286,289,290,291,292,294,295,296,299,301,306,312,313,317,319,320,324,331,333,334,336,345,346,347,349,],[4,-163,4,17,4,-8,-5,17,-2,17,-163,-163,17,-86,-3,-7,-9,-8,-11,-12,-163,-163,-17,-19,-20,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,-163,4,-13,-14,-15,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-163,-18,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-16,-84,17,17,-163,4,17,-105,151,-115,-163,-163,-163,-163,-6,-106,-105,-108,185,186,187,188,189,190,-125,-126,-127,-138,-21,-22,17,-104,-163,-163,-163,-163,-163,-163,-150,-163,-39,-40,-41,-42,-163,-163,-27,-163,-103,-109,-110,-111,-112,-113,-114,-151,-163,-161,-162,-145,-147,-149,-23,-25,-24,-85,-137,-152,-159,-163,-163,-28,-163,-163,-148,-146,-43,-44,-45,-46,-163,-26,-160,-163,-163,-129,-117,-118,-163,-130,-163,-121,-163,-120,-128,-163,-119,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,21,22,23,24,25,26,44,259,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,-163,-86,-3,-7,-9,-8,66,-85,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,32,-2,-3,-7,-9,-8,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,34,-2,-3,-7,-9,-8,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,35,-2,-3,-7,-9,-8,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,36,-2,-3,-7,-9,-8,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,37,-2,-3,-7,-9,-8,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,38,-2,-3,-7,-9,-8,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,39,-2,-3,-7,-9,-8,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,40,-2,-3,-7,-9,-8,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,41,-2,-3,-7,-9,-8,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,42,-2,-3,-7,-9,-8,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,26,],[-163,-4,-163,-8,-5,-163,-2,-163,-163,43,-2,-3,-7,-9,-8,]),'INT':([3,4,14,16,17,18,23,99,135,139,140,148,151,185,186,187,188,189,190,213,215,286,299,313,324,333,336,347,],[9,-4,-5,-2,-163,9,-3,9,-163,9,9,9,9,9,9,9,9,9,9,250,9,9,9,9,9,9,9,9,]),'FLT':([3,4,14,16,17,18,23,99,135,139,140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[10,-4,-5,-2,-163,10,-3,10,-163,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'BLN':([3,4,14,16,17,18,23,99,135,139,140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[11,-4,-5,-2,-163,11,-3,11,-163,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'CHR':([3,4,14,16,17,18,23,99,135,139,140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[12,-4,-5,-2,-163,12,-3,12,-163,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STR':([3,4,14,16,17,18,23,99,135,139,140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[13,-4,-5,-2,-163,13,-3,13,-163,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'GHOST':([4,14,100,],[-4,-5,128,]),'REVIVE':([4,14,144,148,151,153,156,157,158,185,186,187,188,189,190,223,224,225,226,227,228,],[-4,-5,-105,-163,-163,183,-106,-105,-108,-163,-163,-163,-163,-163,-163,-109,-110,-111,-112,-113,-114,]),'RBRACE':([4,14,16,17,23,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,135,140,143,144,148,150,151,153,156,157,158,171,182,184,185,186,187,188,189,190,205,206,207,208,215,221,222,223,224,225,226,227,228,252,253,262,286,292,294,295,296,299,302,310,313,323,333,336,339,343,347,348,],[-4,-5,-2,-163,-3,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,-163,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-163,-105,-163,155,-163,-163,-106,-105,-108,-138,-163,-104,-163,-163,-163,-163,-163,-163,-39,-40,-41,-42,-163,259,-103,-109,-110,-111,-112,-113,-114,283,-149,-137,-163,-43,-44,-45,-46,-163,312,317,-163,334,-163,-163,345,346,-163,349,]),'IDENT':([8,9,10,11,12,13,29,30,54,70,75,76,77,78,79,80,86,87,90,93,94,95,96,97,98,126,142,147,151,173,180,181,183,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,204,214,242,245,246,247,248,250,256,265,266,280,304,308,311,328,332,],[19,-34,-35,-36,-37,-38,45,56,56,102,56,56,56,56,56,56,56,56,118,56,56,56,56,56,56,134,149,152,56,56,56,220,56,56,56,56,56,56,56,56,230,56,56,56,-153,-154,-155,-156,-157,-158,56,56,56,272,272,272,272,281,284,56,56,56,56,56,56,56,56,]),'LBRACE':([16,17,23,129,133,136,176,260,261,282,322,325,344,],[-2,-163,-3,135,-163,141,215,286,287,299,333,336,347,]),'COMMA':([19,45,46,47,49,50,51,52,55,56,57,58,59,60,61,62,63,72,73,74,81,83,84,85,88,89,91,92,102,103,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,134,149,152,171,203,205,206,207,208,217,218,220,233,234,235,243,244,253,262,269,284,285,288,292,294,295,296,],[29,29,70,-17,-19,-20,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,-163,106,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,29,-18,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,139,139,181,-138,242,-39,-40,-41,-42,256,-27,181,265,-143,-144,242,-41,-149,-137,242,181,-28,265,-43,-44,-45,-46,]),'EQ':([19,45,56,88,89,102,132,152,172,220,281,284,316,],[30,30,-163,-82,-83,30,-84,180,202,180,298,180,202,]),'LBRACKET':([30,56,180,272,],[48,90,219,90,]),'TILDE':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,191,195,197,198,199,200,201,202,204,214,242,245,246,247,248,280,304,311,328,332,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-153,-154,-155,-156,-157,-158,53,53,53,53,53,53,53,53,53,53,53,53,]),'LPAREN':([30,54,64,66,75,76,77,78,79,80,86,87,93,94,95,96,97,98,165,166,170,173,174,175,177,180,183,191,195,197,198,199,200,201,202,204,209,210,211,212,214,242,245,246,247,248,275,280,300,304,311,321,328,332,],[54,54,99,101,54,54,54,54,54,54,54,54,54,54,54,54,54,54,191,192,193,204,213,214,216,54,54,54,54,-153,-154,-155,-156,-157,-158,54,245,246,247,248,54,54,54,54,54,54,293,54,311,54,54,332,54,54,]),'INT_LIT':([30,48,53,54,75,76,77,78,79,80,86,87,90,93,94,95,96,97,98,106,173,180,183,191,193,195,197,198,199,200,201,202,204,214,219,242,245,246,247,248,265,280,298,304,311,328,332,],[57,57,57,57,57,57,57,57,57,57,57,57,117,57,57,57,57,57,57,57,57,57,57,57,57,57,-153,-154,-155,-156,-157,-158,57,57,57,57,57,57,57,57,57,57,309,57,57,57,57,]),'FLT_LIT':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,191,193,195,197,198,199,200,201,202,204,214,219,242,245,246,247,248,265,280,304,311,328,332,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-153,-154,-155,-156,-157,-158,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'DAY':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,191,193,195,197,198,199,200,201,202,204,214,219,242,245,246,247,248,265,280,304,311,328,332,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-153,-154,-155,-156,-157,-158,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NIGHT':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,191,193,195,197,198,199,200,201,202,204,214,219,242,245,246,247,248,265,280,304,311,328,332,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-153,-154,-155,-156,-157,-158,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CHR_LIT':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,191,193,195,197,198,199,200,201,202,204,214,219,242,245,246,247,248,265,280,304,311,328,332,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-153,-154,-155,-156,-157,-158,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'STR_LIT':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,191,193,195,196,197,198,199,200,201,202,204,214,219,242,245,246,247,248,265,266,280,304,311,328,332,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,239,-153,-154,-155,-156,-157,-158,62,62,62,62,62,62,62,62,62,239,62,62,62,62,62,]),'FUNCTION_NAME':([31,32,33,34,35,36,37,38,39,40,41,42,43,151,173,180,183,185,186,187,188,189,190,195,197,198,199,200,201,202,204,242,245,246,247,248,304,328,],[64,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,170,170,170,170,170,170,170,170,170,170,170,-153,-154,-155,-156,-157,-158,170,170,275,275,275,275,170,170,]),'PLUS':([49,51,52,56,57,58,59,60,61,62,81,83,88,89,113,132,172,205,237,238,239,272,273,289,],[75,-61,-62,-163,-52,-53,-54,-55,-56,-57,-63,75,-82,-83,-64,-84,196,75,266,-161,-162,-163,-62,266,]),'MINUS':([49,51,52,56,57,58,59,60,61,62,81,83,88,89,113,132,205,272,273,],[76,-61,-62,-163,-52,-53,-54,-55,-56,-57,-63,76,-82,-83,-64,-84,76,-163,-62,]),'MULTIPLY':([49,51,52,56,57,58,59,60,61,62,81,83,88,89,113,132,205,272,273,],[77,-61,-62,-163,-52,-53,-54,-55,-56,-57,-63,77,-82,-83,-64,-84,77,-163,-62,]),'DIVISION':([49,51,52,56,57,58,59,60,61,62,81,83,88,89,113,132,205,272,273,],[78,-61,-62,-163,-52,-53,-54,-55,-56,-57,-63,78,-82,-83,-64,-84,78,-163,-62,]),'MODULO':([49,51,52,56,57,58,59,60,61,62,81,83,88,89,113,132,205,272,273,],[79,-61,-62,-163,-52,-53,-54,-55,-56,-57,-63,79,-82,-83,-64,-84,79,-163,-62,]),'EXPONENT':([49,51,52,56,57,58,59,60,61,62,81,83,88,89,113,132,205,272,273,],[80,-61,-62,-163,-52,-53,-54,-55,-56,-57,-63,80,-82,-83,-64,-84,80,-163,-62,]),'GT':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,93,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'LT':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,94,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'EQ_EQ':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,95,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'GT_EQ':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,96,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'LT_EQ':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,97,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'NOT_EQ':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,98,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'AND':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,86,-163,-52,-53,-54,-55,-56,-57,-163,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'OR':([49,51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,205,272,273,],[-163,-61,-62,87,-163,-52,-53,-54,-55,-56,-57,-163,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-163,-163,-62,]),'RPAREN':([51,52,55,56,57,58,59,60,61,62,63,73,74,81,82,83,84,85,88,89,91,92,99,101,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,125,127,132,134,137,138,149,154,171,193,205,206,207,208,216,229,230,231,232,233,234,235,241,243,244,251,253,262,263,264,269,270,271,272,273,274,276,277,278,279,288,290,292,293,294,295,296,305,307,315,318,326,327,329,330,337,338,],[-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,-163,-60,-65,-63,113,-163,-58,-79,-82,-83,-59,-72,-163,129,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,133,-100,-84,-163,-99,-101,-163,-102,-138,-163,-39,-40,-41,-42,253,260,261,262,-139,-163,-143,-144,-147,-163,113,282,-149,-137,-140,-141,-163,291,292,-47,-48,-49,-51,294,295,296,-163,-148,-43,307,-44,-45,-46,-142,-50,325,331,-132,-133,-135,-136,-134,344,]),'COLON':([51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,171,205,206,207,208,253,262,292,294,295,296,314,],[-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,-163,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,-138,-39,-40,-41,-42,-149,-137,-43,-44,-45,-46,324,]),'SEMICOLON':([51,52,55,56,57,58,59,60,61,62,63,73,74,81,83,84,85,88,89,91,92,107,108,109,110,111,112,113,114,115,119,120,121,122,123,124,132,249,297,309,],[-61,-62,-163,-163,-52,-53,-54,-55,-56,-57,-163,-60,-65,-63,-163,-58,-79,-82,-83,-59,-72,-66,-67,-68,-69,-70,-71,-64,-80,-81,-73,-74,-75,-76,-77,-78,-84,280,308,-131,]),'PLUS_EQ':([56,88,89,132,172,316,],[-163,-82,-83,-84,197,197,]),'MINUS_EQ':([56,88,89,132,172,316,],[-163,-82,-83,-84,198,198,]),'MUL_EQ':([56,88,89,132,172,316,],[-163,-82,-83,-84,199,199,]),'DIV_EQ':([56,88,89,132,172,316,],[-163,-82,-83,-84,200,200,]),'MOD_EQ':([56,88,89,132,172,316,],[-163,-82,-83,-84,201,201,]),'PLUS_PLUS':([56,88,89,132,316,],[-163,-82,-83,-84,329,]),'MINUS_MINUS':([56,88,89,132,316,],[-163,-82,-83,-84,330,]),'RBRACKET':([57,58,59,60,61,62,71,72,104,105,116,117,118,131,257,],[-52,-53,-54,-55,-56,-57,103,-163,-29,-30,132,-32,-33,-31,285,]),'SHIFT':([144,151,156,157,158,185,186,187,188,189,190,223,224,225,226,227,228,287,324,335,],[-105,-163,-106,-105,-108,-163,-163,-163,-163,-163,-163,-109,-110,-111,-112,-113,-114,304,-163,304,]),'OTHERWISE':([144,151,156,157,158,185,186,187,188,189,190,223,224,225,226,227,228,303,312,324,335,340,341,342,],[-105,-163,-106,-105,-108,-163,-163,-163,-163,-163,-163,-109,-110,-111,-112,-113,-114,313,322,-163,-163,-122,-123,-124,]),'CHECK':([151,185,186,187,188,189,190,],[165,165,165,165,165,165,165,]),'SWAP':([151,185,186,187,188,189,190,],[166,166,166,166,166,166,166,]),'DISPLAY':([151,185,186,187,188,189,190,],[173,173,173,173,173,173,173,]),'FOR':([151,185,186,187,188,189,190,],[174,174,174,174,174,174,174,]),'UNTIL':([151,185,186,187,188,189,190,283,],[175,175,175,175,175,175,175,300,]),'REPEAT':([151,185,186,187,188,189,190,],[176,176,176,176,176,176,176,]),'INPUT':([151,173,180,183,185,186,187,188,189,190,195,197,198,199,200,201,202,204,242,245,246,247,248,304,328,],[177,177,177,177,177,177,177,177,177,177,177,-153,-154,-155,-156,-157,-158,177,177,177,177,177,177,177,177,]),'CONVERT_TO_INT':([173,180,183,195,197,198,199,200,201,202,204,242,304,328,],[209,209,209,209,-153,-154,-155,-156,-157,-158,209,209,209,209,]),'CONVERT_TO_FLT':([173,180,183,195,197,198,199,200,201,202,204,242,304,328,],[210,210,210,210,-153,-154,-155,-156,-157,-158,210,210,210,210,]),'CONVERT_TO_BLN':([173,180,183,195,197,198,199,200,201,202,204,242,304,328,],[211,211,211,211,-153,-154,-155,-156,-157,-158,211,211,211,211,]),'CONVERT_TO_STR':([173,180,183,195,197,198,199,200,201,202,204,242,304,328,],[212,212,212,212,-153,-154,-155,-156,-157,-158,212,212,212,212,]),'OTHERWISE_CHECK':([312,],[321,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,65,141,],[3,14,18,100,148,]),'global_dec':([3,18,],[5,25,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,21,45,46,49,55,56,63,72,83,99,102,133,134,135,140,143,148,149,151,152,153,182,185,186,187,188,189,190,193,203,205,215,217,220,233,237,243,269,272,284,286,288,289,299,312,313,324,333,335,336,347,],[7,16,22,16,26,28,16,28,69,74,85,89,92,105,74,127,28,16,138,16,144,16,144,138,157,179,184,16,157,157,157,157,157,157,232,241,74,144,255,179,264,268,241,241,89,179,144,264,268,144,320,144,144,144,341,144,144,]),'data_type':([3,18,99,139,140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[8,8,126,142,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'maybe_newline':([5,15,17,21,133,135,143,182,],[15,20,23,44,136,140,150,221,]),'function_statements':([15,],[21,]),'global_tail':([18,],[24,]),'global_statement_tail':([19,45,102,],[27,67,130,]),'ret_type':([20,],[31,]),'function_dtype':([20,],[33,]),'global_dec_value':([30,],[46,]),'global_value':([30,],[47,]),'factor':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,191,195,204,214,242,245,246,247,248,280,304,311,328,332,],[49,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,205,205,205,83,205,205,83,205,83,83,83,83,83,205,83,205,83,]),'expression':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,191,195,204,214,242,245,246,247,248,280,304,311,328,332,],[50,82,107,108,109,110,111,112,114,115,119,120,121,122,123,124,207,207,207,229,207,244,251,207,274,274,274,274,297,207,318,207,338,]),'var_call':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,151,173,180,183,185,186,187,188,189,190,191,193,195,196,204,214,242,245,246,247,248,265,266,280,304,308,311,328,332,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,172,51,51,51,172,172,172,172,172,172,51,235,51,238,51,51,51,51,51,51,51,235,238,51,51,316,51,51,51,]),'literal':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,191,193,195,204,214,219,242,245,246,247,248,265,280,304,311,328,332,],[52,72,81,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,72,52,52,52,52,234,52,52,52,72,52,273,273,273,273,234,52,52,52,52,52,]),'expr_head':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,191,195,204,214,242,245,246,247,248,280,304,311,328,332,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'term':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,191,195,204,214,242,245,246,247,248,280,304,311,328,332,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'main_function':([44,],[65,]),'global_tail2':([46,],[68,]),'list_element':([48,106,219,],[71,131,257,]),'factor_tail':([49,83,205,],[73,73,73,]),'expr_tail':([55,],[84,]),'var_call_tail':([56,272,],[88,88,]),'term_tail':([63,],[91,]),'element_tail':([72,],[104,]),'index':([90,],[116,]),'parameters':([99,],[125,]),'parameters_tail':([134,149,],[137,154,]),'statements':([140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[143,153,158,158,158,158,158,158,158,252,302,310,323,335,339,343,348,]),'local_dec':([140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'var_statement':([140,148,151,185,186,187,188,189,190,215,286,299,313,324,333,336,347,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'statements_tail':([151,185,186,187,188,189,190,],[156,223,224,225,226,227,228,]),'conditional_statement':([151,185,186,187,188,189,190,],[159,159,159,159,159,159,159,]),'switch_statement':([151,185,186,187,188,189,190,],[160,160,160,160,160,160,160,]),'loop_statement':([151,185,186,187,188,189,190,],[161,161,161,161,161,161,161,]),'function_call':([151,173,180,183,185,186,187,188,189,190,195,204,242,304,328,],[162,208,208,208,162,162,162,162,162,162,208,208,208,208,208,]),'string_operation_statement':([151,185,186,187,188,189,190,],[163,163,163,163,163,163,163,]),'output_statement':([151,185,186,187,188,189,190,],[164,164,164,164,164,164,164,]),'for_loop':([151,185,186,187,188,189,190,],[167,167,167,167,167,167,167,]),'until_loop':([151,185,186,187,188,189,190,],[168,168,168,168,168,168,168,]),'repeat_until':([151,185,186,187,188,189,190,],[169,169,169,169,169,169,169,]),'input_statement':([151,173,180,183,185,186,187,188,189,190,195,204,242,245,246,247,248,304,328,],[171,171,171,171,171,171,171,171,171,171,171,171,171,276,276,276,276,171,171,]),'var_tail':([152,220,284,],[178,258,301,]),'revive':([153,],[182,]),'string_operation_tail':([172,],[194,]),'assign_op':([172,316,],[195,328,]),'value':([173,180,183,195,204,242,304,328,],[203,218,222,236,243,269,314,337,]),'type_cast':([173,180,183,195,204,242,304,328,],[206,206,206,206,206,206,206,206,]),'tail_value':([180,],[217,]),'arguments':([193,],[231,]),'arg_value':([193,265,],[233,288,]),'string_val':([196,266,],[237,289,]),'next_val':([203,243,269,],[240,270,290,]),'control_variable':([213,],[249,]),'var_tail2':([217,],[254,]),'arg_tail':([233,288,],[263,305,]),'stringcon_tail':([237,289,],[267,306,]),'typecast_value':([245,246,247,248,],[271,277,278,279,]),'switch_condition':([287,335,],[303,342,]),'update':([308,],[315,]),'conditional_tail':([312,],[319,]),'update_tail':([316,],[326,]),'postfix':([316,],[327,]),'switchcond_tail':([335,],[340,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',40),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',48),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',49),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',57),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',58),
  ('main_function -> MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACE','main_function',8,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',73),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',74),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',85),
  ('global_tail -> empty','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',97),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',104),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',105),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',106),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',118),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',119),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',129),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',130),
  ('global_value -> factor','global_value',1,'p_global_value','Parser.py',140),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',141),
  ('var_statement -> data_type IDENT var_tail','var_statement',3,'p_var_statement','Parser.py',148),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',155),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',156),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',157),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',169),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',170),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',180),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',181),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',191),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',201),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',202),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',212),
  ('index -> IDENT','index',1,'p_index','Parser.py',213),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',220),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',221),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',222),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',223),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',224),
  ('value -> factor','value',1,'p_value','Parser.py',231),
  ('value -> type_cast','value',1,'p_value','Parser.py',232),
  ('value -> expression','value',1,'p_value','Parser.py',233),
  ('value -> function_call','value',1,'p_value','Parser.py',234),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',241),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',242),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',243),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',244),
  ('typecast_value -> IDENT','typecast_value',1,'p_typecast_value','Parser.py',251),
  ('typecast_value -> literal','typecast_value',1,'p_typecast_value','Parser.py',252),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',253),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',254),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',255),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',265),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',266),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',267),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',268),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',269),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',270),
  ('expression -> expr_head expr_tail','expression',2,'p_expression','Parser.py',277),
  ('expr_head -> term term_tail','expr_head',2,'p_expr_head','Parser.py',287),
  ('term -> factor factor_tail','term',2,'p_term','Parser.py',297),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',307),
  ('factor -> literal','factor',1,'p_factor','Parser.py',308),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',309),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',310),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',322),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',323),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',324),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',325),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',326),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',327),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',328),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser.py',338),
  ('term_tail -> GT expression','term_tail',2,'p_term_tail','Parser.py',339),
  ('term_tail -> LT expression','term_tail',2,'p_term_tail','Parser.py',340),
  ('term_tail -> EQ_EQ expression','term_tail',2,'p_term_tail','Parser.py',341),
  ('term_tail -> GT_EQ expression','term_tail',2,'p_term_tail','Parser.py',342),
  ('term_tail -> LT_EQ expression','term_tail',2,'p_term_tail','Parser.py',343),
  ('term_tail -> NOT_EQ expression','term_tail',2,'p_term_tail','Parser.py',344),
  ('expr_tail -> empty','expr_tail',1,'p_expr_tail','Parser.py',359),
  ('expr_tail -> AND expression','expr_tail',2,'p_expr_tail','Parser.py',360),
  ('expr_tail -> OR expression','expr_tail',2,'p_expr_tail','Parser.py',361),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',371),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',378),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',379),
  ('function_statements -> maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE','function_statements',13,'p_function_statements','Parser.py',389),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',390),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',405),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',406),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',416),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',417),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',418),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',419),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',420),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',421),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',422),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',423),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',424),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',425),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',432),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',433),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',443),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',444),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',454),
  ('revive -> empty','revive',1,'p_revive','Parser.py',455),
  ('statements -> empty','statements',1,'p_statements','Parser.py',465),
  ('statements -> local_dec NEWLINE statements_tail','statements',3,'p_statements','Parser.py',466),
  ('statements_tail -> empty','statements_tail',1,'p_statements_tail','Parser.py',480),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',481),
  ('statements_tail -> conditional_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',482),
  ('statements_tail -> switch_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',483),
  ('statements_tail -> loop_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',484),
  ('statements_tail -> function_call NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',485),
  ('statements_tail -> string_operation_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',486),
  ('statements_tail -> output_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',487),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',510),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',511),
  ('conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_statement',8,'p_conditional_statement','Parser.py',519),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',526),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE','conditional_tail',7,'p_conditional_tail','Parser.py',527),
  ('conditional_tail -> OTHERWISE LBRACE statements RBRACE','conditional_tail',4,'p_conditional_tail','Parser.py',528),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE','switch_statement',9,'p_switch_statement','Parser.py',540),
  ('switch_condition -> SHIFT value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',547),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',554),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',555),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',565),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',566),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',567),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','Parser.py',574),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',581),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',588),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',595),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',602),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',609),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',610),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',620),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',621),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',628),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',629),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',639),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',640),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',650),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',651),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',661),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',662),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',669),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',670),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',677),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',678),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',688),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',695),
  ('string_operation_tail -> assign_op value','string_operation_tail',2,'p_string_operation_tail','Parser.py',702),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',703),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',713),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',714),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',715),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',716),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',717),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',718),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',725),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',726),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',736),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',737),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',753),
]
