
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH NEWLINE global_dec maybe_newline function_statements maybe_newline main_function maybe_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    main_function : MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newlineglobal_dec : global_statement global_tail \n                  | emptyglobal_tail : global_dec\n                   | emptyglobal_statement : data_type IDENT global_statement_tailglobal_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : factor\n                    | expressionvar_statement : data_type IDENT var_tailvar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : factor\n             | type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value : IDENT\n                      | literal\n                      | expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : expr_head expr_tailexpr_head : term term_tailterm : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expressionterm_tail : empty\n                 | GT expression\n                 | LT expression\n                 | EQ_EQ expression\n                 | GT_EQ expression\n                 | LT_EQ expression\n                 | NOT_EQ expressionexpr_tail : empty\n                 | AND expression\n                 | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE \n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec NEWLINE statements_tail\n    statements_tail : empty\n                    | statements\n                    | conditional_statement NEWLINE statements_tail\n                    | switch_statement NEWLINE statements_tail\n                    | loop_statement NEWLINE statements_tail\n                    | function_call NEWLINE statements_tail\n                    | string_operation_statement NEWLINE statements_tail\n                    | output_statement NEWLINE statements_tail\n    local_dec : var_statement\n                 | emptyconditional_statement : CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tailconditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE\n                        | OTHERWISE LBRACE statements RBRACEswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACEswitch_condition : SHIFT value COLON statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACErepeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | input_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : assign_op value\n                             | PLUS string_val stringcon_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,124,],[0,-1,]),'NEWLINE':([2,3,4,5,6,13,14,15,16,17,18,19,20,21,23,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,61,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,131,132,136,137,139,140,141,142,144,147,148,149,151,153,154,155,156,157,158,159,160,161,162,165,166,167,169,176,177,181,182,183,184,185,190,191,192,193,194,195,196,200,209,213,215,216,218,219,224,225,226,227,228,229,237,238,239,240,241,242,250,251,252,255,267,272,273,274,280,281,282,284,285,286,287,290,291,292,295,297,303,308,309,313,315,316,320,327,329,330,332,341,342,343,345,],[3,-161,13,-161,-6,13,-161,-2,-5,-7,-6,-161,-3,13,-84,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,13,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,13,13,-161,-161,13,-103,147,-113,-161,-161,-161,13,-102,13,-104,-103,-106,191,192,193,194,195,196,-123,-124,-125,-136,-19,-20,-101,-37,-38,-39,-40,-4,-161,-161,-161,-161,-161,-161,-148,-161,-161,-161,-25,-161,-83,-107,-108,-109,-110,-111,-112,-149,-161,-159,-160,-143,-145,-147,-21,-23,-22,-135,-150,-157,-161,-161,-26,-41,-42,-43,-44,-161,-161,-146,-144,-161,-24,-158,-161,-161,-127,-115,-116,-161,-128,-161,-119,-161,-118,-126,-161,-117,]),'FUNCTION':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,24,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_INT':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,26,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_FLT':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,27,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_CHR':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,28,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_BLN':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,29,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_STR':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,30,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_LIST_INT':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,31,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_LIST_FLT':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,32,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_LIST_CHR':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,33,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_LIST_STR':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,34,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'FUNCTION_LIST_BLN':([3,4,5,6,13,14,15,16,17,18,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,],[-161,-161,-161,-6,-161,35,-2,-5,-7,-6,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,]),'MAIN_CASPER':([3,4,5,6,13,14,15,16,17,18,19,20,21,23,36,37,40,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,219,],[-161,-161,-161,-6,-161,-161,-2,-5,-7,-6,-161,-3,-161,-84,-9,-10,62,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-83,]),'INT':([3,5,13,15,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,63,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,131,132,135,136,137,147,191,192,193,194,195,196,211,213,287,295,309,320,329,332,343,],[8,8,-161,-2,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,8,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-161,-161,8,8,8,8,8,8,8,8,8,8,247,8,8,8,8,8,8,8,8,]),'FLT':([3,5,13,15,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,63,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,131,132,135,136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[9,9,-161,-2,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,9,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-161,-161,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'BLN':([3,5,13,15,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,63,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,131,132,135,136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[10,10,-161,-2,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,10,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-161,-161,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'CHR':([3,5,13,15,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,63,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,131,132,135,136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[11,11,-161,-2,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,11,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-161,-161,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STR':([3,5,13,15,19,20,36,37,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,63,64,65,66,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,128,130,131,132,135,136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[12,12,-161,-2,-161,-3,-9,-10,-161,-161,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,12,-11,-12,-13,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-161,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-14,-82,-161,-161,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IDENT':([7,8,9,10,11,12,38,39,51,67,72,73,74,75,76,77,83,84,87,90,91,92,93,94,95,99,138,143,147,150,171,178,179,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,210,212,220,221,222,223,243,247,253,270,271,276,301,304,307,324,328,],[19,-32,-33,-34,-35,-36,42,53,53,101,53,53,53,53,53,53,53,53,117,53,53,53,53,53,53,127,145,148,53,53,53,53,218,53,53,53,53,53,53,53,231,53,53,53,-151,-152,-153,-154,-155,-156,53,53,257,257,257,257,53,277,280,53,53,53,53,53,53,53,53,]),'GHOST':([13,15,20,61,96,153,190,],[-161,-2,-3,-161,124,-161,-4,]),'RBRACE':([13,15,20,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,131,132,136,137,139,140,144,146,147,149,151,154,155,156,169,180,181,182,183,184,185,191,192,193,194,195,196,213,224,225,226,227,228,229,249,250,267,282,284,285,286,287,295,299,306,309,319,329,332,335,339,343,344,],[-161,-2,-3,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-161,-161,-161,-103,-161,153,-161,-161,-102,-104,-103,-106,-136,219,-101,-37,-38,-39,-40,-161,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,279,-147,-135,-41,-42,-43,-44,-161,-161,308,313,-161,330,-161,-161,341,342,-161,345,]),'REVIVE':([13,15,20,132,137,140,144,147,154,155,156,191,192,193,194,195,196,224,225,226,227,228,229,],[-161,-2,-3,-161,-161,-103,150,-161,-104,-103,-106,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,]),'COMMA':([19,42,43,44,46,47,48,49,52,53,54,55,56,57,58,59,60,69,70,71,78,80,81,82,85,86,88,89,101,102,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,127,130,145,148,169,182,183,184,185,209,215,216,218,234,235,236,244,245,250,267,274,280,281,282,284,285,286,289,],[38,38,67,-15,-17,-18,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,105,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,38,-16,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,135,-82,135,179,-136,-37,-38,-39,-40,243,253,-25,179,270,-141,-142,243,-39,-147,-135,243,179,-26,-41,-42,-43,-44,270,]),'EQ':([19,42,53,85,86,101,130,148,170,218,277,280,312,],[39,39,-161,-80,-81,39,-82,178,208,178,294,178,208,]),'FUNCTION_NAME':([22,24,25,26,27,28,29,30,31,32,33,34,35,147,150,171,178,191,192,193,194,195,196,201,203,204,205,206,207,208,210,220,221,222,223,243,301,324,],[41,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,168,168,168,168,168,168,168,168,168,168,168,-151,-152,-153,-154,-155,-156,168,260,260,260,260,168,168,168,]),'LBRACKET':([39,53,178,257,],[45,87,217,87,]),'TILDE':([39,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,150,171,178,197,201,203,204,205,206,207,208,210,212,220,221,222,223,243,276,301,307,324,328,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-151,-152,-153,-154,-155,-156,50,50,50,50,50,50,50,50,50,50,50,50,]),'LPAREN':([39,41,51,62,72,73,74,75,76,77,83,84,90,91,92,93,94,95,150,163,164,168,171,172,173,175,178,186,187,188,189,197,201,203,204,205,206,207,208,210,212,220,221,222,223,243,260,276,296,301,307,317,324,328,],[51,63,51,97,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,197,198,199,210,211,212,214,51,220,221,222,223,51,51,-151,-152,-153,-154,-155,-156,51,51,51,51,51,51,51,283,51,307,51,51,328,51,51,]),'INT_LIT':([39,45,50,51,72,73,74,75,76,77,83,84,87,90,91,92,93,94,95,105,150,171,178,197,199,201,203,204,205,206,207,208,210,212,217,220,221,222,223,243,270,276,294,301,307,324,328,],[54,54,54,54,54,54,54,54,54,54,54,54,116,54,54,54,54,54,54,54,54,54,54,54,54,54,-151,-152,-153,-154,-155,-156,54,54,54,54,54,54,54,54,54,54,305,54,54,54,54,]),'FLT_LIT':([39,45,50,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,105,150,171,178,197,199,201,203,204,205,206,207,208,210,212,217,220,221,222,223,243,270,276,301,307,324,328,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-151,-152,-153,-154,-155,-156,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'DAY':([39,45,50,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,105,150,171,178,197,199,201,203,204,205,206,207,208,210,212,217,220,221,222,223,243,270,276,301,307,324,328,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-151,-152,-153,-154,-155,-156,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'NIGHT':([39,45,50,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,105,150,171,178,197,199,201,203,204,205,206,207,208,210,212,217,220,221,222,223,243,270,276,301,307,324,328,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-151,-152,-153,-154,-155,-156,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'CHR_LIT':([39,45,50,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,105,150,171,178,197,199,201,203,204,205,206,207,208,210,212,217,220,221,222,223,243,270,276,301,307,324,328,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-151,-152,-153,-154,-155,-156,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'STR_LIT':([39,45,50,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,105,150,171,178,197,199,201,202,203,204,205,206,207,208,210,212,217,220,221,222,223,243,270,271,276,301,307,324,328,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,240,-151,-152,-153,-154,-155,-156,59,59,59,59,59,59,59,59,59,240,59,59,59,59,59,]),'PLUS':([46,48,49,53,54,55,56,57,58,59,78,80,85,86,112,130,170,182,238,239,240,257,258,290,],[72,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,72,-80,-81,-62,-82,202,72,271,-159,-160,-161,-60,271,]),'MINUS':([46,48,49,53,54,55,56,57,58,59,78,80,85,86,112,130,182,257,258,],[73,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,73,-80,-81,-62,-82,73,-161,-60,]),'MULTIPLY':([46,48,49,53,54,55,56,57,58,59,78,80,85,86,112,130,182,257,258,],[74,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,74,-80,-81,-62,-82,74,-161,-60,]),'DIVISION':([46,48,49,53,54,55,56,57,58,59,78,80,85,86,112,130,182,257,258,],[75,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,75,-80,-81,-62,-82,75,-161,-60,]),'MODULO':([46,48,49,53,54,55,56,57,58,59,78,80,85,86,112,130,182,257,258,],[76,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,76,-80,-81,-62,-82,76,-161,-60,]),'EXPONENT':([46,48,49,53,54,55,56,57,58,59,78,80,85,86,112,130,182,257,258,],[77,-59,-60,-161,-50,-51,-52,-53,-54,-55,-61,77,-80,-81,-62,-82,77,-161,-60,]),'GT':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,90,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'LT':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,91,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'EQ_EQ':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,92,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'GT_EQ':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,93,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'LT_EQ':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,94,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'NOT_EQ':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,95,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'AND':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,83,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'OR':([46,48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,182,257,258,],[-161,-59,-60,84,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-161,-161,-60,]),'RPAREN':([48,49,52,53,54,55,56,57,58,59,60,63,70,71,78,79,80,81,82,85,86,88,89,97,98,100,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,127,130,133,134,145,152,169,182,183,184,185,199,214,230,231,232,233,234,235,236,242,244,245,248,250,256,257,258,259,261,262,263,264,267,268,269,274,275,282,283,284,285,286,289,291,298,302,311,314,322,323,325,326,333,334,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-161,-58,-63,-61,112,-161,-56,-77,-80,-81,-57,-70,125,126,-98,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-161,-82,-97,-99,-161,-100,-136,-37,-38,-39,-40,-161,250,265,266,267,-137,-161,-141,-142,-145,-161,112,278,-147,282,-45,-46,-47,-49,284,285,286,-135,-138,-139,-161,292,-41,298,-42,-43,-44,-161,-146,-48,-140,321,327,-130,-131,-133,-134,-132,340,]),'COLON':([48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,169,182,183,184,185,250,267,282,284,285,286,310,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,-136,-37,-38,-39,-40,-147,-135,-41,-42,-43,-44,320,]),'SEMICOLON':([48,49,52,53,54,55,56,57,58,59,60,70,71,78,80,81,82,85,86,88,89,106,107,108,109,110,111,112,113,114,118,119,120,121,122,123,130,246,293,305,],[-59,-60,-161,-161,-50,-51,-52,-53,-54,-55,-161,-58,-63,-61,-161,-56,-77,-80,-81,-57,-70,-64,-65,-66,-67,-68,-69,-62,-78,-79,-71,-72,-73,-74,-75,-76,-82,276,304,-129,]),'PLUS_EQ':([53,85,86,130,170,312,],[-161,-80,-81,-82,203,203,]),'MINUS_EQ':([53,85,86,130,170,312,],[-161,-80,-81,-82,204,204,]),'MUL_EQ':([53,85,86,130,170,312,],[-161,-80,-81,-82,205,205,]),'DIV_EQ':([53,85,86,130,170,312,],[-161,-80,-81,-82,206,206,]),'MOD_EQ':([53,85,86,130,170,312,],[-161,-80,-81,-82,207,207,]),'PLUS_PLUS':([53,85,86,130,312,],[-161,-80,-81,-82,325,]),'MINUS_MINUS':([53,85,86,130,312,],[-161,-80,-81,-82,326,]),'RBRACKET':([54,55,56,57,58,59,68,69,103,104,115,116,117,129,254,],[-50,-51,-52,-53,-54,-55,102,-161,-27,-28,130,-30,-31,-29,281,]),'LBRACE':([125,126,174,265,266,278,318,321,340,],[131,132,213,287,288,295,329,332,343,]),'SHIFT':([140,147,154,155,156,191,192,193,194,195,196,224,225,226,227,228,229,288,320,331,],[-103,-161,-104,-103,-106,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,301,-161,301,]),'OTHERWISE':([140,147,154,155,156,191,192,193,194,195,196,224,225,226,227,228,229,300,308,320,331,336,337,338,],[-103,-161,-104,-103,-106,-161,-161,-161,-161,-161,-161,-107,-108,-109,-110,-111,-112,309,318,-161,-161,-120,-121,-122,]),'CHECK':([147,191,192,193,194,195,196,],[163,163,163,163,163,163,163,]),'SWAP':([147,191,192,193,194,195,196,],[164,164,164,164,164,164,164,]),'DISPLAY':([147,191,192,193,194,195,196,],[171,171,171,171,171,171,171,]),'FOR':([147,191,192,193,194,195,196,],[172,172,172,172,172,172,172,]),'UNTIL':([147,191,192,193,194,195,196,279,],[173,173,173,173,173,173,173,296,]),'REPEAT':([147,191,192,193,194,195,196,],[174,174,174,174,174,174,174,]),'INPUT':([147,150,171,178,191,192,193,194,195,196,201,203,204,205,206,207,208,210,220,221,222,223,243,301,324,],[175,175,175,175,175,175,175,175,175,175,175,-151,-152,-153,-154,-155,-156,175,175,175,175,175,175,175,175,]),'CONVERT_TO_INT':([150,171,178,201,203,204,205,206,207,208,210,243,301,324,],[186,186,186,186,-151,-152,-153,-154,-155,-156,186,186,186,186,]),'CONVERT_TO_FLT':([150,171,178,201,203,204,205,206,207,208,210,243,301,324,],[187,187,187,187,-151,-152,-153,-154,-155,-156,187,187,187,187,]),'CONVERT_TO_BLN':([150,171,178,201,203,204,205,206,207,208,210,243,301,324,],[188,188,188,188,-151,-152,-153,-154,-155,-156,188,188,188,188,]),'CONVERT_TO_STR':([150,171,178,201,203,204,205,206,207,208,210,243,301,324,],[189,189,189,189,-151,-152,-153,-154,-155,-156,189,189,189,189,]),'OTHERWISE_CHECK':([308,],[317,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_dec':([3,5,],[4,17,]),'global_statement':([3,5,],[5,5,]),'empty':([3,4,5,13,14,19,21,42,43,46,52,53,60,61,63,69,80,101,127,131,132,136,137,139,144,145,147,148,149,153,182,191,192,193,194,195,196,199,209,213,215,218,234,238,244,257,274,280,287,289,290,295,308,309,320,329,331,332,343,],[6,15,18,15,23,37,15,37,66,71,82,86,89,15,100,104,71,37,134,15,15,140,140,15,151,134,155,177,15,15,71,155,155,155,155,155,155,233,242,140,252,177,269,273,242,86,242,177,140,269,273,140,316,140,140,140,337,140,140,]),'data_type':([3,5,63,135,136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[7,7,99,138,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'maybe_newline':([4,13,21,61,131,132,139,149,153,],[14,20,40,96,136,137,146,180,190,]),'global_tail':([5,],[16,]),'function_statements':([14,],[21,]),'ret_type':([14,],[22,]),'function_dtype':([14,],[25,]),'global_statement_tail':([19,42,101,],[36,64,128,]),'global_dec_value':([39,],[43,]),'global_value':([39,],[44,]),'factor':([39,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,150,171,178,197,201,210,212,220,221,222,223,243,276,301,307,324,328,],[46,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,182,182,182,80,182,182,80,80,80,80,80,182,80,182,80,182,80,]),'expression':([39,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,150,171,178,197,201,210,212,220,221,222,223,243,276,301,307,324,328,],[47,79,106,107,108,109,110,111,113,114,118,119,120,121,122,123,184,184,184,230,184,245,248,259,259,259,259,184,293,184,314,184,334,]),'var_call':([39,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,147,150,171,178,191,192,193,194,195,196,197,199,201,202,210,212,220,221,222,223,243,270,271,276,301,304,307,324,328,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,170,48,48,48,170,170,170,170,170,170,48,236,48,239,48,48,48,48,48,48,48,236,239,48,48,312,48,48,48,]),'literal':([39,45,50,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,105,150,171,178,197,199,201,210,212,217,220,221,222,223,243,270,276,301,307,324,328,],[49,69,78,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,69,49,49,49,49,235,49,49,49,69,258,258,258,258,49,235,49,49,49,49,49,]),'expr_head':([39,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,150,171,178,197,201,210,212,220,221,222,223,243,276,301,307,324,328,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'term':([39,51,72,73,74,75,76,77,83,84,90,91,92,93,94,95,150,171,178,197,201,210,212,220,221,222,223,243,276,301,307,324,328,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'main_function':([40,],[61,]),'global_tail2':([43,],[65,]),'list_element':([45,105,217,],[68,129,254,]),'factor_tail':([46,80,182,],[70,70,70,]),'expr_tail':([52,],[81,]),'var_call_tail':([53,257,],[85,85,]),'term_tail':([60,],[88,]),'parameters':([63,],[98,]),'element_tail':([69,],[103,]),'index':([87,],[115,]),'parameters_tail':([127,145,],[133,152,]),'statements':([136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[139,144,156,156,156,156,156,156,156,249,299,306,319,331,335,339,344,]),'local_dec':([136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'var_statement':([136,137,147,191,192,193,194,195,196,213,287,295,309,320,329,332,343,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'revive':([144,],[149,]),'statements_tail':([147,191,192,193,194,195,196,],[154,224,225,226,227,228,229,]),'conditional_statement':([147,191,192,193,194,195,196,],[157,157,157,157,157,157,157,]),'switch_statement':([147,191,192,193,194,195,196,],[158,158,158,158,158,158,158,]),'loop_statement':([147,191,192,193,194,195,196,],[159,159,159,159,159,159,159,]),'function_call':([147,150,171,178,191,192,193,194,195,196,201,210,243,301,324,],[160,185,185,185,160,160,160,160,160,160,185,185,185,185,185,]),'string_operation_statement':([147,191,192,193,194,195,196,],[161,161,161,161,161,161,161,]),'output_statement':([147,191,192,193,194,195,196,],[162,162,162,162,162,162,162,]),'for_loop':([147,191,192,193,194,195,196,],[165,165,165,165,165,165,165,]),'until_loop':([147,191,192,193,194,195,196,],[166,166,166,166,166,166,166,]),'repeat_until':([147,191,192,193,194,195,196,],[167,167,167,167,167,167,167,]),'input_statement':([147,150,171,178,191,192,193,194,195,196,201,210,220,221,222,223,243,301,324,],[169,169,169,169,169,169,169,169,169,169,169,169,261,261,261,261,169,169,169,]),'var_tail':([148,218,280,],[176,255,297,]),'value':([150,171,178,201,210,243,301,324,],[181,209,216,237,244,274,310,333,]),'type_cast':([150,171,178,201,210,243,301,324,],[183,183,183,183,183,183,183,183,]),'string_operation_tail':([170,],[200,]),'assign_op':([170,312,],[201,324,]),'tail_value':([178,],[215,]),'arguments':([199,],[232,]),'arg_value':([199,270,],[234,289,]),'string_val':([202,271,],[238,290,]),'next_val':([209,244,274,],[241,275,291,]),'control_variable':([211,],[246,]),'var_tail2':([215,],[251,]),'typecast_value':([220,221,222,223,],[256,262,263,264,]),'arg_tail':([234,289,],[268,302,]),'stringcon_tail':([238,290,],[272,303,]),'switch_condition':([288,331,],[300,338,]),'update':([304,],[311,]),'conditional_tail':([308,],[315,]),'update_tail':([312,],[322,]),'postfix':([312,],[323,]),'switchcond_tail':([331,],[336,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH NEWLINE global_dec maybe_newline function_statements maybe_newline main_function maybe_newline GHOST','program',9,'p_program','Parser.py',40),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',48),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',49),
  ('main_function -> MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline','main_function',9,'p_main_function','Parser.py',60),
  ('global_dec -> global_statement global_tail','global_dec',2,'p_global_dec','Parser.py',67),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',68),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',79),
  ('global_tail -> empty','global_tail',1,'p_global_tail','Parser.py',80),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',91),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',98),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',99),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',100),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',112),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',113),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',123),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',124),
  ('global_value -> factor','global_value',1,'p_global_value','Parser.py',134),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',135),
  ('var_statement -> data_type IDENT var_tail','var_statement',3,'p_var_statement','Parser.py',142),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',149),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',150),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',151),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',163),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',164),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',174),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',175),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',185),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',195),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',196),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',206),
  ('index -> IDENT','index',1,'p_index','Parser.py',207),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',214),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',215),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',218),
  ('value -> factor','value',1,'p_value','Parser.py',225),
  ('value -> type_cast','value',1,'p_value','Parser.py',226),
  ('value -> expression','value',1,'p_value','Parser.py',227),
  ('value -> function_call','value',1,'p_value','Parser.py',228),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',235),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('typecast_value -> IDENT','typecast_value',1,'p_typecast_value','Parser.py',245),
  ('typecast_value -> literal','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',247),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',248),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',249),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',260),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',261),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',262),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',263),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',264),
  ('expression -> expr_head expr_tail','expression',2,'p_expression','Parser.py',271),
  ('expr_head -> term term_tail','expr_head',2,'p_expr_head','Parser.py',281),
  ('term -> factor factor_tail','term',2,'p_term','Parser.py',291),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',301),
  ('factor -> literal','factor',1,'p_factor','Parser.py',302),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',303),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',304),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',316),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',317),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',318),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',319),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',320),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',321),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',322),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser.py',332),
  ('term_tail -> GT expression','term_tail',2,'p_term_tail','Parser.py',333),
  ('term_tail -> LT expression','term_tail',2,'p_term_tail','Parser.py',334),
  ('term_tail -> EQ_EQ expression','term_tail',2,'p_term_tail','Parser.py',335),
  ('term_tail -> GT_EQ expression','term_tail',2,'p_term_tail','Parser.py',336),
  ('term_tail -> LT_EQ expression','term_tail',2,'p_term_tail','Parser.py',337),
  ('term_tail -> NOT_EQ expression','term_tail',2,'p_term_tail','Parser.py',338),
  ('expr_tail -> empty','expr_tail',1,'p_expr_tail','Parser.py',353),
  ('expr_tail -> AND expression','expr_tail',2,'p_expr_tail','Parser.py',354),
  ('expr_tail -> OR expression','expr_tail',2,'p_expr_tail','Parser.py',355),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',365),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',372),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',373),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE','function_statements',11,'p_function_statements','Parser.py',383),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',384),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',399),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',400),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',410),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',411),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',412),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',413),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',414),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',415),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',416),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',417),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',418),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',419),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',426),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',427),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',437),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',438),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',448),
  ('revive -> empty','revive',1,'p_revive','Parser.py',449),
  ('statements -> empty','statements',1,'p_statements','Parser.py',459),
  ('statements -> local_dec NEWLINE statements_tail','statements',3,'p_statements','Parser.py',460),
  ('statements_tail -> empty','statements_tail',1,'p_statements_tail','Parser.py',474),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',475),
  ('statements_tail -> conditional_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',476),
  ('statements_tail -> switch_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',477),
  ('statements_tail -> loop_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',478),
  ('statements_tail -> function_call NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',479),
  ('statements_tail -> string_operation_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',480),
  ('statements_tail -> output_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',481),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',504),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',505),
  ('conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_statement',8,'p_conditional_statement','Parser.py',513),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',520),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE','conditional_tail',7,'p_conditional_tail','Parser.py',521),
  ('conditional_tail -> OTHERWISE LBRACE statements RBRACE','conditional_tail',4,'p_conditional_tail','Parser.py',522),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE','switch_statement',9,'p_switch_statement','Parser.py',534),
  ('switch_condition -> SHIFT value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',541),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',548),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',549),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',559),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',560),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',561),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','Parser.py',568),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',575),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',582),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',589),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',596),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',603),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',604),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',614),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',615),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',622),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',623),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',633),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',634),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',644),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',645),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',655),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',656),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',663),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',664),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',671),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',672),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',682),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',689),
  ('string_operation_tail -> assign_op value','string_operation_tail',2,'p_string_operation_tail','Parser.py',696),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',697),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',707),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',708),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',709),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',710),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',711),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',712),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',719),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',720),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',730),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',731),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',747),
]
