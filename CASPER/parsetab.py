
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_decglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : expressionvar_statement : data_type IDENT var_tail unli_newlinevar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value :  expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expression\n                   | GT expression\n                   | LT expression\n                   | EQ_EQ expression\n                   | GT_EQ expression\n                   | LT_EQ expression\n                   | NOT_EQ expression\n                   | AND expression\n                   | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail\n                           | emptyfunction_statements_tail : function_statements\n                                | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : string_operation_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | output_statement unli_newline statements\n                    | statements\n    local_dec : empty\n                 | var_statement\n    conditional_statement : CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail  OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE\n    \n    conditional_tail : OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tail\n                     | empty\n    \n    condition : arithmetic_expression condition_tail\n    \n    condition_tail : condition_op arithmetic_expression condition_tail\n               | empty\n    \n    condition_op : AND\n                 | OR\n                 | EQ_EQ\n                 | NOT_EQ\n                 | LT\n                 | GT\n                 | LT_EQ\n                 | GT_EQ\n    \n    arithmetic_expression : arith_term arith_tail\n    \n    arith_term : literal\n               | var_call\n    \n    arith_tail : empty\n               | arith_op arithmetic_expression\n    \n    arith_op : PLUS\n             | MINUS\n             | MULTIPLY\n             | DIVISION\n             | MODULO\n    switch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACEuntil_loop : UNTIL LPAREN condition RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN condition RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | output_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,119,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,20,22,35,36,37,38,39,44,45,46,48,49,50,51,54,55,56,57,58,59,60,61,64,65,66,70,71,86,88,89,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,123,125,127,131,132,134,135,136,137,138,141,142,144,145,146,150,151,152,153,159,161,162,163,164,165,166,167,168,172,173,174,178,179,182,183,189,191,192,193,194,195,196,197,199,200,202,203,214,215,216,217,219,220,234,235,239,240,241,242,243,244,245,246,247,248,258,259,260,263,264,265,266,267,270,271,272,273,277,280,281,282,307,308,312,313,314,318,321,323,325,326,331,333,334,343,345,347,348,349,351,354,355,359,360,361,362,364,365,366,367,371,372,373,374,376,378,380,382,383,384,386,],[4,-175,4,17,4,-8,-5,-175,-2,17,-175,-175,17,-77,-3,-7,-9,-10,-11,-175,-175,-16,-18,-175,-54,-55,-175,-47,-48,-49,-50,-51,-52,4,-12,-13,-14,-53,-58,-56,-73,-74,-175,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,17,-15,-75,17,17,-175,-175,-175,-98,17,-108,17,17,-97,-175,-175,-96,-37,-38,-39,-150,-99,4,-106,4,4,4,4,4,-137,-138,-139,4,-20,-6,4,-175,-175,-175,-175,-175,-175,-175,-162,-164,-145,-147,-148,17,-19,-175,-25,-175,-175,-157,-159,-100,-101,-102,-103,-104,-105,-175,-173,-174,-146,-175,-21,-23,-22,-76,-78,-77,-40,-41,-42,-43,-149,-175,-163,-171,17,-175,-26,-160,-158,-175,17,17,-24,-172,17,-175,-175,17,17,-141,17,17,17,-142,-175,17,17,-175,-175,17,-175,-134,-135,-136,17,-140,17,17,-175,17,17,-109,-175,-133,17,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,23,-2,-175,-175,-3,-7,-9,23,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,25,-2,-175,-175,-3,-7,-9,25,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,26,-2,-175,-175,-3,-7,-9,26,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,27,-2,-175,-175,-3,-7,-9,27,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,28,-2,-175,-175,-3,-7,-9,28,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,29,-2,-175,-175,-3,-7,-9,29,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,30,-2,-175,-175,-3,-7,-9,30,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,31,-2,-175,-175,-3,-7,-9,31,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,32,-2,-175,-175,-3,-7,-9,32,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,33,-2,-175,-175,-3,-7,-9,33,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-175,-4,-175,-8,-5,34,-2,-175,-175,-3,-7,-9,34,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,20,22,35,36,37,42,220,264,265,266,],[-175,-4,-175,-8,-5,-175,-2,-175,-175,-175,-77,-3,-7,-9,62,-175,-76,-78,-77,]),'INT':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,212,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[9,-4,-5,-2,-175,9,-3,9,-175,9,-175,9,9,-107,-175,-108,9,9,9,9,9,9,9,256,-175,-19,9,-175,-175,9,9,-175,9,-175,-175,9,9,-175,9,-175,9,]),'FLT':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[10,-4,-5,-2,-175,10,-3,10,-175,10,-175,10,10,-107,-175,-108,10,10,10,10,10,10,10,-175,-19,10,-175,-175,10,10,-175,10,-175,-175,10,10,-175,10,-175,10,]),'BLN':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[11,-4,-5,-2,-175,11,-3,11,-175,11,-175,11,11,-107,-175,-108,11,11,11,11,11,11,11,-175,-19,11,-175,-175,11,11,-175,11,-175,-175,11,11,-175,11,-175,11,]),'CHR':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[12,-4,-5,-2,-175,12,-3,12,-175,12,-175,12,12,-107,-175,-108,12,12,12,12,12,12,12,-175,-19,12,-175,-175,12,12,-175,12,-175,-175,12,12,-175,12,-175,12,]),'STR':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[13,-4,-5,-2,-175,13,-3,13,-175,13,-175,13,13,-107,-175,-108,13,13,13,13,13,13,13,-175,-19,13,-175,-175,13,13,-175,13,-175,-175,13,13,-175,13,-175,13,]),'GHOST':([4,14,91,],[-4,-5,119,]),'CHECK':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,-3,-175,-175,-175,-175,-107,-175,-108,170,-175,-175,-175,-175,-175,-175,-175,-19,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'SWAP':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,-3,-175,-175,-175,-175,-107,-175,-108,171,-175,-175,-175,-175,-175,-175,-175,-19,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'FUNCTION_NAME':([4,14,16,17,21,23,24,25,26,27,28,29,30,31,32,33,34,35,127,131,132,134,136,137,138,143,145,160,180,184,185,186,187,190,191,192,193,194,195,196,201,204,205,206,207,208,209,214,215,236,258,321,326,331,333,335,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,43,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-3,-175,-175,-175,-175,-107,-175,-108,158,158,158,158,223,223,223,223,158,-175,-175,-175,-175,-175,-175,158,-165,-166,-167,-168,-169,-170,-175,-19,158,-175,-175,-175,-175,-175,158,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'DISPLAY':([4,14,16,17,35,127,131,132,134,136,137,138,143,145,160,180,190,191,192,193,194,195,196,201,204,205,206,207,208,209,214,215,236,258,321,326,331,333,335,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,-3,-175,-175,-175,-175,-107,-175,-108,160,160,160,160,160,-175,-175,-175,-175,-175,-175,160,-165,-166,-167,-168,-169,-170,-175,-19,160,-175,-175,-175,-175,-175,160,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'IDENT':([4,8,9,10,11,12,13,14,16,17,35,40,41,53,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,127,131,132,133,134,136,137,138,139,143,145,160,180,181,184,185,186,187,188,190,191,192,193,194,195,196,198,201,204,205,206,207,208,209,210,211,213,214,215,236,256,258,261,276,279,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,321,326,329,331,333,335,339,349,354,355,359,361,363,364,373,376,380,383,],[-4,19,-32,-33,-34,-35,-36,-5,-2,-175,-3,44,54,54,96,54,54,54,54,54,54,54,54,54,54,54,54,54,54,118,122,-175,-175,-175,140,-175,-107,-175,-108,146,54,54,54,54,219,54,54,54,54,54,54,-175,-175,-175,-175,-175,-175,54,54,-165,-166,-167,-168,-169,-170,54,254,54,-175,-19,54,304,-175,307,54,54,54,-115,-116,-117,-118,-119,-120,-121,-122,54,-128,-129,-130,-131,-132,54,-175,-175,54,-175,-175,54,54,-175,-175,-175,-175,-175,54,-175,-175,-175,-175,-175,]),'FOR':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,-3,-175,-175,-175,-175,-107,-175,-108,175,-175,-175,-175,-175,-175,-175,-175,-19,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'UNTIL':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,322,326,331,333,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,-3,-175,-175,-175,-175,-107,-175,-108,176,-175,-175,-175,-175,-175,-175,-175,-19,-175,-175,332,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'REPEAT':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,258,321,326,331,333,349,354,355,359,361,364,373,376,380,383,],[-4,-5,-2,-175,-3,-175,-175,-175,-175,-107,-175,-108,177,-175,-175,-175,-175,-175,-175,-175,-19,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,-175,]),'REVIVE':([4,14,16,17,35,127,132,135,136,137,138,145,161,163,191,192,193,194,195,196,215,239,240,241,242,243,244,],[-4,-5,-2,-175,-3,-175,-175,143,-98,-175,-108,-175,-99,-106,-175,-175,-175,-175,-175,-175,-19,-100,-101,-102,-103,-104,-105,]),'RBRACE':([4,14,16,17,35,49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,125,127,131,132,134,135,136,137,138,141,142,144,145,148,149,150,151,152,153,159,161,163,189,191,192,193,194,195,196,214,215,234,235,239,240,241,242,243,244,258,267,270,271,272,273,277,306,312,313,321,326,331,333,338,340,355,359,361,364,368,371,373,375,376,378,379,380,381,383,385,],[-4,-5,-2,-175,-3,-175,-54,-55,-175,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-175,-175,-175,-175,-175,-98,-175,-108,-175,-175,-97,-175,182,183,-96,-37,-38,-39,-150,-99,-106,-175,-175,-175,-175,-175,-175,-175,-175,-19,-157,-159,-100,-101,-102,-103,-104,-105,-175,-40,-41,-42,-43,-149,-175,322,-160,-158,-175,-175,-175,-175,345,347,-175,-175,-175,-175,372,-175,-175,378,-175,-175,382,-175,384,-175,386,]),'SHIFT':([4,14,16,17,35,136,137,138,145,161,163,191,192,193,194,195,196,215,239,240,241,242,243,244,318,328,349,354,360,],[-4,-5,-2,-175,-3,-98,-175,-108,-175,-99,-106,-175,-175,-175,-175,-175,-175,-19,-100,-101,-102,-103,-104,-105,-175,335,-175,-175,335,]),'OTHERWISE':([4,14,16,17,35,136,137,138,145,161,163,191,192,193,194,195,196,215,239,240,241,242,243,244,334,341,347,349,352,354,356,358,360,365,366,367,386,387,388,],[-4,-5,-2,-175,-3,-98,-175,-108,-175,-99,-106,-175,-175,-175,-175,-175,-175,-19,-100,-101,-102,-103,-104,-105,-175,348,-175,-175,-175,-175,362,-111,-175,-134,-135,-136,-175,-175,-110,]),'LBRACE':([16,17,35,120,121,126,177,282,302,305,315,343,348,350,353,362,369,374,377,],[-2,-175,-3,-175,127,131,214,-175,318,321,326,-175,-175,355,359,-175,373,-175,380,]),'OTHERWISE_CHECK':([16,17,35,347,352,386,387,],[-2,-175,-3,-175,357,-175,357,]),'COMMA':([19,44,45,46,48,49,50,51,54,55,56,57,58,59,60,69,70,71,86,88,89,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,125,140,146,151,152,153,159,189,216,217,219,231,232,233,234,235,237,238,267,270,271,272,273,277,307,308,311,312,313,],[40,40,67,-16,-18,-175,-54,-55,-175,-47,-48,-49,-50,-51,-52,100,-53,-58,-56,-73,-74,40,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,130,-75,130,181,-37,-38,-39,-150,236,261,-25,181,276,-155,-156,-157,-159,236,-38,-40,-41,-42,-43,-149,236,181,-26,276,-160,-158,]),'EQ':([19,44,54,88,89,96,125,146,169,219,304,307,337,],[41,41,-175,-73,-74,41,-75,180,209,180,320,180,209,]),'LBRACKET':([41,54,180,],[47,90,218,]),'TILDE':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,160,180,184,185,186,187,190,201,204,205,206,207,208,209,236,335,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-165,-166,-167,-168,-169,-170,52,52,]),'LPAREN':([41,43,53,62,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,154,155,156,157,158,160,170,171,175,176,180,184,185,186,187,190,201,204,205,206,207,208,209,223,225,236,332,335,357,],[53,63,53,92,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,184,185,186,187,188,190,210,211,212,213,53,53,53,53,53,53,53,-165,-166,-167,-168,-169,-170,268,269,53,339,53,363,]),'INT_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,276,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,320,335,339,363,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,117,55,55,55,55,55,55,55,55,55,55,55,-165,-166,-167,-168,-169,-170,55,55,55,55,55,55,-115,-116,-117,-118,-119,-120,-121,-122,55,-128,-129,-130,-131,-132,55,330,55,55,55,]),'FLT_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,276,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,335,339,363,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-165,-166,-167,-168,-169,-170,56,56,56,56,56,56,-115,-116,-117,-118,-119,-120,-121,-122,56,-128,-129,-130,-131,-132,56,56,56,56,]),'DAY':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,276,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,335,339,363,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-165,-166,-167,-168,-169,-170,57,57,57,57,57,57,-115,-116,-117,-118,-119,-120,-121,-122,57,-128,-129,-130,-131,-132,57,57,57,57,]),'NIGHT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,276,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,335,339,363,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-165,-166,-167,-168,-169,-170,58,58,58,58,58,58,-115,-116,-117,-118,-119,-120,-121,-122,58,-128,-129,-130,-131,-132,58,58,58,58,]),'CHR_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,276,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,335,339,363,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-165,-166,-167,-168,-169,-170,59,59,59,59,59,59,-115,-116,-117,-118,-119,-120,-121,-122,59,-128,-129,-130,-131,-132,59,59,59,59,]),'STR_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,198,201,204,205,206,207,208,209,210,213,218,236,276,279,284,286,287,288,289,290,291,292,293,296,297,298,299,300,301,303,335,339,363,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,247,60,-165,-166,-167,-168,-169,-170,60,60,60,60,60,247,60,-115,-116,-117,-118,-119,-120,-121,-122,60,-128,-129,-130,-131,-132,60,60,60,60,]),'PLUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,169,245,246,247,251,252,253,314,],[72,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,198,279,-173,-174,297,-124,-125,279,]),'MINUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,],[73,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,298,-124,-125,]),'MULTIPLY':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,],[74,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,299,-124,-125,]),'DIVISION':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,],[75,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,300,-124,-125,]),'MODULO':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,],[76,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,301,-124,-125,]),'EXPONENT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,],[77,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'GT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[78,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,291,-175,-124,-125,-123,-126,291,-127,]),'LT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[79,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,290,-175,-124,-125,-123,-126,290,-127,]),'EQ_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[80,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,288,-175,-124,-125,-123,-126,288,-127,]),'GT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[81,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,293,-175,-124,-125,-123,-126,293,-127,]),'LT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[82,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,292,-175,-124,-125,-123,-126,292,-127,]),'NOT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[83,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,289,-175,-124,-125,-123,-126,289,-127,]),'AND':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[84,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,286,-175,-124,-125,-123,-126,286,-127,]),'OR':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,294,295,316,317,],[85,-54,-55,-175,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,287,-175,-124,-125,-123,-126,287,-127,]),'RPAREN':([49,50,51,54,55,56,57,58,59,60,63,70,71,86,87,88,89,92,93,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,125,128,129,140,147,151,152,153,159,188,189,200,202,203,221,222,224,226,227,228,229,230,231,232,233,234,235,237,238,248,249,250,251,252,253,254,257,267,268,269,270,271,272,273,274,275,277,278,283,285,294,295,309,310,311,312,313,316,317,324,327,336,344,346,370,],[-175,-54,-55,-175,-47,-48,-49,-50,-51,-52,-175,-53,-58,-56,115,-73,-74,120,121,-93,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-175,-75,-92,-94,-175,-95,-37,-38,-39,-150,-175,-175,-145,-147,-148,267,-44,-46,270,271,272,273,-151,-175,-155,-156,-157,-159,-175,115,-146,282,-175,-175,-124,-125,302,305,-40,309,310,-41,-42,-43,-149,-152,-153,-175,313,-112,-114,-123,-126,-45,-161,-175,-160,-158,-175,-127,-154,-113,343,-144,351,374,]),'COLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,125,151,152,153,159,189,234,235,267,270,271,272,273,277,312,313,342,],[-175,-54,-55,-175,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-37,-38,-39,-150,-175,-157,-159,-40,-41,-42,-43,-149,-175,-160,-158,349,]),'PLUS_PLUS':([54,88,89,125,169,337,],[-175,-73,-74,-75,202,202,]),'MINUS_MINUS':([54,88,89,125,169,337,],[-175,-73,-74,-75,203,203,]),'PLUS_EQ':([54,88,89,125,169,337,],[-175,-73,-74,-75,204,204,]),'MINUS_EQ':([54,88,89,125,169,337,],[-175,-73,-74,-75,205,205,]),'MUL_EQ':([54,88,89,125,169,337,],[-175,-73,-74,-75,206,206,]),'DIV_EQ':([54,88,89,125,169,337,],[-175,-73,-74,-75,207,207,]),'MOD_EQ':([54,88,89,125,169,337,],[-175,-73,-74,-75,208,208,]),'SEMICOLON':([54,55,56,57,58,59,60,88,89,125,250,251,252,253,255,283,285,294,295,316,317,319,327,330,],[-175,-47,-48,-49,-50,-51,-52,-73,-74,-75,-175,-175,-124,-125,303,-112,-114,-123,-126,-175,-127,329,-113,-143,]),'RBRACKET':([55,56,57,58,59,60,68,69,98,99,116,117,118,124,262,],[-47,-48,-49,-50,-51,-52,97,-175,-27,-28,125,-30,-31,-29,308,]),'CONVERT_TO_INT':([143,160,180,190,201,204,205,206,207,208,209,236,335,],[154,154,154,154,154,-165,-166,-167,-168,-169,-170,154,154,]),'CONVERT_TO_FLT':([143,160,180,190,201,204,205,206,207,208,209,236,335,],[155,155,155,155,155,-165,-166,-167,-168,-169,-170,155,155,]),'CONVERT_TO_BLN':([143,160,180,190,201,204,205,206,207,208,209,236,335,],[156,156,156,156,156,-165,-166,-167,-168,-169,-170,156,156,]),'CONVERT_TO_STR':([143,160,180,190,201,204,205,206,207,208,209,236,335,],[157,157,157,157,157,-165,-166,-167,-168,-169,-170,157,157,]),'INPUT':([184,185,186,187,],[225,225,225,225,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,61,162,164,165,166,167,168,178,183,],[3,14,18,91,191,192,193,194,195,196,215,220,]),'global_dec':([3,18,],[5,37,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,20,44,45,49,54,63,69,96,120,122,127,131,132,134,135,137,140,141,142,145,146,188,189,191,192,193,194,195,196,214,216,219,220,231,237,245,250,251,258,277,282,307,311,314,316,318,321,326,331,333,334,343,347,348,349,352,354,355,359,360,361,362,364,371,373,374,376,378,380,383,386,387,],[7,16,22,16,7,39,16,39,66,71,89,95,99,39,16,129,16,16,136,136,144,16,129,16,16,136,179,230,235,136,136,136,136,136,136,16,260,179,266,275,235,281,285,295,136,235,16,179,275,281,285,16,16,16,136,136,16,16,16,16,16,358,136,16,16,366,136,16,136,16,16,16,136,16,16,136,16,358,]),'data_type':([3,18,63,130,132,134,145,191,192,193,194,195,196,258,331,333,354,361,364,376,383,],[8,8,94,133,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'maybe_newline':([5,17,20,120,127,131,137,141,142,214,282,318,321,326,334,343,347,348,349,355,359,362,371,373,374,378,380,386,],[15,35,42,126,132,134,145,148,149,258,315,328,331,333,341,350,352,353,354,361,364,369,375,376,377,381,383,387,]),'function_statements':([15,220,],[20,265,]),'ret_type':([15,220,],[21,21,]),'function_dtype':([15,220,],[24,24,]),'global_tail':([18,],[36,]),'global_statement_tail':([19,44,96,],[38,64,123,]),'global_dec_value':([41,],[45,]),'global_value':([41,],[46,]),'expression':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,160,180,184,185,186,187,190,201,236,335,],[48,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,152,152,152,222,222,222,222,238,152,152,152,]),'factor':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,160,180,184,185,186,187,190,201,236,335,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'var_call':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,145,160,180,184,185,186,187,188,190,198,201,210,213,236,276,279,284,296,303,329,335,339,363,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,169,50,50,50,50,50,50,233,50,246,50,253,253,50,233,246,253,253,253,337,50,253,253,]),'literal':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,210,213,218,236,276,284,296,303,335,339,363,],[51,69,86,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,69,51,51,51,51,51,51,51,232,51,51,252,252,69,51,232,252,252,252,51,252,252,]),'main_function':([42,],[61,]),'global_tail2':([45,],[65,]),'list_element':([47,100,218,],[68,124,262,]),'factor_tail':([49,],[70,]),'var_call_tail':([54,],[88,]),'parameters':([63,],[93,]),'element_tail':([69,],[98,]),'index':([90,],[116,]),'parameters_tail':([122,140,],[128,147,]),'statements':([132,134,145,191,192,193,194,195,196,258,331,333,354,361,364,376,383,],[135,141,163,239,240,241,242,243,244,306,338,340,360,368,371,379,385,]),'local_dec':([132,134,145,191,192,193,194,195,196,258,331,333,354,361,364,376,383,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'var_statement':([132,134,145,191,192,193,194,195,196,258,331,333,354,361,364,376,383,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'revive':([135,],[142,]),'value':([143,160,180,190,201,236,335,],[150,189,217,237,248,277,342,]),'type_cast':([143,160,180,190,201,236,335,],[151,151,151,151,151,151,151,]),'function_call':([143,145,160,180,190,201,236,335,],[153,167,153,153,153,153,153,153,]),'output_statement':([143,145,160,180,190,201,236,335,],[159,168,159,159,159,159,159,159,]),'statements_tail':([145,],[161,]),'string_operation_statement':([145,],[162,]),'conditional_statement':([145,],[164,]),'switch_statement':([145,],[165,]),'loop_statement':([145,],[166,]),'for_loop':([145,],[172,]),'until_loop':([145,],[173,]),'repeat_until':([145,],[174,]),'var_tail':([146,219,307,],[178,263,323,]),'string_operation_tail':([169,],[197,]),'update_tail':([169,337,],[199,344,]),'postfix':([169,337,],[200,200,]),'assign_op':([169,337,],[201,201,]),'tail_value':([180,],[216,]),'typecast_value':([184,185,186,187,],[221,226,227,228,]),'input_statement':([184,185,186,187,],[224,224,224,224,]),'arguments':([188,],[229,]),'arg_value':([188,276,],[231,311,]),'next_val':([189,237,277,],[234,278,312,]),'string_val':([198,279,],[245,314,]),'condition':([210,213,303,339,363,],[249,257,319,346,370,]),'arithmetic_expression':([210,213,284,296,303,339,363,],[250,250,316,317,250,250,250,]),'arith_term':([210,213,284,296,303,339,363,],[251,251,251,251,251,251,251,]),'control_variable':([212,],[255,]),'var_tail2':([216,],[259,]),'function_statements_tail':([220,],[264,]),'arg_tail':([231,311,],[274,324,]),'stringcon_tail':([245,314,],[280,325,]),'condition_tail':([250,316,],[283,327,]),'condition_op':([250,316,],[284,284,]),'arith_tail':([251,],[294,]),'arith_op':([251,],[296,]),'switch_condition':([328,360,],[334,367,]),'update':([329,],[336,]),'conditional_tail':([352,387,],[356,388,]),'switchcond_tail':([360,],[365,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',67),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',74),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',75),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',94),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',101),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',102),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',103),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',115),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',116),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',126),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',127),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',137),
  ('var_statement -> data_type IDENT var_tail unli_newline','var_statement',4,'p_var_statement','Parser.py',144),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',151),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',152),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',153),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',165),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',166),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',176),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',177),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',187),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',197),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',198),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',208),
  ('index -> IDENT','index',1,'p_index','Parser.py',209),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',218),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',219),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',220),
  ('value -> type_cast','value',1,'p_value','Parser.py',227),
  ('value -> expression','value',1,'p_value','Parser.py',228),
  ('value -> function_call','value',1,'p_value','Parser.py',229),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',239),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',247),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',248),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',258),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',260),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',261),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',262),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',263),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',270),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',281),
  ('factor -> literal','factor',1,'p_factor','Parser.py',282),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',283),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',284),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',296),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',297),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',298),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',299),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',300),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',301),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',302),
  ('factor_tail -> GT expression','factor_tail',2,'p_factor_tail','Parser.py',303),
  ('factor_tail -> LT expression','factor_tail',2,'p_factor_tail','Parser.py',304),
  ('factor_tail -> EQ_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',305),
  ('factor_tail -> GT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',306),
  ('factor_tail -> LT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',307),
  ('factor_tail -> NOT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',308),
  ('factor_tail -> AND expression','factor_tail',2,'p_factor_tail','Parser.py',309),
  ('factor_tail -> OR expression','factor_tail',2,'p_factor_tail','Parser.py',310),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',321),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',328),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',329),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail','function_statements',13,'p_function_statements','Parser.py',337),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',338),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',365),
  ('function_statements_tail -> empty','function_statements_tail',1,'p_function_statements_tail','Parser.py',366),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',386),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',387),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',397),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',398),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',399),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',400),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',401),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',402),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',403),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',404),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',405),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',406),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',413),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',414),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',424),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',425),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',435),
  ('revive -> empty','revive',1,'p_revive','Parser.py',436),
  ('statements -> empty','statements',1,'p_statements','Parser.py',446),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',447),
  ('statements_tail -> string_operation_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',461),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',462),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',463),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',464),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',465),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',466),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',467),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',484),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',485),
  ('conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_statement',17,'p_conditional_statement','Parser.py',493),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_tail',11,'p_conditional_tail','Parser.py',505),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',506),
  ('condition -> arithmetic_expression condition_tail','condition',2,'p_condition','Parser.py',522),
  ('condition_tail -> condition_op arithmetic_expression condition_tail','condition_tail',3,'p_condition_tail','Parser.py',538),
  ('condition_tail -> empty','condition_tail',1,'p_condition_tail','Parser.py',539),
  ('condition_op -> AND','condition_op',1,'p_condition_op','Parser.py',554),
  ('condition_op -> OR','condition_op',1,'p_condition_op','Parser.py',555),
  ('condition_op -> EQ_EQ','condition_op',1,'p_condition_op','Parser.py',556),
  ('condition_op -> NOT_EQ','condition_op',1,'p_condition_op','Parser.py',557),
  ('condition_op -> LT','condition_op',1,'p_condition_op','Parser.py',558),
  ('condition_op -> GT','condition_op',1,'p_condition_op','Parser.py',559),
  ('condition_op -> LT_EQ','condition_op',1,'p_condition_op','Parser.py',560),
  ('condition_op -> GT_EQ','condition_op',1,'p_condition_op','Parser.py',561),
  ('arithmetic_expression -> arith_term arith_tail','arithmetic_expression',2,'p_arithmetic_expression','Parser.py',568),
  ('arith_term -> literal','arith_term',1,'p_arith_term','Parser.py',577),
  ('arith_term -> var_call','arith_term',1,'p_arith_term','Parser.py',578),
  ('arith_tail -> empty','arith_tail',1,'p_arith_tail','Parser.py',584),
  ('arith_tail -> arith_op arithmetic_expression','arith_tail',2,'p_arith_tail','Parser.py',585),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','Parser.py',595),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','Parser.py',596),
  ('arith_op -> MULTIPLY','arith_op',1,'p_arith_op','Parser.py',597),
  ('arith_op -> DIVISION','arith_op',1,'p_arith_op','Parser.py',598),
  ('arith_op -> MODULO','arith_op',1,'p_arith_op','Parser.py',599),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',609),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',616),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',623),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',624),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',634),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',635),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',636),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',643),
  ('until_loop -> UNTIL LPAREN condition RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',650),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN condition RPAREN','repeat_until',9,'p_repeat_until','Parser.py',657),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',664),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',671),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',678),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',679),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',689),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',690),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',697),
  ('function_call -> output_statement','function_call',1,'p_function_call','Parser.py',698),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',708),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',709),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',719),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',720),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',730),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',731),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',738),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',739),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',751),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',752),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',762),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',769),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',778),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',779),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',789),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',790),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',791),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',792),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',793),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',794),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',801),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',802),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',812),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',813),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',829),
]
