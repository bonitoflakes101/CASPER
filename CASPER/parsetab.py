
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOT DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW PUSH RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP SPLICE STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE\n    global_dec : global_statement unli_newline global_tail     \n               | empty                            \n    \n        global_tail : global_dec\n    \n        global_statement : var_statement global_statement_tail\n    \n        var_statement : data_type IDENT list_dec\n    \n    list_dec : empty               \n             | LBRACKET RBRACKET _2d_list \n    \n    _2d_list : empty            \n             | LBRACKET RBRACKET \n    \n    global_statement_tail : empty                        \n                          | COMMA IDENT global_statement_tail \n                          | EQ global_value global_statement_tail2 \n    \n    global_statement_tail2 : COMMA IDENT global_statement_tail \n                           | empty                           \n    \n    global_value : expression   \n                 | list_value   \n    \n     list_value : LBRACKET list_element RBRACKET\n    \n    list_element : literal element_tail  \n    \n    element_tail : COMMA list_element  \n                 | empty              \n    \n    data_type : INT   \n              | FLT   \n              | BLN  \n              | CHR  \n              | STR  \n    \n    expression : factor factor_tail\n    \n    factor : var_call postfix           \n           | literal1                    \n           | TILDE INT_LIT               \n           | TILDE FLT_LIT                \n           | LPAREN expression RPAREN    \n    \n    factor_tail : PLUS factor factor_tail\n                | MINUS factor factor_tail\n                | MULTIPLY factor factor_tail\n                | DIVISION factor factor_tail\n                | MODULO factor factor_tail\n                | EXPONENT factor factor_tail\n                | GT factor factor_tail\n                | LT factor factor_tail\n                | EQ_EQ factor factor_tail\n                | GT_EQ factor factor_tail\n                | LT_EQ factor factor_tail\n                | NOT_EQ factor factor_tail\n                | AND factor factor_tail\n                | OR factor factor_tail\n                | empty\n    \n    literal : literal1\n            | literal2\n    \n    literal1 : INT_LIT\n             | FLT_LIT\n             | DAY\n             | NIGHT\n             | STR_LIT\n    \n    literal2 : CHR_LIT\n    \n    function_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE function_statements_tail  \n                        | empty                                                          \n    \n    function_statements_tail : function_statements \n                             | empty               \n    \n    ret_type : FUNCTION           \n             | function_dtype    \n    \n    function_dtype : FUNCTION_INT       \n                   | FUNCTION_FLT      \n                   | FUNCTION_CHR       \n                   | FUNCTION_BLN       \n                   | FUNCTION_STR       \n                   | FUNCTION_LIST_INT \n                   | FUNCTION_LIST_FLT  \n                   | FUNCTION_LIST_CHR \n                   | FUNCTION_LIST_STR  \n                   | FUNCTION_LIST_BLN  \n    \n    parameters : data_type IDENT parameters_tail  \n               | empty                            \n    \n    parameters_tail : COMMA data_type IDENT parameters_tail \n                    | empty                                 \n    \n    revive : REVIVE value  \n           | empty        \n    statements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | assignment_statement unli_newline statements\n                    | output_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | statements\n    \n    local_dec : var_statement local_dec_tail\n              | empty\n    \n    local_dec_tail : empty                          \n                   | COMMA IDENT local_dec_tail     \n                   | EQ local_value local_dec_tail2  \n    \n    local_dec_tail2 : COMMA IDENT local_dec_tail  \n                    | empty                      \n    \n    local_value : value      \n                | list_value  \n    \n    conditional_statement : CHECK LPAREN expression RPAREN LBRACE maybe_newline statements maybe_newline RBRACE  maybe_newline conditional_tail  maybe_newline OTHERWISE  maybe_newline LBRACE  maybe_newline statements  maybe_newline RBRACE  \n    \n    conditional_tail : OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail \n                     | empty                                            \n    \n    switch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE \n    \n    switch_condition : SHIFT value COLON statements switchcond_tail  \n    \n    switchcond_tail : switch_condition  \n                    | empty          \n    \n    loop_statement : for_loop    \n                   | until_loop  \n                   | repeat_until\n    \n    for_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE \n    \n    until_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACE  \n    \n    repeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN \n    \n    control_variable : INT IDENT EQ control_var_tail\n    \n    control_var_tail : INT_LIT   \n                     | var_call \n    \n    update : var_call update_tail  \n    \n    update_tail : postfix_op         \n                | compound_op value   \n    \n    postfix_op : PLUS_PLUS   \n               | MINUS_MINUS \n    \n    function_call : FUNCTION_NAME LPAREN arguments RPAREN  \n                  | input_statement                      \n    \n    arguments : empty                  \n              | arg_value arg_tail    \n    \n    arg_tail : COMMA arg_value arg_tail   \n             | empty                     \n    \n    arg_value : literal   \n              | var_call \n    \n    output_statement : DISPLAY value next_val   \n    \n    next_val : COMMA value next_val  \n             | empty                \n    \n    assignment_statement : IDENT assign_tail  \n    \n    assign_tail : DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN  \n                | DOT PUSH LPAREN list_element RPAREN                                  \n                | assign_op value                                                     \n    \n    assign_op : compound_op  \n              | EQ           \n    \n    compound_op : PLUS_EQ \n                | MINUS_EQ  \n                | MUL_EQ   \n                | DIV_EQ    \n                | MOD_EQ   \n    \n    start : INT_LIT \n    \n    deleteCount : empty     \n                | INT_LIT  \n    \n    splice_items : empty          \n                 | list_element  \n    \n    var_call : IDENT list_index  \n    \n    list_index : LBRACKET index RBRACKET list_index2  \n               | empty                                \n    \n    list_index2 : LBRACKET index RBRACKET \n                | empty                   \n    \n    index : INT_LIT    \n          | IDENT      \n    \n    postfix : empty        \n            | postfix_op  \n    \n    value : type_cast     \n          | expression   \n          | function_call \n    \n    type_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN \n              | CONVERT_TO_FLT LPAREN typecast_value RPAREN  \n              | CONVERT_TO_BLN LPAREN typecast_value RPAREN  \n              | CONVERT_TO_STR LPAREN typecast_value RPAREN \n    \n    typecast_value : expression                           \n                   | FUNCTION_NAME LPAREN RPAREN          \n                   | input_statement                     \n    \n    input_statement : INPUT LPAREN RPAREN  \n    empty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,153,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,24,25,27,40,41,42,43,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,67,68,83,89,90,91,92,93,94,95,97,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,154,158,159,161,166,168,169,170,172,173,177,178,179,183,184,186,187,188,194,196,197,198,199,200,201,202,203,206,207,208,214,215,216,217,220,221,222,229,230,231,232,233,234,236,246,250,251,252,254,255,268,269,270,271,272,273,274,278,279,281,287,288,290,291,292,293,300,306,313,314,317,323,324,336,339,341,342,349,355,356,362,363,365,366,368,369,372,376,377,378,380,381,383,384,],[4,-169,4,18,4,-8,-169,-5,-169,-2,18,-169,-10,-16,-169,18,-62,-3,-7,-9,-169,-169,-21,-22,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-17,-18,-20,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,4,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-19,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,18,-150,-153,-169,18,-83,18,-169,-152,-169,-169,-92,-94,18,-169,-158,-159,-160,-123,-84,4,-91,4,4,4,4,4,-108,-109,-110,-169,-169,-99,-100,-61,-63,-62,-169,-169,-169,-169,-169,-169,-133,-169,-169,-95,-96,-98,-6,-168,-85,-86,-87,-88,-89,-90,-136,-130,-132,-169,-161,-162,-163,-164,-122,-169,-97,-131,18,-169,-135,-169,18,-112,-169,-169,-113,18,-169,-134,-169,-104,18,-103,-111,18,18,-169,-169,18,-169,-102,-101,]),'FUNCTION':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,28,-2,-169,-169,-3,-7,-9,28,]),'FUNCTION_INT':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,30,-2,-169,-169,-3,-7,-9,30,]),'FUNCTION_FLT':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,31,-2,-169,-169,-3,-7,-9,31,]),'FUNCTION_CHR':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,32,-2,-169,-169,-3,-7,-9,32,]),'FUNCTION_BLN':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,33,-2,-169,-169,-3,-7,-9,33,]),'FUNCTION_STR':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,34,-2,-169,-169,-3,-7,-9,34,]),'FUNCTION_LIST_INT':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,35,-2,-169,-169,-3,-7,-9,35,]),'FUNCTION_LIST_FLT':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,36,-2,-169,-169,-3,-7,-9,36,]),'FUNCTION_LIST_CHR':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,37,-2,-169,-169,-3,-7,-9,37,]),'FUNCTION_LIST_STR':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,38,-2,-169,-169,-3,-7,-9,38,]),'FUNCTION_LIST_BLN':([3,4,5,7,15,16,17,18,19,40,41,42,184,],[-169,-4,-169,-8,-5,39,-2,-169,-169,-3,-7,-9,39,]),'MAIN_CASPER':([3,4,5,7,15,16,17,18,19,25,27,40,41,42,62,184,220,221,222,],[-169,-4,-169,-8,-5,-169,-2,-169,-169,-169,-62,-3,-7,-9,102,-169,-61,-63,-62,]),'INT':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,248,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[10,-4,-5,-2,-169,10,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,10,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,10,10,-169,-93,-169,-169,-152,10,10,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,10,10,10,10,10,10,284,10,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,10,10,10,10,10,-169,10,10,]),'FLT':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[11,-4,-5,-2,-169,11,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,11,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,11,11,-169,-93,-169,-169,-152,11,11,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,11,11,11,11,11,11,11,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,11,11,11,11,11,-169,11,11,]),'BLN':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[12,-4,-5,-2,-169,12,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,12,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,12,12,-169,-93,-169,-169,-152,12,12,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,12,12,12,12,12,12,12,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,12,12,12,12,12,-169,12,12,]),'CHR':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[13,-4,-5,-2,-169,13,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,13,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,13,13,-169,-93,-169,-169,-152,13,13,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,13,13,13,13,13,13,13,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,13,13,13,13,13,-169,13,13,]),'STR':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[14,-4,-5,-2,-169,14,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,14,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,14,14,-169,-93,-169,-169,-152,14,14,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,14,14,14,14,14,14,14,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,14,14,14,14,14,-169,14,14,]),'GHOST':([4,15,130,],[-4,-5,153,]),'SWAP':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,204,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,-169,-169,-169,-169,-169,-169,-169,-169,]),'FUNCTION_NAME':([4,15,17,18,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,175,177,178,179,181,186,187,188,194,209,214,215,216,217,223,224,225,226,229,230,231,232,233,234,238,239,240,241,242,243,244,245,250,251,252,254,268,280,287,288,290,291,292,293,306,314,317,321,324,341,342,348,356,376,377,378,],[-4,-5,-2,-169,-169,63,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,193,193,-92,-94,193,-158,-159,-160,-123,193,-169,-169,-99,-100,258,258,258,258,-169,-169,-169,-169,-169,-169,193,-137,-138,-139,-140,-141,-142,-143,-169,-95,-96,-98,-168,193,-169,-161,-162,-163,-164,-122,-97,-169,-169,193,-169,-169,-169,193,-169,-169,-169,-169,]),'IDENT':([4,9,10,11,12,13,14,15,17,18,22,23,24,40,47,49,50,52,53,54,55,56,57,58,59,60,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,93,94,95,97,98,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,157,158,159,161,166,168,169,170,171,172,173,175,177,178,179,180,181,186,187,188,194,209,214,215,216,217,223,224,225,226,227,229,230,231,232,233,234,235,238,239,240,241,242,243,244,245,247,249,250,251,252,253,254,268,280,284,287,288,290,291,292,293,295,302,306,314,316,317,321,324,325,330,341,342,348,356,371,376,377,378,],[-4,24,-27,-28,-29,-30,-31,-5,-2,-169,43,55,-169,-3,-169,-169,-34,-55,-56,55,-169,-57,-58,-59,-11,-12,104,-32,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-52,-33,-156,-157,-120,-121,-35,-36,-149,126,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,156,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,126,-150,-153,-169,-169,-93,-169,-169,182,-152,-169,55,205,-92,-94,214,55,-158,-159,-160,-123,55,-169,-169,-99,-100,55,55,55,55,55,-169,-169,-169,-169,-169,-169,275,55,-137,-138,-139,-140,-141,-142,-143,55,55,-169,-95,-96,287,-98,-168,55,303,-169,-161,-162,-163,-164,-122,55,55,-97,-169,55,-169,55,-169,55,55,-169,-169,55,-169,55,-169,-169,-169,]),'DISPLAY':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,209,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,-169,-169,-169,-169,-169,-169,-169,-169,]),'CHECK':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,210,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,-169,-169,-169,-169,-169,-169,-169,-169,]),'FOR':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,211,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,-169,-169,-169,-169,-169,-169,-169,-169,]),'UNTIL':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,305,306,314,317,324,341,342,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,212,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,318,-97,-169,-169,-169,-169,-169,-169,-169,-169,-169,]),'REPEAT':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,177,178,179,186,187,188,194,214,215,216,217,229,230,231,232,233,234,250,251,252,254,268,287,288,290,291,292,293,306,314,317,324,341,342,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,213,-92,-94,-158,-159,-160,-123,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-169,-161,-162,-163,-164,-122,-97,-169,-169,-169,-169,-169,-169,-169,-169,-169,]),'INPUT':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,168,169,170,172,173,175,177,178,179,181,186,187,188,194,209,214,215,216,217,223,224,225,226,229,230,231,232,233,234,238,239,240,241,242,243,244,245,250,251,252,254,268,280,287,288,290,291,292,293,306,314,317,321,324,341,342,348,356,376,377,378,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-93,-169,-169,-152,-169,195,195,-92,-94,195,-158,-159,-160,-123,195,-169,-169,-99,-100,195,195,195,195,-169,-169,-169,-169,-169,-169,195,-137,-138,-139,-140,-141,-142,-143,-169,-95,-96,-98,-168,195,-169,-161,-162,-163,-164,-122,-97,-169,-169,195,-169,-169,-169,195,-169,-169,-169,-169,]),'REVIVE':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,167,168,169,170,172,177,178,179,186,187,188,194,196,198,214,215,216,217,229,230,231,232,233,234,251,252,254,268,269,270,271,272,273,274,287,288,290,291,292,293,306,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,175,-83,-169,-169,-152,-169,-92,-94,-158,-159,-160,-123,-84,-91,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-85,-86,-87,-88,-89,-90,-169,-161,-162,-163,-164,-122,-97,]),'RBRACE':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,168,169,170,172,173,174,176,177,178,179,183,185,186,187,188,194,196,198,214,215,216,217,219,229,230,231,232,233,234,250,251,252,254,268,269,270,271,272,273,274,286,287,288,290,291,292,293,306,314,317,324,329,336,341,344,350,356,358,364,376,377,378,379,380,382,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-169,-169,-169,-83,-169,-169,-152,-169,184,-82,-169,-92,-94,-169,-81,-158,-159,-160,-123,-84,-91,-169,-169,-99,-100,255,-169,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-85,-86,-87,-88,-89,-90,305,-169,-161,-162,-163,-164,-122,-97,-169,-169,-169,339,-169,-169,355,358,-169,365,369,-169,-169,-169,381,-169,384,]),'SHIFT':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,168,169,170,172,177,178,179,186,187,188,194,196,198,214,215,216,217,229,230,231,232,233,234,251,252,254,268,269,270,271,272,273,274,287,288,290,291,292,293,306,309,342,351,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-83,-169,-169,-152,-169,-92,-94,-158,-159,-160,-123,-84,-91,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-85,-86,-87,-88,-89,-90,-169,-161,-162,-163,-164,-122,-97,321,-169,321,]),'OTHERWISE':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,168,169,170,172,177,178,179,186,187,188,194,196,198,214,215,216,217,229,230,231,232,233,234,251,252,254,268,269,270,271,272,273,274,287,288,290,291,292,293,306,320,342,351,355,359,360,361,363,366,368,370,381,383,],[-4,-5,-2,-169,-169,-3,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,-150,-153,-83,-169,-169,-152,-169,-92,-94,-158,-159,-160,-123,-84,-91,-169,-169,-99,-100,-169,-169,-169,-169,-169,-169,-95,-96,-98,-168,-85,-86,-87,-88,-89,-90,-169,-161,-162,-163,-164,-122,-97,331,-169,-169,-169,-105,-106,-107,-169,-169,-103,372,-169,-102,]),'COMMA':([8,24,43,44,45,46,47,49,50,52,53,55,56,57,58,59,60,68,83,85,86,87,88,89,90,91,92,93,94,95,97,99,100,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,156,158,159,170,172,182,186,187,188,194,214,215,216,217,246,265,266,267,268,287,288,290,291,292,293,300,308,310,311,322,333,334,335,],[22,-169,22,66,-21,-22,-169,-169,-34,-55,-56,-169,-57,-58,-59,-11,-12,-32,-52,121,-53,-54,-60,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,22,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-15,163,-150,-153,180,-152,163,-158,-159,-160,-123,180,253,-99,-100,280,295,-128,-129,-168,180,-161,-162,-163,-164,-122,280,295,322,-144,-169,343,-145,-146,]),'EQ':([8,24,43,59,60,100,104,128,129,152,170,205,214,287,303,],[23,-169,23,-11,-12,-169,23,-13,-14,-15,181,240,181,181,316,]),'LBRACE':([17,18,40,154,155,160,213,297,301,304,331,345,372,374,375,],[-2,-169,-3,-169,161,166,250,309,314,317,341,356,-169,376,377,]),'OTHERWISE_CHECK':([17,18,40,355,363,381,],[-2,-169,-3,-169,367,367,]),'LBRACKET':([23,24,55,100,151,181,],[48,61,98,127,157,48,]),'TILDE':([23,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,175,181,209,223,224,225,226,238,239,240,241,242,243,244,245,247,249,280,302,321,330,348,371,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-137,-138,-139,-140,-141,-142,-143,51,51,51,51,51,51,51,51,]),'LPAREN':([23,54,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,102,175,181,189,190,191,192,193,195,204,209,210,211,212,223,224,225,226,238,239,240,241,242,243,244,245,247,249,258,276,277,280,302,318,321,330,348,367,371,],[54,54,103,54,54,54,54,54,54,54,54,54,54,54,54,54,54,131,54,54,223,224,225,226,227,228,235,54,247,248,249,54,54,54,54,54,-137,-138,-139,-140,-141,-142,-143,54,54,289,298,299,54,54,330,54,54,54,371,54,]),'INT_LIT':([23,48,51,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,98,121,157,175,181,209,223,224,225,226,227,238,239,240,241,242,243,244,245,247,249,280,295,298,299,302,316,321,322,330,343,348,371,],[52,52,94,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,125,52,125,52,52,52,52,52,52,52,52,52,-137,-138,-139,-140,-141,-142,-143,52,52,52,52,311,52,52,327,52,335,52,52,52,52,]),'FLT_LIT':([23,48,51,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,175,181,209,223,224,225,226,227,238,239,240,241,242,243,244,245,247,249,280,295,299,302,321,330,343,348,371,],[53,53,95,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-137,-138,-139,-140,-141,-142,-143,53,53,53,53,53,53,53,53,53,53,53,]),'DAY':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,175,181,209,223,224,225,226,227,238,239,240,241,242,243,244,245,247,249,280,295,299,302,321,330,343,348,371,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-137,-138,-139,-140,-141,-142,-143,56,56,56,56,56,56,56,56,56,56,56,]),'NIGHT':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,175,181,209,223,224,225,226,227,238,239,240,241,242,243,244,245,247,249,280,295,299,302,321,330,343,348,371,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-137,-138,-139,-140,-141,-142,-143,57,57,57,57,57,57,57,57,57,57,57,]),'STR_LIT':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,175,181,209,223,224,225,226,227,238,239,240,241,242,243,244,245,247,249,280,295,299,302,321,330,343,348,371,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-137,-138,-139,-140,-141,-142,-143,58,58,58,58,58,58,58,58,58,58,58,]),'PLUS':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[69,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-37,-169,-150,-153,-152,]),'MINUS':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[70,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-37,-169,-150,-153,-152,]),'MULTIPLY':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[71,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-37,-169,-150,-153,-152,]),'DIVISION':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[72,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-37,-169,-150,-153,-152,]),'MODULO':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[73,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-37,-169,-150,-153,-152,]),'EXPONENT':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[74,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-37,-169,-150,-153,-152,]),'GT':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[75,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-37,-169,-150,-153,-152,]),'LT':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[76,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-37,-169,-150,-153,-152,]),'EQ_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[77,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-37,-169,-150,-153,-152,]),'GT_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[78,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-37,-169,-150,-153,-152,]),'LT_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[79,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-37,-169,-150,-153,-152,]),'NOT_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[80,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-37,-169,-150,-153,-152,]),'AND':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[81,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-37,-169,-150,-153,-152,]),'OR':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,172,],[82,-169,-34,-55,-56,-169,-57,-58,-59,-33,-156,-157,-120,-121,-35,-36,-149,-151,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-37,-169,-150,-153,-152,]),'RPAREN':([47,49,50,52,53,55,56,57,58,68,83,85,86,87,88,89,90,91,92,93,94,95,96,97,99,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,131,132,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,156,158,159,162,164,172,182,186,187,188,194,218,227,228,256,257,259,260,261,262,263,264,265,266,267,268,275,282,285,288,289,290,291,292,293,294,296,307,308,312,319,337,340,343,346,347,352,353,354,357,373,],[-169,-169,-34,-55,-56,-169,-57,-58,-59,-32,-52,-169,-53,-54,-60,-33,-156,-157,-120,-121,-35,-36,123,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-24,-26,-37,154,155,-78,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-25,-169,-169,-150,-153,-77,-80,-152,-169,-158,-159,-160,-123,-79,-169,268,288,-165,-167,290,291,292,293,-124,-169,-128,-129,-168,297,301,304,-161,307,-162,-163,-164,-122,-125,-127,-166,-169,323,-126,345,349,-169,-117,-118,362,-147,-148,-119,375,]),'SEMICOLON':([47,49,50,52,53,55,56,57,58,68,83,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,158,159,172,283,315,326,327,328,],[-169,-169,-34,-55,-56,-169,-57,-58,-59,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-150,-153,-152,302,325,-114,-115,-116,]),'COLON':([47,49,50,52,53,55,56,57,58,68,83,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,158,159,172,186,187,188,194,268,288,290,291,292,293,332,],[-169,-169,-34,-55,-56,-169,-57,-58,-59,-32,-52,-33,-156,-157,-120,-121,-35,-36,-149,-151,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-169,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-169,-150,-153,-152,-158,-159,-160,-123,-168,-161,-162,-163,-164,-122,342,]),'CHR_LIT':([48,121,227,295,299,343,],[88,88,88,88,88,88,]),'PLUS_PLUS':([49,55,97,99,151,158,159,172,338,],[92,-169,-149,-151,-169,-150,-153,-152,92,]),'MINUS_MINUS':([49,55,97,99,151,158,159,172,338,],[93,-169,-149,-151,-169,-150,-153,-152,93,]),'RBRACKET':([52,53,56,57,58,61,84,85,86,87,88,120,122,124,125,126,127,150,165,],[-55,-56,-57,-58,-59,100,119,-169,-53,-54,-60,-24,-26,151,-154,-155,152,-25,172,]),'PLUS_EQ':([55,97,99,151,158,159,172,205,338,],[-169,-149,-151,-169,-150,-153,-152,241,241,]),'MINUS_EQ':([55,97,99,151,158,159,172,205,338,],[-169,-149,-151,-169,-150,-153,-152,242,242,]),'MUL_EQ':([55,97,99,151,158,159,172,205,338,],[-169,-149,-151,-169,-150,-153,-152,243,243,]),'DIV_EQ':([55,97,99,151,158,159,172,205,338,],[-169,-149,-151,-169,-150,-153,-152,244,244,]),'MOD_EQ':([55,97,99,151,158,159,172,205,338,],[-169,-149,-151,-169,-150,-153,-152,245,245,]),'CONVERT_TO_INT':([175,181,209,238,239,240,241,242,243,244,245,280,321,348,],[189,189,189,189,-137,-138,-139,-140,-141,-142,-143,189,189,189,]),'CONVERT_TO_FLT':([175,181,209,238,239,240,241,242,243,244,245,280,321,348,],[190,190,190,190,-137,-138,-139,-140,-141,-142,-143,190,190,190,]),'CONVERT_TO_BLN':([175,181,209,238,239,240,241,242,243,244,245,280,321,348,],[191,191,191,191,-137,-138,-139,-140,-141,-142,-143,191,191,191,]),'CONVERT_TO_STR':([175,181,209,238,239,240,241,242,243,244,245,280,321,348,],[192,192,192,192,-137,-138,-139,-140,-141,-142,-143,192,192,192,]),'DOT':([205,],[237,]),'SPLICE':([237,],[276,]),'PUSH':([237,],[277,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,101,197,199,200,201,202,203,],[3,15,19,130,229,230,231,232,233,234,]),'global_dec':([3,19,],[5,42,]),'global_statement':([3,19,],[6,6,]),'empty':([3,5,8,16,18,19,24,25,43,44,47,49,55,85,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,151,154,156,161,166,167,169,170,173,177,182,183,184,214,215,227,229,230,231,232,233,234,246,250,265,287,300,308,314,317,322,324,336,341,342,343,351,355,356,363,366,372,376,377,378,380,381,],[7,17,21,27,17,7,60,17,21,67,83,90,99,122,129,134,21,83,83,83,83,83,83,83,83,83,83,83,83,83,83,159,17,164,168,17,176,17,179,168,168,164,17,222,179,254,264,168,168,168,168,168,168,281,168,296,179,281,296,17,168,334,168,17,168,168,353,361,17,168,368,17,17,17,168,168,17,368,]),'var_statement':([3,19,161,173,177,229,230,231,232,233,234,250,317,324,341,342,356,377,378,],[8,8,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,]),'data_type':([3,19,103,161,163,173,177,229,230,231,232,233,234,250,317,324,341,342,356,377,378,],[9,9,133,9,171,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'maybe_newline':([5,18,25,154,166,169,183,314,336,355,366,372,376,380,],[16,40,62,160,173,177,219,324,344,363,370,374,378,382,]),'global_statement_tail':([8,43,104,],[20,64,135,]),'function_statements':([16,184,],[25,221,]),'ret_type':([16,184,],[26,26,]),'function_dtype':([16,184,],[29,29,]),'global_tail':([19,],[41,]),'global_value':([23,],[44,]),'expression':([23,54,175,181,209,223,224,225,226,238,247,249,280,302,321,330,348,371,],[45,96,187,187,187,257,257,257,257,187,282,285,187,315,187,340,187,373,]),'list_value':([23,181,],[46,217,]),'factor':([23,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,175,181,209,223,224,225,226,238,247,249,280,302,321,330,348,371,],[47,47,105,106,107,108,109,110,111,112,113,114,115,116,117,118,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'var_call':([23,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,175,181,209,223,224,225,226,227,238,247,249,280,295,302,316,321,325,330,348,371,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,267,49,49,49,49,267,49,328,49,338,49,49,49,]),'literal1':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,175,181,209,223,224,225,226,227,238,247,249,280,295,299,302,321,330,343,348,371,],[50,86,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,86,50,50,50,50,50,50,50,86,50,50,50,50,86,86,50,50,50,86,50,50,]),'list_dec':([24,],[59,]),'global_statement_tail2':([44,],[65,]),'factor_tail':([47,105,106,107,108,109,110,111,112,113,114,115,116,117,118,],[68,136,137,138,139,140,141,142,143,144,145,146,147,148,149,]),'list_element':([48,121,299,343,],[84,150,312,354,]),'literal':([48,121,227,295,299,343,],[85,85,266,266,85,85,]),'literal2':([48,121,227,295,299,343,],[87,87,87,87,87,87,]),'postfix':([49,],[89,]),'postfix_op':([49,338,],[91,347,]),'list_index':([55,],[97,]),'main_function':([62,],[101,]),'element_tail':([85,],[120,]),'index':([98,157,],[124,165,]),'_2d_list':([100,],[128,]),'parameters':([103,],[132,]),'list_index2':([151,],[158,]),'parameters_tail':([156,182,],[162,218,]),'statements':([161,173,177,229,230,231,232,233,234,250,317,324,341,342,356,377,378,],[167,183,198,269,270,271,272,273,274,286,329,336,350,351,364,379,380,]),'local_dec':([161,173,177,229,230,231,232,233,234,250,317,324,341,342,356,377,378,],[169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,]),'revive':([167,],[174,]),'local_dec_tail':([170,214,287,],[178,251,306,]),'value':([175,181,209,238,280,321,348,],[185,216,246,278,300,332,357,]),'type_cast':([175,181,209,238,280,321,348,],[186,186,186,186,186,186,186,]),'function_call':([175,177,181,209,238,280,321,348,],[188,200,188,188,188,188,188,188,]),'input_statement':([175,177,181,209,223,224,225,226,238,280,321,348,],[194,194,194,194,259,259,259,259,194,194,194,194,]),'statements_tail':([177,],[196,]),'switch_statement':([177,],[197,]),'loop_statement':([177,],[199,]),'assignment_statement':([177,],[201,]),'output_statement':([177,],[202,]),'conditional_statement':([177,],[203,]),'for_loop':([177,],[206,]),'until_loop':([177,],[207,]),'repeat_until':([177,],[208,]),'local_value':([181,],[215,]),'function_statements_tail':([184,],[220,]),'assign_tail':([205,],[236,]),'assign_op':([205,],[238,]),'compound_op':([205,338,],[239,348,]),'local_dec_tail2':([215,],[252,]),'typecast_value':([223,224,225,226,],[256,260,261,262,]),'arguments':([227,],[263,]),'arg_value':([227,295,],[265,308,]),'next_val':([246,300,],[279,313,]),'control_variable':([248,],[283,]),'arg_tail':([265,308,],[294,319,]),'start':([298,],[310,]),'switch_condition':([309,351,],[320,360,]),'control_var_tail':([316,],[326,]),'deleteCount':([322,],[333,]),'update':([325,],[337,]),'update_tail':([338,],[346,]),'splice_items':([343,],[352,]),'switchcond_tail':([351,],[359,]),'conditional_tail':([363,381,],[366,383,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',78),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',79),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',93),
  ('global_statement -> var_statement global_statement_tail','global_statement',2,'p_global_statement','Parser.py',103),
  ('var_statement -> data_type IDENT list_dec','var_statement',3,'p_var_statement','Parser.py',116),
  ('list_dec -> empty','list_dec',1,'p_list_dec','Parser.py',131),
  ('list_dec -> LBRACKET RBRACKET _2d_list','list_dec',3,'p_list_dec','Parser.py',132),
  ('_2d_list -> empty','_2d_list',1,'p_2d_list','Parser.py',147),
  ('_2d_list -> LBRACKET RBRACKET','_2d_list',2,'p_2d_list','Parser.py',148),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',163),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',164),
  ('global_statement_tail -> EQ global_value global_statement_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',165),
  ('global_statement_tail2 -> COMMA IDENT global_statement_tail','global_statement_tail2',3,'p_global_statement_tail2','Parser.py',182),
  ('global_statement_tail2 -> empty','global_statement_tail2',1,'p_global_statement_tail2','Parser.py',183),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',198),
  ('global_value -> list_value','global_value',1,'p_global_value','Parser.py',199),
  ('list_value -> LBRACKET list_element RBRACKET','list_value',3,'p_list_value','Parser.py',209),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',221),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',230),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',231),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',248),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',249),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',250),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',251),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',252),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',262),
  ('factor -> var_call postfix','factor',2,'p_factor','Parser.py',279),
  ('factor -> literal1','factor',1,'p_factor','Parser.py',280),
  ('factor -> TILDE INT_LIT','factor',2,'p_factor','Parser.py',281),
  ('factor -> TILDE FLT_LIT','factor',2,'p_factor','Parser.py',282),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',283),
  ('factor_tail -> PLUS factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',321),
  ('factor_tail -> MINUS factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',322),
  ('factor_tail -> MULTIPLY factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',323),
  ('factor_tail -> DIVISION factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',324),
  ('factor_tail -> MODULO factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',325),
  ('factor_tail -> EXPONENT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',326),
  ('factor_tail -> GT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',327),
  ('factor_tail -> LT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',328),
  ('factor_tail -> EQ_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',329),
  ('factor_tail -> GT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',330),
  ('factor_tail -> LT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',331),
  ('factor_tail -> NOT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',332),
  ('factor_tail -> AND factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',333),
  ('factor_tail -> OR factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',334),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',335),
  ('literal -> literal1','literal',1,'p_literal','Parser.py',348),
  ('literal -> literal2','literal',1,'p_literal','Parser.py',349),
  ('literal1 -> INT_LIT','literal1',1,'p_literal1','Parser.py',364),
  ('literal1 -> FLT_LIT','literal1',1,'p_literal1','Parser.py',365),
  ('literal1 -> DAY','literal1',1,'p_literal1','Parser.py',366),
  ('literal1 -> NIGHT','literal1',1,'p_literal1','Parser.py',367),
  ('literal1 -> STR_LIT','literal1',1,'p_literal1','Parser.py',368),
  ('literal2 -> CHR_LIT','literal2',1,'p_literal2','Parser.py',374),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE statements revive RBRACE function_statements_tail','function_statements',10,'p_function_statements','Parser.py',384),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',385),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',406),
  ('function_statements_tail -> empty','function_statements_tail',1,'p_function_statements_tail','Parser.py',407),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',420),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',421),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',442),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',443),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',444),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',445),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',446),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',447),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',448),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',449),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',450),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',451),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',461),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',462),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',475),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',476),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',488),
  ('revive -> empty','revive',1,'p_revive','Parser.py',489),
  ('statements -> empty','statements',1,'p_statements','Parser.py',501),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',502),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',518),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',519),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',520),
  ('statements_tail -> assignment_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',521),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',522),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',523),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',524),
  ('local_dec -> var_statement local_dec_tail','local_dec',2,'p_local_dec','Parser.py',582),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',583),
  ('local_dec_tail -> empty','local_dec_tail',1,'p_local_dec_tail','Parser.py',602),
  ('local_dec_tail -> COMMA IDENT local_dec_tail','local_dec_tail',3,'p_local_dec_tail','Parser.py',603),
  ('local_dec_tail -> EQ local_value local_dec_tail2','local_dec_tail',3,'p_local_dec_tail','Parser.py',604),
  ('local_dec_tail2 -> COMMA IDENT local_dec_tail','local_dec_tail2',3,'p_local_dec_tail2','Parser.py',619),
  ('local_dec_tail2 -> empty','local_dec_tail2',1,'p_local_dec_tail2','Parser.py',620),
  ('local_value -> value','local_value',1,'p_local_value','Parser.py',634),
  ('local_value -> list_value','local_value',1,'p_local_value','Parser.py',635),
  ('conditional_statement -> CHECK LPAREN expression RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','conditional_statement',19,'p_conditional_statement','Parser.py',644),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_tail',8,'p_conditional_tail','Parser.py',655),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',656),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE','switch_statement',11,'p_switch_statement','Parser.py',668),
  ('switch_condition -> SHIFT value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',681),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',692),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',693),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',708),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',709),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',710),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','Parser.py',719),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',728),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',737),
  ('control_variable -> INT IDENT EQ control_var_tail','control_variable',4,'p_control_variable','Parser.py',746),
  ('control_var_tail -> INT_LIT','control_var_tail',1,'p_control_var_tail','Parser.py',757),
  ('control_var_tail -> var_call','control_var_tail',1,'p_control_var_tail','Parser.py',758),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',767),
  ('update_tail -> postfix_op','update_tail',1,'p_update_tail','Parser.py',777),
  ('update_tail -> compound_op value','update_tail',2,'p_update_tail','Parser.py',778),
  ('postfix_op -> PLUS_PLUS','postfix_op',1,'p_postfix_op','Parser.py',791),
  ('postfix_op -> MINUS_MINUS','postfix_op',1,'p_postfix_op','Parser.py',792),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',802),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',803),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',816),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',817),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',830),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',831),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',844),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',845),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',854),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',864),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',865),
  ('assignment_statement -> IDENT assign_tail','assignment_statement',2,'p_assignment_statement','Parser.py',877),
  ('assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN','assign_tail',9,'p_assign_tail','Parser.py',889),
  ('assign_tail -> DOT PUSH LPAREN list_element RPAREN','assign_tail',5,'p_assign_tail','Parser.py',890),
  ('assign_tail -> assign_op value','assign_tail',2,'p_assign_tail','Parser.py',891),
  ('assign_op -> compound_op','assign_op',1,'p_assign_op','Parser.py',907),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',908),
  ('compound_op -> PLUS_EQ','compound_op',1,'p_compound_op','Parser.py',921),
  ('compound_op -> MINUS_EQ','compound_op',1,'p_compound_op','Parser.py',922),
  ('compound_op -> MUL_EQ','compound_op',1,'p_compound_op','Parser.py',923),
  ('compound_op -> DIV_EQ','compound_op',1,'p_compound_op','Parser.py',924),
  ('compound_op -> MOD_EQ','compound_op',1,'p_compound_op','Parser.py',925),
  ('start -> INT_LIT','start',1,'p_start','Parser.py',934),
  ('deleteCount -> empty','deleteCount',1,'p_deleteCount','Parser.py',944),
  ('deleteCount -> INT_LIT','deleteCount',1,'p_deleteCount','Parser.py',945),
  ('splice_items -> empty','splice_items',1,'p_splice_items','Parser.py',958),
  ('splice_items -> list_element','splice_items',1,'p_splice_items','Parser.py',959),
  ('var_call -> IDENT list_index','var_call',2,'p_var_call','Parser.py',971),
  ('list_index -> LBRACKET index RBRACKET list_index2','list_index',4,'p_list_index','Parser.py',982),
  ('list_index -> empty','list_index',1,'p_list_index','Parser.py',983),
  ('list_index2 -> LBRACKET index RBRACKET','list_index2',3,'p_list_index2','Parser.py',996),
  ('list_index2 -> empty','list_index2',1,'p_list_index2','Parser.py',997),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',1010),
  ('index -> IDENT','index',1,'p_index','Parser.py',1011),
  ('postfix -> empty','postfix',1,'p_postfix','Parser.py',1021),
  ('postfix -> postfix_op','postfix',1,'p_postfix','Parser.py',1022),
  ('value -> type_cast','value',1,'p_value','Parser.py',1033),
  ('value -> expression','value',1,'p_value','Parser.py',1034),
  ('value -> function_call','value',1,'p_value','Parser.py',1035),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1047),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1048),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1049),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1050),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',1062),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',1063),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',1064),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',1075),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1080),
]
