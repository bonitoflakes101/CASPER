
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOT DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW PUSH RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP SPLICE STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE\n    global_dec : global_statement unli_newline global_tail     \n               | empty                            \n    \n        global_tail : global_dec\n    \n        global_statement : var_statement global_statement_tail\n    \n        var_statement : data_type IDENT list_dec\n    \n    list_dec : empty               \n             | LBRACKET RBRACKET _2d_list \n    \n    _2d_list : empty            \n             | LBRACKET RBRACKET \n    \n    global_statement_tail : empty                        \n                          | COMMA IDENT global_statement_tail \n                          | EQ global_value global_statement_tail2 \n    \n    global_statement_tail2 : COMMA IDENT global_statement_tail \n                           | empty                           \n    \n    global_value : expression   \n                 | list_value   \n    \n     list_value : LBRACKET list_element RBRACKET\n    \n    list_element : literal element_tail  \n    \n    element_tail : COMMA list_element  \n                 | empty              \n    \n    data_type : INT   \n              | FLT   \n              | BLN  \n              | CHR  \n              | STR  \n    \n    expression : factor factor_tail\n    \n    factor : var_call postfix           \n           | literal1                    \n           | TILDE INT_LIT               \n           | TILDE FLT_LIT                \n           | LPAREN expression RPAREN    \n    \n    factor_tail : PLUS factor factor_tail\n                | MINUS factor factor_tail\n                | MULTIPLY factor factor_tail\n                | DIVISION factor factor_tail\n                | MODULO factor factor_tail\n                | EXPONENT factor factor_tail\n                | GT factor factor_tail\n                | LT factor factor_tail\n                | EQ_EQ factor factor_tail\n                | GT_EQ factor factor_tail\n                | LT_EQ factor factor_tail\n                | NOT_EQ factor factor_tail\n                | AND factor factor_tail\n                | OR factor factor_tail\n                | empty\n    \n    literal : literal1\n            | literal2\n    \n    literal1 : INT_LIT\n             | FLT_LIT\n             | DAY\n             | NIGHT\n             | STR_LIT\n    \n    literal2 : CHR_LIT\n    \n    function_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail  \n                        | empty                                                          \n    \n    function_statements_tail : function_statements \n                             | empty               \n    \n    ret_type : FUNCTION           \n             | function_dtype    \n    \n    function_dtype : FUNCTION_INT       \n                   | FUNCTION_FLT      \n                   | FUNCTION_CHR       \n                   | FUNCTION_BLN       \n                   | FUNCTION_STR       \n                   | FUNCTION_LIST_INT \n                   | FUNCTION_LIST_FLT  \n                   | FUNCTION_LIST_CHR \n                   | FUNCTION_LIST_STR  \n                   | FUNCTION_LIST_BLN  \n    \n    parameters : data_type IDENT parameters_tail  \n               | empty                            \n    \n    parameters_tail : COMMA data_type IDENT parameters_tail \n                    | empty                                 \n    \n    revive : REVIVE revive_value  \n           | empty        \n    revive_value : revive_type_cast\n             | expression\n             | function_callrevive_type_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENstatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | assignment_statement unli_newline statements\n                    | output_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | statements\n    \n    local_dec : var_statement local_dec_tail\n              | empty\n    \n    local_dec_tail : empty                          \n                   | COMMA IDENT local_dec_tail     \n                   | EQ local_value local_dec_tail2  \n    \n    local_dec_tail2 : COMMA IDENT local_dec_tail  \n                    | empty                      \n    \n    local_value : local_value_value      \n                | list_value  \n    local_value_value  : local_type_cast\n             | expression\n             | function_calllocal_type_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPAREN\n    conditional_statement : CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE  maybe_newline conditional_tail  maybe_newline OTHERWISE  maybe_newline LBRACE  maybe_newline statements  maybe_newline RBRACE  \n    \n    condition : factor factor_tail\n    \n    condition_factor : var_call postfix           \n           | literal1                    \n           | TILDE INT_LIT               \n           | TILDE FLT_LIT                \n           | LPAREN condition RPAREN    \n    \n    condition_tail : PLUS condition_factor condition_tail\n                | MINUS condition_factor condition_tail\n                | MULTIPLY condition_factor condition_tail\n                | DIVISION condition_factor condition_tail\n                | MODULO condition_factor condition_tail\n                | EXPONENT condition_factor condition_tail\n                | GT condition_factor condition_tail\n                | LT condition_factor condition_tail\n                | EQ_EQ condition_factor condition_tail\n                | GT_EQ condition_factor condition_tail\n                | LT_EQ condition_factor condition_tail\n                | NOT_EQ condition_factor condition_tail\n                | AND condition_factor condition_tail\n                | OR condition_factor condition_tail\n                | empty\n    \n    condition_ : condition_literal1\n            | literal2\n    \n    condition_literal1 : INT_LIT\n             | FLT_LIT\n             | DAY\n             | NIGHT\n             | STR_LIT\n    \n    condition_literal2 : CHR_LIT\n    \n    conditional_tail : OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail \n                     | empty                                            \n    \n    switch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE \n    \n    switch_condition : SHIFT switch_value COLON statements switchcond_tail  \n    switch_value  : switch_type_cast\n             | expression\n             | function_callswitch_type_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPAREN\n    switchcond_tail : switch_condition  \n                    | empty          \n    \n    loop_statement : for_loop    \n                   | until_loop  \n                   | repeat_until\n    \n    for_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE unli_newline statements unli_newline RBRACE \n    \n    until_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACE  \n    \n    repeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN \n    \n    control_variable : INT IDENT EQ control_var_tail\n    \n    control_var_tail : INT_LIT   \n                     | var_call \n    \n    update : var_call update_tail  \n    \n    update_tail : postfix_op         \n                | compound_op value   \n    \n    postfix_op : PLUS_PLUS   \n               | MINUS_MINUS \n    \n    function_call : FUNCTION_NAME LPAREN arguments RPAREN  \n                  | input_statement                      \n    \n    arguments : empty                  \n              | arg_value arg_tail    \n    \n    arg_tail : COMMA arg_value arg_tail   \n             | empty                     \n    \n    arg_value : literal   \n              | var_call \n    \n    output_statement : DISPLAY value next_val   \n    \n    next_val : COMMA value next_val  \n             | empty                \n    \n    assignment_statement : IDENT assign_tail  \n    \n    assign_tail : DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN  \n                | DOT PUSH LPAREN list_element RPAREN                                  \n                | assign_op value                                                     \n    \n    assign_op : compound_op  \n              | EQ           \n    \n    compound_op : PLUS_EQ \n                | MINUS_EQ  \n                | MUL_EQ   \n                | DIV_EQ    \n                | MOD_EQ   \n    \n    start : INT_LIT \n    \n    deleteCount : empty     \n                | INT_LIT  \n    \n    splice_items : empty          \n                 | list_element  \n    \n    var_call : IDENT list_index  \n    \n    list_index : LBRACKET index RBRACKET list_index2  \n               | empty                                \n    \n    list_index2 : LBRACKET index RBRACKET \n                | empty                   \n    \n    index : INT_LIT    \n          | IDENT      \n    \n    postfix : empty        \n            | postfix_op  \n    \n    value : type_cast     \n          | expression   \n          | function_call \n    \n    type_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN \n              | CONVERT_TO_FLT LPAREN typecast_value RPAREN  \n              | CONVERT_TO_BLN LPAREN typecast_value RPAREN  \n              | CONVERT_TO_STR LPAREN typecast_value RPAREN \n    \n    typecast_value : expression                           \n                   | FUNCTION_NAME LPAREN RPAREN          \n                   | input_statement                     \n    \n    input_statement : INPUT LPAREN RPAREN  \n    empty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,153,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,8,15,16,17,18,19,20,21,24,25,27,40,41,42,43,44,45,46,47,49,50,52,53,55,56,57,58,59,60,64,65,67,68,83,89,90,91,92,93,94,95,97,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,154,158,159,161,166,167,169,170,171,172,173,174,176,177,178,179,180,185,187,188,189,190,191,192,193,194,195,198,199,200,202,209,210,211,212,213,214,215,220,222,223,224,225,230,231,232,233,234,235,237,248,249,250,251,259,261,262,264,269,274,275,276,277,278,279,283,289,291,302,303,311,312,313,321,325,336,337,339,340,341,342,343,344,345,351,352,353,354,355,356,359,365,367,386,389,391,392,403,413,414,424,425,426,427,428,430,431,435,437,440,441,442,444,445,447,448,],[4,-219,4,18,4,-8,-219,-5,-219,-2,18,-219,-10,-16,-219,18,-62,-3,-7,-9,-219,-219,-21,-22,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-17,-18,-20,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,4,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-19,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,18,-200,-203,18,18,-219,-202,-219,18,-90,18,-219,18,-219,-219,-99,-101,4,-82,-91,4,-98,4,4,4,4,4,-158,-159,-160,-173,-219,-219,-106,-107,-108,-109,-110,-6,-81,-83,-84,-85,-219,-219,-219,-219,-219,-219,-183,-219,-208,-209,-210,-219,-102,-103,-105,-219,-92,-93,-94,-95,-96,-97,-186,-180,-182,-218,-219,-61,-63,-62,-172,-219,-104,-111,-112,-113,-114,-86,-87,-88,-89,-181,-211,-212,-213,-214,18,-219,-185,-219,18,-162,-219,-219,-163,18,4,-184,-219,-219,-147,18,-146,4,18,-161,18,-219,-219,18,-219,-145,-115,]),'FUNCTION':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,28,-2,-219,-219,-3,-7,-9,28,]),'FUNCTION_INT':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,30,-2,-219,-219,-3,-7,-9,30,]),'FUNCTION_FLT':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,31,-2,-219,-219,-3,-7,-9,31,]),'FUNCTION_CHR':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,32,-2,-219,-219,-3,-7,-9,32,]),'FUNCTION_BLN':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,33,-2,-219,-219,-3,-7,-9,33,]),'FUNCTION_STR':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,34,-2,-219,-219,-3,-7,-9,34,]),'FUNCTION_LIST_INT':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,35,-2,-219,-219,-3,-7,-9,35,]),'FUNCTION_LIST_FLT':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,36,-2,-219,-219,-3,-7,-9,36,]),'FUNCTION_LIST_CHR':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,37,-2,-219,-219,-3,-7,-9,37,]),'FUNCTION_LIST_STR':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,38,-2,-219,-219,-3,-7,-9,38,]),'FUNCTION_LIST_BLN':([3,4,5,7,15,16,17,18,19,40,41,42,269,],[-219,-4,-219,-8,-5,39,-2,-219,-219,-3,-7,-9,39,]),'MAIN_CASPER':([3,4,5,7,15,16,17,18,19,25,27,40,41,42,62,269,311,312,313,],[-219,-4,-219,-8,-5,-219,-2,-219,-219,-219,-62,-3,-7,-9,102,-219,-61,-63,-62,]),'INT':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,257,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[10,-4,-5,-2,-219,10,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,10,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,10,-219,10,-202,10,-100,-219,-219,10,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,10,10,10,10,10,10,299,10,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,10,10,10,10,10,-219,10,10,]),'FLT':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[11,-4,-5,-2,-219,11,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,11,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,11,-219,11,-202,11,-100,-219,-219,11,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,11,11,11,11,11,11,11,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,11,11,11,11,11,-219,11,11,]),'BLN':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[12,-4,-5,-2,-219,12,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,12,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,12,-219,12,-202,12,-100,-219,-219,12,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,12,12,12,12,12,12,12,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,12,12,12,12,12,-219,12,12,]),'CHR':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[13,-4,-5,-2,-219,13,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,13,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,13,-219,13,-202,13,-100,-219,-219,13,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,13,13,13,13,13,13,13,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,13,13,13,13,13,-219,13,13,]),'STR':([3,4,15,17,18,19,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,163,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[14,-4,-5,-2,-219,14,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,14,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,14,-219,14,-202,14,-100,-219,-219,14,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,14,14,14,14,14,14,14,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,14,14,14,14,14,-219,14,14,]),'GHOST':([4,15,130,],[-4,-5,153,]),'RBRACE':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,166,169,170,172,173,174,176,178,179,180,184,188,190,202,209,210,211,212,213,214,215,221,230,231,232,233,234,235,259,261,262,264,274,275,276,277,278,279,301,302,303,321,336,337,339,340,341,356,359,367,372,386,391,398,404,416,434,440,441,442,443,444,446,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-202,-219,-90,-219,-219,-219,-219,-99,-101,220,-91,-98,-173,-219,-219,-106,-107,-108,-109,-110,269,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-92,-93,-94,-95,-96,-97,335,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,-219,389,-219,-219,413,416,427,437,-219,-219,-219,445,-219,448,]),'SWAP':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,196,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,-219,-219,-219,-219,-219,-219,-219,]),'FUNCTION_NAME':([4,15,17,18,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,182,186,202,203,209,210,211,212,213,214,215,230,231,232,233,234,235,239,240,241,242,243,244,245,246,259,261,262,264,265,266,267,268,270,271,272,273,290,292,293,294,295,302,303,321,336,337,339,340,341,356,359,363,367,391,392,393,394,395,396,402,426,440,441,442,],[-4,-5,-2,-219,-219,63,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,201,-99,-101,201,201,-173,201,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,201,-187,-188,-189,-190,-191,-192,-193,-219,-102,-103,-105,306,306,306,306,306,306,306,306,201,306,306,306,306,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,201,-219,-219,-219,306,306,306,306,201,-219,-219,-219,-219,]),'IDENT':([4,9,10,11,12,13,14,15,17,18,22,23,24,40,47,49,50,52,53,54,55,56,57,58,59,60,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,93,94,95,97,98,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,157,158,159,161,166,167,168,169,170,172,173,174,178,179,180,181,182,186,202,203,209,210,211,212,213,214,215,230,231,232,233,234,235,236,239,240,241,242,243,244,245,246,247,256,258,259,261,262,263,264,265,266,267,268,270,271,272,273,290,292,293,294,295,299,302,303,321,323,332,336,337,339,340,341,356,358,359,363,367,368,373,391,392,393,394,395,396,402,426,433,440,441,442,],[-4,24,-27,-28,-29,-30,-31,-5,-2,-219,43,55,-219,-3,-219,-219,-34,-55,-56,55,-219,-57,-58,-59,-11,-12,104,-32,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-52,-33,-206,-207,-170,-171,-35,-36,-199,126,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,156,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,126,-200,-203,-219,-219,-219,175,-202,-219,-100,-219,-219,197,-99,-101,209,55,55,-173,55,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,280,55,-187,-188,-189,-190,-191,-192,-193,55,55,55,-219,-102,-103,303,-105,55,55,55,55,55,55,55,55,55,55,55,55,55,333,-218,-219,-172,55,55,-104,-111,-112,-113,-114,-219,55,-219,55,-219,55,55,-219,-219,55,55,55,55,55,-219,55,-219,-219,-219,]),'DISPLAY':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,203,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,-219,-219,-219,-219,-219,-219,-219,]),'CHECK':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,204,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,-219,-219,-219,-219,-219,-219,-219,]),'FOR':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,205,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,-219,-219,-219,-219,-219,-219,-219,]),'UNTIL':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,335,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,206,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-218,-219,-172,360,-104,-111,-112,-113,-114,-219,-219,-219,-219,-219,-219,-219,-219,-219,]),'REPEAT':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,202,209,210,211,212,213,214,215,230,231,232,233,234,235,259,261,262,264,302,303,321,336,337,339,340,341,356,359,367,391,392,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,207,-99,-101,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-219,-102,-103,-105,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,-219,-219,-219,-219,-219,-219,-219,]),'INPUT':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,166,167,169,170,172,173,174,178,179,180,182,186,202,203,209,210,211,212,213,214,215,230,231,232,233,234,235,239,240,241,242,243,244,245,246,259,261,262,264,265,266,267,268,270,271,272,273,290,292,293,294,295,302,303,321,336,337,339,340,341,356,359,363,367,391,392,393,394,395,396,402,426,440,441,442,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-219,-202,-219,-100,-219,-219,208,-99,-101,208,208,-173,208,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,208,-187,-188,-189,-190,-191,-192,-193,-219,-102,-103,-105,208,208,208,208,208,208,208,208,208,208,208,208,208,-218,-219,-172,-104,-111,-112,-113,-114,-219,-219,208,-219,-219,-219,208,208,208,208,208,-219,-219,-219,-219,]),'REVIVE':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,161,167,169,171,172,173,174,177,178,179,180,188,190,202,209,210,211,212,213,214,215,230,231,232,233,234,235,261,262,264,274,275,276,277,278,279,302,303,321,336,337,339,340,341,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-219,-219,-202,-219,-90,-219,-219,186,-219,-99,-101,-91,-98,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-102,-103,-105,-92,-93,-94,-95,-96,-97,-218,-219,-172,-104,-111,-112,-113,-114,]),'SHIFT':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,169,172,173,174,178,179,180,188,190,202,209,210,211,212,213,214,215,230,231,232,233,234,235,261,262,264,274,275,276,277,278,279,302,303,321,336,337,339,340,341,346,392,405,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-202,-90,-219,-219,-219,-99,-101,-91,-98,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-102,-103,-105,-92,-93,-94,-95,-96,-97,-218,-219,-172,-104,-111,-112,-113,-114,363,-219,363,]),'OTHERWISE':([4,15,17,18,24,40,47,49,50,52,53,55,56,57,58,59,60,68,83,89,90,91,92,93,94,95,97,99,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,158,159,169,172,173,174,178,179,180,188,190,202,209,210,211,212,213,214,215,230,231,232,233,234,235,261,262,264,274,275,276,277,278,279,302,303,321,336,337,339,340,341,362,392,405,413,417,418,419,425,428,430,432,445,447,],[-4,-5,-2,-219,-219,-3,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,-200,-203,-202,-90,-219,-219,-219,-99,-101,-91,-98,-173,-219,-219,-106,-107,-108,-109,-110,-219,-219,-219,-219,-219,-219,-102,-103,-105,-92,-93,-94,-95,-96,-97,-218,-219,-172,-104,-111,-112,-113,-114,374,-219,-219,-219,-148,-156,-157,-219,-219,-146,435,-219,-145,]),'COMMA':([8,24,43,44,45,46,47,49,50,52,53,55,56,57,58,59,60,68,83,85,86,87,88,89,90,91,92,93,94,95,97,99,100,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,156,158,159,169,174,175,202,209,210,211,212,213,214,215,248,249,250,251,286,287,288,302,303,321,325,337,339,340,341,347,348,350,352,353,354,355,364,383,384,385,],[22,-219,22,66,-21,-22,-219,-219,-34,-55,-56,-219,-57,-58,-59,-11,-12,-32,-52,121,-53,-54,-60,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,22,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-23,-37,-13,-14,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-15,163,-200,-203,-202,181,163,-173,181,263,-106,-107,-108,-109,-110,290,-208,-209,-210,323,-178,-179,-218,181,-172,290,-111,-112,-113,-114,364,-194,323,-211,-212,-213,-214,-219,397,-195,-196,]),'EQ':([8,24,43,59,60,100,104,128,129,152,174,197,209,303,333,],[23,-219,23,-11,-12,-219,23,-13,-14,-15,182,241,182,182,358,]),'LBRACE':([17,18,40,154,155,160,207,318,330,334,374,399,435,438,439,],[-2,-219,-3,-219,161,166,259,346,356,359,391,414,-219,440,441,]),'OTHERWISE_CHECK':([17,18,40,413,425,445,],[-2,-219,-3,-219,429,429,]),'LBRACKET':([23,24,55,100,151,182,],[48,61,98,127,157,48,]),'TILDE':([23,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,182,186,203,239,240,241,242,243,244,245,246,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,332,363,373,393,394,395,396,402,433,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-187,-188,-189,-190,-191,-192,-193,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'LPAREN':([23,54,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,102,182,186,196,201,203,204,205,206,208,216,217,218,219,226,227,228,229,239,240,241,242,243,244,245,246,252,253,254,255,256,258,265,266,267,268,270,271,272,273,281,282,290,292,293,294,295,306,332,360,363,373,379,380,381,382,393,394,395,396,402,429,433,],[54,54,103,54,54,54,54,54,54,54,54,54,54,54,54,54,54,131,54,54,236,247,54,256,257,258,260,265,266,267,268,270,271,272,273,54,-187,-188,-189,-190,-191,-192,-193,292,293,294,295,54,54,54,54,54,54,54,54,54,54,319,320,54,54,54,54,54,338,54,373,54,54,393,394,395,396,54,54,54,54,54,433,54,]),'INT_LIT':([23,48,51,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,98,121,157,182,186,203,239,240,241,242,243,244,245,246,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,319,320,323,332,358,363,364,373,393,394,395,396,397,402,433,],[52,52,94,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,125,52,125,52,52,52,52,-187,-188,-189,-190,-191,-192,-193,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,348,52,52,52,370,52,385,52,52,52,52,52,52,52,52,]),'FLT_LIT':([23,48,51,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,182,186,203,239,240,241,242,243,244,245,246,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,320,323,332,363,373,393,394,395,396,397,402,433,],[53,53,95,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-187,-188,-189,-190,-191,-192,-193,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'DAY':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,182,186,203,239,240,241,242,243,244,245,246,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,320,323,332,363,373,393,394,395,396,397,402,433,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-187,-188,-189,-190,-191,-192,-193,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'NIGHT':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,182,186,203,239,240,241,242,243,244,245,246,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,320,323,332,363,373,393,394,395,396,397,402,433,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-187,-188,-189,-190,-191,-192,-193,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'STR_LIT':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,182,186,203,239,240,241,242,243,244,245,246,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,320,323,332,363,373,393,394,395,396,397,402,433,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-187,-188,-189,-190,-191,-192,-193,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'PLUS':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[69,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-37,-219,-200,-203,-202,69,]),'MINUS':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[70,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-37,-219,-200,-203,-202,70,]),'MULTIPLY':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[71,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-37,-219,-200,-203,-202,71,]),'DIVISION':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[72,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-37,-219,-200,-203,-202,72,]),'MODULO':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[73,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-37,-219,-200,-203,-202,73,]),'EXPONENT':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[74,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-37,-219,-200,-203,-202,74,]),'GT':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[75,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-37,-219,-200,-203,-202,75,]),'LT':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[76,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-37,-219,-200,-203,-202,76,]),'EQ_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[77,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-37,-219,-200,-203,-202,77,]),'GT_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[78,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-37,-219,-200,-203,-202,78,]),'LT_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[79,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-37,-219,-200,-203,-202,79,]),'NOT_EQ':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[80,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-37,-219,-200,-203,-202,80,]),'AND':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[81,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-37,-219,-200,-203,-202,81,]),'OR':([47,49,50,52,53,55,56,57,58,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,151,158,159,169,297,],[82,-219,-34,-55,-56,-219,-57,-58,-59,-33,-206,-207,-170,-171,-35,-36,-199,-201,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-37,-219,-200,-203,-202,82,]),'RPAREN':([47,49,50,52,53,55,56,57,58,68,83,85,86,87,88,89,90,91,92,93,94,95,96,97,99,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,131,132,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,156,158,159,162,164,169,175,183,202,247,249,250,251,260,280,284,285,286,287,288,296,297,300,302,304,305,307,308,309,310,314,315,316,317,321,322,324,326,327,328,329,331,338,349,350,352,353,354,355,361,366,387,390,397,400,401,406,407,408,409,410,411,412,415,436,],[-219,-219,-34,-55,-56,-219,-57,-58,-59,-32,-52,-219,-53,-54,-60,-33,-206,-207,-170,-171,-35,-36,123,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-24,-26,-37,154,155,-78,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-25,-219,-219,-200,-203,-77,-80,-202,-219,-79,-173,-219,-208,-209,-210,302,318,321,-174,-219,-178,-179,330,-219,334,-218,337,-215,-217,339,340,341,342,343,344,345,-172,-175,-177,352,353,354,355,-116,361,365,-219,-211,-212,-213,-214,-216,-176,399,403,-219,-167,-168,420,421,422,423,424,-197,-198,-169,439,]),'SEMICOLON':([47,49,50,52,53,55,56,57,58,68,83,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,158,159,169,298,357,369,370,371,],[-219,-219,-34,-55,-56,-219,-57,-58,-59,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-200,-203,-202,332,368,-164,-165,-166,]),'COLON':([47,49,50,52,53,55,56,57,58,68,83,89,90,91,92,93,94,95,97,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,158,159,169,202,302,321,375,376,377,378,420,421,422,423,],[-219,-219,-34,-55,-56,-219,-57,-58,-59,-32,-52,-33,-206,-207,-170,-171,-35,-36,-199,-201,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-219,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-219,-200,-203,-202,-173,-218,-172,392,-149,-150,-151,-152,-153,-154,-155,]),'CHR_LIT':([48,121,247,320,323,397,],[88,88,88,88,88,88,]),'PLUS_PLUS':([49,55,97,99,151,158,159,169,388,],[92,-219,-199,-201,-219,-200,-203,-202,92,]),'MINUS_MINUS':([49,55,97,99,151,158,159,169,388,],[93,-219,-199,-201,-219,-200,-203,-202,93,]),'RBRACKET':([52,53,56,57,58,61,84,85,86,87,88,120,122,124,125,126,127,150,165,],[-55,-56,-57,-58,-59,100,119,-219,-53,-54,-60,-24,-26,151,-204,-205,152,-25,169,]),'PLUS_EQ':([55,97,99,151,158,159,169,197,388,],[-219,-199,-201,-219,-200,-203,-202,242,242,]),'MINUS_EQ':([55,97,99,151,158,159,169,197,388,],[-219,-199,-201,-219,-200,-203,-202,243,243,]),'MUL_EQ':([55,97,99,151,158,159,169,197,388,],[-219,-199,-201,-219,-200,-203,-202,244,244,]),'DIV_EQ':([55,97,99,151,158,159,169,197,388,],[-219,-199,-201,-219,-200,-203,-202,245,245,]),'MOD_EQ':([55,97,99,151,158,159,169,197,388,],[-219,-199,-201,-219,-200,-203,-202,246,246,]),'CONVERT_TO_INT':([182,186,203,239,240,241,242,243,244,245,246,290,363,402,],[216,226,252,252,-187,-188,-189,-190,-191,-192,-193,252,379,252,]),'CONVERT_TO_FLT':([182,186,203,239,240,241,242,243,244,245,246,290,363,402,],[217,227,253,253,-187,-188,-189,-190,-191,-192,-193,253,380,253,]),'CONVERT_TO_BLN':([182,186,203,239,240,241,242,243,244,245,246,290,363,402,],[218,228,254,254,-187,-188,-189,-190,-191,-192,-193,254,381,254,]),'CONVERT_TO_STR':([182,186,203,239,240,241,242,243,244,245,246,290,363,402,],[219,229,255,255,-187,-188,-189,-190,-191,-192,-193,255,382,255,]),'DOT':([197,],[238,]),'SPLICE':([238,],[281,]),'PUSH':([238,],[282,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,101,185,189,191,192,193,194,195,414,431,],[3,15,19,130,221,230,231,232,233,234,235,426,434,]),'global_dec':([3,19,],[5,42,]),'global_statement':([3,19,],[6,6,]),'empty':([3,5,8,16,18,19,24,25,43,44,47,49,55,85,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,151,154,156,161,166,167,170,171,173,174,175,176,177,178,209,210,230,231,232,233,234,235,247,248,259,269,286,297,303,325,350,356,359,364,367,386,391,392,397,405,413,425,426,428,435,440,441,442,444,445,],[7,17,21,27,17,7,60,17,21,67,83,90,99,122,129,134,21,83,83,83,83,83,83,83,83,83,83,83,83,83,83,159,17,164,17,17,172,172,17,17,180,164,17,187,172,180,264,172,172,172,172,172,172,285,291,172,313,324,83,180,291,324,17,172,384,172,17,172,172,411,419,17,430,172,17,17,17,172,172,17,430,]),'var_statement':([3,19,167,170,178,230,231,232,233,234,235,259,359,367,391,392,426,441,442,],[8,8,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,]),'data_type':([3,19,103,163,167,170,178,230,231,232,233,234,235,259,359,367,391,392,426,441,442,],[9,9,133,168,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'maybe_newline':([5,18,25,154,161,166,171,173,176,356,386,413,428,435,440,444,],[16,40,62,160,167,170,177,178,184,367,398,425,432,438,442,446,]),'global_statement_tail':([8,43,104,],[20,64,135,]),'function_statements':([16,269,],[25,312,]),'ret_type':([16,269,],[26,26,]),'function_dtype':([16,269,],[29,29,]),'global_tail':([19,],[41,]),'global_value':([23,],[44,]),'expression':([23,54,182,186,203,239,258,265,266,267,268,270,271,272,273,290,292,293,294,295,332,363,373,393,394,395,396,402,433,],[45,96,214,224,250,250,300,305,305,305,305,305,305,305,305,250,305,305,305,305,357,377,390,305,305,305,305,250,436,]),'list_value':([23,182,],[46,212,]),'factor':([23,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,182,186,203,239,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,332,363,373,393,394,395,396,402,433,],[47,47,105,106,107,108,109,110,111,112,113,114,115,116,117,118,47,47,47,47,297,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'var_call':([23,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,182,186,203,239,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,323,332,358,363,368,373,393,394,395,396,402,433,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,288,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,288,49,371,49,388,49,49,49,49,49,49,49,]),'literal1':([23,48,54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,121,182,186,203,239,247,256,258,265,266,267,268,270,271,272,273,290,292,293,294,295,320,323,332,363,373,393,394,395,396,397,402,433,],[50,86,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,86,50,50,50,50,86,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,86,86,50,50,50,50,50,50,50,86,50,50,]),'list_dec':([24,],[59,]),'global_statement_tail2':([44,],[65,]),'factor_tail':([47,105,106,107,108,109,110,111,112,113,114,115,116,117,118,297,],[68,136,137,138,139,140,141,142,143,144,145,146,147,148,149,331,]),'list_element':([48,121,320,397,],[84,150,349,412,]),'literal':([48,121,247,320,323,397,],[85,85,287,85,287,85,]),'literal2':([48,121,247,320,323,397,],[87,87,87,87,87,87,]),'postfix':([49,],[89,]),'postfix_op':([49,388,],[91,401,]),'list_index':([55,],[97,]),'main_function':([62,],[101,]),'element_tail':([85,],[120,]),'index':([98,157,],[124,165,]),'_2d_list':([100,],[128,]),'parameters':([103,],[132,]),'list_index2':([151,],[158,]),'parameters_tail':([156,175,],[162,183,]),'statements':([167,170,178,230,231,232,233,234,235,259,359,367,391,392,426,441,442,],[171,176,190,274,275,276,277,278,279,301,372,386,404,405,431,443,444,]),'local_dec':([167,170,178,230,231,232,233,234,235,259,359,367,391,392,426,441,442,],[173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,]),'local_dec_tail':([174,209,303,],[179,261,336,]),'revive':([177,],[185,]),'statements_tail':([178,],[188,]),'switch_statement':([178,],[189,]),'loop_statement':([178,],[191,]),'function_call':([178,182,186,203,239,290,363,402,],[192,215,225,251,251,251,378,251,]),'assignment_statement':([178,],[193,]),'output_statement':([178,],[194,]),'conditional_statement':([178,],[195,]),'for_loop':([178,],[198,]),'until_loop':([178,],[199,]),'repeat_until':([178,],[200,]),'input_statement':([178,182,186,203,239,265,266,267,268,270,271,272,273,290,292,293,294,295,363,393,394,395,396,402,],[202,202,202,202,202,307,307,307,307,307,307,307,307,202,307,307,307,307,202,307,307,307,307,202,]),'local_value':([182,],[210,]),'local_value_value':([182,],[211,]),'local_type_cast':([182,],[213,]),'revive_value':([186,],[222,]),'revive_type_cast':([186,],[223,]),'assign_tail':([197,],[237,]),'assign_op':([197,],[239,]),'compound_op':([197,388,],[240,402,]),'value':([203,239,290,402,],[248,283,325,415,]),'type_cast':([203,239,290,402,],[249,249,249,249,]),'local_dec_tail2':([210,],[262,]),'arguments':([247,],[284,]),'arg_value':([247,323,],[286,350,]),'next_val':([248,325,],[289,351,]),'condition':([256,],[296,]),'control_variable':([257,],[298,]),'typecast_value':([265,266,267,268,270,271,272,273,292,293,294,295,393,394,395,396,],[304,308,309,310,314,315,316,317,326,327,328,329,406,407,408,409,]),'function_statements_tail':([269,],[311,]),'arg_tail':([286,350,],[322,366,]),'start':([319,],[347,]),'switch_condition':([346,405,],[362,418,]),'control_var_tail':([358,],[369,]),'switch_value':([363,],[375,]),'switch_type_cast':([363,],[376,]),'deleteCount':([364,],[383,]),'update':([368,],[387,]),'update_tail':([388,],[400,]),'splice_items':([397,],[410,]),'switchcond_tail':([405,],[417,]),'conditional_tail':([425,445,],[428,447,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',78),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',79),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',93),
  ('global_statement -> var_statement global_statement_tail','global_statement',2,'p_global_statement','Parser.py',103),
  ('var_statement -> data_type IDENT list_dec','var_statement',3,'p_var_statement','Parser.py',116),
  ('list_dec -> empty','list_dec',1,'p_list_dec','Parser.py',131),
  ('list_dec -> LBRACKET RBRACKET _2d_list','list_dec',3,'p_list_dec','Parser.py',132),
  ('_2d_list -> empty','_2d_list',1,'p_2d_list','Parser.py',147),
  ('_2d_list -> LBRACKET RBRACKET','_2d_list',2,'p_2d_list','Parser.py',148),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',163),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',164),
  ('global_statement_tail -> EQ global_value global_statement_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',165),
  ('global_statement_tail2 -> COMMA IDENT global_statement_tail','global_statement_tail2',3,'p_global_statement_tail2','Parser.py',182),
  ('global_statement_tail2 -> empty','global_statement_tail2',1,'p_global_statement_tail2','Parser.py',183),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',198),
  ('global_value -> list_value','global_value',1,'p_global_value','Parser.py',199),
  ('list_value -> LBRACKET list_element RBRACKET','list_value',3,'p_list_value','Parser.py',209),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',221),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',230),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',231),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',248),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',249),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',250),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',251),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',252),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',262),
  ('factor -> var_call postfix','factor',2,'p_factor','Parser.py',279),
  ('factor -> literal1','factor',1,'p_factor','Parser.py',280),
  ('factor -> TILDE INT_LIT','factor',2,'p_factor','Parser.py',281),
  ('factor -> TILDE FLT_LIT','factor',2,'p_factor','Parser.py',282),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',283),
  ('factor_tail -> PLUS factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',321),
  ('factor_tail -> MINUS factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',322),
  ('factor_tail -> MULTIPLY factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',323),
  ('factor_tail -> DIVISION factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',324),
  ('factor_tail -> MODULO factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',325),
  ('factor_tail -> EXPONENT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',326),
  ('factor_tail -> GT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',327),
  ('factor_tail -> LT factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',328),
  ('factor_tail -> EQ_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',329),
  ('factor_tail -> GT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',330),
  ('factor_tail -> LT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',331),
  ('factor_tail -> NOT_EQ factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',332),
  ('factor_tail -> AND factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',333),
  ('factor_tail -> OR factor factor_tail','factor_tail',3,'p_factor_tail','Parser.py',334),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',335),
  ('literal -> literal1','literal',1,'p_literal','Parser.py',348),
  ('literal -> literal2','literal',1,'p_literal','Parser.py',349),
  ('literal1 -> INT_LIT','literal1',1,'p_literal1','Parser.py',364),
  ('literal1 -> FLT_LIT','literal1',1,'p_literal1','Parser.py',365),
  ('literal1 -> DAY','literal1',1,'p_literal1','Parser.py',366),
  ('literal1 -> NIGHT','literal1',1,'p_literal1','Parser.py',367),
  ('literal1 -> STR_LIT','literal1',1,'p_literal1','Parser.py',368),
  ('literal2 -> CHR_LIT','literal2',1,'p_literal2','Parser.py',374),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements maybe_newline revive unli_newline RBRACE function_statements_tail','function_statements',13,'p_function_statements','Parser.py',384),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',385),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',409),
  ('function_statements_tail -> empty','function_statements_tail',1,'p_function_statements_tail','Parser.py',410),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',423),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',424),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',445),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',446),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',447),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',448),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',449),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',450),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',451),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',452),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',453),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',454),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',464),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',465),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',478),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',479),
  ('revive -> REVIVE revive_value','revive',2,'p_revive','Parser.py',491),
  ('revive -> empty','revive',1,'p_revive','Parser.py',492),
  ('revive_value -> revive_type_cast','revive_value',1,'p_revive_value','Parser.py',500),
  ('revive_value -> expression','revive_value',1,'p_revive_value','Parser.py',501),
  ('revive_value -> function_call','revive_value',1,'p_revive_value','Parser.py',502),
  ('revive_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','revive_type_cast',4,'p_revive_type_cast','Parser.py',506),
  ('revive_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','revive_type_cast',4,'p_revive_type_cast','Parser.py',507),
  ('revive_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','revive_type_cast',4,'p_revive_type_cast','Parser.py',508),
  ('revive_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','revive_type_cast',4,'p_revive_type_cast','Parser.py',509),
  ('statements -> empty','statements',1,'p_statements','Parser.py',516),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',517),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',533),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',534),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',535),
  ('statements_tail -> assignment_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',536),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',537),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',538),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',539),
  ('local_dec -> var_statement local_dec_tail','local_dec',2,'p_local_dec','Parser.py',597),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',598),
  ('local_dec_tail -> empty','local_dec_tail',1,'p_local_dec_tail','Parser.py',617),
  ('local_dec_tail -> COMMA IDENT local_dec_tail','local_dec_tail',3,'p_local_dec_tail','Parser.py',618),
  ('local_dec_tail -> EQ local_value local_dec_tail2','local_dec_tail',3,'p_local_dec_tail','Parser.py',619),
  ('local_dec_tail2 -> COMMA IDENT local_dec_tail','local_dec_tail2',3,'p_local_dec_tail2','Parser.py',634),
  ('local_dec_tail2 -> empty','local_dec_tail2',1,'p_local_dec_tail2','Parser.py',635),
  ('local_value -> local_value_value','local_value',1,'p_local_value','Parser.py',649),
  ('local_value -> list_value','local_value',1,'p_local_value','Parser.py',650),
  ('local_value_value -> local_type_cast','local_value_value',1,'p_local_value_value','Parser.py',655),
  ('local_value_value -> expression','local_value_value',1,'p_local_value_value','Parser.py',656),
  ('local_value_value -> function_call','local_value_value',1,'p_local_value_value','Parser.py',657),
  ('local_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','local_type_cast',4,'p_local_type_cast','Parser.py',661),
  ('local_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','local_type_cast',4,'p_local_type_cast','Parser.py',662),
  ('local_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','local_type_cast',4,'p_local_type_cast','Parser.py',663),
  ('local_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','local_type_cast',4,'p_local_type_cast','Parser.py',664),
  ('conditional_statement -> CHECK LPAREN condition RPAREN LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','conditional_statement',19,'p_conditional_statement','Parser.py',671),
  ('condition -> factor factor_tail','condition',2,'p_condition','Parser.py',677),
  ('condition_factor -> var_call postfix','condition_factor',2,'p_condition_factor','Parser.py',686),
  ('condition_factor -> literal1','condition_factor',1,'p_condition_factor','Parser.py',687),
  ('condition_factor -> TILDE INT_LIT','condition_factor',2,'p_condition_factor','Parser.py',688),
  ('condition_factor -> TILDE FLT_LIT','condition_factor',2,'p_condition_factor','Parser.py',689),
  ('condition_factor -> LPAREN condition RPAREN','condition_factor',3,'p_condition_factor','Parser.py',690),
  ('condition_tail -> PLUS condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',710),
  ('condition_tail -> MINUS condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',711),
  ('condition_tail -> MULTIPLY condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',712),
  ('condition_tail -> DIVISION condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',713),
  ('condition_tail -> MODULO condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',714),
  ('condition_tail -> EXPONENT condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',715),
  ('condition_tail -> GT condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',716),
  ('condition_tail -> LT condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',717),
  ('condition_tail -> EQ_EQ condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',718),
  ('condition_tail -> GT_EQ condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',719),
  ('condition_tail -> LT_EQ condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',720),
  ('condition_tail -> NOT_EQ condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',721),
  ('condition_tail -> AND condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',722),
  ('condition_tail -> OR condition_factor condition_tail','condition_tail',3,'p_condition_tail','Parser.py',723),
  ('condition_tail -> empty','condition_tail',1,'p_condition_tail','Parser.py',724),
  ('condition_ -> condition_literal1','condition_',1,'p_condition_literal','Parser.py',733),
  ('condition_ -> literal2','condition_',1,'p_condition_literal','Parser.py',734),
  ('condition_literal1 -> INT_LIT','condition_literal1',1,'p_condition_literal1','Parser.py',741),
  ('condition_literal1 -> FLT_LIT','condition_literal1',1,'p_condition_literal1','Parser.py',742),
  ('condition_literal1 -> DAY','condition_literal1',1,'p_condition_literal1','Parser.py',743),
  ('condition_literal1 -> NIGHT','condition_literal1',1,'p_condition_literal1','Parser.py',744),
  ('condition_literal1 -> STR_LIT','condition_literal1',1,'p_condition_literal1','Parser.py',745),
  ('condition_literal2 -> CHR_LIT','condition_literal2',1,'p_condition_literal2','Parser.py',751),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_tail',8,'p_conditional_tail','Parser.py',762),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',763),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE LBRACE statements RBRACE RBRACE','switch_statement',11,'p_switch_statement','Parser.py',775),
  ('switch_condition -> SHIFT switch_value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',788),
  ('switch_value -> switch_type_cast','switch_value',1,'p_switch_value','Parser.py',793),
  ('switch_value -> expression','switch_value',1,'p_switch_value','Parser.py',794),
  ('switch_value -> function_call','switch_value',1,'p_switch_value','Parser.py',795),
  ('switch_type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','switch_type_cast',4,'p_switch_type_cast','Parser.py',799),
  ('switch_type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','switch_type_cast',4,'p_switch_type_cast','Parser.py',800),
  ('switch_type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','switch_type_cast',4,'p_switch_type_cast','Parser.py',801),
  ('switch_type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','switch_type_cast',4,'p_switch_type_cast','Parser.py',802),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',810),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',811),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',826),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',827),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',828),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE unli_newline statements unli_newline RBRACE','for_loop',13,'p_for_loop','Parser.py',837),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',846),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',855),
  ('control_variable -> INT IDENT EQ control_var_tail','control_variable',4,'p_control_variable','Parser.py',864),
  ('control_var_tail -> INT_LIT','control_var_tail',1,'p_control_var_tail','Parser.py',875),
  ('control_var_tail -> var_call','control_var_tail',1,'p_control_var_tail','Parser.py',876),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',885),
  ('update_tail -> postfix_op','update_tail',1,'p_update_tail','Parser.py',895),
  ('update_tail -> compound_op value','update_tail',2,'p_update_tail','Parser.py',896),
  ('postfix_op -> PLUS_PLUS','postfix_op',1,'p_postfix_op','Parser.py',909),
  ('postfix_op -> MINUS_MINUS','postfix_op',1,'p_postfix_op','Parser.py',910),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',920),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',921),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',934),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',935),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',948),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',949),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',962),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',963),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',972),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',982),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',983),
  ('assignment_statement -> IDENT assign_tail','assignment_statement',2,'p_assignment_statement','Parser.py',995),
  ('assign_tail -> DOT SPLICE LPAREN start COMMA deleteCount COMMA splice_items RPAREN','assign_tail',9,'p_assign_tail','Parser.py',1007),
  ('assign_tail -> DOT PUSH LPAREN list_element RPAREN','assign_tail',5,'p_assign_tail','Parser.py',1008),
  ('assign_tail -> assign_op value','assign_tail',2,'p_assign_tail','Parser.py',1009),
  ('assign_op -> compound_op','assign_op',1,'p_assign_op','Parser.py',1025),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',1026),
  ('compound_op -> PLUS_EQ','compound_op',1,'p_compound_op','Parser.py',1039),
  ('compound_op -> MINUS_EQ','compound_op',1,'p_compound_op','Parser.py',1040),
  ('compound_op -> MUL_EQ','compound_op',1,'p_compound_op','Parser.py',1041),
  ('compound_op -> DIV_EQ','compound_op',1,'p_compound_op','Parser.py',1042),
  ('compound_op -> MOD_EQ','compound_op',1,'p_compound_op','Parser.py',1043),
  ('start -> INT_LIT','start',1,'p_start','Parser.py',1052),
  ('deleteCount -> empty','deleteCount',1,'p_deleteCount','Parser.py',1062),
  ('deleteCount -> INT_LIT','deleteCount',1,'p_deleteCount','Parser.py',1063),
  ('splice_items -> empty','splice_items',1,'p_splice_items','Parser.py',1076),
  ('splice_items -> list_element','splice_items',1,'p_splice_items','Parser.py',1077),
  ('var_call -> IDENT list_index','var_call',2,'p_var_call','Parser.py',1089),
  ('list_index -> LBRACKET index RBRACKET list_index2','list_index',4,'p_list_index','Parser.py',1100),
  ('list_index -> empty','list_index',1,'p_list_index','Parser.py',1101),
  ('list_index2 -> LBRACKET index RBRACKET','list_index2',3,'p_list_index2','Parser.py',1114),
  ('list_index2 -> empty','list_index2',1,'p_list_index2','Parser.py',1115),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',1128),
  ('index -> IDENT','index',1,'p_index','Parser.py',1129),
  ('postfix -> empty','postfix',1,'p_postfix','Parser.py',1139),
  ('postfix -> postfix_op','postfix',1,'p_postfix','Parser.py',1140),
  ('value -> type_cast','value',1,'p_value','Parser.py',1151),
  ('value -> expression','value',1,'p_value','Parser.py',1152),
  ('value -> function_call','value',1,'p_value','Parser.py',1153),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1165),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1166),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1167),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',1168),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',1180),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',1181),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',1182),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',1193),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1198),
]
