
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_decglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : expressionvar_statement : data_type IDENT var_tail unli_newlinevar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value :  expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expression\n                   | GT expression\n                   | LT expression\n                   | EQ_EQ expression\n                   | GT_EQ expression\n                   | LT_EQ expression\n                   | NOT_EQ expression\n                   | AND expression\n                   | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail\n                           | emptyfunction_statements_tail : function_statements\n                                | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : string_operation_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | output_statement unli_newline statements\n                    | statements\n    local_dec : empty\n                 | var_statement\n    conditional_statement : CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail  OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE\n    \n    conditional_tail : OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tail\n                     | empty\n    \n    condition : arithmetic_expression condition_tail\n    \n    condition_tail : condition_op arithmetic_expression condition_tail\n               | empty\n    \n    condition_op : AND\n                 | OR\n                 | EQ_EQ\n                 | NOT_EQ\n                 | LT\n                 | GT\n                 | LT_EQ\n                 | GT_EQ\n    \n    arithmetic_expression : arith_term arith_tail\n    \n    arith_term : cond_literal\n               | var_call\n    \n    arith_tail : empty\n               | arith_op arithmetic_expression\n    \n    arith_op : PLUS\n             | MINUS\n             | MULTIPLY\n             | DIVISION\n             | MODULO\n    cond_literal : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE\n    for_loop_condition : for_loop_arithmetic_expression for_loop_condition_tail\n    \n    for_loop_condition_tail : for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail\n               | empty\n    \n    for_loop_condition_op : AND\n                 | OR\n                 | EQ_EQ\n                 | NOT_EQ\n                 | LT\n                 | GT\n                 | LT_EQ\n                 | GT_EQ\n    \n    for_loop_arithmetic_expression : for_loop_arith_term for_loop_arith_tail\n    \n    for_loop_arith_term : for_loop_literal\n               | var_call\n    \n    for_loop_arith_tail : empty\n               | for_loop_arith_op for_loop_arithmetic_expression\n    \n    for_loop_arith_op : PLUS\n             | MINUS\n             | MULTIPLY\n             | DIVISION\n             | MODULO\n    for_loop_literal : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITuntil_loop : UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN\n    until_loop_condition : until_loop_arithmetic_expression until_loop_condition_tail\n    \n    until_loop_condition_tail : until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail\n               | empty\n    \n    until_loop_condition_op : AND\n                 | OR\n                 | EQ_EQ\n                 | NOT_EQ\n                 | LT\n                 | GT\n                 | LT_EQ\n                 | GT_EQ\n    \n    until_loop_arithmetic_expression : until_loop_arith_term until_loop_arith_tail\n    \n    until_loop_arith_term : until_loop_literal\n               | var_call\n    \n    until_loop_arith_tail : empty\n               | until_loop_arith_op until_loop_arithmetic_expression\n    \n    until_loop_arith_op : PLUS\n             | MINUS\n             | MULTIPLY\n             | DIVISION\n             | MODULO\n    until_loop_literal : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | output_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,119,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,20,22,35,36,37,38,39,44,45,46,48,49,50,51,54,55,56,57,58,59,60,61,64,65,66,70,71,86,88,89,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,123,125,127,131,132,134,135,136,137,138,141,142,144,145,146,150,151,152,153,159,161,162,163,164,165,166,167,168,172,173,174,178,179,182,183,189,191,192,193,194,195,196,197,199,200,202,203,214,215,216,217,219,220,234,235,239,240,241,242,243,244,245,246,247,248,274,275,276,279,280,281,282,283,286,287,288,289,293,296,297,298,342,343,347,348,349,353,366,370,372,373,397,400,401,412,415,417,418,419,421,424,425,429,430,431,432,434,435,436,437,441,442,443,444,446,448,450,452,453,454,456,],[4,-235,4,17,4,-8,-5,-235,-2,17,-235,-235,17,-77,-3,-7,-9,-10,-11,-235,-235,-16,-18,-235,-54,-55,-235,-47,-48,-49,-50,-51,-52,4,-12,-13,-14,-53,-58,-56,-73,-74,-235,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,17,-15,-75,17,17,-235,-235,-235,-98,17,-108,17,17,-97,-235,-235,-96,-37,-38,-39,-210,-99,4,-106,4,4,4,4,4,-143,-144,-145,4,-20,-6,4,-235,-235,-235,-235,-235,-235,-235,-222,-224,-205,-207,-208,17,-19,-235,-25,-235,-235,-217,-219,-100,-101,-102,-103,-104,-105,-235,-233,-234,-206,-235,-21,-23,-22,-76,-78,-77,-40,-41,-42,-43,-209,-235,-223,-231,17,-235,-26,-220,-218,-235,17,17,-24,-232,17,-235,-235,17,17,-174,17,17,17,-175,-235,17,17,-235,-235,17,-235,-140,-141,-142,17,-146,17,17,-235,17,17,-109,-235,-139,17,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,23,-2,-235,-235,-3,-7,-9,23,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,25,-2,-235,-235,-3,-7,-9,25,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,26,-2,-235,-235,-3,-7,-9,26,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,27,-2,-235,-235,-3,-7,-9,27,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,28,-2,-235,-235,-3,-7,-9,28,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,29,-2,-235,-235,-3,-7,-9,29,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,30,-2,-235,-235,-3,-7,-9,30,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,31,-2,-235,-235,-3,-7,-9,31,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,32,-2,-235,-235,-3,-7,-9,32,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,33,-2,-235,-235,-3,-7,-9,33,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,35,36,37,220,],[-235,-4,-235,-8,-5,34,-2,-235,-235,-3,-7,-9,34,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,20,22,35,36,37,42,220,280,281,282,],[-235,-4,-235,-8,-5,-235,-2,-235,-235,-235,-77,-3,-7,-9,62,-235,-76,-78,-77,]),'INT':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,212,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[9,-4,-5,-2,-235,9,-3,9,-235,9,-235,9,9,-107,-235,-108,9,9,9,9,9,9,9,262,-235,-19,9,-235,-235,9,9,-235,9,-235,-235,9,9,-235,9,-235,9,]),'FLT':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[10,-4,-5,-2,-235,10,-3,10,-235,10,-235,10,10,-107,-235,-108,10,10,10,10,10,10,10,-235,-19,10,-235,-235,10,10,-235,10,-235,-235,10,10,-235,10,-235,10,]),'BLN':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[11,-4,-5,-2,-235,11,-3,11,-235,11,-235,11,11,-107,-235,-108,11,11,11,11,11,11,11,-235,-19,11,-235,-235,11,11,-235,11,-235,-235,11,11,-235,11,-235,11,]),'CHR':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[12,-4,-5,-2,-235,12,-3,12,-235,12,-235,12,12,-107,-235,-108,12,12,12,12,12,12,12,-235,-19,12,-235,-235,12,12,-235,12,-235,-235,12,12,-235,12,-235,12,]),'STR':([3,4,14,16,17,18,35,63,127,130,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[13,-4,-5,-2,-235,13,-3,13,-235,13,-235,13,13,-107,-235,-108,13,13,13,13,13,13,13,-235,-19,13,-235,-235,13,13,-235,13,-235,-235,13,13,-235,13,-235,13,]),'GHOST':([4,14,91,],[-4,-5,119,]),'CHECK':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,-3,-235,-235,-235,-235,-107,-235,-108,170,-235,-235,-235,-235,-235,-235,-235,-19,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'SWAP':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,-3,-235,-235,-235,-235,-107,-235,-108,171,-235,-235,-235,-235,-235,-235,-235,-19,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'FUNCTION_NAME':([4,14,16,17,21,23,24,25,26,27,28,29,30,31,32,33,34,35,127,131,132,134,136,137,138,143,145,160,180,184,185,186,187,190,191,192,193,194,195,196,201,204,205,206,207,208,209,214,215,236,274,366,373,397,400,402,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,43,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-3,-235,-235,-235,-235,-107,-235,-108,158,158,158,158,223,223,223,223,158,-235,-235,-235,-235,-235,-235,158,-225,-226,-227,-228,-229,-230,-235,-19,158,-235,-235,-235,-235,-235,158,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'DISPLAY':([4,14,16,17,35,127,131,132,134,136,137,138,143,145,160,180,190,191,192,193,194,195,196,201,204,205,206,207,208,209,214,215,236,274,366,373,397,400,402,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,-3,-235,-235,-235,-235,-107,-235,-108,160,160,160,160,160,-235,-235,-235,-235,-235,-235,160,-225,-226,-227,-228,-229,-230,-235,-19,160,-235,-235,-235,-235,-235,160,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'IDENT':([4,8,9,10,11,12,13,14,16,17,35,40,41,53,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,94,127,131,132,133,134,136,137,138,139,143,145,160,180,181,184,185,186,187,188,190,191,192,193,194,195,196,198,201,204,205,206,207,208,209,210,211,213,214,215,236,262,274,277,292,295,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,366,373,376,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,397,400,402,408,419,424,425,429,431,433,434,443,446,450,453,],[-4,19,-32,-33,-34,-35,-36,-5,-2,-235,-3,44,54,54,96,54,54,54,54,54,54,54,54,54,54,54,54,54,54,118,122,-235,-235,-235,140,-235,-107,-235,-108,146,54,54,54,54,219,54,54,54,54,54,54,-235,-235,-235,-235,-235,-235,54,54,-225,-226,-227,-228,-229,-230,54,260,54,-235,-19,54,320,-235,342,54,54,54,-115,-116,-117,-118,-119,-120,-121,-122,54,-128,-129,-130,-131,-132,54,54,-179,-180,-181,-182,-183,-184,-185,-186,54,-192,-193,-194,-195,-196,-235,-235,54,54,-150,-151,-152,-153,-154,-155,-156,-157,54,-163,-164,-165,-166,-167,-235,-235,54,54,-235,-235,-235,-235,-235,54,-235,-235,-235,-235,-235,]),'FOR':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,-3,-235,-235,-235,-235,-107,-235,-108,175,-235,-235,-235,-235,-235,-235,-235,-19,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'UNTIL':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,369,373,397,400,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,-3,-235,-235,-235,-235,-107,-235,-108,176,-235,-235,-235,-235,-235,-235,-235,-19,-235,-235,399,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'REPEAT':([4,14,16,17,35,127,131,132,134,136,137,138,145,191,192,193,194,195,196,214,215,274,366,373,397,400,419,424,425,429,431,434,443,446,450,453,],[-4,-5,-2,-235,-3,-235,-235,-235,-235,-107,-235,-108,177,-235,-235,-235,-235,-235,-235,-235,-19,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,-235,]),'REVIVE':([4,14,16,17,35,127,132,135,136,137,138,145,161,163,191,192,193,194,195,196,215,239,240,241,242,243,244,],[-4,-5,-2,-235,-3,-235,-235,143,-98,-235,-108,-235,-99,-106,-235,-235,-235,-235,-235,-235,-19,-100,-101,-102,-103,-104,-105,]),'RBRACE':([4,14,16,17,35,49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,125,127,131,132,134,135,136,137,138,141,142,144,145,148,149,150,151,152,153,159,161,163,189,191,192,193,194,195,196,214,215,234,235,239,240,241,242,243,244,274,283,286,287,288,289,293,341,347,348,366,373,397,400,407,409,425,429,431,434,438,441,443,445,446,448,449,450,451,453,455,],[-4,-5,-2,-235,-3,-235,-54,-55,-235,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-235,-235,-235,-235,-235,-98,-235,-108,-235,-235,-97,-235,182,183,-96,-37,-38,-39,-210,-99,-106,-235,-235,-235,-235,-235,-235,-235,-235,-19,-217,-219,-100,-101,-102,-103,-104,-105,-235,-40,-41,-42,-43,-209,-235,369,-220,-218,-235,-235,-235,-235,415,417,-235,-235,-235,-235,442,-235,-235,448,-235,-235,452,-235,454,-235,456,]),'SHIFT':([4,14,16,17,35,136,137,138,145,161,163,191,192,193,194,195,196,215,239,240,241,242,243,244,353,375,419,424,430,],[-4,-5,-2,-235,-3,-98,-235,-108,-235,-99,-106,-235,-235,-235,-235,-235,-235,-19,-100,-101,-102,-103,-104,-105,-235,402,-235,-235,402,]),'OTHERWISE':([4,14,16,17,35,136,137,138,145,161,163,191,192,193,194,195,196,215,239,240,241,242,243,244,401,410,417,419,422,424,426,428,430,435,436,437,456,457,458,],[-4,-5,-2,-235,-3,-98,-235,-108,-235,-99,-106,-235,-235,-235,-235,-235,-235,-19,-100,-101,-102,-103,-104,-105,-235,418,-235,-235,-235,-235,432,-111,-235,-140,-141,-142,-235,-235,-110,]),'LBRACE':([16,17,35,120,121,126,177,298,318,321,350,412,418,420,423,432,439,444,447,],[-2,-235,-3,-235,127,131,214,-235,353,366,373,-235,-235,425,429,-235,443,-235,450,]),'OTHERWISE_CHECK':([16,17,35,417,422,456,457,],[-2,-235,-3,-235,427,-235,427,]),'COMMA':([19,44,45,46,48,49,50,51,54,55,56,57,58,59,60,69,70,71,86,88,89,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,125,140,146,151,152,153,159,189,216,217,219,231,232,233,234,235,237,238,283,286,287,288,289,293,342,343,346,347,348,],[40,40,67,-16,-18,-235,-54,-55,-235,-47,-48,-49,-50,-51,-52,100,-53,-58,-56,-73,-74,40,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,130,-75,130,181,-37,-38,-39,-210,236,277,-25,181,292,-215,-216,-217,-219,236,-38,-40,-41,-42,-43,-209,236,181,-26,292,-220,-218,]),'EQ':([19,44,54,88,89,96,125,146,169,219,320,342,404,],[41,41,-235,-73,-74,41,-75,180,209,180,365,180,209,]),'LBRACKET':([41,54,180,],[47,90,218,]),'TILDE':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,160,180,184,185,186,187,190,201,204,205,206,207,208,209,236,402,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-225,-226,-227,-228,-229,-230,52,52,]),'LPAREN':([41,43,53,62,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,154,155,156,157,158,160,170,171,175,176,180,184,185,186,187,190,201,204,205,206,207,208,209,223,225,236,399,402,427,],[53,63,53,92,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,184,185,186,187,188,190,210,211,212,213,53,53,53,53,53,53,53,-225,-226,-227,-228,-229,-230,284,285,53,408,53,433,]),'INT_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,292,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,365,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,402,408,433,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,117,55,55,55,55,55,55,55,55,55,55,55,-225,-226,-227,-228,-229,-230,254,268,55,55,55,254,-115,-116,-117,-118,-119,-120,-121,-122,254,-128,-129,-130,-131,-132,359,268,-179,-180,-181,-182,-183,-184,-185,-186,268,-192,-193,-194,-195,-196,396,359,-150,-151,-152,-153,-154,-155,-156,-157,359,-163,-164,-165,-166,-167,55,268,254,]),'FLT_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,292,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,402,408,433,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-225,-226,-227,-228,-229,-230,255,269,56,56,56,255,-115,-116,-117,-118,-119,-120,-121,-122,255,-128,-129,-130,-131,-132,360,269,-179,-180,-181,-182,-183,-184,-185,-186,269,-192,-193,-194,-195,-196,360,-150,-151,-152,-153,-154,-155,-156,-157,360,-163,-164,-165,-166,-167,56,269,255,]),'DAY':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,292,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,402,408,433,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-225,-226,-227,-228,-229,-230,256,270,57,57,57,256,-115,-116,-117,-118,-119,-120,-121,-122,256,-128,-129,-130,-131,-132,361,270,-179,-180,-181,-182,-183,-184,-185,-186,270,-192,-193,-194,-195,-196,361,-150,-151,-152,-153,-154,-155,-156,-157,361,-163,-164,-165,-166,-167,57,270,256,]),'NIGHT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,292,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,402,408,433,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-225,-226,-227,-228,-229,-230,257,271,58,58,58,257,-115,-116,-117,-118,-119,-120,-121,-122,257,-128,-129,-130,-131,-132,362,271,-179,-180,-181,-182,-183,-184,-185,-186,271,-192,-193,-194,-195,-196,362,-150,-151,-152,-153,-154,-155,-156,-157,362,-163,-164,-165,-166,-167,58,271,257,]),'CHR_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,204,205,206,207,208,209,210,213,218,236,292,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,402,408,433,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-225,-226,-227,-228,-229,-230,258,272,59,59,59,258,-115,-116,-117,-118,-119,-120,-121,-122,258,-128,-129,-130,-131,-132,363,272,-179,-180,-181,-182,-183,-184,-185,-186,272,-192,-193,-194,-195,-196,363,-150,-151,-152,-153,-154,-155,-156,-157,363,-163,-164,-165,-166,-167,59,272,258,]),'STR_LIT':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,198,201,204,205,206,207,208,209,210,213,218,236,292,295,300,302,303,304,305,306,307,308,309,312,313,314,315,316,317,319,323,325,326,327,328,329,330,331,332,335,336,337,338,339,340,378,380,381,382,383,384,385,386,387,390,391,392,393,394,395,402,408,433,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,247,60,-225,-226,-227,-228,-229,-230,259,273,60,60,60,247,259,-115,-116,-117,-118,-119,-120,-121,-122,259,-128,-129,-130,-131,-132,364,273,-179,-180,-181,-182,-183,-184,-185,-186,273,-192,-193,-194,-195,-196,364,-150,-151,-152,-153,-154,-155,-156,-157,364,-163,-164,-165,-166,-167,60,273,259,]),'PLUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,169,245,246,247,251,252,253,254,255,256,257,258,259,265,266,267,268,269,270,271,272,273,349,356,357,358,359,360,361,362,363,364,],[72,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,198,295,-233,-234,313,-124,-125,-133,-134,-135,-136,-137,-138,336,-188,-189,-197,-198,-199,-200,-201,-202,295,391,-159,-160,-168,-169,-170,-171,-172,-173,]),'MINUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,254,255,256,257,258,259,265,266,267,268,269,270,271,272,273,356,357,358,359,360,361,362,363,364,],[73,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,314,-124,-125,-133,-134,-135,-136,-137,-138,337,-188,-189,-197,-198,-199,-200,-201,-202,392,-159,-160,-168,-169,-170,-171,-172,-173,]),'MULTIPLY':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,254,255,256,257,258,259,265,266,267,268,269,270,271,272,273,356,357,358,359,360,361,362,363,364,],[74,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,315,-124,-125,-133,-134,-135,-136,-137,-138,338,-188,-189,-197,-198,-199,-200,-201,-202,393,-159,-160,-168,-169,-170,-171,-172,-173,]),'DIVISION':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,254,255,256,257,258,259,265,266,267,268,269,270,271,272,273,356,357,358,359,360,361,362,363,364,],[75,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,316,-124,-125,-133,-134,-135,-136,-137,-138,339,-188,-189,-197,-198,-199,-200,-201,-202,394,-159,-160,-168,-169,-170,-171,-172,-173,]),'MODULO':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,251,252,253,254,255,256,257,258,259,265,266,267,268,269,270,271,272,273,356,357,358,359,360,361,362,363,364,],[76,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,317,-124,-125,-133,-134,-135,-136,-137,-138,340,-188,-189,-197,-198,-199,-200,-201,-202,395,-159,-160,-168,-169,-170,-171,-172,-173,]),'EXPONENT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,],[77,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'GT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[78,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,307,-235,-124,-125,-133,-134,-135,-136,-137,-138,330,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,307,-127,385,-235,-159,-160,-168,-169,-170,-171,-172,-173,330,-191,-158,-161,385,-162,]),'LT':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[79,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,306,-235,-124,-125,-133,-134,-135,-136,-137,-138,329,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,306,-127,384,-235,-159,-160,-168,-169,-170,-171,-172,-173,329,-191,-158,-161,384,-162,]),'EQ_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[80,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,304,-235,-124,-125,-133,-134,-135,-136,-137,-138,327,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,304,-127,382,-235,-159,-160,-168,-169,-170,-171,-172,-173,327,-191,-158,-161,382,-162,]),'GT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[81,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,309,-235,-124,-125,-133,-134,-135,-136,-137,-138,332,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,309,-127,387,-235,-159,-160,-168,-169,-170,-171,-172,-173,332,-191,-158,-161,387,-162,]),'LT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[82,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,308,-235,-124,-125,-133,-134,-135,-136,-137,-138,331,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,308,-127,386,-235,-159,-160,-168,-169,-170,-171,-172,-173,331,-191,-158,-161,386,-162,]),'NOT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[83,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,305,-235,-124,-125,-133,-134,-135,-136,-137,-138,328,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,305,-127,383,-235,-159,-160,-168,-169,-170,-171,-172,-173,328,-191,-158,-161,383,-162,]),'AND':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[84,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,302,-235,-124,-125,-133,-134,-135,-136,-137,-138,325,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,302,-127,380,-235,-159,-160,-168,-169,-170,-171,-172,-173,325,-191,-158,-161,380,-162,]),'OR':([49,50,51,54,55,56,57,58,59,60,86,88,89,115,125,250,251,252,253,254,255,256,257,258,259,264,265,266,267,268,269,270,271,272,273,310,311,333,334,351,352,355,356,357,358,359,360,361,362,363,364,367,368,388,389,405,406,],[85,-54,-55,-235,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,303,-235,-124,-125,-133,-134,-135,-136,-137,-138,326,-235,-188,-189,-197,-198,-199,-200,-201,-202,-123,-126,-187,-190,303,-127,381,-235,-159,-160,-168,-169,-170,-171,-172,-173,326,-191,-158,-161,381,-162,]),'RPAREN':([49,50,51,54,55,56,57,58,59,60,63,70,71,86,87,88,89,92,93,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,125,128,129,140,147,151,152,153,159,188,189,200,202,203,221,222,224,226,227,228,229,230,231,232,233,234,235,237,238,248,249,250,251,252,253,254,255,256,257,258,259,260,263,264,265,266,267,268,269,270,271,272,273,283,284,285,286,287,288,289,290,291,293,294,299,301,310,311,322,324,333,334,344,345,346,347,348,351,352,367,368,371,374,398,403,413,416,440,],[-235,-54,-55,-235,-47,-48,-49,-50,-51,-52,-235,-53,-58,-56,115,-73,-74,120,121,-93,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-235,-75,-92,-94,-235,-95,-37,-38,-39,-210,-235,-235,-205,-207,-208,283,-44,-46,286,287,288,289,-211,-235,-215,-216,-217,-219,-235,115,-206,298,-235,-235,-124,-125,-133,-134,-135,-136,-137,-138,318,321,-235,-235,-188,-189,-197,-198,-199,-200,-201,-202,-40,344,345,-41,-42,-43,-209,-212,-213,-235,348,-112,-114,-123,-126,-176,-178,-187,-190,-45,-221,-235,-220,-218,-235,-127,-235,-191,-214,-113,-177,412,-204,421,444,]),'COLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,125,151,152,153,159,189,234,235,283,286,287,288,289,293,347,348,411,],[-235,-54,-55,-235,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-37,-38,-39,-210,-235,-217,-219,-40,-41,-42,-43,-209,-235,-220,-218,419,]),'PLUS_PLUS':([54,88,89,125,169,404,],[-235,-73,-74,-75,202,202,]),'MINUS_MINUS':([54,88,89,125,169,404,],[-235,-73,-74,-75,203,203,]),'PLUS_EQ':([54,88,89,125,169,404,],[-235,-73,-74,-75,204,204,]),'MINUS_EQ':([54,88,89,125,169,404,],[-235,-73,-74,-75,205,205,]),'MUL_EQ':([54,88,89,125,169,404,],[-235,-73,-74,-75,206,206,]),'DIV_EQ':([54,88,89,125,169,404,],[-235,-73,-74,-75,207,207,]),'MOD_EQ':([54,88,89,125,169,404,],[-235,-73,-74,-75,208,208,]),'SEMICOLON':([54,88,89,125,261,354,355,356,357,358,359,360,361,362,363,364,377,379,388,389,396,405,406,414,],[-235,-73,-74,-75,319,376,-235,-235,-159,-160,-168,-169,-170,-171,-172,-173,-147,-149,-158,-161,-203,-235,-162,-148,]),'RBRACKET':([55,56,57,58,59,60,68,69,98,99,116,117,118,124,278,],[-47,-48,-49,-50,-51,-52,97,-235,-27,-28,125,-30,-31,-29,343,]),'CONVERT_TO_INT':([143,160,180,190,201,204,205,206,207,208,209,236,402,],[154,154,154,154,154,-225,-226,-227,-228,-229,-230,154,154,]),'CONVERT_TO_FLT':([143,160,180,190,201,204,205,206,207,208,209,236,402,],[155,155,155,155,155,-225,-226,-227,-228,-229,-230,155,155,]),'CONVERT_TO_BLN':([143,160,180,190,201,204,205,206,207,208,209,236,402,],[156,156,156,156,156,-225,-226,-227,-228,-229,-230,156,156,]),'CONVERT_TO_STR':([143,160,180,190,201,204,205,206,207,208,209,236,402,],[157,157,157,157,157,-225,-226,-227,-228,-229,-230,157,157,]),'INPUT':([184,185,186,187,],[225,225,225,225,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,61,162,164,165,166,167,168,178,183,],[3,14,18,91,191,192,193,194,195,196,215,220,]),'global_dec':([3,18,],[5,37,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,20,44,45,49,54,63,69,96,120,122,127,131,132,134,135,137,140,141,142,145,146,188,189,191,192,193,194,195,196,214,216,219,220,231,237,245,250,251,264,265,274,293,298,342,346,349,351,353,355,356,366,367,373,397,400,401,405,412,417,418,419,422,424,425,429,430,431,432,434,441,443,444,446,448,450,453,456,457,],[7,16,22,16,7,39,16,39,66,71,89,95,99,39,16,129,16,16,136,136,144,16,129,16,16,136,179,230,235,136,136,136,136,136,136,16,276,179,282,291,235,297,301,311,324,334,136,235,16,179,291,297,301,16,379,389,16,324,16,136,136,16,379,16,16,16,16,428,136,16,16,436,136,16,136,16,16,16,136,16,16,136,16,428,]),'data_type':([3,18,63,130,132,134,145,191,192,193,194,195,196,274,397,400,424,431,434,446,453,],[8,8,94,133,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'maybe_newline':([5,17,20,120,127,131,137,141,142,214,298,353,366,373,401,412,417,418,419,425,429,432,441,443,444,448,450,456,],[15,35,42,126,132,134,145,148,149,274,350,375,397,400,410,420,422,423,424,431,434,439,445,446,447,451,453,457,]),'function_statements':([15,220,],[20,281,]),'ret_type':([15,220,],[21,21,]),'function_dtype':([15,220,],[24,24,]),'global_tail':([18,],[36,]),'global_statement_tail':([19,44,96,],[38,64,123,]),'global_dec_value':([41,],[45,]),'global_value':([41,],[46,]),'expression':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,160,180,184,185,186,187,190,201,236,402,],[48,87,101,102,103,104,105,106,107,108,109,110,111,112,113,114,152,152,152,222,222,222,222,238,152,152,152,]),'factor':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,160,180,184,185,186,187,190,201,236,402,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'var_call':([41,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,143,145,160,180,184,185,186,187,188,190,198,201,210,213,236,292,295,300,312,319,323,335,376,378,390,402,408,433,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,169,50,50,50,50,50,50,233,50,246,50,253,267,50,233,246,253,253,358,267,267,404,358,358,50,267,253,]),'literal':([41,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,100,143,160,180,184,185,186,187,188,190,201,218,236,292,402,],[51,69,86,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,69,51,51,51,51,51,51,51,232,51,51,69,51,232,51,]),'main_function':([42,],[61,]),'global_tail2':([45,],[65,]),'list_element':([47,100,218,],[68,124,278,]),'factor_tail':([49,],[70,]),'var_call_tail':([54,],[88,]),'parameters':([63,],[93,]),'element_tail':([69,],[98,]),'index':([90,],[116,]),'parameters_tail':([122,140,],[128,147,]),'statements':([132,134,145,191,192,193,194,195,196,274,397,400,424,431,434,446,453,],[135,141,163,239,240,241,242,243,244,341,407,409,430,438,441,449,455,]),'local_dec':([132,134,145,191,192,193,194,195,196,274,397,400,424,431,434,446,453,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'var_statement':([132,134,145,191,192,193,194,195,196,274,397,400,424,431,434,446,453,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'revive':([135,],[142,]),'value':([143,160,180,190,201,236,402,],[150,189,217,237,248,293,411,]),'type_cast':([143,160,180,190,201,236,402,],[151,151,151,151,151,151,151,]),'function_call':([143,145,160,180,190,201,236,402,],[153,167,153,153,153,153,153,153,]),'output_statement':([143,145,160,180,190,201,236,402,],[159,168,159,159,159,159,159,159,]),'statements_tail':([145,],[161,]),'string_operation_statement':([145,],[162,]),'conditional_statement':([145,],[164,]),'switch_statement':([145,],[165,]),'loop_statement':([145,],[166,]),'for_loop':([145,],[172,]),'until_loop':([145,],[173,]),'repeat_until':([145,],[174,]),'var_tail':([146,219,342,],[178,279,370,]),'string_operation_tail':([169,],[197,]),'update_tail':([169,404,],[199,413,]),'postfix':([169,404,],[200,200,]),'assign_op':([169,404,],[201,201,]),'tail_value':([180,],[216,]),'typecast_value':([184,185,186,187,],[221,226,227,228,]),'input_statement':([184,185,186,187,],[224,224,224,224,]),'arguments':([188,],[229,]),'arg_value':([188,292,],[231,346,]),'next_val':([189,237,293,],[234,294,347,]),'string_val':([198,295,],[245,349,]),'condition':([210,433,],[249,440,]),'arithmetic_expression':([210,300,312,433,],[250,351,352,250,]),'arith_term':([210,300,312,433,],[251,251,251,251,]),'cond_literal':([210,300,312,433,],[252,252,252,252,]),'control_variable':([212,],[261,]),'until_loop_condition':([213,408,],[263,416,]),'until_loop_arithmetic_expression':([213,323,335,408,],[264,367,368,264,]),'until_loop_arith_term':([213,323,335,408,],[265,265,265,265,]),'until_loop_literal':([213,323,335,408,],[266,266,266,266,]),'var_tail2':([216,],[275,]),'function_statements_tail':([220,],[280,]),'arg_tail':([231,346,],[290,371,]),'stringcon_tail':([245,349,],[296,372,]),'condition_tail':([250,351,],[299,374,]),'condition_op':([250,351,],[300,300,]),'arith_tail':([251,],[310,]),'arith_op':([251,],[312,]),'until_loop_condition_tail':([264,367,],[322,398,]),'until_loop_condition_op':([264,367,],[323,323,]),'until_loop_arith_tail':([265,],[333,]),'until_loop_arith_op':([265,],[335,]),'for_loop_condition':([319,],[354,]),'for_loop_arithmetic_expression':([319,378,390,],[355,405,406,]),'for_loop_arith_term':([319,378,390,],[356,356,356,]),'for_loop_literal':([319,378,390,],[357,357,357,]),'for_loop_condition_tail':([355,405,],[377,414,]),'for_loop_condition_op':([355,405,],[378,378,]),'for_loop_arith_tail':([356,],[388,]),'for_loop_arith_op':([356,],[390,]),'switch_condition':([375,430,],[401,437,]),'update':([376,],[403,]),'conditional_tail':([422,457,],[426,458,]),'switchcond_tail':([430,],[435,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',67),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',74),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',75),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',94),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',101),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',102),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',103),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',115),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',116),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',126),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',127),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',137),
  ('var_statement -> data_type IDENT var_tail unli_newline','var_statement',4,'p_var_statement','Parser.py',144),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',151),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',152),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',153),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',165),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',166),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',176),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',177),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',187),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',197),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',198),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',208),
  ('index -> IDENT','index',1,'p_index','Parser.py',209),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',218),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',219),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',220),
  ('value -> type_cast','value',1,'p_value','Parser.py',227),
  ('value -> expression','value',1,'p_value','Parser.py',228),
  ('value -> function_call','value',1,'p_value','Parser.py',229),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',239),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',247),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',248),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',258),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',260),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',261),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',262),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',263),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',270),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',281),
  ('factor -> literal','factor',1,'p_factor','Parser.py',282),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',283),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',284),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',296),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',297),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',298),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',299),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',300),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',301),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',302),
  ('factor_tail -> GT expression','factor_tail',2,'p_factor_tail','Parser.py',303),
  ('factor_tail -> LT expression','factor_tail',2,'p_factor_tail','Parser.py',304),
  ('factor_tail -> EQ_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',305),
  ('factor_tail -> GT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',306),
  ('factor_tail -> LT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',307),
  ('factor_tail -> NOT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',308),
  ('factor_tail -> AND expression','factor_tail',2,'p_factor_tail','Parser.py',309),
  ('factor_tail -> OR expression','factor_tail',2,'p_factor_tail','Parser.py',310),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',321),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',328),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',329),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail','function_statements',13,'p_function_statements','Parser.py',337),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',338),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',365),
  ('function_statements_tail -> empty','function_statements_tail',1,'p_function_statements_tail','Parser.py',366),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',386),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',387),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',397),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',398),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',399),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',400),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',401),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',402),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',403),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',404),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',405),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',406),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',413),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',414),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',424),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',425),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',435),
  ('revive -> empty','revive',1,'p_revive','Parser.py',436),
  ('statements -> empty','statements',1,'p_statements','Parser.py',446),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',447),
  ('statements_tail -> string_operation_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',461),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',462),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',463),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',464),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',465),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',466),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',467),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',484),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',485),
  ('conditional_statement -> CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_statement',17,'p_conditional_statement','Parser.py',493),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN condition RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_tail',11,'p_conditional_tail','Parser.py',505),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',506),
  ('condition -> arithmetic_expression condition_tail','condition',2,'p_condition','Parser.py',522),
  ('condition_tail -> condition_op arithmetic_expression condition_tail','condition_tail',3,'p_condition_tail','Parser.py',538),
  ('condition_tail -> empty','condition_tail',1,'p_condition_tail','Parser.py',539),
  ('condition_op -> AND','condition_op',1,'p_condition_op','Parser.py',554),
  ('condition_op -> OR','condition_op',1,'p_condition_op','Parser.py',555),
  ('condition_op -> EQ_EQ','condition_op',1,'p_condition_op','Parser.py',556),
  ('condition_op -> NOT_EQ','condition_op',1,'p_condition_op','Parser.py',557),
  ('condition_op -> LT','condition_op',1,'p_condition_op','Parser.py',558),
  ('condition_op -> GT','condition_op',1,'p_condition_op','Parser.py',559),
  ('condition_op -> LT_EQ','condition_op',1,'p_condition_op','Parser.py',560),
  ('condition_op -> GT_EQ','condition_op',1,'p_condition_op','Parser.py',561),
  ('arithmetic_expression -> arith_term arith_tail','arithmetic_expression',2,'p_arithmetic_expression','Parser.py',568),
  ('arith_term -> cond_literal','arith_term',1,'p_arith_term','Parser.py',577),
  ('arith_term -> var_call','arith_term',1,'p_arith_term','Parser.py',578),
  ('arith_tail -> empty','arith_tail',1,'p_arith_tail','Parser.py',584),
  ('arith_tail -> arith_op arithmetic_expression','arith_tail',2,'p_arith_tail','Parser.py',585),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','Parser.py',595),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','Parser.py',596),
  ('arith_op -> MULTIPLY','arith_op',1,'p_arith_op','Parser.py',597),
  ('arith_op -> DIVISION','arith_op',1,'p_arith_op','Parser.py',598),
  ('arith_op -> MODULO','arith_op',1,'p_arith_op','Parser.py',599),
  ('cond_literal -> INT_LIT','cond_literal',1,'p_cond_literal','Parser.py',604),
  ('cond_literal -> FLT_LIT','cond_literal',1,'p_cond_literal','Parser.py',605),
  ('cond_literal -> DAY','cond_literal',1,'p_cond_literal','Parser.py',606),
  ('cond_literal -> NIGHT','cond_literal',1,'p_cond_literal','Parser.py',607),
  ('cond_literal -> CHR_LIT','cond_literal',1,'p_cond_literal','Parser.py',608),
  ('cond_literal -> STR_LIT','cond_literal',1,'p_cond_literal','Parser.py',609),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',618),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',625),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',632),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',633),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',643),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',644),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',645),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON for_loop_condition SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',652),
  ('for_loop_condition -> for_loop_arithmetic_expression for_loop_condition_tail','for_loop_condition',2,'p_for_loop_condition','Parser.py',659),
  ('for_loop_condition_tail -> for_loop_condition_op for_loop_arithmetic_expression for_loop_condition_tail','for_loop_condition_tail',3,'p_for_loop_condition_tail','Parser.py',675),
  ('for_loop_condition_tail -> empty','for_loop_condition_tail',1,'p_for_loop_condition_tail','Parser.py',676),
  ('for_loop_condition_op -> AND','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',691),
  ('for_loop_condition_op -> OR','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',692),
  ('for_loop_condition_op -> EQ_EQ','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',693),
  ('for_loop_condition_op -> NOT_EQ','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',694),
  ('for_loop_condition_op -> LT','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',695),
  ('for_loop_condition_op -> GT','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',696),
  ('for_loop_condition_op -> LT_EQ','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',697),
  ('for_loop_condition_op -> GT_EQ','for_loop_condition_op',1,'p_for_loop_condition_op','Parser.py',698),
  ('for_loop_arithmetic_expression -> for_loop_arith_term for_loop_arith_tail','for_loop_arithmetic_expression',2,'p_for_loop_arithmetic_expression','Parser.py',705),
  ('for_loop_arith_term -> for_loop_literal','for_loop_arith_term',1,'p_for_loop_arith_term','Parser.py',714),
  ('for_loop_arith_term -> var_call','for_loop_arith_term',1,'p_for_loop_arith_term','Parser.py',715),
  ('for_loop_arith_tail -> empty','for_loop_arith_tail',1,'p_for_loop_arith_tail','Parser.py',721),
  ('for_loop_arith_tail -> for_loop_arith_op for_loop_arithmetic_expression','for_loop_arith_tail',2,'p_for_loop_arith_tail','Parser.py',722),
  ('for_loop_arith_op -> PLUS','for_loop_arith_op',1,'p_for_loop_arith_op','Parser.py',732),
  ('for_loop_arith_op -> MINUS','for_loop_arith_op',1,'p_for_loop_arith_op','Parser.py',733),
  ('for_loop_arith_op -> MULTIPLY','for_loop_arith_op',1,'p_for_loop_arith_op','Parser.py',734),
  ('for_loop_arith_op -> DIVISION','for_loop_arith_op',1,'p_for_loop_arith_op','Parser.py',735),
  ('for_loop_arith_op -> MODULO','for_loop_arith_op',1,'p_for_loop_arith_op','Parser.py',736),
  ('for_loop_literal -> INT_LIT','for_loop_literal',1,'p_for_loop_literal','Parser.py',741),
  ('for_loop_literal -> FLT_LIT','for_loop_literal',1,'p_for_loop_literal','Parser.py',742),
  ('for_loop_literal -> DAY','for_loop_literal',1,'p_for_loop_literal','Parser.py',743),
  ('for_loop_literal -> NIGHT','for_loop_literal',1,'p_for_loop_literal','Parser.py',744),
  ('for_loop_literal -> CHR_LIT','for_loop_literal',1,'p_for_loop_literal','Parser.py',745),
  ('for_loop_literal -> STR_LIT','for_loop_literal',1,'p_for_loop_literal','Parser.py',746),
  ('until_loop -> UNTIL LPAREN until_loop_condition RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',752),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN until_loop_condition RPAREN','repeat_until',9,'p_repeat_until','Parser.py',759),
  ('until_loop_condition -> until_loop_arithmetic_expression until_loop_condition_tail','until_loop_condition',2,'p_until_loop_condition','Parser.py',766),
  ('until_loop_condition_tail -> until_loop_condition_op until_loop_arithmetic_expression until_loop_condition_tail','until_loop_condition_tail',3,'p_until_loop_condition_tail','Parser.py',782),
  ('until_loop_condition_tail -> empty','until_loop_condition_tail',1,'p_until_loop_condition_tail','Parser.py',783),
  ('until_loop_condition_op -> AND','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',798),
  ('until_loop_condition_op -> OR','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',799),
  ('until_loop_condition_op -> EQ_EQ','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',800),
  ('until_loop_condition_op -> NOT_EQ','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',801),
  ('until_loop_condition_op -> LT','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',802),
  ('until_loop_condition_op -> GT','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',803),
  ('until_loop_condition_op -> LT_EQ','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',804),
  ('until_loop_condition_op -> GT_EQ','until_loop_condition_op',1,'p_until_loop_condition_op','Parser.py',805),
  ('until_loop_arithmetic_expression -> until_loop_arith_term until_loop_arith_tail','until_loop_arithmetic_expression',2,'p_until_loop_arithmetic_expression','Parser.py',812),
  ('until_loop_arith_term -> until_loop_literal','until_loop_arith_term',1,'p_until_loop_arith_term','Parser.py',821),
  ('until_loop_arith_term -> var_call','until_loop_arith_term',1,'p_until_loop_arith_term','Parser.py',822),
  ('until_loop_arith_tail -> empty','until_loop_arith_tail',1,'p_until_loop_arith_tail','Parser.py',828),
  ('until_loop_arith_tail -> until_loop_arith_op until_loop_arithmetic_expression','until_loop_arith_tail',2,'p_until_loop_arith_tail','Parser.py',829),
  ('until_loop_arith_op -> PLUS','until_loop_arith_op',1,'p_until_loop_arith_op','Parser.py',839),
  ('until_loop_arith_op -> MINUS','until_loop_arith_op',1,'p_until_loop_arith_op','Parser.py',840),
  ('until_loop_arith_op -> MULTIPLY','until_loop_arith_op',1,'p_until_loop_arith_op','Parser.py',841),
  ('until_loop_arith_op -> DIVISION','until_loop_arith_op',1,'p_until_loop_arith_op','Parser.py',842),
  ('until_loop_arith_op -> MODULO','until_loop_arith_op',1,'p_until_loop_arith_op','Parser.py',843),
  ('until_loop_literal -> INT_LIT','until_loop_literal',1,'p_until_loop_literal','Parser.py',848),
  ('until_loop_literal -> FLT_LIT','until_loop_literal',1,'p_until_loop_literal','Parser.py',849),
  ('until_loop_literal -> DAY','until_loop_literal',1,'p_until_loop_literal','Parser.py',850),
  ('until_loop_literal -> NIGHT','until_loop_literal',1,'p_until_loop_literal','Parser.py',851),
  ('until_loop_literal -> CHR_LIT','until_loop_literal',1,'p_until_loop_literal','Parser.py',852),
  ('until_loop_literal -> STR_LIT','until_loop_literal',1,'p_until_loop_literal','Parser.py',853),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',859),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',866),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',873),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',874),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',884),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',885),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',892),
  ('function_call -> output_statement','function_call',1,'p_function_call','Parser.py',893),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',903),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',904),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',914),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',915),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',925),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',926),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',933),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',934),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',946),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',947),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',957),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',964),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',973),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',974),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',984),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',985),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',986),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',987),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',988),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',989),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',996),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',997),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',1007),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',1008),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1024),
]
