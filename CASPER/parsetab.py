
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_dec\n                   | emptyglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : factor\n                    | expressionvar_statement : data_type IDENT var_tailvar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : factor\n             | type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value : IDENT\n                      | literal\n                      | expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : expr_head expr_tailexpr_head : term term_tailterm : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expressionterm_tail : empty\n                 | GT expression\n                 | LT expression\n                 | EQ_EQ expression\n                 | GT_EQ expression\n                 | LT_EQ expression\n                 | NOT_EQ expressionexpr_tail : empty\n                 | AND expression\n                 | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE \n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : empty\n                    | local_dec maybe_newline statements_tail\n                    | string_operation_statement unli_newline statements_tail\n                    | conditional_statement unli_newline statements_tail\n                    | switch_statement unli_newline statements_tail\n                    | loop_statement unli_newline statements_tail\n                    | function_call unli_newline statements_tail\n                    | output_statement unli_newline statements_tail\n                    \n    local_dec : empty\n                 | var_statementconditional_statement : CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail conditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tail2\n                        | OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACEconditional_tail2 : OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail2\n                         | OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACEswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | input_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,65,141,159,160,161,162,163,164,],[3,14,18,100,148,186,187,188,189,190,191,]),'global_dec':([3,18,],[5,25,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,21,45,46,49,55,56,63,72,83,99,102,133,134,135,140,143,145,148,149,151,152,153,156,182,185,186,187,188,189,190,191,207,208,210,220,222,225,235,243,249,258,269,275,278,290,292,294,295,305,309,315,317,318,327,331,332,333,336,338,339,343,344,345,346,349,355,356,358,359,363,364,367,370,374,378,379,380,383,385,387,],[7,16,22,16,26,28,16,28,69,74,85,89,92,105,74,127,28,16,138,16,144,16,16,144,138,158,179,184,16,16,158,158,158,158,158,158,158,242,247,74,16,261,179,268,273,247,144,16,247,89,179,268,16,273,16,16,144,144,16,16,16,16,16,341,144,16,16,16,351,144,144,16,16,16,144,16,16,144,16,16,16,16,144,16,144,16,]),'data_type':([3,18,99,139,140,148,151,185,186,187,188,189,190,191,258,315,317,338,346,349,359,367,380,385,],[8,8,126,142,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'maybe_newline':([5,15,17,21,133,135,143,145,156,182,220,269,294,305,309,318,327,331,332,333,339,343,344,355,356,358,363,364,370,374,378,379,383,387,],[15,20,23,44,136,140,150,151,185,226,258,293,310,315,317,325,334,336,337,338,346,348,349,359,360,361,366,367,371,376,380,381,385,388,]),'function_statements':([15,],[21,]),'global_tail':([18,],[24,]),'global_statement_tail':([19,45,102,],[27,67,130,]),'ret_type':([20,],[31,]),'function_dtype':([20,],[33,]),'global_dec_value':([30,],[46,]),'global_value':([30,],[47,]),'factor':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,196,205,209,219,248,251,252,253,254,286,319,323,347,375,],[49,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,210,210,210,210,83,210,83,210,83,83,83,83,83,210,83,83,83,]),'expression':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,196,205,209,219,248,251,252,253,254,286,319,323,347,375,],[50,82,107,108,109,110,111,112,114,115,119,120,121,122,123,124,212,212,212,212,239,250,257,212,280,280,280,280,303,212,330,354,377,]),'var_call':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,151,173,180,183,185,186,187,188,189,190,191,193,196,205,207,209,219,248,251,252,253,254,266,274,286,313,319,323,347,375,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,165,51,51,51,165,165,165,165,165,165,165,236,51,51,245,51,51,51,51,51,51,51,236,245,51,321,51,51,51,51,]),'literal':([30,48,53,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,106,173,180,183,196,205,207,209,219,224,248,251,252,253,254,274,286,319,323,347,375,],[52,72,81,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,72,52,52,52,52,52,244,52,52,72,52,279,279,279,279,244,52,52,52,52,52,]),'expr_head':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,196,205,209,219,248,251,252,253,254,286,319,323,347,375,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'term':([30,54,75,76,77,78,79,80,86,87,93,94,95,96,97,98,173,180,183,196,205,209,219,248,251,252,253,254,286,319,323,347,375,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'main_function':([44,],[65,]),'global_tail2':([46,],[68,]),'list_element':([48,106,224,],[71,131,263,]),'factor_tail':([49,83,210,],[73,73,73,]),'expr_tail':([55,],[84,]),'var_call_tail':([56,278,],[88,88,]),'term_tail':([63,],[91,]),'element_tail':([72,],[104,]),'index':([90,],[116,]),'parameters':([99,],[125,]),'parameters_tail':([134,149,],[137,154,]),'statements':([140,148,258,315,317,338,346,349,359,367,380,385,],[143,153,289,322,324,345,353,356,362,369,382,386,]),'local_dec':([140,148,151,185,186,187,188,189,190,191,258,315,317,338,346,349,359,367,380,385,],[145,145,156,156,156,156,156,156,156,156,145,145,145,145,145,145,145,145,145,145,]),'var_statement':([140,148,151,185,186,187,188,189,190,191,258,315,317,338,346,349,359,367,380,385,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'statements_tail':([151,185,186,187,188,189,190,191,],[157,228,229,230,231,232,233,234,]),'string_operation_statement':([151,185,186,187,188,189,190,191,],[159,159,159,159,159,159,159,159,]),'conditional_statement':([151,185,186,187,188,189,190,191,],[160,160,160,160,160,160,160,160,]),'switch_statement':([151,185,186,187,188,189,190,191,],[161,161,161,161,161,161,161,161,]),'loop_statement':([151,185,186,187,188,189,190,191,],[162,162,162,162,162,162,162,162,]),'function_call':([151,173,180,183,185,186,187,188,189,190,191,196,209,248,319,],[163,213,213,213,163,163,163,163,163,163,163,213,213,213,213,]),'output_statement':([151,185,186,187,188,189,190,191,],[164,164,164,164,164,164,164,164,]),'for_loop':([151,185,186,187,188,189,190,191,],[168,168,168,168,168,168,168,168,]),'until_loop':([151,185,186,187,188,189,190,191,],[169,169,169,169,169,169,169,169,]),'repeat_until':([151,185,186,187,188,189,190,191,],[170,170,170,170,170,170,170,170,]),'input_statement':([151,173,180,183,185,186,187,188,189,190,191,196,209,248,251,252,253,254,319,],[172,172,172,172,172,172,172,172,172,172,172,172,172,172,282,282,282,282,172,]),'var_tail':([152,225,290,],[178,264,307,]),'revive':([153,],[182,]),'string_operation_tail':([165,],[192,]),'update_tail':([165,321,],[194,328,]),'postfix':([165,321,],[195,195,]),'assign_op':([165,321,],[196,196,]),'value':([173,180,183,196,209,248,319,],[208,223,227,238,249,275,326,]),'type_cast':([173,180,183,196,209,248,319,],[211,211,211,211,211,211,211,]),'tail_value':([180,],[222,]),'string_val':([193,266,],[235,292,]),'arguments':([207,],[241,]),'arg_value':([207,274,],[243,295,]),'next_val':([208,249,275,],[246,276,296,]),'control_variable':([218,],[255,]),'var_tail2':([222,],[260,]),'stringcon_tail':([235,292,],[267,308,]),'arg_tail':([243,295,],[272,311,]),'typecast_value':([251,252,253,254,],[277,283,284,285,]),'switch_condition':([310,345,],[318,352,]),'update':([313,],[320,]),'conditional_tail':([336,],[340,]),'switchcond_tail':([345,],[350,]),'conditional_tail2':([371,388,],[373,389,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',40),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',48),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',49),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',57),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',58),
  ('main_function -> MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACE','main_function',8,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',73),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',74),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',85),
  ('global_tail -> empty','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',97),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',104),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',105),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',106),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',118),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',119),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',129),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',130),
  ('global_value -> factor','global_value',1,'p_global_value','Parser.py',140),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',141),
  ('var_statement -> data_type IDENT var_tail','var_statement',3,'p_var_statement','Parser.py',148),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',155),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',156),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',157),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',169),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',170),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',180),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',181),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',191),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',201),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',202),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',212),
  ('index -> IDENT','index',1,'p_index','Parser.py',213),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',220),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',221),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',222),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',223),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',224),
  ('value -> factor','value',1,'p_value','Parser.py',231),
  ('value -> type_cast','value',1,'p_value','Parser.py',232),
  ('value -> expression','value',1,'p_value','Parser.py',233),
  ('value -> function_call','value',1,'p_value','Parser.py',234),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',241),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',242),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',243),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',244),
  ('typecast_value -> IDENT','typecast_value',1,'p_typecast_value','Parser.py',251),
  ('typecast_value -> literal','typecast_value',1,'p_typecast_value','Parser.py',252),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',253),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',254),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',255),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',265),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',266),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',267),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',268),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',269),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',270),
  ('expression -> expr_head expr_tail','expression',2,'p_expression','Parser.py',277),
  ('expr_head -> term term_tail','expr_head',2,'p_expr_head','Parser.py',287),
  ('term -> factor factor_tail','term',2,'p_term','Parser.py',297),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',307),
  ('factor -> literal','factor',1,'p_factor','Parser.py',308),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',309),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',310),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',322),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',323),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',324),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',325),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',326),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',327),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',328),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser.py',338),
  ('term_tail -> GT expression','term_tail',2,'p_term_tail','Parser.py',339),
  ('term_tail -> LT expression','term_tail',2,'p_term_tail','Parser.py',340),
  ('term_tail -> EQ_EQ expression','term_tail',2,'p_term_tail','Parser.py',341),
  ('term_tail -> GT_EQ expression','term_tail',2,'p_term_tail','Parser.py',342),
  ('term_tail -> LT_EQ expression','term_tail',2,'p_term_tail','Parser.py',343),
  ('term_tail -> NOT_EQ expression','term_tail',2,'p_term_tail','Parser.py',344),
  ('expr_tail -> empty','expr_tail',1,'p_expr_tail','Parser.py',359),
  ('expr_tail -> AND expression','expr_tail',2,'p_expr_tail','Parser.py',360),
  ('expr_tail -> OR expression','expr_tail',2,'p_expr_tail','Parser.py',361),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',371),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',378),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',379),
  ('function_statements -> maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE','function_statements',13,'p_function_statements','Parser.py',389),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',390),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',412),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',413),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',423),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',424),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',425),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',426),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',427),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',428),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',429),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',430),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',431),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',432),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',439),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',440),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',450),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',451),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',461),
  ('revive -> empty','revive',1,'p_revive','Parser.py',462),
  ('statements -> empty','statements',1,'p_statements','Parser.py',472),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',473),
  ('statements_tail -> empty','statements_tail',1,'p_statements_tail','Parser.py',487),
  ('statements_tail -> local_dec maybe_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',488),
  ('statements_tail -> string_operation_statement unli_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',489),
  ('statements_tail -> conditional_statement unli_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',490),
  ('statements_tail -> switch_statement unli_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',491),
  ('statements_tail -> loop_statement unli_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',492),
  ('statements_tail -> function_call unli_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',493),
  ('statements_tail -> output_statement unli_newline statements_tail','statements_tail',3,'p_statements_tail','Parser.py',494),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',513),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',514),
  ('conditional_statement -> CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_statement',11,'p_conditional_statement','Parser.py',522),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',529),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail2','conditional_tail',11,'p_conditional_tail','Parser.py',530),
  ('conditional_tail -> OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_tail',6,'p_conditional_tail','Parser.py',531),
  ('conditional_tail2 -> OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail2','conditional_tail2',11,'p_conditional_tail2','Parser.py',544),
  ('conditional_tail2 -> OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_tail2',6,'p_conditional_tail2','Parser.py',545),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',555),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',562),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',569),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',570),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',580),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',581),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',582),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',589),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',596),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',9,'p_repeat_until','Parser.py',603),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',610),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',617),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',624),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',625),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',635),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',636),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',643),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',644),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',654),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',655),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',665),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',666),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',676),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',677),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',684),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',685),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',695),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',696),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',706),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',713),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',722),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',723),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',733),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',734),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',735),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',736),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',737),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',738),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',745),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',746),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',756),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',757),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',773),
]
