
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement unli_newline global_tail \n                  | emptyglobal_tail : global_decglobal_statement : data_type IDENT global_statement_tail global_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : expressionvar_statement : data_type IDENT var_tail unli_newlinevar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value :  expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expression\n                   | GT expression\n                   | LT expression\n                   | EQ_EQ expression\n                   | GT_EQ expression\n                   | LT_EQ expression\n                   | NOT_EQ expression\n                   | AND expression\n                   | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail\n                         | emptyfunction_statements_tail : function_statementsret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec maybe_newline statements_tail\n    statements_tail : string_operation_statement unli_newline statements\n                    | conditional_statement unli_newline statements\n                    | switch_statement unli_newline statements\n                    | loop_statement unli_newline statements\n                    | function_call unli_newline statements\n                    | output_statement unli_newline statements\n                    | statements\n    local_dec : empty\n                 | var_statementconditional_statement : CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACEconditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE  maybe_newline conditional_tailswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline  LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACEswitch_condition : SHIFT value COLON maybe_newline statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACErepeat_until : REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | output_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : PLUS string_val stringcon_tail\n                             | update_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end':([1,120,],[0,-1,]),'NEWLINE':([2,3,4,5,6,7,14,15,16,17,18,19,21,22,23,24,25,26,27,44,45,46,48,49,50,51,54,55,56,57,58,59,60,62,64,65,66,70,71,86,88,89,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,121,122,124,125,132,133,135,136,138,139,140,141,143,146,147,148,150,151,152,153,154,155,156,157,158,159,163,164,165,171,172,176,177,178,179,184,185,186,187,188,189,190,191,193,194,196,197,207,211,212,213,214,216,217,222,223,224,225,226,227,228,229,230,231,239,240,247,248,249,252,253,263,264,265,267,271,277,278,279,280,281,284,285,286,287,289,291,292,295,297,300,301,306,308,309,318,320,322,323,324,326,327,329,330,331,332,334,335,336,339,340,341,342,344,346,347,349,351,353,354,355,358,359,360,362,363,364,],[4,-153,4,17,4,-8,-5,17,-2,17,-153,-153,17,-77,-3,-7,-9,-10,-11,-153,-153,-16,-18,-153,-54,-55,-153,-47,-48,-49,-50,-51,-52,4,-12,-13,-14,-53,-58,-56,-73,-74,-153,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,17,-15,-75,17,17,4,-153,-153,17,-97,17,-107,-153,-153,-153,17,-96,-6,-98,4,-105,4,4,4,4,4,-115,-116,-117,4,-20,-95,-37,-38,-39,-128,-153,-153,-153,-153,-153,-153,-140,-142,-123,-125,-126,-153,17,-19,-153,-25,-153,4,-99,-100,-101,-102,-103,-104,-153,-151,-152,-124,-135,-137,-153,-21,-23,-22,17,-141,-149,17,-127,-153,-153,-26,-76,-78,-40,-41,-42,-43,-153,17,-138,-136,17,-24,-150,17,-153,-153,17,17,-119,17,17,17,-120,-153,-153,17,17,-109,17,-153,-153,-153,-112,-113,-114,17,17,-118,17,17,17,-153,17,-153,-111,-108,17,-153,-110,]),'MAIN_CASPER':([3,4,5,7,14,15,16,17,18,21,22,23,24,25,43,253,279,280,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,-153,-77,-3,-7,-9,63,-153,-76,-78,]),'FUNCTION':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,31,-2,-3,-7,-9,-153,]),'FUNCTION_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,33,-2,-3,-7,-9,-153,]),'FUNCTION_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,34,-2,-3,-7,-9,-153,]),'FUNCTION_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,35,-2,-3,-7,-9,-153,]),'FUNCTION_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,36,-2,-3,-7,-9,-153,]),'FUNCTION_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,37,-2,-3,-7,-9,-153,]),'FUNCTION_LIST_INT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,38,-2,-3,-7,-9,-153,]),'FUNCTION_LIST_FLT':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,39,-2,-3,-7,-9,-153,]),'FUNCTION_LIST_CHR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,40,-2,-3,-7,-9,-153,]),'FUNCTION_LIST_STR':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,41,-2,-3,-7,-9,-153,]),'FUNCTION_LIST_BLN':([3,4,5,7,14,15,16,17,18,20,22,23,24,25,253,],[-153,-4,-153,-8,-5,-153,-2,-153,-153,42,-2,-3,-7,-9,-153,]),'INT':([3,4,14,16,17,18,23,91,131,132,135,136,139,140,141,146,185,186,187,188,189,190,209,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[9,-4,-5,-2,-153,9,-3,9,9,-153,9,9,-106,-153,-107,9,9,9,9,9,9,9,245,-153,-19,9,-153,-153,9,9,-153,9,-153,-153,9,9,-153,9,-153,9,]),'FLT':([3,4,14,16,17,18,23,91,131,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[10,-4,-5,-2,-153,10,-3,10,10,-153,10,10,-106,-153,-107,10,10,10,10,10,10,10,-153,-19,10,-153,-153,10,10,-153,10,-153,-153,10,10,-153,10,-153,10,]),'BLN':([3,4,14,16,17,18,23,91,131,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[11,-4,-5,-2,-153,11,-3,11,11,-153,11,11,-106,-153,-107,11,11,11,11,11,11,11,-153,-19,11,-153,-153,11,11,-153,11,-153,-153,11,11,-153,11,-153,11,]),'CHR':([3,4,14,16,17,18,23,91,131,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[12,-4,-5,-2,-153,12,-3,12,12,-153,12,12,-106,-153,-107,12,12,12,12,12,12,12,-153,-19,12,-153,-153,12,12,-153,12,-153,-153,12,12,-153,12,-153,12,]),'STR':([3,4,14,16,17,18,23,91,131,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[13,-4,-5,-2,-153,13,-3,13,13,-153,13,13,-106,-153,-107,13,13,13,13,13,13,13,-153,-19,13,-153,-153,13,13,-153,13,-153,-153,13,13,-153,13,-153,13,]),'GHOST':([4,14,92,],[-4,-5,120,]),'REVIVE':([4,14,16,17,23,136,139,140,141,143,146,152,154,185,186,187,188,189,190,212,222,223,224,225,226,227,],[-4,-5,-2,-153,-3,-153,-97,-153,-107,149,-153,-98,-105,-153,-153,-153,-153,-153,-153,-19,-99,-100,-101,-102,-103,-104,]),'RBRACE':([4,14,16,17,23,49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,132,135,136,138,139,140,141,143,145,146,148,150,152,154,175,176,177,178,179,184,185,186,187,188,189,190,207,211,212,222,223,224,225,226,227,239,240,247,267,271,276,281,284,285,286,291,292,295,301,306,308,313,315,330,334,336,339,343,346,350,351,353,354,355,356,357,358,361,],[-4,-5,-2,-153,-3,-153,-54,-55,-153,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-153,-153,-153,-153,-97,-153,-107,-153,151,-153,-153,-96,-98,-105,217,-95,-37,-38,-39,-128,-153,-153,-153,-153,-153,-153,-153,-153,-19,-99,-100,-101,-102,-103,-104,-135,-137,-153,-127,-153,296,-40,-41,-42,-43,-138,-136,-153,-153,-153,-153,320,322,-153,-153,-153,-153,347,-153,353,-153,-153,-153,-153,359,360,-153,362,]),'CHECK':([4,14,16,17,23,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,-153,-153,-153,-106,-153,-107,161,-153,-153,-153,-153,-153,-153,-153,-19,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'SWAP':([4,14,16,17,23,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,-153,-153,-153,-106,-153,-107,162,-153,-153,-153,-153,-153,-153,-153,-19,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'FUNCTION_NAME':([4,14,16,17,23,30,31,32,33,34,35,36,37,38,39,40,41,42,132,135,136,139,140,141,146,149,167,173,185,186,187,188,189,190,195,198,199,200,201,202,203,208,211,212,218,219,220,221,241,247,295,301,306,308,310,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,61,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-153,-153,-153,-106,-153,-107,166,166,166,166,-153,-153,-153,-153,-153,-153,166,-143,-144,-145,-146,-147,-148,166,-153,-19,256,256,256,256,166,-153,-153,-153,-153,-153,166,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'DISPLAY':([4,14,16,17,23,132,135,136,139,140,141,146,149,167,173,185,186,187,188,189,190,195,198,199,200,201,202,203,208,211,212,241,247,295,301,306,308,310,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,-153,-153,-153,-106,-153,-107,167,167,167,167,-153,-153,-153,-153,-153,-153,167,-143,-144,-145,-146,-147,-148,167,-153,-19,167,-153,-153,-153,-153,-153,167,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'IDENT':([4,8,9,10,11,12,13,14,16,17,23,28,29,53,67,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,118,132,134,135,136,139,140,141,142,146,149,167,173,174,185,186,187,188,189,190,192,195,198,199,200,201,202,203,204,205,206,208,210,211,212,218,219,220,221,241,245,247,250,262,270,273,295,301,304,306,308,310,314,324,329,330,334,336,338,339,351,354,355,358,],[-4,19,-32,-33,-34,-35,-36,-5,-2,-153,-3,44,54,54,94,54,54,54,54,54,54,54,54,54,54,54,54,54,54,116,126,-153,137,-153,-153,-106,-153,-107,147,54,54,54,54,216,-153,-153,-153,-153,-153,-153,54,54,-143,-144,-145,-146,-147,-148,54,233,54,54,54,-153,-19,54,54,54,54,54,274,-153,277,54,54,54,-153,-153,54,-153,-153,54,54,-153,-153,-153,-153,-153,54,-153,-153,-153,-153,-153,]),'FOR':([4,14,16,17,23,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,-153,-153,-153,-106,-153,-107,168,-153,-153,-153,-153,-153,-153,-153,-19,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'UNTIL':([4,14,16,17,23,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,296,301,306,308,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,-153,-153,-153,-106,-153,-107,169,-153,-153,-153,-153,-153,-153,-153,-19,-153,-153,307,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'REPEAT':([4,14,16,17,23,132,135,136,139,140,141,146,185,186,187,188,189,190,211,212,247,295,301,306,308,324,329,330,334,336,339,351,354,355,358,],[-4,-5,-2,-153,-3,-153,-153,-153,-106,-153,-107,170,-153,-153,-153,-153,-153,-153,-153,-19,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,-153,]),'SHIFT':([4,14,16,17,23,139,140,141,146,152,154,185,186,187,188,189,190,212,222,223,224,225,226,227,289,302,324,329,335,],[-4,-5,-2,-153,-3,-97,-153,-107,-153,-98,-105,-153,-153,-153,-153,-153,-153,-19,-99,-100,-101,-102,-103,-104,-153,310,-153,-153,310,]),'OTHERWISE':([4,14,16,17,23,139,140,141,146,152,154,185,186,187,188,189,190,212,222,223,224,225,226,227,309,316,322,324,327,329,331,332,335,337,340,341,342,362,363,364,],[-4,-5,-2,-153,-3,-97,-153,-107,-153,-98,-105,-153,-153,-153,-153,-153,-153,-19,-99,-100,-101,-102,-103,-104,-153,323,-153,-153,-153,-153,-153,-109,-153,344,-112,-113,-114,-153,-153,-110,]),'LBRACE':([16,17,23,121,125,127,128,170,265,266,275,288,318,323,325,328,344,348,349,352,],[-2,-153,-3,-153,-153,132,133,211,-153,289,295,301,-153,-153,330,334,-153,351,-153,355,]),'OTHERWISE_CHECK':([16,17,23,322,327,362,363,],[-2,-153,-3,-153,333,-153,333,]),'COMMA':([19,44,45,46,48,49,50,51,54,55,56,57,58,59,60,69,70,71,86,88,89,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,126,137,147,177,178,179,184,207,213,214,216,236,237,238,239,240,242,243,267,271,277,278,281,284,285,286,290,291,292,],[28,28,67,-16,-18,-153,-54,-55,-153,-47,-48,-49,-50,-51,-52,98,-53,-58,-56,-73,-74,28,-17,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,131,131,174,-37,-38,-39,-128,241,250,-25,174,270,-133,-134,-135,-137,241,-38,-127,241,174,-26,-40,-41,-42,-43,270,-138,-136,]),'EQ':([19,44,54,88,89,94,124,147,160,216,274,277,312,],[29,29,-153,-73,-74,29,-75,173,203,173,294,173,203,]),'LBRACKET':([29,54,173,],[47,90,215,]),'TILDE':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,167,173,195,198,199,200,201,202,203,204,208,210,218,219,220,221,241,273,310,314,338,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-143,-144,-145,-146,-147,-148,52,52,52,52,52,52,52,52,52,52,52,52,]),'LPAREN':([29,53,61,63,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,161,162,166,167,168,169,173,180,181,182,183,195,198,199,200,201,202,203,204,208,210,218,219,220,221,241,256,258,273,307,310,314,333,338,],[53,53,91,93,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,204,205,206,208,209,210,53,218,219,220,221,53,-143,-144,-145,-146,-147,-148,53,53,53,53,53,53,53,53,282,283,53,314,53,53,338,53,]),'INT_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,90,98,149,167,173,195,198,199,200,201,202,203,204,206,208,210,215,218,219,220,221,241,270,273,294,310,314,338,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,115,55,55,55,55,55,-143,-144,-145,-146,-147,-148,55,55,55,55,55,55,55,55,55,55,55,55,305,55,55,55,]),'FLT_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,167,173,195,198,199,200,201,202,203,204,206,208,210,215,218,219,220,221,241,270,273,310,314,338,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-143,-144,-145,-146,-147,-148,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'DAY':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,167,173,195,198,199,200,201,202,203,204,206,208,210,215,218,219,220,221,241,270,273,310,314,338,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-143,-144,-145,-146,-147,-148,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'NIGHT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,167,173,195,198,199,200,201,202,203,204,206,208,210,215,218,219,220,221,241,270,273,310,314,338,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-143,-144,-145,-146,-147,-148,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CHR_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,167,173,195,198,199,200,201,202,203,204,206,208,210,215,218,219,220,221,241,270,273,310,314,338,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-143,-144,-145,-146,-147,-148,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'STR_LIT':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,167,173,192,195,198,199,200,201,202,203,204,206,208,210,215,218,219,220,221,241,262,270,273,310,314,338,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,230,60,-143,-144,-145,-146,-147,-148,60,60,60,60,60,60,60,60,60,60,230,60,60,60,60,60,]),'PLUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,160,228,229,230,287,],[72,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,192,262,-151,-152,262,]),'MINUS':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[73,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'MULTIPLY':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[74,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'DIVISION':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[75,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'MODULO':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[76,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'EXPONENT':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[77,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'GT':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[78,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'LT':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[79,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'EQ_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[80,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'GT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[81,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'LT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[82,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'NOT_EQ':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[83,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'AND':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[84,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'OR':([49,50,51,54,55,56,57,58,59,60,86,88,89,113,124,],[85,-54,-55,-153,-47,-48,-49,-50,-51,-52,-56,-73,-74,-57,-75,]),'RPAREN':([49,50,51,54,55,56,57,58,59,60,70,71,86,87,88,89,91,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,124,126,129,130,137,144,177,178,179,184,194,196,197,206,207,231,232,233,234,235,236,237,238,239,240,242,243,246,254,255,257,259,260,261,267,268,269,271,272,281,282,283,284,285,286,290,291,292,298,299,303,311,319,321,345,],[-153,-54,-55,-153,-47,-48,-49,-50,-51,-52,-53,-58,-56,113,-73,-74,-153,121,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,125,-92,-75,-153,-91,-93,-153,-94,-37,-38,-39,-128,-123,-125,-126,-153,-153,-124,265,266,267,-129,-153,-133,-134,-135,-137,-153,113,275,281,-44,-46,284,285,286,-127,-130,-131,-153,292,-40,298,299,-41,-42,-43,-153,-138,-136,-45,-139,-132,318,-122,326,349,]),'COLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,177,178,179,184,207,239,240,267,271,281,284,285,286,291,292,317,],[-153,-54,-55,-153,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,-37,-38,-39,-128,-153,-135,-137,-127,-153,-40,-41,-42,-43,-138,-136,324,]),'SEMICOLON':([49,50,51,54,55,56,57,58,59,60,70,71,86,88,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,124,244,293,305,],[-153,-54,-55,-153,-47,-48,-49,-50,-51,-52,-53,-58,-56,-73,-74,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-57,-75,273,304,-121,]),'PLUS_PLUS':([54,88,89,124,160,312,],[-153,-73,-74,-75,196,196,]),'MINUS_MINUS':([54,88,89,124,160,312,],[-153,-73,-74,-75,197,197,]),'PLUS_EQ':([54,88,89,124,160,312,],[-153,-73,-74,-75,198,198,]),'MINUS_EQ':([54,88,89,124,160,312,],[-153,-73,-74,-75,199,199,]),'MUL_EQ':([54,88,89,124,160,312,],[-153,-73,-74,-75,200,200,]),'DIV_EQ':([54,88,89,124,160,312,],[-153,-73,-74,-75,201,201,]),'MOD_EQ':([54,88,89,124,160,312,],[-153,-73,-74,-75,202,202,]),'RBRACKET':([55,56,57,58,59,60,68,69,96,97,114,115,116,123,251,],[-47,-48,-49,-50,-51,-52,95,-153,-27,-28,124,-30,-31,-29,278,]),'CONVERT_TO_INT':([149,167,173,195,198,199,200,201,202,203,208,241,310,],[180,180,180,180,-143,-144,-145,-146,-147,-148,180,180,180,]),'CONVERT_TO_FLT':([149,167,173,195,198,199,200,201,202,203,208,241,310,],[181,181,181,181,-143,-144,-145,-146,-147,-148,181,181,181,]),'CONVERT_TO_BLN':([149,167,173,195,198,199,200,201,202,203,208,241,310,],[182,182,182,182,-143,-144,-145,-146,-147,-148,182,182,182,]),'CONVERT_TO_STR':([149,167,173,195,198,199,200,201,202,203,208,241,310,],[183,183,183,183,-143,-144,-145,-146,-147,-148,183,183,183,]),'INPUT':([218,219,220,221,],[258,258,258,258,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,6,62,133,153,155,156,157,158,159,171,217,],[3,14,18,92,136,185,186,187,188,189,190,212,253,]),'global_dec':([3,18,],[5,25,]),'global_statement':([3,18,],[6,6,]),'empty':([3,5,15,17,18,19,21,44,45,49,54,69,91,94,121,125,126,132,135,136,137,138,140,143,146,147,148,185,186,187,188,189,190,206,207,211,213,216,228,236,242,247,253,265,271,277,287,289,290,295,301,306,308,309,318,322,323,324,327,329,330,331,334,335,336,339,344,346,349,351,353,354,355,358,362,363,],[7,16,22,16,7,27,16,27,66,71,89,97,119,27,16,16,130,16,139,139,130,16,16,150,139,172,16,139,139,139,139,139,139,235,240,16,249,172,264,269,240,139,22,16,240,172,264,16,269,16,16,139,139,16,16,16,16,16,332,139,16,16,16,341,139,139,16,16,16,16,16,139,16,139,16,332,]),'data_type':([3,18,91,131,135,136,146,185,186,187,188,189,190,247,306,308,329,336,339,354,358,],[8,8,118,134,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'maybe_newline':([5,15,17,21,121,125,132,138,140,148,211,253,265,289,295,301,309,318,322,323,324,330,331,334,344,346,349,351,353,355,362,],[15,20,23,43,127,128,135,145,146,175,247,20,288,302,306,308,316,325,327,328,329,336,337,339,348,350,352,354,356,358,363,]),'function_statements':([15,253,],[21,280,]),'global_tail':([18,],[24,]),'global_statement_tail':([19,44,94,],[26,64,122,]),'ret_type':([20,],[30,]),'function_dtype':([20,],[32,]),'global_dec_value':([29,],[45,]),'global_value':([29,],[46,]),'expression':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,167,173,195,204,208,210,218,219,220,221,241,273,310,314,338,],[48,87,99,100,101,102,103,104,105,106,107,108,109,110,111,112,178,178,178,178,232,243,246,255,255,255,255,178,293,178,321,345,]),'factor':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,149,167,173,195,204,208,210,218,219,220,221,241,273,310,314,338,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'var_call':([29,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,146,149,167,173,192,195,204,206,208,210,218,219,220,221,241,262,270,273,304,310,314,338,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,160,50,50,50,229,50,50,238,50,50,50,50,50,50,50,229,238,50,312,50,50,50,]),'literal':([29,47,52,53,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,149,167,173,195,204,206,208,210,215,218,219,220,221,241,270,273,310,314,338,],[51,69,86,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,69,51,51,51,51,51,237,51,51,69,51,51,51,51,51,237,51,51,51,51,]),'main_function':([43,],[62,]),'global_tail2':([45,],[65,]),'list_element':([47,98,215,],[68,123,251,]),'factor_tail':([49,],[70,]),'var_call_tail':([54,],[88,]),'element_tail':([69,],[96,]),'index':([90,],[114,]),'parameters':([91,],[117,]),'parameters_tail':([126,137,],[129,144,]),'statements':([135,136,146,185,186,187,188,189,190,247,306,308,329,336,339,354,358,],[138,143,154,222,223,224,225,226,227,276,313,315,335,343,346,357,361,]),'local_dec':([135,136,146,185,186,187,188,189,190,247,306,308,329,336,339,354,358,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'var_statement':([135,136,146,185,186,187,188,189,190,247,306,308,329,336,339,354,358,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'revive':([143,],[148,]),'statements_tail':([146,],[152,]),'string_operation_statement':([146,],[153,]),'conditional_statement':([146,],[155,]),'switch_statement':([146,],[156,]),'loop_statement':([146,],[157,]),'function_call':([146,149,167,173,195,208,241,310,],[158,179,179,179,179,179,179,179,]),'output_statement':([146,149,167,173,195,208,241,310,],[159,184,184,184,184,184,184,184,]),'for_loop':([146,],[163,]),'until_loop':([146,],[164,]),'repeat_until':([146,],[165,]),'var_tail':([147,216,277,],[171,252,297,]),'value':([149,167,173,195,208,241,310,],[176,207,214,231,242,271,317,]),'type_cast':([149,167,173,195,208,241,310,],[177,177,177,177,177,177,177,]),'string_operation_tail':([160,],[191,]),'update_tail':([160,312,],[193,319,]),'postfix':([160,312,],[194,194,]),'assign_op':([160,312,],[195,195,]),'tail_value':([173,],[213,]),'string_val':([192,262,],[228,287,]),'arguments':([206,],[234,]),'arg_value':([206,270,],[236,290,]),'next_val':([207,242,271,],[239,272,291,]),'control_variable':([209,],[244,]),'var_tail2':([213,],[248,]),'typecast_value':([218,219,220,221,],[254,259,260,261,]),'input_statement':([218,219,220,221,],[257,257,257,257,]),'stringcon_tail':([228,287,],[263,300,]),'arg_tail':([236,290,],[268,303,]),'function_statements_tail':([253,],[279,]),'switch_condition':([302,335,],[309,342,]),'update':([304,],[311,]),'conditional_tail':([327,363,],[331,364,]),'switchcond_tail':([335,],[340,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec maybe_newline function_statements maybe_newline main_function unli_newline GHOST','program',9,'p_program','Parser.py',41),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',49),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',50),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',58),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',59),
  ('main_function -> MAIN_CASPER LPAREN RPAREN maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE','main_function',9,'p_main_function','Parser.py',67),
  ('global_dec -> global_statement unli_newline global_tail','global_dec',3,'p_global_dec','Parser.py',74),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',75),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',94),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',101),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',102),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',103),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',115),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',116),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',126),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',127),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',137),
  ('var_statement -> data_type IDENT var_tail unli_newline','var_statement',4,'p_var_statement','Parser.py',144),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',151),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',152),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',153),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',165),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',166),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',176),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',177),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',187),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',197),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',198),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',208),
  ('index -> IDENT','index',1,'p_index','Parser.py',209),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',216),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',217),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',218),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',219),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',220),
  ('value -> type_cast','value',1,'p_value','Parser.py',227),
  ('value -> expression','value',1,'p_value','Parser.py',228),
  ('value -> function_call','value',1,'p_value','Parser.py',229),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',236),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',237),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',238),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',239),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',246),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',247),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',248),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',258),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',259),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',260),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',261),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',262),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',263),
  ('expression -> factor factor_tail','expression',2,'p_expression','Parser.py',270),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',281),
  ('factor -> literal','factor',1,'p_factor','Parser.py',282),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',283),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',284),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',296),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',297),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',298),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',299),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',300),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',301),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',302),
  ('factor_tail -> GT expression','factor_tail',2,'p_factor_tail','Parser.py',303),
  ('factor_tail -> LT expression','factor_tail',2,'p_factor_tail','Parser.py',304),
  ('factor_tail -> EQ_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',305),
  ('factor_tail -> GT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',306),
  ('factor_tail -> LT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',307),
  ('factor_tail -> NOT_EQ expression','factor_tail',2,'p_factor_tail','Parser.py',308),
  ('factor_tail -> AND expression','factor_tail',2,'p_factor_tail','Parser.py',309),
  ('factor_tail -> OR expression','factor_tail',2,'p_factor_tail','Parser.py',310),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',321),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',328),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',329),
  ('function_statements -> maybe_newline ret_type FUNCTION_NAME LPAREN parameters RPAREN maybe_newline LBRACE unli_newline statements revive maybe_newline RBRACE unli_newline function_statements_tail','function_statements',15,'p_function_statements','Parser.py',339),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',340),
  ('function_statements_tail -> function_statements','function_statements_tail',1,'p_function_statements_tail','Parser.py',359),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',367),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',368),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',378),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',379),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',380),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',381),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',382),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',383),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',384),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',385),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',386),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',387),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',394),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',395),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',405),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',406),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',416),
  ('revive -> empty','revive',1,'p_revive','Parser.py',417),
  ('statements -> empty','statements',1,'p_statements','Parser.py',427),
  ('statements -> local_dec maybe_newline statements_tail','statements',3,'p_statements','Parser.py',428),
  ('statements_tail -> string_operation_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',442),
  ('statements_tail -> conditional_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',443),
  ('statements_tail -> switch_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',444),
  ('statements_tail -> loop_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',445),
  ('statements_tail -> function_call unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',446),
  ('statements_tail -> output_statement unli_newline statements','statements_tail',3,'p_statements_tail','Parser.py',447),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',448),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',465),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',466),
  ('conditional_statement -> CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements RBRACE','conditional_statement',18,'p_conditional_statement','Parser.py',474),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',481),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN maybe_newline LBRACE maybe_newline statements RBRACE maybe_newline conditional_tail','conditional_tail',11,'p_conditional_tail','Parser.py',482),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE maybe_newline switch_condition maybe_newline OTHERWISE maybe_newline LBRACE maybe_newline statements maybe_newline RBRACE maybe_newline RBRACE','switch_statement',17,'p_switch_statement','Parser.py',492),
  ('switch_condition -> SHIFT value COLON maybe_newline statements switchcond_tail','switch_condition',6,'p_switch_condition','Parser.py',499),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',506),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',507),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',517),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',518),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',519),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN maybe_newline LBRACE maybe_newline statements RBRACE','for_loop',13,'p_for_loop','Parser.py',526),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE maybe_newline statements RBRACE','until_loop',8,'p_until_loop','Parser.py',533),
  ('repeat_until -> REPEAT LBRACE maybe_newline statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',9,'p_repeat_until','Parser.py',540),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',547),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',554),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',561),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',562),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',572),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',573),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',580),
  ('function_call -> output_statement','function_call',1,'p_function_call','Parser.py',581),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',591),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',592),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',602),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',603),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',613),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',614),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',621),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',622),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',634),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',635),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',645),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',652),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',661),
  ('string_operation_tail -> update_tail','string_operation_tail',1,'p_string_operation_tail','Parser.py',662),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',672),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',673),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',674),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',675),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',676),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',677),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',684),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',685),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',695),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',696),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',712),
]
