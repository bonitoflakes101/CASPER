
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEXPONENTrightNOTMINUSleftMULTIPLYDIVISIONMODULOleftPLUSMINUSleftPLUS_PLUSMINUS_MINUSleftEQ_EQNOT_EQLTGTLT_EQGT_EQleftANDleftORrightEQPLUS_EQMINUS_EQMUL_EQDIV_EQMOD_EQAND BIRTH BLN BLN_LIT CARRIAGE_RETURN CHECK CHR CHR_LIT COLON COMMA COMMENT CONVERT_TO_BLN CONVERT_TO_FLT CONVERT_TO_INT CONVERT_TO_STR DAY DISPLAY DIVISION DIV_EQ DOUBLE_LT DOUBLE_SLASH EOF EQ EQ_EQ EXPONENT FLT FLT_LIT FOR FUNCTION FUNCTION_BLN FUNCTION_CHR FUNCTION_FLT FUNCTION_INT FUNCTION_LIST_BLN FUNCTION_LIST_BLN2D FUNCTION_LIST_CHR FUNCTION_LIST_CHR2D FUNCTION_LIST_FLT FUNCTION_LIST_FLT2D FUNCTION_LIST_INT FUNCTION_LIST_INT2D FUNCTION_LIST_STR FUNCTION_LIST_STR2D FUNCTION_NAME FUNCTION_STR GHOST GT GT_EQ IDENT ILLEGAL IN INPUT INT INT_LIT LBRACE LBRACKET LIST_BLN LIST_BLN2D LIST_CHR LIST_CHR2D LIST_FLT LIST_FLT2D LIST_INT LIST_INT2D LIST_STR LIST_STR2D LPAREN LT LT_EQ MAIN_CASPER MEASURE MINUS MINUS_EQ MINUS_MINUS MODULO MOD_EQ MULTIPLY MUL_EQ NEWLINE NIGHT NOT NOT_EQ OR OTHERWISE OTHERWISE_CHECK PLUS PLUS_EQ PLUS_PLUS POW RBRACE RBRACKET REPEAT REVIVE RPAREN SEMICOLON SHIFT SKIP STOP STR STR_LIT SWAP TILDE TYPE UNTILprogram : BIRTH unli_newline global_dec function_statements maybe_newline main_function unli_newline GHOST\n    maybe_newline : empty\n                  | NEWLINE maybe_newline\n    \n    unli_newline : NEWLINE\n                 | NEWLINE unli_newline\n    main_function : MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACEglobal_dec : global_statement global_tail maybe_newline\n                  | emptyglobal_tail : global_dec\n                   | emptyglobal_statement : data_type IDENT global_statement_tailglobal_statement_tail : empty\n                             | COMMA IDENT global_statement_tail\n                             | EQ global_dec_value global_tail2global_tail2 : empty\n                    | COMMA IDENT global_statement_tailglobal_dec_value : global_value \n                        | LBRACKET list_element RBRACKETglobal_value : factor\n                    | expressionvar_statement : data_type IDENT var_tailvar_tail : empty\n                | EQ tail_value var_tail2\n                | COMMA IDENT var_tailvar_tail2 : empty\n                 | COMMA IDENT var_tailtail_value : value\n                  | LBRACKET list_element RBRACKETlist_element : literal element_tailelement_tail : empty\n                    | COMMA list_elementindex : INT_LIT\n             | IDENTdata_type : INT\n                 | FLT\n                 | BLN\n                 | CHR\n                 | STRvalue : factor\n             | type_cast\n             | expression\n             | function_calltype_cast : CONVERT_TO_INT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_FLT LPAREN typecast_value RPAREN\n                 | CONVERT_TO_BLN LPAREN typecast_value RPAREN\n                 | CONVERT_TO_STR LPAREN typecast_value RPARENtypecast_value : IDENT\n                      | literal\n                      | expression\n                      | FUNCTION_NAME LPAREN RPAREN\n                      | input_statementliteral : INT_LIT\n               | FLT_LIT\n               | DAY\n               | NIGHT\n               | CHR_LIT\n               | STR_LITexpression : expr_head expr_tailexpr_head : term term_tailterm : factor factor_tailfactor : var_call\n              | literal\n              | TILDE literal\n              | LPAREN expression RPARENfactor_tail : empty\n                   | PLUS expression\n                   | MINUS expression\n                   | MULTIPLY expression\n                   | DIVISION expression\n                   | MODULO expression\n                   | EXPONENT expressionterm_tail : empty\n                 | GT expression\n                 | LT expression\n                 | EQ_EQ expression\n                 | GT_EQ expression\n                 | LT_EQ expression\n                 | NOT_EQ expressionexpr_tail : empty\n                 | AND expression\n                 | OR expressionvar_call : IDENT var_call_tailvar_call_tail : empty\n                     | LBRACKET index RBRACKETfunction_statements : ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE \n                         | emptyret_type : FUNCTION\n                | function_dtypefunction_dtype : FUNCTION_INT\n                      | FUNCTION_FLT\n                      | FUNCTION_CHR\n                      | FUNCTION_BLN\n                      | FUNCTION_STR\n                      | FUNCTION_LIST_INT\n                      | FUNCTION_LIST_FLT\n                      | FUNCTION_LIST_CHR\n                      | FUNCTION_LIST_STR\n                      | FUNCTION_LIST_BLNparameters : data_type IDENT parameters_tail\n                  | emptyparameters_tail : empty\n                       | COMMA data_type IDENT parameters_tailrevive : REVIVE value\n              | emptystatements : empty\n                  | local_dec NEWLINE statements_tail\n    statements_tail : empty\n                    | statements\n                    | conditional_statement NEWLINE statements_tail\n                    | switch_statement NEWLINE statements_tail\n                    | loop_statement NEWLINE statements_tail\n                    | function_call NEWLINE statements_tail\n                    | string_operation_statement NEWLINE statements_tail\n                    | output_statement NEWLINE statements_tail\n    local_dec : var_statement\n                 | emptyconditional_statement : CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tailconditional_tail : empty\n                        | OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE\n                        | OTHERWISE LBRACE statements RBRACEswitch_statement : SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACEswitch_condition : SHIFT value COLON statements switchcond_tailswitchcond_tail : empty\n                       | switch_conditionloop_statement : for_loop\n                      | until_loop\n                      | repeat_untilfor_loop : FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACEuntil_loop : UNTIL LPAREN expression RPAREN LBRACE statements RBRACErepeat_until : REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPARENcontrol_variable : INT IDENT EQ INT_LITupdate : var_call update_tailupdate_tail : postfix\n                   | assign_op valuepostfix : PLUS_PLUS\n               | MINUS_MINUSfunction_call : FUNCTION_NAME LPAREN arguments RPAREN\n                     | input_statementarguments : empty\n                 | arg_value arg_tailarg_tail : empty\n                | COMMA arg_value arg_tailarg_value : literal\n                 | var_calloutput_statement : DISPLAY value next_val\n                        |  DISPLAY LPAREN value next_val RPARENnext_val : empty\n                | COMMA value next_valinput_statement : INPUT LPAREN RPARENstring_operation_statement : var_call string_operation_tailstring_operation_tail : assign_op value\n                             | PLUS string_val stringcon_tailassign_op : PLUS_EQ\n                 | MINUS_EQ\n                 | MUL_EQ\n                 | DIV_EQ\n                 | MOD_EQ\n                 | EQstringcon_tail : empty\n                      | PLUS string_val stringcon_tailstring_val : var_call\n                  | STR_LITempty :'
    
_lr_action_items = {'BIRTH':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'unli_newline':([2,4,43,],[3,14,66,]),'global_dec':([3,6,],[5,31,]),'global_statement':([3,6,],[6,6,]),'empty':([3,5,6,15,30,33,36,46,47,48,51,57,58,65,76,87,106,107,130,131,138,139,141,146,147,149,150,151,184,192,193,194,195,196,197,200,210,214,216,219,235,239,245,258,275,281,288,290,291,296,309,310,321,330,332,333,344,],[7,17,32,35,35,40,35,70,40,73,78,89,93,96,110,78,133,40,35,35,142,142,35,153,133,157,179,35,78,157,157,157,157,157,157,234,243,142,253,179,270,274,243,93,243,179,142,270,274,142,317,142,142,142,338,142,142,]),'data_type':([3,6,46,134,138,139,149,192,193,194,195,196,197,214,288,296,310,321,330,333,344,],[8,8,69,140,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'function_statements':([5,],[15,]),'ret_type':([5,],[16,]),'function_dtype':([5,],[19,]),'global_tail':([6,],[30,]),'maybe_newline':([15,30,36,130,131,141,151,],[34,38,45,138,139,148,182,]),'global_statement_tail':([33,47,107,],[39,71,135,]),'main_function':([34,],[43,]),'global_dec_value':([42,],[48,]),'global_value':([42,],[49,]),'factor':([42,56,79,80,81,82,83,84,90,91,97,98,99,100,101,102,152,173,180,198,202,211,213,221,222,223,224,244,277,302,308,325,329,],[51,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,184,184,184,87,184,184,87,87,87,87,87,184,87,184,87,184,87,]),'expression':([42,56,79,80,81,82,83,84,90,91,97,98,99,100,101,102,152,173,180,198,202,211,213,221,222,223,224,244,277,302,308,325,329,],[52,86,112,113,114,115,116,117,119,120,124,125,126,127,128,129,186,186,186,231,186,246,249,260,260,260,260,186,294,186,315,186,335,]),'var_call':([42,56,79,80,81,82,83,84,90,91,97,98,99,100,101,102,149,152,173,180,192,193,194,195,196,197,198,200,202,203,211,213,221,222,223,224,244,271,272,277,302,305,308,325,329,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,172,53,53,53,172,172,172,172,172,172,53,237,53,240,53,53,53,53,53,53,53,237,240,53,53,313,53,53,53,]),'literal':([42,50,55,56,79,80,81,82,83,84,90,91,97,98,99,100,101,102,111,152,173,180,198,200,202,211,213,218,221,222,223,224,244,271,277,302,308,325,329,],[54,76,85,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,76,54,54,54,54,236,54,54,54,76,259,259,259,259,54,236,54,54,54,54,54,]),'expr_head':([42,56,79,80,81,82,83,84,90,91,97,98,99,100,101,102,152,173,180,198,202,211,213,221,222,223,224,244,277,302,308,325,329,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'term':([42,56,79,80,81,82,83,84,90,91,97,98,99,100,101,102,152,173,180,198,202,211,213,221,222,223,224,244,277,302,308,325,329,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'parameters':([46,],[68,]),'global_tail2':([48,],[72,]),'list_element':([50,111,218,],[75,136,255,]),'factor_tail':([51,87,184,],[77,77,77,]),'expr_tail':([57,],[88,]),'var_call_tail':([58,258,],[92,92,]),'term_tail':([65,],[95,]),'element_tail':([76,],[109,]),'index':([94,],[121,]),'parameters_tail':([106,147,],[132,154,]),'statements':([138,139,149,192,193,194,195,196,197,214,288,296,310,321,330,333,344,],[141,146,158,158,158,158,158,158,158,250,300,307,320,332,336,340,345,]),'local_dec':([138,139,149,192,193,194,195,196,197,214,288,296,310,321,330,333,344,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'var_statement':([138,139,149,192,193,194,195,196,197,214,288,296,310,321,330,333,344,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'revive':([146,],[151,]),'statements_tail':([149,192,193,194,195,196,197,],[156,225,226,227,228,229,230,]),'conditional_statement':([149,192,193,194,195,196,197,],[159,159,159,159,159,159,159,]),'switch_statement':([149,192,193,194,195,196,197,],[160,160,160,160,160,160,160,]),'loop_statement':([149,192,193,194,195,196,197,],[161,161,161,161,161,161,161,]),'function_call':([149,152,173,180,192,193,194,195,196,197,202,211,244,302,325,],[162,187,187,187,162,162,162,162,162,162,187,187,187,187,187,]),'string_operation_statement':([149,192,193,194,195,196,197,],[163,163,163,163,163,163,163,]),'output_statement':([149,192,193,194,195,196,197,],[164,164,164,164,164,164,164,]),'for_loop':([149,192,193,194,195,196,197,],[167,167,167,167,167,167,167,]),'until_loop':([149,192,193,194,195,196,197,],[168,168,168,168,168,168,168,]),'repeat_until':([149,192,193,194,195,196,197,],[169,169,169,169,169,169,169,]),'input_statement':([149,152,173,180,192,193,194,195,196,197,202,211,221,222,223,224,244,302,325,],[171,171,171,171,171,171,171,171,171,171,171,171,262,262,262,262,171,171,171,]),'var_tail':([150,219,281,],[178,256,298,]),'value':([152,173,180,202,211,244,302,325,],[183,210,217,238,245,275,311,334,]),'type_cast':([152,173,180,202,211,244,302,325,],[185,185,185,185,185,185,185,185,]),'string_operation_tail':([172,],[201,]),'assign_op':([172,313,],[202,325,]),'tail_value':([180,],[216,]),'arguments':([200,],[233,]),'arg_value':([200,271,],[235,290,]),'string_val':([203,272,],[239,291,]),'next_val':([210,245,275,],[242,276,292,]),'control_variable':([212,],[247,]),'var_tail2':([216,],[252,]),'typecast_value':([221,222,223,224,],[257,263,264,265,]),'arg_tail':([235,290,],[269,303,]),'stringcon_tail':([239,291,],[273,304,]),'switch_condition':([289,332,],[301,339,]),'update':([305,],[312,]),'conditional_tail':([309,],[316,]),'update_tail':([313,],[323,]),'postfix':([313,],[324,]),'switchcond_tail':([332,],[337,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> BIRTH unli_newline global_dec function_statements maybe_newline main_function unli_newline GHOST','program',8,'p_program','Parser.py',40),
  ('maybe_newline -> empty','maybe_newline',1,'p_maybe_newline','Parser.py',48),
  ('maybe_newline -> NEWLINE maybe_newline','maybe_newline',2,'p_maybe_newline','Parser.py',49),
  ('unli_newline -> NEWLINE','unli_newline',1,'p_unli_newline','Parser.py',57),
  ('unli_newline -> NEWLINE unli_newline','unli_newline',2,'p_unli_newline','Parser.py',58),
  ('main_function -> MAIN_CASPER LPAREN RPAREN LBRACE maybe_newline statements maybe_newline RBRACE','main_function',8,'p_main_function','Parser.py',66),
  ('global_dec -> global_statement global_tail maybe_newline','global_dec',3,'p_global_dec','Parser.py',73),
  ('global_dec -> empty','global_dec',1,'p_global_dec','Parser.py',74),
  ('global_tail -> global_dec','global_tail',1,'p_global_tail','Parser.py',85),
  ('global_tail -> empty','global_tail',1,'p_global_tail','Parser.py',86),
  ('global_statement -> data_type IDENT global_statement_tail','global_statement',3,'p_global_statement','Parser.py',97),
  ('global_statement_tail -> empty','global_statement_tail',1,'p_global_statement_tail','Parser.py',104),
  ('global_statement_tail -> COMMA IDENT global_statement_tail','global_statement_tail',3,'p_global_statement_tail','Parser.py',105),
  ('global_statement_tail -> EQ global_dec_value global_tail2','global_statement_tail',3,'p_global_statement_tail','Parser.py',106),
  ('global_tail2 -> empty','global_tail2',1,'p_global_tail2','Parser.py',118),
  ('global_tail2 -> COMMA IDENT global_statement_tail','global_tail2',3,'p_global_tail2','Parser.py',119),
  ('global_dec_value -> global_value','global_dec_value',1,'p_global_dec_value','Parser.py',129),
  ('global_dec_value -> LBRACKET list_element RBRACKET','global_dec_value',3,'p_global_dec_value','Parser.py',130),
  ('global_value -> factor','global_value',1,'p_global_value','Parser.py',140),
  ('global_value -> expression','global_value',1,'p_global_value','Parser.py',141),
  ('var_statement -> data_type IDENT var_tail','var_statement',3,'p_var_statement','Parser.py',148),
  ('var_tail -> empty','var_tail',1,'p_var_tail','Parser.py',155),
  ('var_tail -> EQ tail_value var_tail2','var_tail',3,'p_var_tail','Parser.py',156),
  ('var_tail -> COMMA IDENT var_tail','var_tail',3,'p_var_tail','Parser.py',157),
  ('var_tail2 -> empty','var_tail2',1,'p_var_tail2','Parser.py',169),
  ('var_tail2 -> COMMA IDENT var_tail','var_tail2',3,'p_var_tail2','Parser.py',170),
  ('tail_value -> value','tail_value',1,'p_tail_value','Parser.py',180),
  ('tail_value -> LBRACKET list_element RBRACKET','tail_value',3,'p_tail_value','Parser.py',181),
  ('list_element -> literal element_tail','list_element',2,'p_list_element','Parser.py',191),
  ('element_tail -> empty','element_tail',1,'p_element_tail','Parser.py',201),
  ('element_tail -> COMMA list_element','element_tail',2,'p_element_tail','Parser.py',202),
  ('index -> INT_LIT','index',1,'p_index','Parser.py',212),
  ('index -> IDENT','index',1,'p_index','Parser.py',213),
  ('data_type -> INT','data_type',1,'p_data_type','Parser.py',220),
  ('data_type -> FLT','data_type',1,'p_data_type','Parser.py',221),
  ('data_type -> BLN','data_type',1,'p_data_type','Parser.py',222),
  ('data_type -> CHR','data_type',1,'p_data_type','Parser.py',223),
  ('data_type -> STR','data_type',1,'p_data_type','Parser.py',224),
  ('value -> factor','value',1,'p_value','Parser.py',231),
  ('value -> type_cast','value',1,'p_value','Parser.py',232),
  ('value -> expression','value',1,'p_value','Parser.py',233),
  ('value -> function_call','value',1,'p_value','Parser.py',234),
  ('type_cast -> CONVERT_TO_INT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',241),
  ('type_cast -> CONVERT_TO_FLT LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',242),
  ('type_cast -> CONVERT_TO_BLN LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',243),
  ('type_cast -> CONVERT_TO_STR LPAREN typecast_value RPAREN','type_cast',4,'p_type_cast','Parser.py',244),
  ('typecast_value -> IDENT','typecast_value',1,'p_typecast_value','Parser.py',251),
  ('typecast_value -> literal','typecast_value',1,'p_typecast_value','Parser.py',252),
  ('typecast_value -> expression','typecast_value',1,'p_typecast_value','Parser.py',253),
  ('typecast_value -> FUNCTION_NAME LPAREN RPAREN','typecast_value',3,'p_typecast_value','Parser.py',254),
  ('typecast_value -> input_statement','typecast_value',1,'p_typecast_value','Parser.py',255),
  ('literal -> INT_LIT','literal',1,'p_literal','Parser.py',265),
  ('literal -> FLT_LIT','literal',1,'p_literal','Parser.py',266),
  ('literal -> DAY','literal',1,'p_literal','Parser.py',267),
  ('literal -> NIGHT','literal',1,'p_literal','Parser.py',268),
  ('literal -> CHR_LIT','literal',1,'p_literal','Parser.py',269),
  ('literal -> STR_LIT','literal',1,'p_literal','Parser.py',270),
  ('expression -> expr_head expr_tail','expression',2,'p_expression','Parser.py',277),
  ('expr_head -> term term_tail','expr_head',2,'p_expr_head','Parser.py',287),
  ('term -> factor factor_tail','term',2,'p_term','Parser.py',297),
  ('factor -> var_call','factor',1,'p_factor','Parser.py',307),
  ('factor -> literal','factor',1,'p_factor','Parser.py',308),
  ('factor -> TILDE literal','factor',2,'p_factor','Parser.py',309),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Parser.py',310),
  ('factor_tail -> empty','factor_tail',1,'p_factor_tail','Parser.py',322),
  ('factor_tail -> PLUS expression','factor_tail',2,'p_factor_tail','Parser.py',323),
  ('factor_tail -> MINUS expression','factor_tail',2,'p_factor_tail','Parser.py',324),
  ('factor_tail -> MULTIPLY expression','factor_tail',2,'p_factor_tail','Parser.py',325),
  ('factor_tail -> DIVISION expression','factor_tail',2,'p_factor_tail','Parser.py',326),
  ('factor_tail -> MODULO expression','factor_tail',2,'p_factor_tail','Parser.py',327),
  ('factor_tail -> EXPONENT expression','factor_tail',2,'p_factor_tail','Parser.py',328),
  ('term_tail -> empty','term_tail',1,'p_term_tail','Parser.py',338),
  ('term_tail -> GT expression','term_tail',2,'p_term_tail','Parser.py',339),
  ('term_tail -> LT expression','term_tail',2,'p_term_tail','Parser.py',340),
  ('term_tail -> EQ_EQ expression','term_tail',2,'p_term_tail','Parser.py',341),
  ('term_tail -> GT_EQ expression','term_tail',2,'p_term_tail','Parser.py',342),
  ('term_tail -> LT_EQ expression','term_tail',2,'p_term_tail','Parser.py',343),
  ('term_tail -> NOT_EQ expression','term_tail',2,'p_term_tail','Parser.py',344),
  ('expr_tail -> empty','expr_tail',1,'p_expr_tail','Parser.py',359),
  ('expr_tail -> AND expression','expr_tail',2,'p_expr_tail','Parser.py',360),
  ('expr_tail -> OR expression','expr_tail',2,'p_expr_tail','Parser.py',361),
  ('var_call -> IDENT var_call_tail','var_call',2,'p_var_call','Parser.py',371),
  ('var_call_tail -> empty','var_call_tail',1,'p_var_call_tail','Parser.py',378),
  ('var_call_tail -> LBRACKET index RBRACKET','var_call_tail',3,'p_var_call_tail','Parser.py',379),
  ('function_statements -> ret_type FUNCTION_NAME LPAREN parameters RPAREN LBRACE maybe_newline statements revive maybe_newline RBRACE','function_statements',11,'p_function_statements','Parser.py',389),
  ('function_statements -> empty','function_statements',1,'p_function_statements','Parser.py',390),
  ('ret_type -> FUNCTION','ret_type',1,'p_ret_type','Parser.py',405),
  ('ret_type -> function_dtype','ret_type',1,'p_ret_type','Parser.py',406),
  ('function_dtype -> FUNCTION_INT','function_dtype',1,'p_function_dtype','Parser.py',416),
  ('function_dtype -> FUNCTION_FLT','function_dtype',1,'p_function_dtype','Parser.py',417),
  ('function_dtype -> FUNCTION_CHR','function_dtype',1,'p_function_dtype','Parser.py',418),
  ('function_dtype -> FUNCTION_BLN','function_dtype',1,'p_function_dtype','Parser.py',419),
  ('function_dtype -> FUNCTION_STR','function_dtype',1,'p_function_dtype','Parser.py',420),
  ('function_dtype -> FUNCTION_LIST_INT','function_dtype',1,'p_function_dtype','Parser.py',421),
  ('function_dtype -> FUNCTION_LIST_FLT','function_dtype',1,'p_function_dtype','Parser.py',422),
  ('function_dtype -> FUNCTION_LIST_CHR','function_dtype',1,'p_function_dtype','Parser.py',423),
  ('function_dtype -> FUNCTION_LIST_STR','function_dtype',1,'p_function_dtype','Parser.py',424),
  ('function_dtype -> FUNCTION_LIST_BLN','function_dtype',1,'p_function_dtype','Parser.py',425),
  ('parameters -> data_type IDENT parameters_tail','parameters',3,'p_parameters','Parser.py',432),
  ('parameters -> empty','parameters',1,'p_parameters','Parser.py',433),
  ('parameters_tail -> empty','parameters_tail',1,'p_parameters_tail','Parser.py',443),
  ('parameters_tail -> COMMA data_type IDENT parameters_tail','parameters_tail',4,'p_parameters_tail','Parser.py',444),
  ('revive -> REVIVE value','revive',2,'p_revive','Parser.py',454),
  ('revive -> empty','revive',1,'p_revive','Parser.py',455),
  ('statements -> empty','statements',1,'p_statements','Parser.py',465),
  ('statements -> local_dec NEWLINE statements_tail','statements',3,'p_statements','Parser.py',466),
  ('statements_tail -> empty','statements_tail',1,'p_statements_tail','Parser.py',480),
  ('statements_tail -> statements','statements_tail',1,'p_statements_tail','Parser.py',481),
  ('statements_tail -> conditional_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',482),
  ('statements_tail -> switch_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',483),
  ('statements_tail -> loop_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',484),
  ('statements_tail -> function_call NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',485),
  ('statements_tail -> string_operation_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',486),
  ('statements_tail -> output_statement NEWLINE statements_tail','statements_tail',3,'p_statements_tail','Parser.py',487),
  ('local_dec -> var_statement','local_dec',1,'p_local_dec','Parser.py',510),
  ('local_dec -> empty','local_dec',1,'p_local_dec','Parser.py',511),
  ('conditional_statement -> CHECK LPAREN expression RPAREN LBRACE statements RBRACE conditional_tail','conditional_statement',8,'p_conditional_statement','Parser.py',519),
  ('conditional_tail -> empty','conditional_tail',1,'p_conditional_tail','Parser.py',526),
  ('conditional_tail -> OTHERWISE_CHECK LPAREN expression RPAREN LBRACE statements RBRACE','conditional_tail',7,'p_conditional_tail','Parser.py',527),
  ('conditional_tail -> OTHERWISE LBRACE statements RBRACE','conditional_tail',4,'p_conditional_tail','Parser.py',528),
  ('switch_statement -> SWAP LPAREN IDENT RPAREN LBRACE switch_condition OTHERWISE statements RBRACE','switch_statement',9,'p_switch_statement','Parser.py',540),
  ('switch_condition -> SHIFT value COLON statements switchcond_tail','switch_condition',5,'p_switch_condition','Parser.py',547),
  ('switchcond_tail -> empty','switchcond_tail',1,'p_switchcond_tail','Parser.py',554),
  ('switchcond_tail -> switch_condition','switchcond_tail',1,'p_switchcond_tail','Parser.py',555),
  ('loop_statement -> for_loop','loop_statement',1,'p_loop_statement','Parser.py',565),
  ('loop_statement -> until_loop','loop_statement',1,'p_loop_statement','Parser.py',566),
  ('loop_statement -> repeat_until','loop_statement',1,'p_loop_statement','Parser.py',567),
  ('for_loop -> FOR LPAREN control_variable SEMICOLON expression SEMICOLON update RPAREN LBRACE statements RBRACE','for_loop',11,'p_for_loop','Parser.py',574),
  ('until_loop -> UNTIL LPAREN expression RPAREN LBRACE statements RBRACE','until_loop',7,'p_until_loop','Parser.py',581),
  ('repeat_until -> REPEAT LBRACE statements RBRACE UNTIL LPAREN expression RPAREN','repeat_until',8,'p_repeat_until','Parser.py',588),
  ('control_variable -> INT IDENT EQ INT_LIT','control_variable',4,'p_control_variable','Parser.py',595),
  ('update -> var_call update_tail','update',2,'p_update','Parser.py',602),
  ('update_tail -> postfix','update_tail',1,'p_update_tail','Parser.py',609),
  ('update_tail -> assign_op value','update_tail',2,'p_update_tail','Parser.py',610),
  ('postfix -> PLUS_PLUS','postfix',1,'p_postfix','Parser.py',620),
  ('postfix -> MINUS_MINUS','postfix',1,'p_postfix','Parser.py',621),
  ('function_call -> FUNCTION_NAME LPAREN arguments RPAREN','function_call',4,'p_function_call','Parser.py',628),
  ('function_call -> input_statement','function_call',1,'p_function_call','Parser.py',629),
  ('arguments -> empty','arguments',1,'p_arguments','Parser.py',639),
  ('arguments -> arg_value arg_tail','arguments',2,'p_arguments','Parser.py',640),
  ('arg_tail -> empty','arg_tail',1,'p_arg_tail','Parser.py',650),
  ('arg_tail -> COMMA arg_value arg_tail','arg_tail',3,'p_arg_tail','Parser.py',651),
  ('arg_value -> literal','arg_value',1,'p_arg_value','Parser.py',661),
  ('arg_value -> var_call','arg_value',1,'p_arg_value','Parser.py',662),
  ('output_statement -> DISPLAY value next_val','output_statement',3,'p_output_statement','Parser.py',669),
  ('output_statement -> DISPLAY LPAREN value next_val RPAREN','output_statement',5,'p_output_statement','Parser.py',670),
  ('next_val -> empty','next_val',1,'p_next_val','Parser.py',677),
  ('next_val -> COMMA value next_val','next_val',3,'p_next_val','Parser.py',678),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','Parser.py',688),
  ('string_operation_statement -> var_call string_operation_tail','string_operation_statement',2,'p_string_operation_statement','Parser.py',695),
  ('string_operation_tail -> assign_op value','string_operation_tail',2,'p_string_operation_tail','Parser.py',702),
  ('string_operation_tail -> PLUS string_val stringcon_tail','string_operation_tail',3,'p_string_operation_tail','Parser.py',703),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','Parser.py',713),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','Parser.py',714),
  ('assign_op -> MUL_EQ','assign_op',1,'p_assign_op','Parser.py',715),
  ('assign_op -> DIV_EQ','assign_op',1,'p_assign_op','Parser.py',716),
  ('assign_op -> MOD_EQ','assign_op',1,'p_assign_op','Parser.py',717),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','Parser.py',718),
  ('stringcon_tail -> empty','stringcon_tail',1,'p_stringcon_tail','Parser.py',725),
  ('stringcon_tail -> PLUS string_val stringcon_tail','stringcon_tail',3,'p_stringcon_tail','Parser.py',726),
  ('string_val -> var_call','string_val',1,'p_string_val','Parser.py',736),
  ('string_val -> STR_LIT','string_val',1,'p_string_val','Parser.py',737),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',753),
]
